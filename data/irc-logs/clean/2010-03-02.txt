[00:00] <Tim_Smart> Gah I have been using Mac for a while now, but I'm start to miss my Linux Mint / Ubuntu install ;(
[00:01] pdelgallego has joined the channel
[00:02] <Tim_Smart> I might wait for Ubuntu 10.04
[00:02] devinus has joined the channel
[00:02] <Tim_Smart> devinus: Did you get my link to that v8eval source?
[00:03] <Tim_Smart> fine.
[00:03] <tmpvar> ha
[00:03] <tmpvar> yeah, i prefer ubuntu.. running 9.10
[00:04] <Tim_Smart> Well, 10.04 is only a month or so away
[00:05] <Tim_Smart> might as well wait
[00:05] <orlandov_lunch> will 10.04 be an LTS release?
[00:05] <orlandov> i suppose i could just google it
[00:06] eikke has joined the channel
[00:06] <Tim_Smart> orlandov: Yeah it is LTS
[00:07] <orlandov> according to wikipedia 10.04 will be lts
[00:10] bryanl has joined the channel
[00:10] bryanl has joined the channel
[00:10] bryanl has joined the channel
[00:11] bryanl has joined the channel
[00:13] <JimBastard> home at last! finally its javascript time!
[00:13] <inimino> :)
[00:15] bryanl has joined the channel
[00:15] bryanl has joined the channel
[00:15] bryanl has joined the channel
[00:17] mattly has joined the channel
[00:26] <tmpvar> time for a new project
[00:27] <tmpvar> jspipe
[00:27] joshbuddy has joined the channel
[00:27] joshbuddy has joined the channel
[00:27] <tmpvar> for smokin teh crack
[00:27] <Tim_Smart> lolqut
[00:27] <Tim_Smart> spell fail
[00:28] <tmpvar> heh
[00:29] <tmpvar> nah, i need pipes
[00:30] <Tim_Smart> for piping teh dataz?
[00:30] <tmpvar> yep
[00:31] <Tim_Smart> Hmm I wonder if I could create a wrapper around semaphores :o
[00:31] <Tim_Smart> for ipc
[00:32] <JimBastard> moar like jsblunt amirite
[00:32] <orlandov> sysv ipc?
[00:32] <orlandov> eww
[00:32] <tmpvar> lol
[00:32] <tmpvar> mach4 ipc 4 da winz
[00:32] <Tim_Smart> orlandov: Well using plain old stdio probably could be improved upon
[00:33] <orlandov> i remember i went to a perl mongers meeting where some dude was trying to build a message queue with sysv ipc, it obviously didn't work so he was like, my conclusion is that perl is not suited to this.... *blank stares*
[00:33] <tmpvar> im going to take a break.. contemplate how I want to achieve this
[00:33] <tmpvar> orlandov, ha
[00:34] <orlandov> Tim_Smart: what about unix pipes?
[00:34] <orlandov> or unix sockets
[00:34] <Tim_Smart> Yeah that is probably the best option
[00:34] <Tim_Smart> but is just stdio isn't it?
[00:34] <Tim_Smart> stdio is a pipe
[00:34] <orlandov> i think ryah is/was working on something neat to that effect
[00:35] <orlandov> well, theres a bit more to it than that
[00:35] <Tim_Smart> http://en.wikipedia.org/wiki/Inter-process_communication#Main_IPC_Methods
[00:36] <Tim_Smart> named pipe looks interesting
[00:36] <konobi> orlandov: i've done messaging with sysv ipc before
[00:37] <konobi> problem isn't with the memset stuff, it's with the semaphores
[00:37] <konobi> um... msgset
[00:37] <orlandov> konobi: well, and that the buffers are frickin tiny
[00:37] <Tim_Smart> well you could just install libev watchers on the semaphore probably
[00:38] <mumrah> so what's this about IPC?
[00:39] <mumrah> talking about what kind of methods node will support?
[00:39] <orlandov> more like, what's a good IPC mechanism to use
[00:39] <Tim_Smart> Well, if we were to implement WebWorkers, a efficient method of communication is needed
[00:40] <mumrah> i will throw my vote out for message passing
[00:40] <mumrah> (again)
[00:40] <mumrah> scatter, bcast, map, reduce
[00:40] <Tim_Smart> I implemented a WebWorker-ish module for managing processes
[00:40] <mikeal> +1 for message passing
[00:41] <mikeal> erlang just uses sockets for the messages :)
[00:41] <orlandov> what about socket pairs?
[00:41] <Tim_Smart> but it only uses stdio for communication
[00:41] <tmpvar> yeah
[00:41] <tmpvar> i like sockets
[00:41] <Tim_Smart> sockets sound decent I guess
[00:41] <Tim_Smart> TCP socket?
[00:41] <tmpvar> hrm
[00:41] <orlandov> unix most likely
[00:41] <tmpvar> are you going to see loss?
[00:42] <mumrah> that seems kind of low level
[00:42] <tmpvar> yeah, unix.. but what about good ol' windows?
[00:42] <orlandov> socketpair(2)
[00:42] <Tim_Smart> Berkely Socket
[00:42] <mumrah> there would need to be good helpers to make sockets usable for ipc
[00:42] <tmpvar> true
[00:42] <orlandov> that's what node's for :)
[00:42] <mumrah> lol
[00:42] <tmpvar> lol
[00:42] <tmpvar> so this would help a ton of sh*t
[00:42] <tmpvar> if we implemented socket ipc now
[00:43] <tmpvar> we could speed up a windoze port
[00:43] <tmpvar> hahah. 
[00:43] <ryah> soon, soon
[00:43] <orlandov> i suspect that's pending the net2 branch stabilizing
[00:43] <ryah> only so many hours in my day :)
[00:43] <tmpvar> ryah, delegate man
[00:43] <tmpvar> :P
[00:44] <mumrah> MPI ala JSON would be really sexy
[00:44] <Tim_Smart> Well, socket pairs are pretty basic. Just put libeio and libev to work on them :p
[00:44] <tmpvar> ryah, take a back seat and just manage this .. hah hah hah hah 
[00:44] <orlandov> Tim_Smart: yeah exactly
[00:45] <orlandov> tmpvar: what's the fun in that?
[00:45] <orlandov> i
[00:45] <Tim_Smart> Well I might dig up my rusty C++ skillz, and try make a module for it
[00:45] <orlandov> 'm not sure ryah is in a rush to become a manager :D
[00:45] <tmpvar> heh, joking :)
[00:45] <tmpvar> damn me and my dry humor
[00:46] <ryah> this week i will start working on net3 haha
[00:46] charlenopires has joined the channel
[00:46] <tmpvar> ha
[00:47] <orlandov> heh i'm not even sure if that's a joke
[00:47] <ryah> which will be current tcp connections, but with Buffer
[00:47] <tmpvar> ryah, what do you think i should do with my node fork? im tempted to scrap it
[00:47] <mumrah> so, i'm playing with this continuous http connection with XHR
[00:47] <tmpvar> (win32 port)
[00:47] <ryah> net2 is proving too slow
[00:47] <mumrah> will the XHR object hold /all/ of the data written through this connect? 
[00:47] <ryah> but i want buffers, so i need to backport them to the current sockets
[00:47] <ryah> that will be net3
[00:48] <ryah> tmpvar: what's your current branch?
[00:48] <ryah> tmpvar: or do you mean fork() ?
[00:48] <tmpvar> master, and its super old now
[00:48] <ryah> oh - the coupling port
[00:48] <tmpvar> hah. remember this nonsense?http://github.com/tmpvar/node/blob/master/deps/coupling/win32.c
[00:48] <tmpvar> yeah
[00:48] <mumrah> mikael: any ideas about this?
[00:49] <ryah> tmpvar: i thought it wasn't working?
[00:49] <tmpvar> ryah, I'm concerned that the namedpipe hackery won't work up the dep chain
[00:50] <tmpvar> but i haven't fully delved into it, was just trying to get coupling working
[00:50] <tmpvar> anywhere you use select() on a pipe my implementation fails
[00:50] <inimino> net2 is dead, long live net3!
[00:50] <mumrah> while we're talking sockets and such
[00:50] <ryah> tmpvar: if you get it working on windows and it still compiles elsewhere i'll take it
[00:51] <mumrah> what is the overhead with opening an socket (and the max number of concurrent sockets) compared to http connections
[00:51] <mumrah> is it like, orders of magnitude faster than http?
[00:51] <ryah> mumrah: it should be nearly the same
[00:52] <tmpvar> opening a socket is different than send/recv data.. heh
[00:52] <konobi> http sits atop sockets
[00:52] <ryah> okay - going for a walk - bbl
[00:52] <tmpvar> enjoy
[00:52] <mikeal> sorry
[00:53] <mikeal> i was talking to people
[00:53] <mumrah> np
[00:53] <tmpvar> you guys see the horribleness that is my coupling "port"?
[00:53] <mikeal> yeah, i think it does hold all the data from the response
[00:54] <mikeal> if it gets over a certain size you might want to kill that xhr object and start a new one just so that you don't indefinitely eat memory
[00:54] <mumrah> yea, that would be a concern
[00:54] <JimBastard> almost as concerning as liono and his band of thundercats
[00:54] <JimBastard> mumrah: you gotta get on top of that
[00:54] <mikeal> thundercats HOOOOOOOOOOOOOOOOOO
[00:54] <tmpvar> oh Jim, you are such a Bastard
[00:55] <mumrah> *sigh*
[00:55] <JimBastard> ;-)
[00:55] <tmpvar> derailed! where is this train going
[00:55] <mumrah> ... curse you thundercats, etc etc
[00:56] <tmpvar> i need javascript pipes, anyone think I should write 2 libs to express the event emitter issue and the pipe issue, or combine them?
[00:58] <tmpvar> no love :P
[00:59] <JimBastard> i wish i could give you an insightful answer, but im kinda a noob on this subject
[00:59] rsms has joined the channel
[00:59] <tmpvar> I guess the only thing at stake is re-usability
[01:00] <JimBastard> what are you trying to do? port node to windows?
[01:00] <tmpvar> no, that ship sailed
[01:00] <JimBastard> and sunk
[01:00] <tmpvar> well, it hurt
[01:00] <tmpvar> broke my heart, etc
[01:00] <JimBastard> so whats the current issue?
[01:01] <JimBastard> why do you need "javascript pipes"
[01:01] <tmpvar> im setting up some flow based programming (visual programming) lib stuff and i need pipes
[01:01] <tmpvar> i can seem them being useful elsewhere as well
[01:02] pdelgallego has joined the channel
[01:02] <tmpvar> -emitter->())))) flow control))))) -emitter->
[01:02] <JimBastard> i guess so. without knowing more specifically what you are trying to do i'd probably try to find a solution that didn't require having pipes (if possible)
[01:03] <rsms> how about unix sockets or tcp with auth?
[01:03] <tmpvar> ())) = pipe heh
[01:03] <tmpvar> with auth
[01:03] <Tim_Smart> opera pre-beta has faster javascript performance than chrome :o
[01:04] <JimBastard> tmpvar: have you seen http://superconductornyc.com/
[01:04] <JimBastard> lies
[01:04] <JimBastard> Opera doesn't even exist
[01:04] <rsms> Well, did you hear about JÃ¤gerMonkey today?
[01:04] <Tim_Smart> I heard about, haven't seen benchmarks though
[01:04] <JimBastard> i believe usage and community
[01:04] <tmpvar> JimBastard,  i have not
[01:04] <JimBastard> hello node
[01:05] <JimBastard> fuck benchmarks
[01:05] <JimBastard> unless they are your own
[01:05] <rsms> Mozilla finally scraped the swapping behavious of tracemonkey (swpping between pure interpreter and native code) in favour for a WebKit JS-based (still "traced") version
[01:05] <tmpvar> JimBastard, were you at the nyc.js last month?
[01:05] <JimBastard> tmpvar: i have a conflict now on the second thursday of every month
[01:05] <JimBastard> IDNY
[01:05] pdelgallego has joined the channel
[01:05] <JimBastard> :-(
[01:05] <tmpvar> hrm
[01:06] <tmpvar> that sucks
[01:06] <tmpvar> change IDNY
[01:06] <tmpvar> nah, i mean that was my first time going.. and I showed up 59 minutes late lol
[01:10] dnolen has joined the channel
[01:13] <tmpvar> as per  Jï¿½gerMonkey .. mozilla is such a beast to compile
[01:13] <tmpvar> s/mozilla/mozilla*
[01:14] <konobi> tmpvar: it's not too bad actually
[01:14] <konobi> assuming you go for the spidermonkey download
[01:15] <tmpvar> heh
[01:15] <tmpvar> i cant remember what i did, but it was hell
[01:15] <konobi> http://konobi.co.uk/JS/
[01:15] kellenpresley has joined the channel
[01:15] <konobi> that took me.... oh... 30 mins to compile and get the port together
[01:16] <konobi> i did have a bit of a headstart though
[01:16] <tmpvar> heh
[01:26] <ashb> tmpvar: the tip is download && cd js/src && autoconf213 && ./configure && make
[01:27] kellenpresley has left the channel
[01:29] <mumrah> is there a way in JS to search a string from it's end?
[01:29] <orlandov> isn't there like... rindex or rfind or something
[01:30] <mumrah> lastIndexOf
[01:30] jed has joined the channel
[01:32] <MattJ> between .24 and .30 it seems tcp.createConnection() changed to return a connecting socket?
[01:32] <MattJ> I was puzzled because I couldn't find it in the ChangeLog
[01:35] <MattJ> or maybe it's just that connect() errors now, but didn't before
[01:35] mahemoff_ has joined the channel
[01:36] Booster has joined the channel
[01:38] cloudhead has joined the channel
[01:38] <tmpvar> ashb, i think i was on windows the last time i tried :P
[01:38] <cloudhead> is there a sane way to use apply() on a constructor ?
[01:39] <cloudhead> so basically a way to pass an array to new(Foo) for instance
[01:39] <tmpvar> haven't tried
[01:39] <tmpvar> you running into issues?
[01:39] <cloudhead> well, I can't really figure it out
[01:40] dekz has joined the channel
[01:44] <inimino> cloudhead: there isn't
[01:46] <tmpvar> yeah
[01:46] <tmpvar> i tried
[01:46] <tmpvar> :P
[01:47] <tmpvar> cloudhead, you trying to do some sort of dep injection?
[01:47] <tmpvar> use a factory instead :)
[01:47] <cloudhead> inimino: hmm thought so
[01:47] <tmpvar> call function, return built object
[01:47] <cloudhead> yea
[01:47] <cloudhead> I'm just going to inspect the arguments in the constructor
[01:48] <tmpvar> i guess that would work heh
[01:48] <cloudhead> yea hehe
[01:53] <tmpvar> hrm
[01:54] <tmpvar> ryah_away, im stealing your EventEmitter impl temporarely
[01:55] dekz has joined the channel
[02:05] tlrobinson_ has joined the channel
[02:05] stepheneb has joined the channel
[02:38] RayMorgan has joined the channel
[02:41] joshbuddy has joined the channel
[02:49] Booster has joined the channel
[02:53] hassox has joined the channel
[02:54] <Tim_Smart> Is fs.readdir supposed to return directory names as well?
[02:56] <Tim_Smart> Hmm async build tools... that could save some time...
[02:58] <mikeal> Tim_Smart: i rewrote my build stuff in node
[02:58] <mikeal> and it's great
[02:58] <mikeal> all of a sudden a ton of stuff is parallel by default :)
[02:59] <Tim_Smart> Yeah, build tools would be nice to make in coffeescript + do library
[03:01] <mikeal> do has some good stuff for this
[03:01] <mikeal> i did everything by hand
[03:01] <mikeal> but it wasn't too hard
[03:02] <mikeal> you figure out the blocks of synchronous actions you have
[03:02] <mikeal> and stack them up in kind of a tree
[03:02] <mikeal> then you just run over em in a traditional queue
[03:04] <Tim_Smart> :D
[03:05] <mikeal> significantly easier than anything remotely related to buildbot
[03:06] <Tim_Smart> currently making an async dir walker for a build script I'm working on
[03:06] <mikeal> i have one somewhere
[03:06] <mikeal> but i think it uses promises cause it's old
[03:06] <Tim_Smart> Yeah well, I'm wasting time atm :D
[03:07] <mikeal> "don't steal my busy work"
[03:17] <CIA-77> node: 03Ryan Dahl 07master * r7a251f3 10/ wscript : Fix shebang in wscript - http://bit.ly/cXISwI
[03:17] <CIA-77> node: 03Rasmus Andersson 07master * r20d5963 10/ (doc/api.txt lib/fs.js test/simple/test-fs-realpath.js): Added fs.realpath and fs.realpathSync (pure javascript versions) - http://bit.ly/db7A4I
[03:18] voodootikigod_ has joined the channel
[03:21] RayMorgan has joined the channel
[03:41] <Tim_Smart> Directory walker for node :p http://gist.github.com/319105
[03:47] <JimBastard> cool
[03:54] joshbuddy has joined the channel
[03:55] stepheneb has joined the channel
[04:05] alexiskander has joined the channel
[04:10] gf3 has joined the channel
[04:11] brapse has joined the channel
[04:12] steadicat has joined the channel
[04:14] aguynamedben has joined the channel
[04:18] hassox has joined the channel
[04:26] <stephenlb> Tim_Smart: ur Driectory Walker is in ternary land
[04:26] <Tim_Smart> lolwut
[04:26] <Tim_Smart> ternary?
[04:26] <stephenlb> ?:
[04:26] <stephenlb> ternary -> exp ? true : false
[04:26] <Tim_Smart> yeah it is
[04:27] <Tim_Smart> coffeescript compiled to that
[04:27] <stephenlb> ah, scoll down, there is the coffee on ur link.
[04:28] <stephenlb> should have noticed with the single var var,var,var,var;
[04:29] <Tim_Smart> yeah to type all those ternaries would be brain gurt
[04:29] <Tim_Smart> *hurt
[04:29] mikeal has joined the channel
[04:30] <Tim_Smart> mikeal: The walker -> http://gist.github.com/319105
[04:30] <Tim_Smart> scroll down for the coffee
[04:30] <mikeal> i don't write coffeescritp
[04:30] <Tim_Smart> otherwise you might think I'm crazy
[04:34] <tmpvar> lol
[04:34] gf3 has joined the channel
[04:37] johanhil has joined the channel
[04:38] <ryah_away> oh coffee script is so cute
[04:43] <orlandov> i found using : for assingment a bit weird a first, but it's grown on me
[04:44] <orlandov> generating boilerplate for stuff like comprehensions is cool though
[04:47] JamesBasteringto has joined the channel
[05:00] <mikeal> ryah: did something get slower in node in the last few weeks?
[05:01] <mikeal> i have these concurrent performance tests, and last week I started seeing really odd behavior
[05:01] <mikeal> and nothing else seems to have changed
[05:01] <mikeal> i have about 250 concurrent http clients open
[05:02] <mikeal> and they send another request as soon as they get a response back
[05:02] <mikeal> and I'm testing the average response time
[05:02] <mikeal> and it seems that the whole queue will get stuffed up
[05:02] <mikeal> well, queue is the wrong word
[05:02] dekz has joined the channel
[05:03] <mikeal> nothing will see any response, and then all of a sudden a bunch will come back
[05:03] <mikeal> and i just put a cache in front of the server and the behavior didn't change which seems to tell me that this is happening in node
[05:05] <ryah> mikeal: hm
[05:05] <mikeal> it's really odd
[05:06] <ryah> mikeal: well the garbage collection stuff comes to mind
[05:06] <mikeal> what changed in the gc?
[05:07] <ryah> mikeal: try this http://pastie.org/849324
[05:08] <mikeal> ok, i'll be a little bit, I've gotta go with my gf and drop off her car for maintenance, bbiab 
[05:08] <ryah> fwiw i'm experiencing perf problems in solaris right now
[05:09] <ryah> but think it's only solaris
[05:15] <orlandov> ryah: have you ever experinced segfaults dereferencing the req->data pointer in an eio callback?
[05:16] <jan____> ryah: meh solaris, who's using solaris? :)
[05:16] bpot has joined the channel
[05:16] <orlandov> i, for one, welcome our new oracle overlords
[05:18] <jan____> orlandov: hahahaha
[05:18] <ryah> orlandov: mmm probably
[05:18] <ryah> orlandov: but that sounds a but strange
[05:19] <ryah> orlandov: you're just casting it right?
[05:19] <orlandov> ryah: yeah
[05:19] <orlandov> it has weird address too
[05:19] <orlandov> 0x400
[05:19] <ryah> orlandov: did you try running it through valgrind?
[05:19] <orlandov> i'm going to try to distill this down to a simple example
[05:19] <orlandov> ryah: yeah, the segfault happens wherever i dereference the pointer
[05:20] <ryah> orlandov: throw up the code on a pastie maybe i can see something
[05:20] <orlandov> yeh
[05:23] <ryah> i suspect libev's event ports backend might be broken
[05:26] <orlandov> ok, i made an example that just uses a pointer to an int
[05:26] <ryah> yes, using EVBACKEND_SELECT makes the perf problem go away
[05:26] <orlandov> http://gist.github.com/319164
[05:28] <orlandov> fg
[05:28] <ryah> orlandov: what if you use gdb and break in eio_Connect
[05:29] <ryah> orlandov: do 'print *req'
[05:31] <orlandov> ryah: http://gist.github.com/319168
[05:32] <orlandov> see how data is 0x400
[05:33] dnolen has joined the channel
[05:34] <ryah> orlandov: set print pretty
[05:35] <ryah> orlandov: and what's the address of req?
[05:35] <ryah> is it also strange?
[05:35] <orlandov> http://gist.github.com/319168
[05:35] <ryah> oh i guess not since it has the right cbs
[05:35] <orlandov> $3 = (eio_req *) 0x833bdc8
[05:35] <orlandov> looks ok
[05:37] <ryah> orlandov: try throwing in a few asserts after the eio_custom
[05:37] <ryah> for its return value
[05:37] <ryah> it should return the req structure
[05:37] <orlandov> i think it requrds req
[05:37] <orlandov> yeah lets see
[05:39] <orlandov> it seems the returned eio_req struct has data set to 0x400
[05:39] <orlandov> =\
[05:40] <orlandov> do i need to enable any other eio things within a node module?
[05:40] <ryah> orlandov: im looking at the source - is it even getting set?
[05:40] <ryah> req->data ?
[05:41] <orlandov> good question =)
[05:41] <ryah> it is, REQ macro
[05:41] <orlandov> ah okay, i see that
[05:43] <ryah> you must be doing something in your code - writing over the value
[05:43] christkv has joined the channel
[05:44] <ryah> maybe some other thread is touching something ther than req?
[05:44] <ryah> buffer overflow
[05:44] <ryah> ?
[05:44] <orlandov> perhaps
[05:44] <orlandov> i'm totally open to the possibility that i'm doing something stupid :)
[05:46] <ryah> valgrind doesn't say anything strange?
[05:46] <ryah> dealing with these thread pools is extremely painful
[05:47] <ryah> (which ironically the reason for node :)) 
[05:47] <orlandov> i hear you
[05:48] <orlandov> event loop is so much simpler
[05:48] <orlandov> i see some warnings about Conditional jumps in valgrind
[05:48] <orlandov> gist incoming
[05:49] <orlandov> http://gist.github.com/319183
[05:49] <orlandov> seems unrelated
[05:50] <ryah> orlandov: are you using node_g ?
[05:50] <orlandov> i'm going to strip this extension down to a simple testcase
[05:50] <orlandov> hmm
[05:50] <ryah> ./configure --debug && make
[05:50] <orlandov> will try it
[05:51] <ryah> the debug build - it has lots of assert() and debugging symbols
[05:51] <orlandov> i'm not using the net2 branch fwiw
[05:51] <ryah> yeah - that's unrelated
[05:52] <ryah> i kind of think you're not returning Undefined() somewhere
[05:52] <ryah> or missing a handle scope
[05:52] <ryah> something stupid like that
[05:52] <ryah> :)
[05:52] <orlandov> heh, i did fix that
[05:52] <orlandov> the program doesn't crash if i don't access that memory
[05:52] <orlandov> it just looks like it's unalloc'd
[05:53] <orlandov> whenever i get stuck like this it's usually me doing something really dumb
[05:53] <orlandov> from experience :)
[05:54] <orlandov> so just to be clear, if i'm creating an extension, i don't have to do any kind of initialization for the threadpool beyond what was in my gist?
[05:54] <ryah> nope
[05:55] <orlandov> how can i get at getaddrinfo from within node, btw?
[05:55] <orlandov> if you know off the top of your head..
[05:55] <ryah> you can't at the moment
[05:56] <orlandov> i just wanted to try it, and see how it behaves in core
[05:56] <orlandov> btw; i really appreciate your help - if you want to drop off at any point no worries
[06:03] mumrah has left the channel
[06:06] <ryah> hmm. i wish i could come up with a test case for EVBACKEND_PORTS
[06:07] <orlandov> what is that?
[06:07] <mikeal> ryah: that works a lot better
[06:08] <ryah> mikeal: really? hmm
[06:08] <mikeal> yup
[06:08] Spot__ has joined the channel
[06:09] <ryah> mikeal: can i have your test script? or is it complex to extract?
[06:09] <mikeal> i wish i was on my desktop
[06:09] <mikeal> it's pretty complex
[06:09] <mikeal> it's not just the one script
[06:09] <mikeal> it's also a running couchdb and another script for the running proxy
[06:09] <ryah> okay - so i got to fix the gc then
[06:09] beppu has joined the channel
[06:09] <mikeal> i'd like to run this on my desktop at work before I say for sure
[06:10] <mikeal> it's just hard to be confident in the performance characteristics when this laptop get's maxxed for CPU, memory and disc
[06:11] <ryah> orlandov: http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_THE_EVENT_LOOP
[06:11] <ryah> so whats your test doing, basically?
[06:13] <mikeal> it's starts 250 concurrent http connections
[06:13] <mikeal> 50 for writes and 200 for reads
[06:13] <mikeal> each one makes a request and then once the response has finished it issues another request
[06:13] <ryah> ok
[06:14] <ryah> hey can couchdb do pipelining?
[06:14] <mikeal> then I poll every second to see what the average response time is for the writers and readers
[06:14] <ryah> like is it http/1.1?
[06:14] <mikeal> yeah, it's 1.1
[06:14] <ryah> hmm
[06:14] <mikeal> i haven't tested pipelining because it's not a common use case
[06:14] <mikeal> i want it to look like x number of connections from different clients
[06:14] <orlandov> ah, slowlaris :D
[06:15] <orlandov> jk
[06:15] <ryah> node's http client does do pipeling
[06:15] <mikeal> i thought you said it didn't
[06:15] <ryah> er
[06:15] <ryah> doesn't
[06:15] <ryah> ;)
[06:16] <mikeal> hehe, ok
[06:18] <mikeal> should i be doing more than make clean between recompiles?
[06:20] <ryah> nope
[06:25] <orlandov> ryah: here we go http://github.com/orlandov/node-eio-test
[06:25] <orlandov> hopefully i got the module setup correctly
[06:36] mikeal has joined the channel
[06:40] gf3 has joined the channel
[06:51] <orlandov> time to meditate
[06:54] rictic1 has joined the channel
[07:07] gf3 has joined the channel
[07:10] mahemoff has joined the channel
[07:12] gf3 has joined the channel
[07:14] gf3 has joined the channel
[07:17] <ryah> orlandov: 
[07:17] <ryah> mac 0 /tmp/node-eio-test > node x.js
[07:17] <ryah> foo is 420
[07:17] <ryah> &foo = 0x100709650
[07:17] <ryah> data after 0x100709650
[07:17] <ryah> 8
[07:17] <ryah> 0x100709650
[07:17] <ryah> ** 0x100709650
[07:17] <ryah> eio_AfterConnect; rc = 666
[07:17] <orlandov> oh what
[07:17] <ryah> mac 0 /tmp/node-eio-test > 
[07:18] <ryah_away> see ya tomorrow
[07:18] <orlandov> cool man, take it easy
[07:18] <orlandov> i'm going to try this on another machine.
[07:19] abustin has joined the channel
[07:22] <abustin> Urm ... how can I tell when a flushed http.serverResponse.write() has drained .. trying to stream large file from disk as a response 
[07:24] <abustin> anyone awake ?
[07:24] <mjr_> There is a drain event on the connection.
[07:25] <micheil> hmm.. I wonder when we might see ryah or one of the core node developers on The Changelog podcast, considering how much the project is talked about on it
[07:25] steadicat has joined the channel
[07:25] kennethkalmer has joined the channel
[07:26] <abustin> that's what i thought @mjr_ .. not sure how to get at the connection object 
[07:28] <abustin> ah it on the request object
[07:29] <micheil> abustin: you could also try paperboy, which is an epic lib
[07:30] <abustin> im 99% of the way there .. just need to hook up drain
[07:30] <mjr_> Sorry, my internets are sad right now.  I was going to paste an example, but I keep getting almost disconnected.
[07:31] <abustin> ive used drain before .. just not in the context of a server response 
[07:32] <orlandov> ryah_away: it works perfectly on my desktop!
[07:32] <orlandov> i wonder why it fails on my vps
[07:32] <orlandov> grrr
[07:33] <abustin> what's failing, orlandov?
[07:33] <orlandov> abustin: i was seeing some weirdness in a C++ extension i'm hacking on
[07:33] <orlandov> wrt to the thread pool
[07:35] <abustin> ah, ive not looked into c++ extensions yet - good luck with that
[07:36] <orlandov> abustin: if you can hack a bit of C++ it's not too bad
[07:36] <orlandov> but thanks :)
[07:39] mikeal has joined the channel
[07:39] <abustin> i deal with JS bindings at work .. id prefer to keep on one side of the wall
[07:50] tisba has joined the channel
[07:52] kriskowal has joined the channel
[07:56] <abustin> ha .. i gave in a little and looked at paperboy and found this line....
[07:56] <abustin> / Should be done on 'drain' event, but that seems broken right now
[07:57] <abustin> doh
[07:58] <abustin> i guess i cant stream a file with Node right now?
[08:08] Tim_Smart has joined the channel
[08:08] kjeldahl has joined the channel
[08:08] <micheil> orlandov: mongodb?
[08:08] Tim_Smart has joined the channel
[08:08] <micheil> I'm right with that's the project you've worked on, yes?
[08:09] <orlandov> micheil: hey
[08:09] <orlandov> yeah
[08:09] <micheil> nice
[08:09] <jan____> boo!
[08:09] <orlandov> :D
[08:09] <jan____> :)
[08:09] <orlandov> it was just practice
[08:09] <orlandov> i dont really use mongodb
[08:09] <jan____> GOOD FOR YOU
[08:10] <jan____> heh, nah, whatever, I really should sleep :)
[08:10] <orlandov> that's a really good idea
[08:10] markwubben has joined the channel
[08:11] <Spot__> Slightly general link: http://stackoverflow.com/questions/76364/what-is-the-single-most-effective-thing-you-did-to-improve-your-programming-skill
[08:12] jodo has joined the channel
[08:14] <orlandov> hacking on open source and working with smart people has worked for me
[08:19] <micheil> Spot__: moving away from working for "large companies"
[08:27] Tim_Smart has joined the channel
[08:28] kjeldahl has joined the channel
[08:32] <jodo> how do i get my node server to be accessible from outside my LAN?
[08:34] teemow has joined the channel
[08:35] <jodo> nvm i got it <-- noob
[08:54] kjeldahl has joined the channel
[08:55] tbassetto has joined the channel
[08:55] kjeldahl has joined the channel
[08:56] piranha has joined the channel
[09:00] tlrobinson_ has joined the channel
[09:01] BryanWB has joined the channel
[09:06] piranha_ has joined the channel
[09:06] hassox has joined the channel
[09:07] dekz has joined the channel
[09:08] gf3 has joined the channel
[09:21] rsms has joined the channel
[09:21] olivvv has joined the channel
[09:22] piranha_ has joined the channel
[09:27] hassox has joined the channel
[09:32] kennethkalmer has joined the channel
[09:43] BryanWB has joined the channel
[09:50] olivvv has joined the channel
[09:51] spoob has joined the channel
[09:52] gf3 has joined the channel
[10:03] pdelgallego has joined the channel
[10:11] piranha has joined the channel
[10:34] felixge has joined the channel
[10:34] felixge has joined the channel
[10:45] rtomayko has joined the channel
[10:54] dekz has joined the channel
[11:01] gf3 has joined the channel
[11:09] kennethkalmer has joined the channel
[11:12] dekz has joined the channel
[11:13] kjeldahl has joined the channel
[11:14] kjeldahl has joined the channel
[11:23] kjeldahl_ has joined the channel
[11:42] dekz has joined the channel
[11:43] piranha_ has joined the channel
[11:51] nsm has joined the channel
[11:52] kjeldahl has joined the channel
[11:58] dekz has joined the channel
[12:18] rsms has joined the channel
[12:19] nsm has joined the channel
[12:21] lifo has joined the channel
[12:33] jspiros has joined the channel
[12:41] alex-desktop has joined the channel
[12:44] voodootikigod_ has joined the channel
[12:50] stepheneb has joined the channel
[12:54] charlenopires has joined the channel
[13:25] kennethk_ has joined the channel
[13:57] kriszyp has joined the channel
[14:00] pdelgallego has joined the channel
[14:05] <christkv> Why do we use callbacks at the end of a function call instead of the start. Seems like you will always be doing a callback ? I'm thinking about the mongodb-native driver. But I might be missing something here
[14:07] gf3 has joined the channel
[14:16] <christkv> never mind, tim explained it to me. Still think it's pretty crazy. So much unneeded code
[14:27] davidsklar has joined the channel
[14:31] dnolen has joined the channel
[14:32] <ashb> christkv: cos the callback is usually longer than the params
[14:33] <christkv> yeah I agree with that
[14:40] rsms has joined the channel
[14:44] dnolen_ has joined the channel
[14:46] <spoob> if you have the params after the callback, then it's gonna be hard to see what the 3, 8, fred, blah has to do with anything
[14:47] pmuellr has joined the channel
[14:47] <spoob> how is having the callback at the end more code than having it at the start?
[14:47] <ashb> its not more code where you put it
[14:47] <ashb> i mean the same as you
[14:48] <ashb> if the cb is before the params it's hard to see the params etc
[14:48] <spoob> yeah, i agree with you. christkv says "so much unneeded code"
[14:48] <spoob> I don't get why it's more code
[14:48] <ashb> oh
[14:49] <christkv> I think it's just that I have a fair bit of optional parameters
[14:49] <christkv> on the calls
[14:49] <christkv> so collection.find(function(r){}, {}, {})
[14:49] <spoob> ah I get your point now
[14:49] <christkv> is easier to handle than collection.find({}, {}, function(r){})
[14:50] <christkv> But I'll do it since it would make node-mongodb-native driver easier to use with stuff like do
[14:50] <spoob> yeah, I don't have an answer for your point. it is a valid point
[14:51] <christkv> yeah it's a valid point but the momentum is for the end callback. I'm still learning the 'history' of the javascript community. Coming from ruby, python and erlang
[14:51] <spoob> jeez, my cat just scared me. she's sleeping in a position like she's dead, but is breathing
[14:51] <spoob> I'm not up to speed with javascript myself, still puzzled about "new" and some people saying not to use it
[14:53] <spoob> seems to me that you could pass "nil" for parameters you don't want to pass
[14:54] <spoob> then the   blah = param || default;  would work
[14:54] <spoob> so   func(nil, nil, nil, function....)
[14:55] <spoob> bloody hell, nil doesn't exist if I don't load this framework
[14:55] <spoob> null
[14:56] steadicat has joined the channel
[14:59] Booster has joined the channel
[15:10] mlouro has joined the channel
[15:18] rsms has joined the channel
[15:19] joshbuddy has joined the channel
[15:20] stepheneb has joined the channel
[15:31] cloudhead has joined the channel
[15:32] codeswing has joined the channel
[15:41] rsms has joined the channel
[15:45] alexiskander has joined the channel
[15:59] paulca has joined the channel
[16:06] charlenopires has joined the channel
[16:09] rsms has joined the channel
[16:09] kennethk_ has joined the channel
[16:11] Davedan has joined the channel
[16:12] <Davedan> in the first example on the website, why does you use var sys = ... but http = ... without the var?
[16:14] mlouro has joined the channel
[16:16] <ashb> Davedan: var sys = 1, http = 2
[16:16] <ashb> the lin ends with a comma
[16:17] <Davedan> ashb: now it makes sense :) thanks
[16:19] Davedan has left the channel
[16:23] aurynn has left the channel
[16:26] brandon_beacher has joined the channel
[16:27] tmpvar has joined the channel
[16:31] tmpvar has joined the channel
[16:38] aurynn has joined the channel
[16:39] binary42 has joined the channel
[16:40] BryanWB has joined the channel
[16:47] dandean has joined the channel
[16:57] RayMorgan has joined the channel
[17:03] aguynamedben has joined the channel
[17:10] bpot has joined the channel
[17:15] <felixge> ACTION is hungry for web workers
[17:19] brianm has joined the channel
[17:24] aguynamedben has joined the channel
[17:27] qFox has joined the channel
[17:32] <felixge> ryah: when I call clearTimeout(), is it guaranteed that the corresponding callback will *not* fire, or could I potentially have a race condition?
[17:37] stepheneb_ has joined the channel
[17:39] <ryah> felixge: it's guaranteed it won't fire
[17:39] <felixge> ryah: sweet
[17:40] <felixge> ryah: did you have a chance to look at my initial file stream stuff last night?
[17:40] <felixge> ryah: https://gist.github.com/2889e601a2649dc62a67
[17:41] <felixge> ryah: I'm uncertain how a write stream should behave if it's paused and the user attempts to write something to it. I think it should automatically resume activity, what do you think?
[17:42] <felixge> ryah: the alternative would be to buffer until resume() is called explicitly
[17:44] <ryah> felixge: i guess a write scream shouldn't have a resume()
[17:44] <ryah> stream :)
[17:44] <felixge> ryah: ok, problem solved I guess :)
[17:44] <ryah> resume is part of the readable interface
[17:44] <felixge> ryah: do you have a reference for the stream API? I think I saw a gist at some point
[17:44] <ryah> it's important to implement the drain event
[17:45] <ryah> felixge: in that roadmap email i sent to you, i think
[17:45] <felixge> checking
[17:45] <ryah> i'll write something on the wiki
[17:46] <felixge> ryah: ok, found it. thanks!
[17:47] <felixge> ryah: should I hide all other methods of the implementation by defining them inside the constructor? Or are streams allowed to have more stuff on them than the bare minimum?
[17:47] <orlandov> so ryah; on your comment, i tried rebuilding that module on my desktop machine and it also worked fine... i tried rebuilding node, blowing away my node dist and re-cloning and rebuilding and my vps still fails... i got nothin'
[17:47] <orlandov> just going to continue on my mac for now
[17:48] steadicat has joined the channel
[17:49] fictorial has joined the channel
[17:56] <rsms> ryah: we found a bug in the realpath implementation today and I've rewritten the two functions. Whiteboards FTW http://hunch.se/s/2q/l324axmosg008.png â I'll fix a patch including a more complete unit test later today. Just wanted to let you know.
[17:56] <ryah> rsms: okay thanks
[17:57] <tmpvar> i miss my whiteboards
[17:57] <ryah> how does one do <tt> with Textile
[18:00] <rsms> ryah:  @foo@ maybe?
[18:02] mattly has joined the channel
[18:03] jodo has joined the channel
[18:03] mattly has joined the channel
[18:05] jodo has left the channel
[18:08] rsms has joined the channel
[18:11] dnolen has joined the channel
[18:11] sveisvei has joined the channel
[18:13] <ryah> felixge: http://wiki.github.com/ry/node/streams
[18:14] <tmpvar> ryah, nice!
[18:15] markwubben has joined the channel
[18:15] <felixge> ryah: very very nice
[18:16] maritz has joined the channel
[18:16] jcrosby has joined the channel
[18:16] <felixge> ryah: my previous question was more about the queueing. Should I expose my helper method I use for the queue, or should those be completely hidden?
[18:17] <felixge> I mean I need like an array object as the queue, which can either be a property of the stream or a local variable hidden inside the constructor
[18:18] codeswing has joined the channel
[18:18] stephenlb has joined the channel
[18:20] charlenopires has joined the channel
[18:20] <ryah> felixge: they should be hidden
[18:20] <felixge> ryah: ok
[18:22] <ryah> so this is pretty idealistic - there needs to be some error events too, i think
[18:23] <JimBastard_> whaddup tmpvar sorry for disappearing last night some people came over then i passed out on my keyboard
[18:23] <tmpvar> haha, what up
[18:28] sztanphet has joined the channel
[18:30] around has joined the channel
[18:35] <ryah> so, going to fix realpath, move to select() on solaris, and fix the GC issue
[18:35] <ryah> then release
[18:36] <tmpvar> nice
[18:42] abustin has joined the channel
[18:42] Spot_ has joined the channel
[18:45] <felixge> ryah: I'm giving a talk in hamburg tomorrow. Will net3 have the same basic features as net2, except that more stuff is in C++?
[18:46] paul___ has joined the channel
[18:47] kriszyp has joined the channel
[18:49] <ryah> felixge: yeah
[18:49] <ryah> felixge: basically 'data' will emit Buffers and .setEncoding goes away
[18:50] <ryah> i won't do unix sockets immediately
[19:02] RayMorgan_ has joined the channel
[19:03] mikeal has joined the channel
[19:04] <abustin> hey, so I asked last-night but too many people sleeping ...  what's the status of being able to stream a Server Response 
[19:06] <ryah> abustin: i think 'drain' is not being emitted
[19:06] <ryah> it should though 
[19:07] <abustin> I wanted to share that 190MB video file with you .. but realized my node server would crap out  without using drain
[19:08] dandean has joined the channel
[19:08] caolanm has joined the channel
[19:09] <ryah> i'll try to fix it soon
[19:09] RayMorgan_ has joined the channel
[19:09] <abustin> :)
[19:11] <abustin> just to let you know Ryan that im rebuilding my whole blog using Node and loving it - http://thebackbutton.com/ is fully node.js/couchdb  
[19:11] <caolanm> don't know if anyone else will find this useful, but I've put together some code for testing that a module exports what you expect: http://github.com/caolan/behaviors ...might be useful if you are writing something which allows 3rd party plugins or apps :)
[19:12] <caolanm> abustin: did you use one of the frameworks or start from scratch?
[19:12] <abustin> scratch
[19:13] <caolanm> more fun that way ;)
[19:13] <abustin> for sure :)
[19:13] rsms has joined the channel
[19:21] kriskowal has joined the channel
[19:23] <CIA-77> node: 03Ryan Dahl 07master * rfdbc9a8 10/ src/node.cc : (log message trimmed)
[19:23] <CIA-77> node: Use EVBACKEND_SELECT on Solaris
[19:23] <CIA-77> node: Using EVBACKEND_PORT DTraceToolkit-0.99/Proc/syscallbypid.d reports after 5
[19:23] <CIA-77> node: seconds
[19:23] <CIA-77> node:  PID CMD SYSCALL COUNT
[19:23] <CIA-77> node:  . . . .
[19:23] <CIA-77> node:  . . . .
[19:27] <ryah> abustin: cool
[19:28] ericflo has joined the channel
[19:29] markwubben_ has joined the channel
[19:29] <orlandov> ryah: so after switching machines everything seems to working perfectly
[19:29] <orlandov> man i wish i hadn't wasted an afternoon fucking around with that
[19:29] <orlandov> so weird
[19:29] <orlandov> ACTION wonders if it was his version of linux
[19:30] <ryah> orlandov: mm
[19:30] <ryah> orlandov: i think there is probably a bug still
[19:30] <ryah> it's just not showing up
[19:30] <orlandov> wdym?
[19:31] <ryah> i mean on macintosh - for some reason - it's not being triggered
[19:32] <orlandov> ryah: well, i tried on my 64 bit ubunutu machine and it worked well
[19:32] <ryah> but yeah, just wait until it shows up again :)
[19:32] <orlandov> no you'll jinx me!
[19:33] <ryah> orlandov: one thought - you probably should do weirdy->Ref() when you call eio_custom
[19:34] <ryah> it might be getting garbage collected while in the thread pool
[19:34] <orlandov> oh right
[19:34] <orlandov> and Unref() on close right?
[19:34] <ryah> yeah
[19:34] <ryah> that's in addition to ev_ref/unref
[19:34] gf3 has joined the channel
[19:35] <ryah> ObjectWrap::Ref and Unref are for GC. ev_ref/unref are to not exit the event loop
[19:36] <orlandov> ahh cool, i thought OW::Ref took care of both initially but that's good to know
[19:37] piranha has joined the channel
[19:39] drostie has joined the channel
[19:41] <orlandov> trying to test the extension on konobi's vps now
[19:45] stepheneb has joined the channel
[19:46] mumrah has joined the channel
[19:47] <mumrah> i'd like to take this moment to express my gratitude for the non-lameness of this channel
[19:47] <mumrah> i've been sitting on #sqlalchemy all day trying to get a simple question answered 
[19:51] sztanpet has joined the channel
[19:53] markwubben has joined the channel
[19:57] aguynamedben has joined the channel
[19:59] dnolen has joined the channel
[20:04] <aurynn> the answer is 42.
[20:04] <aurynn> :)
[20:06] <orlandov> mumrah: your first mistake was using sqlalchemy
[20:06] <orlandov> ACTION ducks
[20:07] <cloudhead> hey is there a way to have a constructor close on some variables, and have those variables be accessible by the instance, after a new(Constructor) ?
[20:07] <cloudhead> I know I can use return, but then `instanceof` doesn't work properly
[20:10] teemow has joined the channel
[20:10] <tmpvar> cloudhead, what do you mean "close on"
[20:13] <orlandov> if your constructor is a closure, shouldn't that just work?
[20:13] <cloudhead> tmpvar: like a closure
[20:13] <cloudhead> orlandov: well, it'll just work, but I'd have to return the object myself
[20:13] <orlandov> oh
[20:13] <cloudhead> in which case it won't be of the right type anymore
[20:13] <cloudhead> it won't respond to `instanceof` properly
[20:14] <cloudhead> I'd like something like function F() { var i = 0; return { fun: function () { return i }}}
[20:14] <cloudhead> except I'd like the returned object, when doing new(F) to be of type F
[20:14] <orlandov> right
[20:15] <orlandov> what about if you said this.foo = function () { return i }; in the constructor
[20:15] <cloudhead> then it'll be in the instance instead of the prototype
[20:16] <cloudhead> except if I use __proto__ 
[20:16] <cloudhead> hmm
[20:16] Tim_Smart has joined the channel
[20:16] <cloudhead> but the code needs to run in older browsers too
[20:16] <orlandov> yeah... hmm
[20:16] <JimBastard_> maybe underscore could help?
[20:17] <orlandov> cloudhead: what about! if you had a prototype function that called the instance function?
[20:17] <orlandov> or maybe that's getting a bit silly
[20:18] <cloudhead> hm yea it could work but I'd rather avoid having the functions at the instance level
[20:19] <cloudhead> underscore? how so?
[20:19] kriskowal has joined the channel
[20:21] jspiros has joined the channel
[20:22] <Tim_Smart> cloudhead: Not sure exactly what you are after, but http://gist.github.com/319875
[20:23] <ryah_away> i want to add a n+1 argument to addListener to specify 'this' for the listener
[20:23] <ryah> with the idea we'd save a lot of closures
[20:24] <cloudhead> Tim_Smart: yea, something like that, but which works with new()
[20:24] <Tim_Smart> cloudhead: it does
[20:25] <Tim_Smart> but you can't change the hidden variable, as it is the same instance for every other instance
[20:25] <cloudhead> Tim_Smart: but it doesn't respond to instanceof correctly
[20:25] <Tim_Smart> yeah, because I returned a value
[20:25] <inimino> cloudhead: I recommend avoiding instanceof entirely
[20:25] paul___ has joined the channel
[20:26] <Tim_Smart> That closure gets run at assign time, so it shouldn't affect too much
[20:27] <cloudhead> inimino: what would you use then? just check the constructor?
[20:28] <Tim_Smart> cloudhead: I tested this http://gist.github.com/319875
[20:29] <cloudhead> hmmm really
[20:29] <cloudhead> but howbout prototype functions?
[20:29] <JimBastard_> ohh instanceof
[20:29] <JimBastard_> does that work in JS 1.7 in the browser?
[20:31] <cloudhead> aha Tim_Smart that seems to work great
[20:32] <cloudhead> by creating the function, assigning its prototype, then returning it
[20:32] <Tim_Smart> thats good, it does have limitations :p
[20:32] <cloudhead> *but*, those variables are not instance-bound
[20:32] <cloudhead> yea
[20:32] <inimino> cloudhead: I generally avoid runtime type testing of any kind
[20:32] <Tim_Smart> http://gist.github.com/319875
[20:33] <cloudhead> inimino: well how do you check if an object is of a certain kind?
[20:33] <inimino> cloudhead: you don't
[20:33] <cloudhead> this.type = "foo" ?
[20:33] <cloudhead> well, sometimes you need to
[20:33] <inimino> why?
[20:33] <cloudhead> eh?
[20:33] <inimino> why do you need to?
[20:34] <cloudhead> to know what to do with the object
[20:34] codeswing has joined the channel
[20:34] <cloudhead> why have different kinds of objects at all if you're gonna treat them all the same way?
[20:35] <inimino> the question is whether you have functions that don't know the type of the arguments they are getting, and have to try to guess
[20:36] <inimino> you can avoid that kind of design and do away with any need for instanceof
[20:36] <inimino> there are a few exceptions...
[20:36] <cloudhead> not sure how I'd do that
[20:36] <cloudhead> I have an array of objects
[20:36] konobi has joined the channel
[20:37] <cloudhead> and have to go through them
[20:37] <cloudhead> one by one
[20:37] <cloudhead> and take an action, depending on the type
[20:37] <konobi> ryah: are we still expecting test failures on the net2 branch on solaris?
[20:37] <konobi> (or in general i suppose)
[20:37] <inimino> cloudhead: can you make all the objects have the same type?
[20:37] <cloudhead> that wouldn't be a good idea
[20:37] <cloudhead> the constructors are different
[20:38] <ryah> konobi: yes - i'm actually working on fixing up some of those now
[20:38] <cloudhead> well, they're different objects
[20:38] <ryah> konobi: http://buildbot.nodejs.org:8010/builders/Solaris%20Nevada/
[20:38] <cloudhead> so it wouldn't make sense for them to be of the same type
[20:38] <inimino> each one can look like {type:x,/* type-specific stuff */}
[20:38] <Tim_Smart> inimino: instanceof is the only true way of testing for arrays really
[20:38] <konobi> ryah: k... sounds good
[20:38] <cloudhead> well that's what I'm saying, I'd have to somehow distinguish between them
[20:39] <cloudhead> checking the constructor, or having an attribute set
[20:39] <inimino> Tim_Smart: that's mostly true (until ES5); what I'm suggesting is that you don't have something that gets an argument but doesn't already know whether it's an array
[20:39] <Tim_Smart> instanceof is good if you are dealing with models
[20:39] stepheneb has joined the channel
[20:39] <cloudhead> well you could have a function which handles multiple types of arguments
[20:40] <inimino> yes, those are the exceptions, e.g. for debugging you want something like JSON.stringify
[20:40] <inimino> (only more broad)
[20:42] <inimino> but when you can avoid that sort of thing, I think it works much better with JavaScript's strengths
[20:42] <inimino> (which do not include dispatching on "class")
[20:47] tbassetto has joined the channel
[20:48] mumrah has left the channel
[20:48] <cloudhead> inimino: what's your preferred method of object instantiation?
[20:48] <cloudhead> Object.create? new? or factory functions?
[20:48] <inimino> object literals or factory functions that return them
[20:48] <cloudhead> factories are definitely the most flexible
[20:49] <cloudhead> ok
[20:49] <inimino> so for something like this
[20:49] <cloudhead> do you have a convention, for the naming of these?
[20:49] <inimino> what you are saying about using a specific attribute to define the type
[20:49] <CIA-77> node: 03Ryan Dahl 07master * re165859 10/ deps/coupling/coupling.c : 
[20:49] <CIA-77> node: Fix coupling error on Solaris
[20:49] <CIA-77> node: Was getting a lot of
[20:49] <CIA-77> node:  push_pump read(): Resource temporarily unavailable
[20:49] <CIA-77> node: Apparently Solaris can return read() < 0 but errno == 0 to indicate a
[20:49] <CIA-77> node: EAGAIN? - http://bit.ly/9t1Lei
[20:49] <inimino> is the same as what I was calling making everything the same type
[20:49] <cloudhead> ah I see
[20:49] <inimino> cloudhead: no, I don't name them specially, usually
[20:50] <cloudhead> hmm
[20:50] markwubben_ has joined the channel
[20:50] <cloudhead> the thing is users often expect instantiation to work with new()
[20:50] <cloudhead> so I find factories not very user-friendly
[20:51] <cloudhead> within your code, it's fine, but for the API I don't know..
[20:51] <inimino> if `new` causes more problems than it solves, you're doing your users a favor by not using it in your API
[20:53] <cloudhead> hehe
[20:53] <cloudhead> well, they are problems I have to deal with
[20:53] <cloudhead> not them
[20:54] <inimino> I think `new` seems comfortable to Java users but since the semantics are completely different it only serves to mislead
[20:55] <cloudhead> yea, I wish it was a method, or we had a clone()
[20:56] <inimino> well, there is Object.create if you like that sort of thing :)
[20:56] <inimino> but I don't think the lack of `new` is going to put anyone off
[20:57] <Tim_Smart> Problem is, Object.create has only just started appearing
[20:59] <cloudhead> yea
[21:00] <inimino> you can use it anywhere if you test for it and add it
[21:01] <CIA-77> node: 03Ryan Dahl 07master * r62c4214 10/ src/node_net.cc : Properly throw error on failed connection - http://bit.ly/9zV3wS
[21:02] piranha has joined the channel
[21:02] jspiros has joined the channel
[21:10] <ryah> i'm startin to thing we should throw if an 'error' event is emitted but not listened to
[21:10] jspiros has joined the channel
[21:11] <CIA-77> node: 03Ryan Dahl 07master * r776b099 10/ test/pummel/test-tcp-pingpong.js : Disable ipv6 test on solaris - http://bit.ly/akiwHs
[21:11] <inimino> ryah: I thought it already was that way
[21:12] <ryah> inimino: it was for promises
[21:12] <ryah> i think we ought to make it a special event
[21:18] ekwisatz has joined the channel
[21:20] <ekwisatz> hi... newbie here... trying to figure out node from the article at howtonode.org, named Blogrolling with mongoDB, express and Node.js... when trying to see if express is working, by issuing node example/chat/app.js, there is a complain about posix module had being renamed to fs... any clues? 
[21:27] stephenlb has joined the channel
[21:27] <ryah> http://buildbot.nodejs.org:8010/waterfall <-- all gree
[21:27] <ryah> :D
[21:28] <gsf> ryah: yeah that looks real nice
[21:29] <caolanm> ryah: \o/
[21:29] <gsf> ekwisatz: the api for node has changed a lot lately, and the posix module was indeed renamed to fs
[21:29] <gsf> ekwisatz: one of those projects must not be updated yet
[21:30] <ekwisatz> gsf: express i think... i'll checkout it again... 
[21:30] <caolanm> Express seems really active though
[21:30] <ryah> we got to get a macintosh build bot on there
[21:30] <gsf> not it
[21:30] <gsf> :)
[21:32] <tmpvar> my mbp fell off of a chair last night
[21:32] <tmpvar> hardrive is toast
[21:32] <aurynn> ouch
[21:33] <gsf> ekwisatz: yeah looks like express still uses posix
[21:34] <ekwisatz> gsf: I'm seeing lib/express/plugins/view.js calling require('posix')
[21:35] <gsf> ekwisatz: see the files listed at http://gist.github.com/319975
[21:35] <ekwisatz> gsf: though i dont know if is safe to just rename posix to fs, will try to... 
[21:35] <CIA-77> node: 03Ryan Dahl 07master * r6670154 10/ Makefile : 'make test' only runs the simple test - http://bit.ly/92L5VB
[21:35] <CIA-77> node: 03Ryan Dahl 07net2 * re165859 10/ deps/coupling/coupling.c : 
[21:35] <CIA-77> node: Fix coupling error on Solaris
[21:35] <CIA-77> node: Was getting a lot of
[21:35] <CIA-77> node:  push_pump read(): Resource temporarily unavailable
[21:35] <CIA-77> node: Apparently Solaris can return read() < 0 but errno == 0 to indicate a
[21:35] <CIA-77> node: EAGAIN? - http://bit.ly/9t1Lei
[21:35] <CIA-77> node: 03Ryan Dahl 07net2 * r62c4214 10/ src/node_net.cc : Properly throw error on failed connection - http://bit.ly/9zV3wS
[21:35] <CIA-77> node: 03Ryan Dahl 07net2 * r776b099 10/ test/pummel/test-tcp-pingpong.js : Disable ipv6 test on solaris - http://bit.ly/akiwHs
[21:36] <CIA-77> node: 03Ryan Dahl 07net2 * r6670154 10/ Makefile : 'make test' only runs the simple test - http://bit.ly/92L5VB
[21:36] <CIA-77> node: 03Ryan Dahl 07net2 * r7881b59 10/ (4 files in 4 dirs): Merge branch 'master' into net2 - http://bit.ly/aLwPyE
[21:36] <gsf> ekwisatz: yeah, the callback system has changed as well, so you may be looking at a little work
[21:36] jspiros has joined the channel
[21:36] <gsf> ekwisatz: might be worth giving visionmedia a little nudge to see if he's got some updates on the way
[21:39] <Tim_Smart> ryah: Should make a build UI that uses web sockets >.>
[21:40] <ekwisatz> appears that posix module and file module were merged into fs module, is that correct? 
[21:40] <gsf> ekwisatz: see http://groups.google.com/group/nodejs/browse_thread/thread/680095a9094546f7 for some recent "getting started" tips
[21:42] <ekwisatz> gsf: thanx... i'm reading it
[21:43] <konobi> ryah: nope... talk to mark about getting a mac mini or something
[21:48] jcrosby has joined the channel
[21:51] <ekwisatz> could anyone here point me to how to checkout an specific tag with git? 
[21:54] maushu has joined the channel
[21:55] <maushu> What is this (function () { /* code here*/ })(); for?
[21:56] <Tim_Smart> maushu: For keeping stuff out of global scope
[21:57] <maushu> Ah. Thought so.
[21:57] <maushu> Still, it's ugly as hell.
[21:58] <felixge> ryah: should stream.close() take a callback? Or will close emit it's own 'drain' event when the stream has closed?
[21:59] <gsf> ekwisatz: http://stackoverflow.com/questions/791959/how-to-use-git-to-download-a-particular-tag
[21:59] <gsf> ekwisatz: google is your friend
[21:59] <Tim_Smart> felixge: stream.close() probably shouldn't have an callback
[22:00] <Tim_Smart> stream.addListener('close', ... ); or something should take care of that
[22:00] <Tim_Smart> 'drain' event, w/e
[22:00] <felixge> Tim_Smart: it's currently not defined in the wiki page ryan did: http://wiki.github.com/ry/node/streams
[22:01] <felixge> Tim_Smart: maybe 'end' should be used for consistency with readable streams
[22:01] <Tim_Smart> yeah
[22:01] <Tim_Smart> 'end' sounds appropiate
[22:03] <ryah> felixge: i suppose we ought to have a 'close' event
[22:03] <felixge> ryah: rather than 'end' ?
[22:03] <maushu> Does v8 understand "use strict"; ?
[22:03] <ryah> yeah - i guess
[22:04] <ryah> maushu: no
[22:04] <maushu> I see. Thanks.
[22:04] <felixge> ryah: ok
[22:04] <felixge> ryah: should have a write stream implementation ready in a bit
[22:04] <Tim_Smart> ryah: You seen docco, the documentation tool jaskenas made http://jashkenas.s3.amazonaws.com/misc/docco/docco.html ?
[22:05] <ryah> Tim_Smart: looks cute
[22:05] <Tim_Smart> ryah: The cool thing is, is it takes normal code comments written with markdown
[22:06] <Tim_Smart> E.g. to get that file, he ran it on http://github.com/jashkenas/docco/blob/master/docco.coffee
[22:06] <Tim_Smart> He was going to make a version for javascript
[22:06] <ryah> Tim_Smart: yeah - there was another thing like this http://www.toolness.com/wp/?p=441
[22:07] <ryah> unfortunately it's not really appropriate to document node
[22:07] <ryah> (because so much of the API is defined in C)
[22:08] dnolen_ has joined the channel
[22:10] fictorial has left the channel
[22:10] tlrobinson_ has joined the channel
[22:14] <mikeal> oh man
[22:14] <mikeal> docs are hard
[22:15] <felixge> ryah: let me know if you have some feedback: http://github.com/felixge/node/commit/3f3c9d95c9429769e522de78c5c624f97610b890
[22:15] <felixge> if you like this I'll continue with read stream
[22:16] <ryah> docs are hard.
[22:16] <mikeal> have you seen the sphinx docs stuff that Python uses?
[22:17] <mikeal> they are a total pain in the ass to write and build, but the final product are the best docs I've seen
[22:21] <ryah> felixge: comments on github
[22:21] <ryah> mikeal: this http://docs.python.org/library/stdtypes.html#file-objects ?
[22:22] <maushu> Mmm, I'm looking for a way to control access to online files with node.js (the backend) but make so that nginx (the load balancer and static file sender) is the one to actually send the files... any ideas?
[22:22] <mikeal> that uses Sphinx
[22:22] <felixge> ryah: would 'writeable' be the same as 'closed' right now? except I'd render a stream unwriteable if it had an error?
[22:22] <mikeal> all the interlinking is really nice
[22:22] <felixge> ryah: or is writable just for feature detection from the outside?
[22:22] <ryah> felixge: yes - but opposite :)
[22:22] <mikeal> Sphinx also has a web service so that you can point to other sphinx docs sites and interlink to them
[22:22] <ryah> felixge: it's for outside
[22:23] <felixge> ryah: ok. So it would stay 'true' at all times, even if the stream closed?
[22:23] <felixge> ryah: to indicate what type of stream it is
[22:24] <ryah> felixge: no - true only when you can write to it
[22:24] <ryah> felixge: i updated the wiki http://wiki.github.com/ry/node/streams
[22:24] <felixge> ryah: ok
[22:24] <felixge> ryah: but it would be 'true' initially, even 'fs.open' fires, right?
[22:25] dekz has joined the channel
[22:25] <felixge> ryah: or would it only turn 'true' after that?
[22:25] <felixge> * even before
[22:26] <ryah> felixge: um, yeah i guess in your case it would return true until 'close'
[22:27] <felixge> ryah: ok
[22:31] <felixge> ryah: like this: http://github.com/felixge/node/commit/18a70ffda13d3692aee34c097ad9330756d6479b ?
[22:33] <felixge> ryah: except, sys.mixin does not seem to exist yet ;)
[22:33] <ryah> felixge: ./sys
[22:34] <felixge> ryah: oh
[22:34] <felixge> ryah: nope
[22:34] <felixge> ryah: I don't think you changed that yet
[22:35] <ryah> felixge: oh sorry!
[22:35] <ryah> felixge: that was process.inherits
[22:35] <ryah> these damn utility functions
[22:35] <felixge> ;)
[22:36] <felixge> ryah: anyway, do you think this is generally what you had in mind? If so I'll work on the read stream tomorrow.
[22:37] <ryah> felixge: yep
[22:38] <JimBastard_> LOLWUT
[22:38] <JimBastard_> http://github.com/quirkey/jim
[22:38] <felixge> ryah: sweet :). Can't await that pump function either.
[22:39] <felixge> ryah: I'll try to work with isaacs to get multipart to play along nicely (your example in the wiki assumes multipart doesn't exist *g*) :)
[22:39] <ashb> JimBastard_: designed for client side it looks like
[22:39] <ashb> it talks about sprockets anyway
[22:39] <felixge> I guess multipart should emit child streams itself for each part
[22:40] <JimBastard_> it is
[22:40] <JimBastard_> i just love the name
[22:40] ekwisatz has left the channel
[22:40] <JimBastard_> also i know quirkey
[22:40] <ryah> felixge: that's what i was thinking
[22:40] <ryah> felixge: it's a bit silly, because then you're three layers away from the actual transport
[22:40] <ryah> connection -> request -> part
[22:41] <felixge> ryah: what's silly about that?
[22:41] <felixge> I mean I love juggling bytes, but sometimes I just want to get stuff working :)
[22:41] <ryah> well a lot of mirroring of resume() and pause() and such
[22:41] <felixge> ryah: oh, you mean efficiency?
[22:41] <ashb> make it in the proto chain and V8 makes that essenstially dissapear doesn't it?
[22:42] <ryah> I guess Part.prototype.pause = function () { this.req.connection.pause(); }
[22:42] <felixge> ryah: yeah
[22:42] <ryah> ashb: hm interesting idea 
[22:42] <ashb> i thought thats what it did with its class shapes
[22:42] <ashb> i could be wrong mind
[22:42] <ashb> i dont know v8 very well
[22:43] <felixge> I think it optimizes the constructor heavily as well
[22:43] <ryah> so when the current part comes up you do p = new Part; p.__proto__ = req
[22:43] <felixge> creating hidden class templates for different construct sequences
[22:43] <ashb> ryah: does not v8 have Object.create yet?
[22:43] <ashb> http://code.google.com/apis/v8/design.html
[22:43] <ashb> is what i was thinking of
[22:43] <ryah> and similarly when the current request comes you do req = new IncomingMessage; req.__proto__ = connection
[22:44] <felixge> ryah: not sure if it would work, but it's worth a try :)
[22:44] <ashb> with its 'hidden classes'
[22:44] <felixge> ryah: btw. should we get rid of process.inherits in favor of using __proto__ ?
[22:45] <ashb> http://code.google.com/p/v8/issues/detail?id=460
[22:45] <ashb> dont encourage people to set __proto__ going forward
[22:45] <mikeal> i would rather have sys.inherits just do stuff to __proto__
[22:45] <ashb> Object.create is the 'official' way of doing it
[22:46] <ashb> x = Object.create(desiredProto, { "key": { value: 123, enumerable: false } )
[22:46] <mikeal> is that in v8 yet?
[22:46] <ashb> http://code.google.com/p/v8/issues/detail?id=460
[22:46] <ashb> :)
[22:46] <Tim_Smart> yeah
[22:46] <mikeal> did they finish ECMA5 work
[22:46] morgan has joined the channel
[22:46] <ryah> mikeal: no - but they have some things
[22:46] <mikeal> i'll be happy when they are finished :)
[22:47] rauchg has joined the channel
[22:47] <ashb> looks like most of Object.create landed in december
[22:48] <ryah> but what would be important is that once the next part came, or the req came - that it get unhooked from the underlying stream
[22:48] atcrabtree has joined the channel
[22:49] <ryah> how would you do that?
[22:49] <ashb> ah dunno.
[22:49] <ryah> req.__proto__ = null;
[22:49] <ryah> ?
[22:49] <ryah> shrug
[22:49] <ashb> part.pause = function() { throw '... }
[22:49] <ashb> i know the mozizilla guys were talking about making setting __proto__ after construction an error
[22:49] <ashb> (they haven't yet, but they were talking about it)
[22:50] <ashb> er, mozilla
[22:50] <ashb> so you might be asking for trouble long-term if you do that sort of thing
[22:51] <ashb> and now i declare it time for starcraft 2
[22:52] <ryah> using the prototype chain would save a lot of closures
[22:53] <ryah> a lot of function calls too
[22:53] <ashb> what behaviour do you want when it should no longer be attached?
[22:54] <ryah> well, one thing i'm wondering about suppose i do "req.__proto__ = socket;"
[22:54] <ryah> and then socket does "emit('data', body);"
[22:54] <ashb> no such method is probably not right, so overriding the method with a "no longer attached" seems right to me
[22:54] <ryah> we kind of want to hit every event emitter in the prototype chain
[22:55] <ashb> & # sc2 loaded now
[22:55] <ryah> well, hitting every listener is possible, i think
[22:56] <ryah> but you'd want to unhook it so that when socket.emit('data') for req2, that the original 'req' doesn't emit it
[22:56] <felixge> ashb: where do you get sc2?
[22:56] <ashb> beta
[22:56] nodejs_v8 has joined the channel
[22:56] <felixge> ashb: is that public?
[22:57] <ashb> invite only
[22:57] <Tim_Smart> nodejs_v8: var Test = function () { this.__proto__ = Array.prototype; }; new Test().push
[22:57] <nodejs_v8> Tim_Smart: function push() { [native code] }
[22:57] <felixge> ashb: got an invite?
[22:57] <felixge> :)
[22:57] <ashb> nope. random lotteyr type. sorry
[22:57] <felixge> ashb: damn, have fun :)
[22:58] <ashb> if you cann getting crushed by zerg fun :)
[23:00] <felixge> alright, bedtime for me
[23:00] <felixge> gn8
[23:05] RayMorgan has joined the channel
[23:16] isaacs has joined the channel
[23:22] guan has joined the channel
[23:32] eikke has joined the channel
[23:39] paul___ has joined the channel
[23:39] unomi has joined the channel
[23:39] gf3 has joined the channel
[23:53] dekz has joined the channel
[23:56] RayMorgan has joined the channel
[23:57] sztanphet has joined the channel
[23:59] <kriszyp> what is the latest in the efforts to have module reloading?
[23:59] sztanphet has joined the channel
