[00:00] <devinus> mjr_: i did. had to read the C++ code
[00:01] <mjr_> I'm working on getting better examples in the documentation, but for now reading the code is the only reliable way.
[00:07] <ddollar> sorry for more basic questions.. but what's my best option for xml parsing? ideally i'd just like a js object back.. xml2object and node-xml are throwing warnings
[00:12] steadicat has joined the channel
[00:14] <Tim_Smart> ddollar: Does http://github.com/sprsquish/libxmljs still work?
[00:17] creationix_ has joined the channel
[00:17] dnolen has joined the channel
[00:17] creationix__ has joined the channel
[00:20] creationix has joined the channel
[00:21] hobson has joined the channel
[00:22] hobson has joined the channel
[00:22] creationix_ has joined the channel
[00:23] softdrink has joined the channel
[00:23] felixge has joined the channel
[00:23] felixge has joined the channel
[00:25] bmizerany has joined the channel
[00:44] charlesjolley has joined the channel
[00:54] <creationix> mjr_: thanks for getting the docs moving along, that will make everyone happy
[00:56] <mjr_> Yeah, I'm looking forward to having your fancy viewer in there.  Not sure if you saw in the scrollback, but _ry said the latest markdown.api looked good, but he's on the road and will integrate later.
[00:57] <_ry> hey - so i just need your two commits?
[00:58] <_ry> there aren't any makefile changes
[00:58] <mjr_> creationix should probably pull mine, and then you can pull his.
[00:59] <mjr_> unless he doesn't have any more changes.
[00:59] <creationix> either way it's the same to git
[00:59] <creationix> no, nothing new
[00:59] <mjr_> oh, OK then.
[01:01] <_ry> creationix: you should add node-router to http://wiki.github.com/ry/node/library-compatibility
[01:02] <_ry> if you guys tell me the ronn commands i can do the makefile changes
[01:02] <creationix> alright then
[01:03] <mjr_> ronn --build --html api.markdown
[01:03] <mjr_> will build api.1.html
[01:04] <creationix> maybe add the --manual and --organization flags
[01:04] <mjr_> ronn --build --roff api.markdown
[01:04] <mjr_> will build api.1
[01:08] <devinus> mikeal: what's your GH account?
[01:08] <mikeal> @mikeal
[01:11] <_ry> ryan@mac% ronn --build --html doc/api.markdown > doc/node.html                                         [~]  6:09PM
[01:11] <_ry> zsh: no such file or directory: doc/node.html
[01:11] <mjr_> I think you need --pipe
[01:12] <creationix> no, just leave out --build
[01:12] <creationix> it defaults to --pipe
[01:12] <mjr_> indeed
[01:13] <_ry> -1- ryan@mac% ronn  --html doc/api.markdown > doc/node.html                                            [~]  6:09PM
[01:13] <_ry> zsh: no such file or directory: doc/node.html
[01:13] <mjr_> does doc exist?
[01:13] <_ry> no
[01:14] <_ry> should it?
[01:14] <mjr_> ronn is really brittle
[01:14] <mjr_> and really bad about reporting errors
[01:15] <mjr_> I just tried this command, and it worked:   mjr:~/work/node$ ronn --html doc/api.markdown > doc/node.html
[01:16] <_ry> nevermind
[01:16] <_ry> im a retard
[01:20] <devinus> who works with paperboy ?
[01:20] <devinus> ive discovered a bug
[01:25] <_ry> what's generate.js for
[01:26] <mjr_> I believe that's for the fantastic future where creationix's fancy viewer will read the markdown file.
[01:26] <mjr_> but not used at the moment.
[01:26] <creationix> go ahead and remove it
[01:26] <creationix> sorry for the garbage
[01:27] <creationix> all ronn needs is api.markdown
[01:28] <creationix> at one point I was going to use ronn for the man files, but have a custom script for html generation, but since ronn is doing html too there is no need for generate.js
[01:31] <CIA-77> node: 03Tim Caswell 07master * r179f718 10/ (7 files in 2 dirs): 
[01:31] <CIA-77> node: Conversion to markdown based API docs.
[01:31] <CIA-77> node: With help from Matt Ranney <mjr@ranney.com> - http://bit.ly/9pgE95
[01:31] devinus has joined the channel
[01:31] <devinus> creationix: actually, it's a bug in your library
[01:31] mjr_ has joined the channel
[01:32] <_ry> Who was getting the http-parser large chunked response errors?
[01:32] <_ry> mjr_, creationix: http://github.com/ry/node/blob/179f718d62c17c674a941a2539b81fee54152da5/doc/api.markdown
[01:32] <devinus> creationix: let me know when i can get your ear
[01:33] <devinus> or...eyes, i guess
[01:33] teemow has joined the channel
[01:36] <devinus> what is res.output supposed to be when serving a static file ?
[01:38] Gruni has joined the channel
[01:45] isaacs has joined the channel
[01:50] justinlilly has joined the channel
[01:50] <justinlilly> anyone know if express has its own channel?
[01:50] <creationix> devinus: sup
[01:50] <devinus> creationix: node-router's logify function
[01:51] <devinus> creationix: assumes the response has a .statusCode and a .output, well, paperboy doesn't set those. it does a res.sendHeader(200, {'Content-Length', size}) instead
[01:52] <devinus> creationix: i'm not sure what to do. does paperboy need to set those explicitly, e.g. res.statusCode = 200, or should logify be more robust ?
[01:53] <creationix> as far as I know, there is no way to get the status code from the res object
[01:53] <creationix> that's why logify wraps sendHead to set it
[01:53] <isaacs> creationix: writeHead, i think you mean
[01:53] <devinus> creationix: this is the code you could test against: http://pastie.org/889297
[01:54] <creationix> isaacs: yes
[01:55] <devinus> creationix: line 26 in node-router.js specifically
[01:55] <devinus> creationix: that's what gaborks it
[01:56] <creationix> yeah, someone brought this up on the mailinglist too, output isn't good for detecting the mesSAGE
[01:56] <creationix>  
[01:56] <creationix> message length
[01:56] <creationix> also, btw node-router does static files too
[01:57] <creationix> it's probably not as full featured as paperboy though
[01:57] <devinus> creationix: ...
[01:57] <devinus> creationix: what does static look like
[01:58] <creationix> ACTION is being attacked by my 10 month old baby girl
[01:58] <creationix> exports.staticDirHandler = function(root) {
[02:01] <creationix> hmm, that could probably use some api cleanup
[02:01] <creationix> I'm open to suggestions
[02:02] <micheil> moin creationix 
[02:02] <creationix> mornin'
[02:04] <devinus> creationix: i'm lost right now, but i'll see what i can do
[02:05] <creationix> I think ry/node_docs uses it
[02:06] <creationix> to serve the static files for the fancy viewer
[02:06] <creationix> as a disclosure, the api to node-router was NEVER designed, it's 100% the result of practical needs in my various projects
[02:07] <creationix> so I'm sure the API can be improved in many ways
[02:10] <micheil> ACTION should really do more node work
[02:12] creationix has joined the channel
[02:19] creationix_ has joined the channel
[02:23] kriszyp has joined the channel
[02:25] <devinus> creationix: i've got a patch for ya
[02:25] <creationix> cool
[02:26] <creationix> where's it at?
[02:30] <devinus> creationix: old stuff did + when should be using path.join
[02:31] <devinus> creationix: plus now theres a prefix if the stuffs at a diff location than what req.url is actually saying: router.staticDirHandler(ROOT, prefix='/static/')(req, res);
[02:31] <devinus> creationix: let me send a pull req
[02:32] <creationix> ok, cool
[02:34] keeto has joined the channel
[02:36] bpot has joined the channel
[02:36] <devinus> creationix: sent
[02:36] <creationix> I see, reviewing...
[02:36] charlesjolley has joined the channel
[02:37] <creationix> what's "path.join(root + 'index.html');"
[02:38] <creationix> did you mean (root, "index.html)
[02:38] <_ry> ACTION skipped his flight
[02:38] <devinus> creationix: indeed let me fix that
[02:38] <_ry> they gave me $400
[02:38] <devinus> idiot
[02:38] <creationix> ahh, one of those
[02:38] <creationix> I recently travelled standy, I appreciate the people who take the bribe and stand down
[02:38] <creationix> *standby
[02:39] <_ry> they have me in a nice hotel and an early flight tomorrow
[02:39] <creationix> sounds great _ry
[02:39] <_ry> so seems okay. i'll just hack all night :)
[02:39] <creationix> where are you at anyway?
[02:39] <_ry> vancouver
[02:40] <creationix> cool, (though it's probably cold up there)
[02:40] <devinus> creationix: re-sent. dumb mistake
[02:41] <creationix> devinus: so root doesn't have a trailing slash now then?
[02:42] <devinus> creationix: what that was was he was doing 'foo/bar/baz.jpg/' => 'foo/bar/baz.jpg'
[02:42] <devinus> creationix: except a slash at the end there is not only not the same resource restfully, but doesnt make any sense anywat
[02:43] <creationix> fair enough
[02:43] <devinus> creationix: plus if you need to strip trailing slashes for all your requests, use a middleware
[02:43] <creationix> I have a general question about path.join, does it even matter since node only runs on posix systems
[02:43] <creationix> or are we just getting ready for when there will be windows support
[02:44] <devinus> creationix: saves a lot of headache, e.g. root could equal 'foo/' or 'foo' depending n how the user defined it
[02:44] <creationix> oh, so path.join only adds the slash if there isn't one already then?
[02:45] <devinus> creationix: yep
[02:45] <creationix> ok, that makes sense
[02:45] <devinus> creationix: also, i have to say, path.join(root, filename.replace(/\.\./g, '.')); is really obscurity through obscurity
[02:45] <devinus> security*
[02:45] <creationix> that's really obscure ;)
[02:46] <devinus> security through obsurity*
[02:46] <creationix> ok, so you've tested this code right?
[02:46] <devinus> fuck!
[02:46] <devinus> creationix: yeah
[02:46] <creationix> alright, it's merged, thanks for the patch
[02:48] <creationix> I guess I'll have to properly document and write a changelog and license for node-router now that people are using it
[02:48] <creationix> ACTION adds yet another item to my todo list
[02:49] <devinus> creationix: oh fuck, ive been using unlicensed code?
[02:49] <devinus> creationix: as long as you don't GPL it i'll be fine
[02:49] <devinus> :D
[02:50] <creationix> don't worry I always use mit or bsd
[02:50] <creationix> gpl is too much of a pain
[02:52] <_ry> maybe i'll work on openssl stuff tonigth
[02:53] <devinus> _ry: you've been hoping somebody would take up the openssl banner?
[02:54] <_ry> shrug
[02:54] <_ry> it's kind of fun work
[02:56] <_ry> someone should do haml/coffee script
[02:56] <_ry> i bet that'd look pretty awesome
[02:56] <devinus> _ry: i was looking at small SSL impl's the other day, i think there are a few of them out there less heavy weight than openssl
[02:56] <creationix> haml/coffee script?
[02:57] <_ry> devinus: yeah - but can you really trust them?
[02:57] <_ry> ssl is one of those things
[02:57] <devinus> _ry: can you really trust OpenSSL either? they've had two big no-no's in the past year
[02:57] <_ry> you kind of want something with a billion users
[02:57] <devinus> one advantage
[02:59] <_ry> in fact, it'd likely node will fail security audits if it doesn't use gnutls, openssl, or nss
[02:59] <_ry> s/it'd/it's/
[03:00] Wes- has joined the channel
[03:00] <devinus> _ry: yeah i just realized all the alt. impls i found were not appropriately licensed anyway
[03:00] <_ry> ot that i'm against it. i'd love to have a good simple mit licensed tls lib
[03:00] <_ry> but - it would need to be battle tested for some years
[03:01] icey has joined the channel
[03:03] <devinus> _ry: what were you using before?
[03:04] <_ry> gnutls
[03:06] <_ry> which is okay, but is lgpl
[03:07] <_ry> and, more importantly, a bit less trusted
[03:07] <_ry> not installed everywhere
[03:07] <_ry> etc
[03:10] <devinus> creationix: i really fucked up the way i merged in my changes on my first pull request :-/ sorry, i lied to you, but i just fixed the last issue and this time i made sure it worked right
[03:10] <devinus> creationix: new pull request sent
[03:11] <creationix> ok, got it
[03:11] <devinus> creationix: i'm going to work on cleaning up the code a bit
[03:11] <icey> creationix: I just watched your video using top cloud & node on vimeo last night; it looks really awesome
[03:12] <devinus> icey: link?
[03:12] <creationix> icey: thanks
[03:12] <icey> devinus: http://vimeo.com/6940290
[03:12] <devinus> creationix: is there any reason you're using "DEL" instead of "DELETE" ?
[03:12] <devinus> icey: thanks
[03:12] <creationix> because delete is a keyword
[03:12] <creationix> I don't want to be forced to use ['delete']
[03:13] <devinus> creationix: no, i mean return addRoute("DEL", pattern, handler);
[03:13] <devinus> creationix: i don't think "DEL" is an http method
[03:13] <creationix> oh, as the string internally, I guess that should be DELETE
[03:13] <devinus> creationix: want me to change it?
[03:14] <creationix> devinus: sure, if you're going to do it now
[03:15] <creationix> devinus: as far as cleanup, I like to use strict js syntax (semicolons, braces, triple equals)  basically jslint stuff when it makes sense in node
[03:16] <devinus> creationix: oh for sure. there are a few things i disagree with in jslint though i think. doesnt it complain if you do a simple if without braces? e.g. if (foo) bar = 1; ?
[03:17] <kriszyp> fwiw, obj.delete() is valid syntax in ES5, so I assume that will be fixed in V8 soon
[03:17] <creationix> kriszyp: that's good news
[03:17] <kriszyp> yes, I am glad that is happening
[03:17] <creationix> it's really annoying not being able to use methods or object keys named after keywords 
[03:18] <kriszyp> yep
[03:18] <devinus> kriszyp: i'd also like to have some spidermonkey only extensions in v8
[03:18] <devinus> *sigh*
[03:18] <kriszyp> like?
[03:19] <creationix> we do have getters and setters
[03:19] <kriszyp> generators, destructuring?
[03:19] <devinus> kriszyp: list comprehensions
[03:19] <devinus> generators
[03:19] <kriszyp> yeah, I understand
[03:19] <creationix> generators add a strange dynamic to the language for sure
[03:19] <creationix> not that I'm against them I used to do python years ago
[03:19] <kriszyp> generators are nice
[03:20] <icey> what languages did you guys mostly come from? 
[03:20] <devinus> mmmm let statement would be nice
[03:20] <creationix> python, php, ruby, ocaml
[03:20] <mjr_> I'm a big fan of jslint's "good parts" mode, even the strict whitespace.  At least it is a repeatable and automated way to validate code.
[03:20] <creationix> oh, and 10 years of qbasic
[03:20] <devinus> icey: python/erlang
[03:20] cloudhead has joined the channel
[03:20] <kriszyp> fwiw, let statement is pretty likely to be in ES6, I think
[03:21] <creationix> ES6, any eta on that one?
[03:21] <kriszyp> I don't know about list comprehension or generators
[03:21] <icey> creationix, devinus - do you find that you're replacing a lot of the stuff you'd write in those languages with node? 
[03:21] <kriszyp> I don't know, maybe 2-4 years out?
[03:21] <icey> (i'm just starting to check it out and i always like to see what the community looks like before i go too deep :D)
[03:21] <kriszyp> probably closer to 4, I bet
[03:22] <devinus> icey: node cant replace erlang, but python's been losing my favor
[03:22] <creationix> icey: I like node simply because it's simple and fast
[03:22] technoweenie has joined the channel
[03:22] <mjr_> I used to write lots of tools in perl and python, and I'm slowly moving to node for everything.
[03:22] <creationix> it's prefer something like IO or lua if the browser supported them
[03:22] <creationix> but it's nice to have the same language on both sides of a web app
[03:22] <mjr_> Saving that mental context switch is a huge win.
[03:23] <devinus> when my company got burned really bad deploying our python websites, we got really turned off to the language
[03:23] <Wes-> mjr_: only writing form validation code once isn't a bad bonus either :)
[03:23] <icey> hmmm. you guys sound like my people :D 
[03:23] <creationix> and node is the best of the ssjs because it has the same implicit event loop at the browser
[03:23] <icey> i've been spending a bunch of time learning clojure, but it's all ruby and java people; and i guess i don't really think that way
[03:23] <creationix> of course that means it's hard to do simple procedural things that involve IO
[03:24] <mjr_> Taking away control of the event loop is a fantastic feature, disguised as a bug.
[03:24] <Wes-> creationix: yes and no.  I would argue that if it is the best, it's not because of the event loop -- it's because of the ground-up async design
[03:24] <Wes-> creationix: event loop is easy, ground up good async design is much harder
[03:24] <devinus> icey: i love clojure. clojure, erlang, and node are my favorite things to play with right now, but with clojure it's something entirely different than node. node and clojure serve very, very different purposes
[03:24] <creationix> Wes-: I consider them one and the same
[03:24] <devinus> icey: theres room for both of them for me
[03:24] <kriszyp> right, I think most of the ssjs projects have an event loop, but node has definitely been the most async focused
[03:25] <mjr_> Also, the more time I spend with it, the more I really love JavaScript, warts and all.
[03:25] <icey> devinus: aye; i'm not dropping clojure, but i don't like it for the web - i guess i don't really like the java way of doing web
[03:25] <icey> and i already know javascript, which is a bonus 
[03:26] <devinus> icey: the great thing about clojure is that you can code in Lisp and still be enterprisey and use all these rock solid libraries that come with java or apache commons or cassandra or lucene or lucandra all within the comfort of the your language without writing all this glue code
[03:26] <Wes-> kriszyp: *nod* - I've actually been copying node's async sockets API today since I'm now writing a daemon and it has all the kinks pretty much ironed out
[03:28] <mjr_> Hey, check out this progress on the documentation:  http://github.com/ry/node/blob/master/doc/api.markdown
[03:28] <icey> devinus: lately there have been a lot of rumblings about wanting to make the tools more "java-like" and it makes me nervous; i like tools like lein, not tools like maven
[03:28] <mjr_> now if only it were accurate.
[03:28] <icey> devinus: however, i'm looking forward to the simpleness of node. sometimes i just want to serve up some webpages and maybe talk to a nosql store or something
[03:28] <devinus> icey: indeed
[03:29] <devinus> icey: i'm using it for a restful media library and manipulation backend right now
[03:29] <devinus> icey: wuth a sproutcore front-end
[03:30] <creationix> devinus: are you on the sproutcore team or just using it?
[03:30] <Wes-> _ry: What's the (c) / license on your documentation?
[03:30] r11t_ has joined the channel
[03:30] <icey> devinus: that sounds pretty awesome
[03:30] <devinus> creationix: i'm pretty active within the community
[03:31] <creationix> that's a community I with I had time for
[03:31] <creationix> *wish
[03:31] <icey> js + node feels kind of like perl of the old days right now
[03:31] <icey> (i mean this in the most positive way possible)
[03:31] <devinus> creationix: sc is fucking awesome
[03:31] <mjr_> icey: soon we'll have one-liner contents.
[03:32] <creationix> I had actually made topcloud way back as a sproutcore clone that supports IE6 and is easier to use
[03:32] <icey> mjr_: i think it's fun to have the flexibility to make code as ugly as you want; as long as everyone understands it's ugly
[03:32] softdrink has joined the channel
[03:32] <devinus> creationix: cute kid
[03:32] <creationix> thanks
[03:34] <devinus> creationix: austin, tx here
[03:34] <icey> can anyone tell me what js.io would be used for? 
[03:34] <icey> devinus: how is the dev scene in austin? 
[03:35] <devinus> icey: it's the closest to the bay area other than the bay area probably
[03:36] <icey> devinus: wow, that's a pretty strong endorsement - i didn't realize that it would be that good out there
[03:36] <icey> i'm looking to relocate, but i'm not really a fan of the bay area
[03:36] <creationix> yeah, Austin is very much the same culture
[03:37] <devinus> icey: i fucking love the bay area, but i love austin too
[03:37] <creationix> north dallas is pretty nice, but a lot tamer
[03:37] <devinus> ACTION hates dallas...
[03:38] <devinus> feels so....idk, dallas creeps me out
[03:38] <mjr_> I lived in north Dallas for a while, and much prefer the Bay Area.  The opportunities for skilled programmers here are limitless.
[03:38] <devinus> san diego creeps me out in the same way
[03:39] <devinus> mjr_: probably moving to the bay area once i get my degree
[03:39] <devinus> good to know
[03:40] <mjr_> Don't get me wrong, the Bay Area has numerous problems: high housing costs, not so great air quality, relatively bad public transit, etc.
[03:41] mikeal has joined the channel
[03:42] <devinus> mjr_: grew up in san fran
[03:44] <creationix> texas is much cheaper
[03:45] <creationix> actually my plan is to buy a bunch of cheap land in Arkansas and work telecommute.  It will be the JavaScript Ranch
[03:45] <icey> creationix: i know a guy who did that in missouri
[03:45] <icey> he bought like 100 acres of land and moved out there with his wife. he liked it so much that he built a bed and breakfast and quit programming
[03:46] <mjr_> nice.  I have a similar plan to do that in Michigan.  They are practically giving away land in much of Michigan, even really nice parts.
[03:46] <devinus> *gasp*
[03:46] <devinus> quit programming!?
[03:46] <Wes-> that's like not breathing
[03:46] <Wes-> what would be the point?
[03:47] <mjr_> Yeah, that's just crazy talk.
[03:47] <icey> hahah he was a vax/vms guy... he never got to work on anything fun
[03:47] <devinus> oh that explains it
[03:47] <mjr_> OK, that makes more sense.
[03:50] <Wes-> what would *really* explain it is if his new job was on IBM, doing CICS and JCL
[03:51] <Wes-> or... *shudder* ... cob*l
[03:51] <icey> Wes-: I have no idea, it could have been cobol. all i know is he did mainframe work for the gov't
[03:51] <mjr_> Thanks for reminding me that I'm not enough to understand why that is bad.
[04:02] silentrob has joined the channel
[04:03] <mjr_> I think I'm going to go and do something non-JavaScript and non-taking care of children related, which is unusual.
[04:09] charlesjolley has joined the channel
[04:14] silentrob has joined the channel
[04:14] n8o has joined the channel
[04:18] mnutt has joined the channel
[04:19] PyroPete1 has joined the channel
[04:32] brapse has joined the channel
[04:38] Yuffster has joined the channel
[04:47] Gruni has joined the channel
[04:53] cloudhead has joined the channel
[04:54] KungFuHamster has joined the channel
[05:06] okito has joined the channel
[05:06] okito has joined the channel
[05:07] okito has joined the channel
[05:08] JimBastard has joined the channel
[05:08] <JimBastard> must beat avro
[05:08] <JimBastard> Crockford will help us
[05:08] <CrockBot> In ES5 &quot;use crockford&quot; was removed in favor of &quot;use strict&quot; due to the sudden rise of roundhouse kicks to the face.   zii
[05:08] charlesjolley has joined the channel
[05:09] alex-desktop has joined the channel
[05:11] <JimBastard> i think maybe tmpvar just got avro linked up
[05:11] <JimBastard> possibly
[05:11] <JimBastard> we are having mini javascript party
[05:11] <JimBastard> ^_^
[05:12] alex-desktop has joined the channel
[05:14] sh1mmer has joined the channel
[05:16] tmpvar has joined the channel
[05:17] r11t has joined the channel
[05:23] <tmpvar> whats up
[05:25] <tmpvar> ry_, Tim_Smart: I got that node-avro stuff compiling .. had a node-avro.js in the lib folder with a node-avro.node (apparently the .js takes precidence)
[05:25] <tmpvar> s/compiling/working
[05:26] okito has joined the channel
[05:40] joshbuddy has joined the channel
[05:55] <atmos> anyone know any express apps with specs ?
[05:59] erikvold has joined the channel
[06:22] rictic has joined the channel
[06:26] felixge has joined the channel
[06:26] felixge has joined the channel
[06:28] charlesjolley has joined the channel
[06:35] fizx has joined the channel
[06:37] <fizx> helllooooo
[06:45] dgathright has joined the channel
[06:51] dgathright_ has joined the channel
[06:52] <JimBastard> sup fizx 
[06:52] <unomi> http://www.youtube.com/watch?v=HWeZOS8ta04&feature=player_embedded
[06:52] <fizx> JimBastard: hi
[06:52] <JimBastard> were you trying to do node-avro stuff?
[06:52] <fizx> yeah
[06:52] <JimBastard> tmpvar just had a bit of a breakthrough tonight
[06:52] <JimBastard> he should be back online in a bit
[06:52] <JimBastard> just left here
[06:53] <fizx> i saw his repo after i spent about an hour getting avro and node to compile in the same context
[06:53] <JimBastard> so i think hes actually been able to expose the C methods to JS now
[06:53] <JimBastard> and is passing JSON between
[06:53] <JimBastard> or something
[06:54] <fizx> it looks like he has encode/decode
[06:54] <fizx> i'd like to see a cassandra client
[06:54] <fizx> which would also require rpc
[06:55] <fizx> hook into node's tcp libs
[06:55] <fizx> prolly
[06:56] <fizx> actually, i can't see too much detail
[06:56] qFox has joined the channel
[06:56] <JimBastard> ?
[06:57] <fizx> rather, it doesnt't look like he's filled out the method bodies for encode and decode
[06:57] <fizx> just a skeleton
[06:57] <fizx> the skeleton prolly compiles tho
[06:57] <fizx> just doesn't do anything
[06:57] <fizx> afaict
[06:58] <JimBastard> yeah i think he just got it all connected
[06:58] <JimBastard> doing the schema interrupter now or something
[06:58] <fizx> "interrupter"?
[06:58] <JimBastard> your breaking my balls
[06:59] <JimBastard> talk to tmpvar
[06:59] <fizx> ok
[06:59] <fizx> are you in nyc too?
[06:59] <JimBastard> 10-4
[07:10] tmpvar has joined the channel
[07:10] <tmpvar> fizx, yo
[07:10] <fizx> hi
[07:10] <tmpvar> is your avro repo on github?
[07:11] <fizx> nah, i just got started
[07:11] <tmpvar> got ya
[07:12] <fizx> i got to the point where i figured i need to be on avro trunk
[07:12] <fizx> and then i got the hello.node to compile with avro included
[07:12] <tmpvar> yeah, i managed to get the avro-c guys to patch trunk
[07:12] <tmpvar> nice
[07:12] <tmpvar> so we are at a similar state
[07:12] <fizx> and then i discovered your repo
[07:12] <tmpvar> im *slightly* firther
[07:13] <tmpvar> further* 
[07:13] <fizx> do you want avro for cassandra, or something else?
[07:13] <tmpvar> i was thinking that we could do something like: var avro = new Avro(schema)
[07:13] <tmpvar> we intend on using it for node's web workers
[07:13] <tmpvar> and IPC
[07:13] <fizx> and then the encode/decode
[07:14] <tmpvar> yeah, avro.encode(json), and avro.decode(binary)
[07:14] <tmpvar> something to that effect
[07:14] <fizx> i saw the empty methods in your repo
[07:14] <tmpvar> yeah, im not sure if that will cut it
[07:15] <fizx> what do you mean?
[07:15] <tmpvar> so I intend on diving into the schema from json parsing first and then looking into the various methods I should expose
[07:16] <tmpvar> my naive guess was to have an encode/decode, but im not sure it handles all of the cases (mind you ive never used avro before!)
[07:16] <tmpvar> what do you think?
[07:16] <fizx> i haven't used it either :)
[07:17] <fizx> i'm looking at some of the schema and rpc definitions from cassandra
[07:18] <fizx> i.e: http://gist.github.com/345791
[07:18] <tmpvar> peeking
[07:18] <tmpvar> ok, so encode/decode would have to be pretty robust
[07:19] <tmpvar> I was looking primarely at avro's quickstop.c example
[07:19] <fizx> encode/decode doesn't cover rpc/ipc, of course
[07:19] <fizx> i'm also looking at avro.h
[07:20] <fizx> also, does avro (and should we) support some sort of streaming api
[07:20] <tmpvar> from what i understand, avro-c does not currently support a streaming api
[07:21] <tmpvar> although there is an interest in making it so by the devs
[07:21] <fizx> got it
[07:22] <fizx> it doesn't look like there's any datatypes in avro that wouldn't work as json
[07:22] <tmpvar> so the thing is, I'd like this to be easy to use and efficient heh
[07:22] <tmpvar> true
[07:22] <fizx> there's the bytes vs. string thing
[07:22] <fizx> not quite sure how to differentiate
[07:23] <fizx> or even if it matters
[07:23] <tmpvar> from my perspective, it doesnt
[07:23] <tmpvar> but I havent thought too far down the road
[07:24] <tmpvar> I've been more focused on gettting it working and then taking feedback heh
[07:24] <fizx> prolly makes sense
[07:24] <tmpvar> s/gettting/getting
[07:24] <fizx> is there even a byte[] available in node?
[07:24] <fizx> don't think i've ever really thought at that level for js
[07:25] <tmpvar> when you say node, i assume you mean js?
[07:25] <fizx> either
[07:25] <kriskowal> there's a Buffer since net2 landed
[07:25] <tmpvar> yeah, i dont think so.. you can hold binary objects but i dont think there is such a thing as a byte array
[07:25] <tmpvar> not 100% on that
[07:26] <kriskowal> last i checked, you can index individual bytes as numbers on the Buffer type
[07:26] <fizx> http://comments.gmane.org/gmane.comp.lang.javascript.nodejs/3920
[07:26] sveisvei has joined the channel
[07:26] <kriskowal> yeh, that's old.  Buffer landed.
[07:27] <tmpvar> hehe, thats what i get for having my head in the trenches
[07:27] <kriskowal> yeh, things change on master pretty quickly :P
[07:27] <kriskowal> and Buffer is definitely volatile being so new
[07:28] <kriskowal> but i gather it's a sign of things to come
[07:28] <tmpvar> agreed
[07:28] <tmpvar> looking through node_buffer.cc i saw some comments saying "this might change radically" 
[07:28] <tmpvar> thats funny that i missed that it was capable of handing binary data, anyhow!
[07:29] tmpvar_ has joined the channel
[07:29] <kriskowal> i've been working with it in narwhal+node for a few weeks now; it's pretty awesome
[07:29] <tmpvar> nice
[07:29] <kriskowal> i made a commonjs proposal based on it
[07:29] <kriskowal> i made a commonjs proposal based on it
[07:30] <tmpvar> that ml is very verbose
[07:30] <fizx> http://wiki.commonjs.org/wiki/Binary/F?
[07:30] <tmpvar> when you are attempting to get some "real work" done its just noise tbh
[07:30] <kriskowal> the same
[07:30] <kriskowal> sure, definitely a long-term view there.
[07:30] <kriskowal> lots of value being generated regardless
[07:31] <tmpvar> i cannot disagree with that
[07:31] <fizx> so if there's no streaming api available, encode/decode should be reasonable, i would think
[07:32] <tmpvar> yeah, its possible
[07:32] <kriskowal> yeh, i did it on buffer
[07:32] <tmpvar> kriskowal, did what?
[07:32] <kriskowal> not ported to raw node alas
[07:32] <kriskowal> got streaming encoders and decoders working on top of buffer
[07:32] <tmpvar> oh
[07:32] mikeal has joined the channel
[07:33] <tmpvar> kriskowal, is that code public?
[07:33] <kriskowal> yeh, you can rip it off, for sure; i'm sure _ry has better api ideas though…
[07:33] <kriskowal> ACTION finds a link
[07:33] <fizx> :)
[07:34] <tmpvar> oh damn, of course
[07:34] <tmpvar> sorry kriskowal, I know who you are :)
[07:34] <kriskowal> here's http://github.com/kriskowal/node/blob/narwhal-master/src/node_iconv.cc
[07:34] <kriskowal> http://github.com/kriskowal/node/blob/narwhal-master/src/node_iconv.h
[07:34] <kriskowal> that's just a raw transcoder wrapper; the streaming api's are in pure-js on top of buffer and transcoder
[07:35] <tmpvar> got ya
[07:35] <tmpvar> as per avro, we'll have to do it all blocking for now I'm thinking
[07:35] <kriskowal> http://github.com/kriskowal/node/blob/narwhal-master/narwhal/lib/transcode.js
[07:36] <tmpvar> fizx, what are your thoughts about moving forward with this?
[07:36] <kriskowal> it's not a high latency op, so 'blocking' isn't even really an applicable word for transcoding; the only issue is how well it flushes with an async api
[07:37] <fizx> i'm going to go to bed soon, but i'll be around.  I think the encode/decode approach is reasonable, and we could just conflate the bytes/string type
[07:37] <fizx> for the moment
[07:37] <tmpvar> fizx, cool, so It would appear that I'm on the right track (for the moment)
[07:37] <kriskowal> i also extended the Buffer type in pure-js http://github.com/kriskowal/node/blob/narwhal-master/narwhal/lib/node/buffer.js
[07:37] <fizx> yeah, i think so, but i'm not exactly the expert
[07:38] jbrantly has joined the channel
[07:38] <tmpvar> fizx, same! we'll figure it out though.  I'm going to get schema's working then pass out I think.
[07:38] <tmpvar> its only 3:45 :P
[07:38] <kriskowal> also, i factored narwhal-lib so it's usable on node raw http://github.com/kriskowal/narwhal-lib/
[07:38] <fizx> ok, make sure to push, and i'll probly check it out in the morn
[07:38] <fizx> CA here... so earlier
[07:38] <fizx> thankfully
[07:39] <tmpvar> hehe, CA, USA>
[07:39] <tmpvar> ?
[07:39] <tmpvar> or canada? haha
[07:40] <fizx> california
[07:40] <tmpvar> alright
[07:40] <fizx> b/c canada only has one time zone ;)
[07:41] <tmpvar> haha
[07:42] <fizx> alright, night all!
[07:42] <tmpvar> peace out :)
[07:43] <JimBastard> hey micheil was that you on the sammy.js list?
[07:44] <micheil> yes
[07:44] <JimBastard> awesome i just responded, im an oper on that list
[07:44] <JimBastard> sammy is fun
[07:44] <tmpvar> what a bastard.
[07:44] <JimBastard> i dont use sammy specifically but im all about the location.hash navigation
[07:45] <JimBastard> but getting sammy.js to work, or any location.hash navigation outside of jQuery is a bit of a PITA. it can be done though
[07:46] <JimBastard> depends on how much functionality you want to bake in
[07:46] <JimBastard> caus soon enough you've just recreated jQuery anyway
[07:50] <tmpvar> JimBastard, did you get a response from Brian?
[07:51] <JimBastard> naaah
[07:51] mikeal has joined the channel
[07:52] <tmpvar> no biggie
[07:57] <JimBastard> lol wtf when did i get the number 2 google rank for "javascript location.hash"
[07:57] brainproxy has joined the channel
[07:57] brainproxy has joined the channel
[07:57] <JimBastard> i should a) really finish that project b) actually try to SEO my sites
[07:58] cedricv has joined the channel
[07:58] <tmpvar> hah
[07:58] <tmpvar> yes
[07:58] <tmpvar> dude, im happy to help
[07:58] <tmpvar> bouncing ideas/minor implementations
[08:04] <JimBastard> i mean i dont really care about route.js, people should use bbq or sammy or roll their own
[08:04] <JimBastard> its done and working, just needs better docs, unit tests, maybe some api changes
[08:05] <micheil> JimBastard: one thing sammy doesn't need to do is DOM manipulation and AJAX.
[08:05] <JimBastard> you should look into route.js then
[08:05] <micheil> looking
[08:06] <JimBastard> its not too hard to write your own
[08:06] <JimBastard> http://github.com/Marak/route.js/blob/master/route.js
[08:06] <JimBastard> there should be some usage syntax in the docs. 
[08:07] <tmpvar> can i add a plug for jsdom here? hah
[08:07] <tmpvar> ACTION looks for any opportunity 
[08:09] <JimBastard> what are you looking to do micheil ?
[08:09] <micheil> JimBastard: well, the thing is, Sammy already passes all the ajax, dommanip, ect off to jQuery
[08:09] <JimBastard> does dojo not have any location.hash routing built in? i think YUI does
[08:09] <micheil> Dojo does
[08:09] <micheil> Dojo.hash
[08:09] <micheil> I worked on it for a bit
[08:10] <JimBastard> route.js doesn't many any assumptions about any of your route handlers
[08:10] <micheil> http://github.com/dojo/dojo/blob/master/hash.js
[08:10] <JimBastard> so you would probaly want to use that
[08:10] <JimBastard> if dojo is your game
[08:10] <micheil> true
[08:11] <micheil> although, being how big that file is (small), then it's very easy to remove Sammy's jquery dependency
[08:11] <micheil> (and in my opinionated terms, make it a proper JavaScript Framework)
[08:12] <JimBastard> sammy does a bunch of shit
[08:12] <JimBastard> getting sammy to work without jquery i think would be very hard and a pain in the ass
[08:12] brainproxy has joined the channel
[08:12] <JimBastard> i think you'd be better off building something from the ground up
[08:12] <micheil> yes, but all of it's shit doesn't depend on that much jQuery
[08:12] <JimBastard> i could be wrong
[08:13] <JimBastard> i know sammy uses jQuery's bind / trigger for sure
[08:13] <JimBastard> you can recreate a rudimentary version of that in not a lot of lines
[08:14] <micheil> yeah, and doing pub/sub events is very simple
[08:16] <micheil> I'm almost tempted right now to fork the code, and rewrite ti without a Framework Depenedency.
[08:16] <JimBastard> good luck with that
[08:16] <micheil> I think it will be possible in less then 1000 lines of code changes
[08:16] <micheil> (just to get Sammy's core working)
[08:17] <JimBastard> i really dont see the benefit
[08:17] <micheil> http://github.com/quirkey/sammy/blob/master/lib/sammy.js
[08:17] <micheil> is the core I'm refering to
[08:17] <JimBastard> you're going to have to rewrite a large portion of jQuery
[08:17] <micheil> no
[08:17] <JimBastard> you might as well just take the jQuery core and just remove all the methods you arent gonna use
[08:18] <JimBastard> lool
[08:18] <micheil> there's 67 matches in the code for jquery methods
[08:18] <micheil> of those, I'm not sure how many are unqiue
[08:19] <JimBastard> of those, one is gonna be the jQuery selector
[08:19] <JimBastard> for sure
[08:19] <JimBastard> heh if you dont believe me, go try it out
[08:19] <JimBastard> if you can get sammy to work without jQuery i'll be impressed
[08:20] <tmpvar> lol
[08:21] <JimBastard> i dont even know how you got that count
[08:21] <JimBastard> of 67
[08:21] <JimBastard> theres a lot of places where variables are set to jQuery objects then have methods called later on
[08:22] <JimBastard> $form = $(form);       path  = $form.attr('action');
[08:27] hellp has joined the channel
[08:34] <micheil> righteo.. 
[08:37] <brainproxy> aptitude says i have libgnutls-dev 2.8.3 installed; but configure for node is showing fail when checking for gnutls
[08:39] piranha has joined the channel
[08:49] teemow has joined the channel
[08:57] piranha has joined the channel
[09:03] tisba has joined the channel
[09:25] MattJ has joined the channel
[09:32] <felixge> does 'test-http-cat' fail for anybody else?
[09:33] <felixge> brainproxy: if you're using HEAD it doesn't matter, SSL support is currently nuked : |
[09:34] bmizerany has joined the channel
[09:35] kixxauth has joined the channel
[09:37] PyroPete1 has joined the channel
[09:45] <felixge> seems like server.listen() is async now but lacks a callback :|
[09:50] <brainproxy> felixge: ah gotcha, thanks for the tip :)
[09:50] <brainproxy> re: ssl
[09:52] <felixge> np
[09:59] admc has joined the channel
[10:12] pdelgallego has joined the channel
[10:20] derbumi has joined the channel
[10:27] markwubben has joined the channel
[10:28] Gruni has joined the channel
[10:39] jage has joined the channel
[10:59] unomi has joined the channel
[11:01] mfeiri has joined the channel
[11:02] javajunky has joined the channel
[11:05] kriszyp has joined the channel
[11:18] javajunky has joined the channel
[11:35] javajunky has joined the channel
[11:38] <brainproxy> trying to fix a bug in redis-node-client
[11:38] <brainproxy> could be my first github fork/patch
[11:38] <brainproxy> :D
[11:39] <brainproxy> i know I've found the problem area, and am poking at it, something to do with unicode escaping, i think
[11:39] <brainproxy> anyone know if something's changed in that regard with node.js head
[11:39] <brainproxy> that i should be aware of
[11:42] <brainproxy> this is the code that's breaking
[11:42] <brainproxy> http://pastie.org/889601
[11:42] <brainproxy> well, that's in the test.js file
[11:43] <brainproxy> if I change the %F6 value to something like 'tree', then it works fine
[11:55] sh1mmer has joined the channel
[11:57] <felixge> brainproxy: I saw a bug report regarding encoding
[11:58] <felixge> brainproxy: http://github.com/ry/node/issues#issue/81
[11:58] <brainproxy> ah
[11:58] <brainproxy> well that makes sense
[11:59] <brainproxy> as long as I don't try to pass utf8 through it then
[11:59] <brainproxy> maybe I'll be okay
[12:08] xla has joined the channel
[12:28] felixge has joined the channel
[12:28] felixge has joined the channel
[12:49] Tim_Smart has joined the channel
[12:50] teemow has joined the channel
[14:23] joshbuddy has joined the channel
[14:23] joshbuddy has joined the channel
[14:26] nsm has joined the channel
[14:26] <Wes-> can node's tcp.js events be sent to multiple listeners?
[14:28] <Wes-> Or maybe some, but not all?
[14:28] <Wes-> Like it looks like createServer can only have one event listener (the callback), but things like "end" and "data" could have multiple listeners
[14:29] <Wes-> So, I guess iterates over all of the listeners, triggering each for each event?
[14:34] alex-desktop has joined the channel
[14:40] maritz has joined the channel
[14:42] <Wes-> Argh, does emit.listeners() expose the backing representation of the listener store?
[14:42] <Wes-> I have been implementing it with an object, not an array. *hm*
[14:50] <Wes-> Oh, wait, that's an array of events for each listener, that's fine
[15:02] <Wes-> _ry: What happens when you get a read error from the socket in the tcp module?  I don't see an "error" event and close only talks about transmission errors
[15:04] rnewson has joined the channel
[15:14] micheil has joined the channel
[15:15] mnutt has joined the channel
[15:16] sh1m has joined the channel
[15:30] <mnutt> does anyone here use mustache for templating? any thoughts on getting asynchronous calls into template variables?
[15:31] <mnutt> I'd like to start the template rendering and then only block when I get to the template variable containing the async call (in this case, an httpClient call)
[15:33] keeto has joined the channel
[15:34] keeto has joined the channel
[15:34] derbumi has joined the channel
[16:10] cloudhead has joined the channel
[16:11] kriszyp has joined the channel
[16:14] dgathright has joined the channel
[16:24] logicuce has joined the channel
[16:28] confounds has joined the channel
[16:41] Yuffster has joined the channel
[16:47] <felixge> _ry: any reason test-net-fd-passing.js is disabled?
[16:50] dnolen has joined the channel
[17:16] mikeal has joined the channel
[17:21] logicuce has left the channel
[17:25] gf3 has joined the channel
[17:29] mikeal has joined the channel
[17:32] kixxauth has joined the channel
[17:34] kriskowal has joined the channel
[17:36] nsm has joined the channel
[17:38] dnolen has joined the channel
[17:49] bmizerany has joined the channel
[17:53] mikeal has joined the channel
[17:53] juvenn_ has joined the channel
[17:56] <JimBastard> mnutt: check out Mu from RayMorgan
[17:58] <felixge> mnutt: you probably really don't want this
[17:59] <mnutt> felixge: is there a better way to do it?
[17:59] <felixge> mnutt: it's actually a very hard problem. If you let your template define what queries/http/etc. stuff to execute in what order, you miss out on the concurrency node offers
[18:00] mattly has joined the channel
[18:00] <felixge> but from the other end it's also not easy to group lots of async operations together smartly
[18:00] <mnutt> felixge: when the request begins, it starts the queries.  I just want to have the template block on the responses at the correct times
[18:01] mattly has joined the channel
[18:02] <felixge> mnutt: well, you may be able to do some of that with mu
[18:04] xer0x has joined the channel
[18:04] <mnutt> is there an equivalent to the old Promise's wait() method?
[18:04] <felixge> mnutt: no
[18:07] softdrink has joined the channel
[18:13] <mjr_> Everybody wants promises, it seems.  I wonder if there's a way we can explain away this question in the documentation.
[18:14] <mattly> not having gotten into node until after promises were removed
[18:15] <mattly> i can say that i think people were using them as a crutch
[18:15] <mattly> allowing them to return values when they should have taken callbacks
[18:15] <mattly> or simply allowing them to be sloppy by not taking callbacks
[18:15] paul3 has joined the channel
[18:17] <mnutt> yeah, you're right, I'm just trying to figure out how I can do templating where some of the template values are not known when the template rendering starts
[18:20] <mjr_> Yeah, the point, IMO, of node is that it is totally non-blocking, totally asynchronous. 
[18:22] fizx has joined the channel
[18:22] <fizx> hi require("../lib/node-avro"); works from a script, but not from the repl
[18:23] <fizx> is there an issue with the repl and pwd, or something?
[18:23] <nsm> yes I think the repl's require.paths thing is broken
[18:24] <fizx> is there a ticket already open?
[18:24] <nsm> fizx, no idea
[18:27] <fizx> nsm: don't think so... just opened an issue
[18:27] <nsm> ok
[18:31] devinus has joined the channel
[18:32] <devinus> _ry: so how'd your late night coding session go?
[18:34] CodeOfficer has joined the channel
[18:35] xer0x has joined the channel
[18:37] aguynamedben has joined the channel
[18:38] lifo has joined the channel
[18:47] joel_clark has joined the channel
[18:47] <paul3> hi, is it possible to convert bunch of hex values into one binary string in js/node? for example like php function "pack".
[18:48] joshbuddy has joined the channel
[18:49] <paul3> i need this data to send it via tcp
[18:54] bronson has joined the channel
[18:56] mnutt has joined the channel
[19:06] logix812 has joined the channel
[19:07] logix812 has left the channel
[19:07] xla has joined the channel
[19:08] logix812 has joined the channel
[19:09] javajunky has joined the channel
[19:09] juvenn has joined the channel
[19:09] <logix812> Is it advisable, to keep an http request open to push data back through it to the client in node?
[19:10] <logix812> as opposed to polling
[19:11] admc has joined the channel
[19:14] pdelgallego has joined the channel
[19:18] hellp has joined the channel
[19:19] technoweenie has joined the channel
[19:20] mikeal has joined the channel
[19:24] ashb has joined the channel
[19:27] charlesjolley has joined the channel
[19:41] <paul3> is there any example of tcp.Connection usage?
[19:42] bpot has joined the channel
[19:45] <logix812> http://nodejs.org/api.html#_tcp
[19:46] <paul3> thats server code
[19:46] <logix812> scroll down a bit 
[19:46] <logix812> there is a section on tcp.Connection
[19:46] <logix812> events, etc
[19:48] <logix812> i have yet to use tcp.connect, but looking over the docs it seems pretty straight forward
[19:48] <logix812> connection, unless you were looking for a very specific implementation of it
[19:48] <paul3> just dont know how to bind events co connection object
[19:49] <paul3> i know its addlistener but when use it
[19:49] <logix812> var my_connection = tcp.createConnection(port, host="127.0.0.1");
[19:50] <logix812> my_connection.addListener("event", handler)
[19:51] <paul3> ok, thanks
[19:51] <logix812> no problem, is that what you were looking for?
[19:51] <logix812> or have you been down that route and something is amiss 
[19:54] <paul3> i think that the problem is on the other side of the socket ;)
[19:59] confounds has joined the channel
[20:00] StanAngeloff has joined the channel
[20:01] rnewson has joined the channel
[20:03] StanAngeloff has left the channel
[20:06] paul3 has left the channel
[20:10] <_ry> devinus: well - didn't get very far
[20:11] tav has joined the channel
[20:11] <_ry> tmpvar: nic
[20:11] <_ry> e
[20:11] <tmpvar> ^_^
[20:16] <devinus> imagemagick bindings....
[20:18] alexiskander has joined the channel
[20:19] gf3 has joined the channel
[20:22] <tmpvar> why not graphicsmagick?
[20:22] rnewson has joined the channel
[20:23] rnewson has left the channel
[20:23] <tmpvar> graphicsmagick is MIT licensed compared to imagemagick which is GPL.  graphicsmagick is also has a smaller memory footprint from what I understand
[20:25] mattly has joined the channel
[20:27] <tmpvar> (not to mention, faster!)
[20:37] <mattly> are there any utility libs for node that will do base64 encoding/decoding?
[20:37] <mattly> wait, /me checks the wiki
[20:38] <devinus> mattly: several
[20:38] <devinus> mattly: quick google search will turn up a few
[20:40] <devinus> tmpvar: never knew about gm
[20:42] PyroPeter has joined the channel
[20:50] erichocean has joined the channel
[20:54] markwubben has joined the channel
[20:55] nishith_ has joined the channel
[20:57] rolfb has joined the channel
[21:08] <nishith_> with long polling, what's the safe timeout time by when the server should send back a null response?
[21:09] <CIA-77> node: 03Ryan Dahl 07master * raa6a785 10/ Makefile : Add note about where to find ronn - http://bit.ly/aOQLI0
[21:09] <CIA-77> node: 03Ryan Dahl 07master * rd1b78c3 10/ lib/net.js : More efficient Stream.write - http://bit.ly/bYqL6h
[21:18] drostie has joined the channel
[21:19] javajunky has joined the channel
[21:21] <atmos> anyone using express ?
[21:27] joshbuddy has joined the channel
[21:33] nishith_ has left the channel
[21:34] nishith_ has joined the channel
[21:38] <nishith_> I'm building a user-to-user chat (not multicast) using node.js and long polling.
[21:39] <nishith_> would also be using Redis to make the chat persistent
[21:39] <nishith_> Have been reading about node.js and long polling since last few days
[21:40] <atmos> so users establish tcp connections directly to each other ?
[21:40] <nishith_> Can you help me understand what type of real-life problems I should look out for when building such a system?
[21:40] <nishith_> No, it would be through the server
[21:40] kixxauth has joined the channel
[21:40] <atmos> nishith_: if you know what you're doing then the hardest thing should be keeping up with node's api :)
[21:41] <nishith_> :) just starting off. So yeah, that would be challenging
[21:42] markwubben has joined the channel
[21:42] <nishith_> I imagine quite a few folks here might have used node.js for similar kinds of projects.
[21:45] <atmos> yeah, lots of people are doing neat shit with it
[21:45] <atmos> nishith_: there's an irc example app somewhere that'd probably be a good chunk of code to read through
[21:45] <nishith_> one of the things I had been struggling to understand.. What would I do with the stale requests? In that case, how would I make sure the recipient actually received the message
[21:45] <xla> why would u want such thing like an ack?
[21:45] <xla> send & pray
[21:46] <nishith_> :) I need to show the unread messages. Think about it as a google wave kind of a system... combining chat+messaging
[21:47] <atmos> eww !
[21:47] <atmos> ;)
[21:48] aguynamedben has joined the channel
[21:48] <nishith_> was that at the thought of finding solution to the problem.. or the idea of having a google wave kind of thing? :)
[21:48] <tmpvar> _ry, have you used avro?
[21:51] erichocean has left the channel
[21:53] fizx has joined the channel
[21:54] <nishith_> also.. another thing I had been trying to understand.. a newbie question again.. connection from user1 is listening to the connection from user2. Server times out the connection from user1 (after a certain idle time). Now before there's a new connection from user1, if user2 sends a message, that would pretty much be lost and won't be delivered to user1, right?
[21:54] <nishith_> Does this make sense?
[21:54] <nishith_> If so, anything that can be done in such a case?
[21:55] <tmpvar> queue the messages so they live on even if user1 disconnects
[21:56] <nishith_> Aah ok. Thanks!
[21:56] <tmpvar> user2 could pop/unshift from the queue and everyone is happy :P
[21:59] <nishith_> Any thoughts on how to handle stale requests?
[21:59] <KungFuHamster> put them in the microwave for about 12 seconds?
[21:59] <nishith_> :)
[21:59] <tmpvar> nishith_, not sure what you mean
[22:02] <tmpvar> nishith_, perhaps http://github.com/ry/node_chat would be helpful for ya
[22:03] <nishith_> the server sends the response to a connection that might be lost due to network failure (once again, not sure if I'm making much sense here). In such a case, the recipient would have to acknowledge the receipt of the message, I imagine
[22:04] <nishith_> Thanks! I'll check it out.
[22:04] <devinus> how could i async stat a bunch of files to test if they're files or dirs?
[22:06] RayMorgan has joined the channel
[22:07] nishith_ has left the channel
[22:10] <logix812> which is more advisable given a pool of about 75 potential connections.  I can never close the request, or I can poll.  The object is to provide updates as close to possible when they happen.  
[22:10] <logix812> they would all be http requests
[22:11] creationix has joined the channel
[22:11] <logix812> er.. response
[22:12] <devinus> logix812: long polling
[22:14] <logix812> devinus: as I understand long polling, it's basically keeping the connection open until new data is available, or after a fixed timeout period. at which time the connection is closed, and a new request is opened, ya?
[22:14] <devinus> logix812: yep
[22:17] <logix812> devinus: so never closing the http connection is not advisable.  This going to be used for a desktop application, won't be running through a browser
[22:18] <logix812> just want to be sure I have the right idea
[22:18] <creationix> _ry, how did require paths change as a result of putting the core libraries into the node executible?
[22:19] <creationix> is there somewhere where you can look up the embedded libraries available?
[22:19] JoePeck_ has joined the channel
[22:35] javajunky has joined the channel
[22:36] silentrob has joined the channel
[22:36] teemow has joined the channel
[22:42] softdrink has joined the channel
[22:45] <devinus> could anybody tell me why this would give me an infinite loop: http://pastie.org/890212 ?
[22:46] <devinus> bleh nvm :-/
[23:03] bmizerany has joined the channel
[23:11] JimBastard has joined the channel
[23:19] stalled has joined the channel
[23:33] sveisvei has joined the channel
[23:38] cloudhead has joined the channel
[23:46] mbbx6spp has joined the channel
[23:52] logix812 has left the channel
[23:52] alexiskander has joined the channel
[23:55] <mbbx6spp> I have a question about accessing the Node version using Javascript.  Where can I access this?
[23:56] <mbbx6spp> as in without running sys.exec('node -v', function (err, stdout, stderr) { ..... })
[23:57] <mbbx6spp> I see the NODE_VERSION in the C header, but no JS binding to yet.  Any info would be helpful, thanks!
[23:57] <inimino> mbbx6spp: process.version
