[00:03] bpot has joined the channel
[00:04] polotek has joined the channel
[00:05] xer0x has joined the channel
[00:06] polotek has joined the channel
[00:11] charlesjolley has joined the channel
[00:13] <mikeal1> ok, after adjusting, commas in front ROCKS
[00:13] <gwoo> yeah it does
[00:13] <JimBastard> i was trying to tell some people that
[00:13] <JimBastard> and most were like, jsonlint in textmate fu
[00:14] <polotek> was looking at some code doing the comma thing the other day
[00:14] <polotek> weirded me out
[00:14] <JimBastard> so i broke up with this girl and she decided she had enough of the east coast and just got on a plane to cali with like no money or place to go
[00:15] <JimBastard> well break up is just a phrase, more like decided to work on opensource for a month and not talk to her
[00:15] <JimBastard> oofa
[00:15] <JimBastard> sup polotek 
[00:15] <JimBastard> <--- marak
[00:16] <polotek> word. how goes it?
[00:16] <polotek> still haven't actually used hook.io for anything useful
[00:16] <polotek> but getting there
[00:16] <gwoo> JimBastard: haha
[00:16] <JimBastard> its not close to production use
[00:16] <gwoo> but it's fun :)
[00:16] <JimBastard> i got talk to about it at jsconf which was uber amazing
[00:17] <polotek> missed jsconf again this year
[00:17] <JimBastard> its getting closer and closer to a stable release though
[00:17] <JimBastard> one piece at a time
[00:17] <gwoo> JimBastard: did you slideshare?
[00:17] <polotek> how the hell do you get a ticket?
[00:17] <JimBastard> i didnt
[00:17] <JimBastard> ;-)
[00:17] <polotek> oh... yeah
[00:17] <JimBastard> i won the best presentation at scurvy conf, because i can yell really loud and incite crowds
[00:17] <gwoo> and drink beer
[00:17] <JimBastard> gwoo: no my slides were terrible, and im nervous enough about the video that will come out
[00:17] <gwoo> haah
[00:17] <JimBastard> i put it together the night before and morning of
[00:18] <JimBastard> i wasnt prepared to do a preso that long, or even at all
[00:18] <JimBastard> hook.io is a bit too young to be talking about like that
[00:18] <JimBastard> but it was still really awesome, gotta thank everyone who yelled for me
[00:18] <gwoo> gotta start somewhere
[00:19] <polotek> it's good cause now you can't get bored and bail on it
[00:19] <polotek> you've got a fanbase
[00:19] <gwoo> exactly
[00:19] <gwoo> JimBastard: repay them with stable :)
[00:19] <JimBastard> im committed for 6 months
[00:19] <JimBastard> im already 2 in
[00:19] <JimBastard> after that i will review
[00:25] polotek has left the channel
[00:26] polotek has joined the channel
[00:37] batasrki has joined the channel
[00:37] <mikeal1> does anyone have a client for x-www-form-urlencoded
[00:39] <mjr_> you mean code on the server side to parse form submissions?
[00:39] <mikeal1> i need it both ways
[00:40] <mikeal1> a parser into an object and a conversion from an object in to a form post
[00:40] <mikeal1> i wish it was identical to querystring.stringify but it's not
[00:43] <gwoo> mikeal1: what's the difference with stringify?
[00:43] <gwoo> + vs %20 ?
[00:44] <mikeal1> it's not necessary to escape
[00:44] <mikeal1> nevermind
[00:44] <mikeal1> that wasn't the problem
[00:48] cedricv has joined the channel
[00:55] batasrki has joined the channel
[01:01] derferman has joined the channel
[01:02] alex-desktop has joined the channel
[01:02] <JimBastard> hey rektide i was trying to grok what you were doing with pipe layer but i dont see much docs. you got a summary anywhere?
[01:04] mrjjwright has joined the channel
[01:08] mikeal1 has joined the channel
[01:09] jtaby_ has joined the channel
[01:13] <captainbenis> it seems Socket.IO-node is broken against node 1.90
[01:13] <captainbenis> any updates?
[01:15] PyroPete1 has joined the channel
[01:22] jtaby_ has joined the channel
[01:26] tlrobinson_ has joined the channel
[01:26] <MattJ> captainbenis: Did you manage to get it working against other versions?
[01:30] malkomalko has joined the channel
[01:40] <captainbenis> yeah it worked against old versions of node
[01:40] <captainbenis> i've rolled my own longpolling
[01:40] <captainbenis> i'll stay using that.
[01:45] captainbenis has left the channel
[01:50] cruxst has joined the channel
[01:54] isaacs_mobile has joined the channel
[01:55] <isaacs_mobile> mikeal: querystring.stringify isn't it?
[01:56] <isaacs_mobile> It should be exactly that
[01:59] mikeal1 has joined the channel
[02:03] eMyller has left the channel
[02:14] bpot has joined the channel
[02:45] steadicat has joined the channel
[02:53] markwubben has joined the channel
[02:55] WALoeIII has joined the channel
[03:01] pavelz has joined the channel
[03:08] icey has joined the channel
[03:18] pavelz has joined the channel
[03:18] <_ry> MattJ: malloc?
[03:19] <MattJ> Mmm, ok :)
[03:19] <_ry> MattJ: or what do you mena?
[03:19] <_ry> most of the structures are inside v8's heap
[03:20] <_ry> but what's done outside of v8 uses normal malloc
[03:20] <MattJ> I had a "leak" in my server (Lua rather than Javascript though) - couldn't track it down, except it appeared it could simply be fragmentation
[03:21] <MattJ> I switched to jemalloc and it improved drastically
[03:21] <_ry> yeah, it could be that
[03:21] <_ry> i'm doing these Buffer things now which means a lot more is being done outside v8
[03:22] <MattJ> Might be worth looking into then, if you don't find evidence of a leak
[03:28] jtaby_ has joined the channel
[03:30] PyroPete1 has joined the channel
[03:41] JimBastard_ has joined the channel
[04:00] <blazzy_> has anyone out there made any progress on a windows port?
[04:01] <JimBastard_> negative
[04:01] <blazzy_> i've been living in motels with only a windows netbook for the past week or so.
[04:04] <icey> blazzy_: have you considered setting up a linode or something to hack on? that's what i ended up doing for the times i'm stuck on windows boxes
[04:05] <blazzy_> icey: i do have a vps, but the latency on the internet connections i've been getting make ssh painful to use.
[04:06] <JimBastard> sucks man, install ubuntu
[04:06] <JimBastard> its easy
[04:06] <icey> blazzy_: ahh that's unfortunate :/ 
[04:06] <icey> my old way of doing it was ubuntu in a vm
[04:06] <JimBastard> you can have node running in like an hour if you got a good connection
[04:06] <JimBastard> just do a dual boot
[04:06] <JimBastard> its soo easy 
[04:06] <JimBastard> ubuntu
[04:14] joshbuddy has joined the channel
[04:21] jtaby_ has joined the channel
[04:23] <blazzy_> JimBastard: I decided to find the nearest electronics store and buy another machine.
[04:23] RJ2 has joined the channel
[04:23] RJ2 has joined the channel
[04:31] siculars has joined the channel
[04:34] JimBastard_ has joined the channel
[04:39] dgathright has joined the channel
[05:08] cruxst has joined the channel
[05:10] Ned__ has joined the channel
[05:11] <Ned__> I have a weird issue, my code is http://paste.dollyfish.net.nz/0b9023 - whenever the data handler fires, it's always outputting the last server
[05:12] <Ned__> by my reckoning it should be outputting the server that was in scope when the anon function was made ?
[05:12] charlesjolley has joined the channel
[05:12] hassox has joined the channel
[05:18] <mape> Ned__: how about push()ing the servers into an array and proc[i].stdout.addListener?
[05:19] <mape> server and proc
[05:19] <Ned__> mape: sure .. but I'd still like to know why my was wasn't working ?
[05:20] <mape> closure perhaps?
[05:20] <Ned__> well, it is a closure
[05:20] <Ned__> but server is inside the loop right ?
[05:20] <mape> Yeah
[05:20] <Ned__> so doesn't that mean it's scoped inside the loop ?
[05:20] admc has joined the channel
[05:20] <Ned__> or am I failing at scoping ?
[05:21] <Ned__> ACTION tries something
[05:21] <mape> From what I recall there isn't blockscope
[05:21] <Ned__> right
[05:21] <Ned__> (function () { // mycode })();
[05:21] <Ned__> I'll try that
[05:21] <Ned__> see if it works
[05:21] <Ned__> :p
[05:21] <mape> yeah
[05:22] <JimBastard_> whats the general strategy for hot loading nginx conf files? 
[05:22] <Ned__> JimBastard_: wrong channel ?
[05:22] <Ned__> :p
[05:22] <mape> Doing it real quick? ;)
[05:22] <JimBastard_> i cant anyone to talk to me in #nginx
[05:22] <Ned__> mape: ah ha ... that works :-)
[05:22] <Ned__> JimBastard_: nginx -s reload
[05:22] <Ned__> is what I use
[05:23] <Ned__> nginx -t <--- run that first though
[05:23] <Ned__> :p
[05:23] <JimBastard_> of course
[05:23] <JimBastard_> does that really work lol im such a noob
[05:23] <Ned__> heh
[05:27] <Ned__> is there an easy way to get an Readable Stream's data event to give you lines ?
[05:27] <Ned__> i.e. provide a record separator or something ?
[05:28] <JimBastard_> what are you streaming?
[05:28] <Ned__> output from a tail command
[05:28] <Ned__> JimBastard_: http://paste.dollyfish.net.nz/0b9023
[05:29] <JimBastard_> sorry i think i just had a sezuire reading that
[05:29] charlesjolley has joined the channel
[05:30] <Ned__> JimBastard_: huh ?, why ?
[05:30] <Ned__> what's wrong with it ?
[05:30] <JimBastard_> woah
[05:30] <JimBastard_> wow
[05:30] <JimBastard_> the site did some crazy shit
[05:30] <Ned__> oh, yeah
[05:30] <JimBastard_> maybe the style sheet didnt load
[05:30] <Ned__> sometimes it's a bit busted
[05:30] <Ned__> it's the syntax highlighting thing :-(
[05:30] <mape> Hehe
[05:30] <JimBastard_> try gist?
[05:30] <Ned__> I need to fix it ... 
[05:30] <JimBastard_> gist.github.com
[05:30] <Ned__> JimBastard_: just reload
[05:30] <mape> Ned__: You almost killed someone right there :/
[05:30] <JimBastard_> i can fork that
[05:30] <JimBastard_> reading now
[05:31] <Ned__> http://gist.github.com/372083
[05:31] <mape> Need to be careful with those hilight thingys
[05:31] <JimBastard_> lol
[05:32] <JimBastard_> http://gist.github.com/372084
[05:32] cainus_ has joined the channel
[05:32] <mape> Ned__: Taken a look at prowl? (if you use an iPhone)
[05:32] <JimBastard_> i mean you could look for \n right?
[05:33] <Ned__> mape: I do use an iPhone
[05:33] <Ned__> what's it do ?
[05:33] <Ned__> JimBastard_: yes, I could split it up myself
[05:33] <mape> Apple Push notifications through API
[05:33] <mape> I was thinking of building a node module for it
[05:33] <mape> Which would take like 5min
[05:34] <mape> pretty much a get request to their server with your API-key, title and message
[05:34] <mape> So you could do var notification = new Prowl('apikey'); notification.send('Something borked', stacktrace);
[05:34] <mape> And that gets pushed right away to your iPhone
[05:35] <mape> Costs 2 bucks or something like that
[05:35] <mape> And then everything else is free
[05:35] <mape> So unlimited push notifications with a handy way of sending them
[05:36] <mape> http://prowl.weks.net/
[05:38] <mape> You can set priority and "silent hours" as well
[05:39] <mape> so it if is a kernel panic it bleeps in the middle of the night otherwise it is silent
[05:42] <Ned__> mape: err, prowl is an app on the phone ?
[05:42] <mape> Yes
[05:42] <Ned__> that just pops up when it gets push notifications ?
[05:42] <mape> Nope it sends standard apple push notifications
[05:42] <mape> And then the app lists them
[05:42] <Ned__> what I mean is, the app already exists
[05:43] <Ned__> and I can just install the app
[05:43] <mape> Yeah
[05:43] <Ned__> then start sending myself messages via their API ?
[05:43] <mape> Yes
[05:43] <Ned__> that is kind of cool
[05:43] <Ned__> even without a node.js client
[05:43] <Ned__> ;-)
[05:43] <mape> Just that there isn't a node module for it now (I will write it as soon as I get of work today)
[05:43] <Ned__> :-)
[05:43] <mape> Hehe yeah it is really handy, I've already built a service around it
[05:43] <mape> http://notifikation.nu/
[05:43] <Ned__> HHmmm, so Growl is a standard ?
[05:44] <mape> Well kinda
[05:44] <Aria> Commonly used on MacOS
[05:44] <Ned__> heh, that's very ... non-English
[05:44] <Ned__> :p
[05:44] <mape> It has been ported to all OSes
[05:44] <Aria> Rather rarely used on other OSes, though
[05:44] <mape> Ned__: Hehe yeah but you should get the idea clicking the video
[05:44] <Ned__> cool
[05:44] <Ned__> oh well, it's hometime here
[05:44] <Ned__> I might have a look later tonight :-)
[05:44] <mape> It is pretty much a bookmarklet that you run on a foreign site, click what you want, and when it changes you get a push notification
[05:44] <mape> Hopefully I have a module for then ;)
[05:50] tlrobinson_ has joined the channel
[05:52] captainbenis has joined the channel
[05:56] tk has joined the channel
[06:07] <JimBastard_> can you setup node to be a DNS server?
[06:09] <technoweenie> dont see why not if you follow the dns protocol?
[06:09] <JimBastard_> i need to host a shit ton of subdomains
[06:09] <JimBastard_> im such a DNS noob though
[06:10] <JimBastard_> is there any work thats been done towards this already? does having the dns module in node help?
[06:10] dgathright has joined the channel
[06:11] ahc has joined the channel
[06:11] <technoweenie> not sure really
[06:11] <technoweenie> afaik the dns module is for client requests
[06:12] <JimBastard_> thats what i thought
[06:12] <JimBastard_> im building a node-balancer right now, as well as some other goodies. 
[06:12] <JimBastard_> im gonna say fuck the subdomains for now to keep it simple, use like a userspace
[06:12] <JimBastard_> blah.com/user/ instead of user.blah.com
[06:13] sztanpet has joined the channel
[06:13] <JimBastard_> i finally got my roommate into node hes reading all the node source from top to bottom now going, damn thats pretty clever using a VM like that.
[06:17] <technoweenie> cool
[06:17] <technoweenie> the problem with blah.com/user is when people try to create users like /help 
[06:17] <technoweenie> same with subdomains i guess... blog.blah.com
[06:22] saikat has joined the channel
[06:23] <saikat> does anyone know if there are any web application frameworks (something that abstracts away the dealing with operational transformations and keeping client documents in sync, like google wave) that exist built on top of websockets? (or anything at all other than google wave?)
[06:23] <JimBastard_> technoweenie: that doesnt really apply in my use case
[06:25] <technoweenie> saikat: etherpad is open source
[06:25] KungFuHamster_ has joined the channel
[06:26] <technoweenie> http://code.google.com/p/etherpad/
[06:26] <technoweenie> google hired them to work on wave
[06:27] <saikat> ack seems like i had some lag
[06:27] <saikat> technoweenie: ah true - yeah i was planning on checking out how etherpad did things
[06:27] <saikat> just trying to see if there are other frameworks out there as well that i'm completely missing
[06:27] <saikat> i also saw mobwrite
[06:27] <saikat> though i'm not sure how much that actually does
[06:28] <saikat> but thanks =)
[06:28] bpot has joined the channel
[06:29] <technoweenie> http://www.lshift.net/blog/2009/03/02/evserver-part3-simplified-etherpad-clone
[06:29] <technoweenie> there was at least 1 etherpad clone that was started when they shut down
[06:29] <technoweenie> though i dont know if they gave up when etherpad was released as oss
[06:29] <saikat> hadn't seen that post before - thanks
[06:30] towski has joined the channel
[06:35] dgathright_ has joined the channel
[06:37] sztanpet has joined the channel
[06:38] Azeroth-IsWorkin has joined the channel
[06:47] <JimBastard_> sup mikeal you alive
[06:48] <JimBastard_> whats up with http://github.com/mikeal/node.proxy.js
[06:48] neytema has joined the channel
[06:53] dgathright_ has joined the channel
[07:07] mikeal1 has joined the channel
[07:12] micheil has joined the channel
[07:13] N` has joined the channel
[07:16] Azeroth-Work has joined the channel
[07:17] dobe has joined the channel
[07:17] WALoeIII has joined the channel
[07:22] felixge has joined the channel
[07:22] kjeldahl_ has joined the channel
[07:23] huge has joined the channel
[07:24] <_ry> felixge: hey
[07:25] <_ry> felixge: igoing to reply to your gist in email
[07:30] <felixge> _ry: k
[07:31] <felixge> _ry: I also some some missing scope->Close() in node_stdio.cc
[07:31] <felixge> http://github.com/ry/node/blob/master/src/node_stdio.cc#L57
[07:33] Kung_Fu_Hamster has joined the channel
[07:36] <_ry> felixge: returning Undefined() doesn't need a scope.Close
[07:36] <_ry> (unclear to me why)
[07:37] <felixge> _ry: ah ok, I thought it was *always* needed :)
[07:37] ewdafa has joined the channel
[07:38] towski has joined the channel
[07:42] <felixge> _ry: what about stdin, can we remove the coupling from there as well?
[07:42] <felixge> (just read your email)
[07:42] PyroPeter has joined the channel
[07:52] mcarter has joined the channel
[07:52] huge has left the channel
[07:56] piranha has joined the channel
[07:57] javajunky has joined the channel
[07:59] derbumi has joined the channel
[08:06] felixge has joined the channel
[08:06] felixge has joined the channel
[08:06] <felixge> _ry: did you see my question about stdin?
[08:08] <felixge> _ry: nvm, got your email
[08:14] javajunky has joined the channel
[08:20] TomY has joined the channel
[08:35] tlrobinson_ has joined the channel
[08:41] xla has joined the channel
[08:53] cmlenz has joined the channel
[08:58] tbassetto has joined the channel
[09:02] <felixge> anybody around?
[09:02] <felixge> I'm looking for a good name for a high level node http library
[09:02] <felixge> something in the spirit of cURL
[09:05] ewdafa has joined the channel
[09:05] <felixge> httpinator
[09:08] <mape> felixge: Lovely, just what I've been looking for
[09:08] <felixge> mape: essentially I want a lib that both helps me with incoming requests as well as outgoing ones
[09:09] <felixge> I mainly need to receive as well as send file uploads
[09:09] <felixge> but I want a nice lib that's easy to hack and extend for the community
[09:09] <mape> Yeah exactly, easy way to proxy stuff, fetch site source and send post-data towards external sources
[09:10] <mape> Hmm
[09:10] <mape> nULR?
[09:10] <mape> "To cut with reeding or fluting on the edge of, as coins, the heads of screws, etc.; to knurl."
[09:10] javajunky has joined the channel
[09:11] <felixge> hm
[09:11] <felixge> I think httpinator isn't so bad
[09:12] <mape> Only issue I have with that is that it doesn't feel very "fetch http"
[09:12] <mape> rather httpd ish
[09:12] <felixge> well, I need a lib that doesn't just fetch
[09:12] <felixge> it also parses incoming
[09:13] <mape> Receive http requests?
[09:13] <felixge> yes
[09:13] <mape> Or fetch through http and parse that?
[09:13] <mape> Ah k
[09:13] <felixge> receive multipart uploads
[09:13] <felixge> (files)
[09:13] <felixge> no
[09:13] <mape> k
[09:13] <felixge> requests that a node server receives
[09:13] <felixge> I need those parsed
[09:13] psynaptic has joined the channel
[09:13] <mape> Then yeah, it should work
[09:13] <mape> httpBot
[09:14] <mape> Someone is already using that though
[09:14] <mape> httpUbiquity
[09:15] <mape> but mozilla is using that
[09:15] <felixge> https://gist.github.com/dcc150709a611597f826
[09:15] <felixge> is the api I have in mind for incoming requests
[09:15] <felixge> httpinator wouldn't care if it's multipart or a regular POST
[09:16] <mape> Looks handy
[09:17] <felixge> it should be
[09:17] <mape> Only issue I have with node nowadays is how to handle make modules that depend on others
[09:17] <felixge> mape: I have a folder 'dep/' where I directly 'git clone' dependencies into
[09:17] <mape> Feels like an itch to do that right now
[09:17] <mape> ah k
[09:17] <javajunky> I use one of the many package managers ;)
[09:17] <felixge> using: http://debuggable.com/posts/git-fake-submodules:4b563ee4-f3cc-4061-967e-0e48cbdd56cb
[09:17] <mape> and link to sub gits?
[09:18] <felixge> I don't use real sub modules, they suck
[09:18] <mape> k
[09:18] <felixge> so yeah, all my dependencies live along my code base
[09:18] <felixge> I'm very picky about my dependencies so
[09:18] <felixge> :)
[09:18] <mape> Ah k
[09:18] <mape> Well hopefully I would depend on yours so ;)
[09:18] <felixge> :)
[09:19] <sveisvei> why not just call it nodefetcher
[09:19] <javajunky> mape, for me at least kiwi works well as its' packages express dependencies on other ones which makes the task relatively simple .. however I do have to revert to using submodules or NODE_LIBRARIES type tactics sometimes :(
[09:19] <mape> So you git commit the dependencies .git and the user runs pull on those?
[09:19] <sveisvei> httpfetcher etc
[09:19] <mape> I just put everything in .node_libraries
[09:19] <javajunky> thats fine until you need multiple versions of things at the same time.
[09:19] <mape> but yeah, hopefully I'll release my first module on github soon and don't really know how to go about it
[09:20] <mape> I really just use one, but when I have projects in different foldes
[09:20] <mape> Rather update 1 that is used in 10 projects that all separate
[09:20] <javajunky> I'd suggest adding a package.json and a seed.yml to cover your bases, and make the folder structure like the commonjs recommended structure.
[09:21] <mape> Might be a good idea for someone in the know to make a "example" module
[09:21] <mape> Best case with everything, what info should be in, the structure, naming and what not
[09:21] <mape> Some dont prefix with node- some do nodejs- some don't put stuff in lib/ and don't have examples etc
[09:21] <javajunky> mape: the problem is there are (*now with seedjs) at least 3 competing package managers (kiwi & npm)   … I tend to name my git projects node-foo but the packages just get called 'foo' .. as its somewhat redundant in the package manager for node to prefix with node ;) 
[09:22] <javajunky> they *should* (CommonJs) put stuff in lib .. and yeah we don't always write examples ;)
[09:22] <mape> True, but nice if you search github for stuff
[09:22] <mape> or google
[09:22] hellp has joined the channel
[09:22] <javajunky> mape: yes, hence why I prefix with node- in github, but leave it off whennaming the package! 
[09:22] <mape> Ah yeah, yeah it is nameOfModule.js but project node-nameOfModule
[09:22] <mape> yeah
[09:23] <javajunky> for example, my oauth client is 'node-oauth' in github, but 'oauth' in kiwi
[09:23] <mape> yeah yeah yeah
[09:23] <mape> ACTION puts hand in the air...
[09:23] <mape> That seems to be the best way to go
[09:24] <javajunky> well people have issues with that approach even (you can't please all of the people all of the time) ..  there are many people  who fundamentally disagree with package management full stop.. but I think for entry-level people its a must-have ! :) .. once you get to grips with things then by all means choose to manage this stuff yourself, kiwi is quite nice, because if used properly its pretty non-invasive (npm may also be, not experienced enough with)
[09:26] <mape> Well the naming doesn't really have to do with managers? Just nice to have something comformed
[09:26] <mape> *n
[09:27] <javajunky> well the folder you install into is up to you when you git clone or git submodule .. you can call it whatever you want locally ?
[09:27] <sveisvei> felixge: httpninator isnt to shabby:), but node-httpfetcher naming-style might be more explanatory,i`m all for simple names - then you dont need an long introduction describing what it really is, you just know 
[09:27] <mape> Sure, I just like people around me being "neat" 
[09:28] <javajunky> you must be fun to live with ;) 
[09:28] <felixge> sveisvei: fetcher is not what this project is about so
[09:28] <mape> Hehe for sure
[09:28] <felixge> sveisvei: I mean it's about parsing incoming http streams as well as constructing outgoing ones
[09:28] <felixge> that is, offering high-level abstractions for it
[09:28] <mape> httpUbiquity seems suitable for something like that, but yeah
[09:29] <mape> httpHelper?
[09:29] <mape> httpServant?
[09:29] <sveisvei> felixge:  ah,yeah, but you get my drift
[09:30] <felixge> sveisvei: I do, just can't think of another name I like yet :)
[09:31] <sveisvei> felixge:  do as people do with kids, just wait with naming :P
[09:31] <felixge> another name I was thinking of is 'node-form-data'
[09:31] <sveisvei> that at least tells something of what it does
[09:31] <felixge> sveisvei: I have so many kids, that's just unreasonable!
[09:31] <felixge> :)
[09:32] <sveisvei> but arent they just ugly and dirty?
[09:32] <sveisvei> *hehe*
[09:32] dobe_ has joined the channel
[09:32] <felixge> sveisvei: no, some sit on the couch as well :)
[09:32] <felixge> I really like this lib http://allseeing-i.com/ASIHTTPRequest/How-to-use
[09:32] <felixge> that guy groks HTTP
[09:37] <sveisvei> felixge:  btw, Dirty is outside atm?  
[09:37] <felixge> sveisvei: I have a almost finished version on disk which I was gonna finish during my flight, but the volcano fucked that up :|
[09:38] <sveisvei> snap, you didnt make it over?
[09:40] <felixge> sveisvei: no
[09:40] <sveisvei> felixge: jsconf.eu next then, thats at least local for you.
[09:41] <felixge> yeah
[09:42] <mape> Where is it?
[09:43] <sveisvei> Berlin (last year was uber nice)
[09:43] <mape> Ah neat
[09:43] <felixge> sveisvei: where are u from?
[09:43] <sveisvei> Norway
[09:43] <mape> �k p� tur
[09:44] <sveisvei> mape: :)
[09:44] <felixge> sveisvei: do you think you're gonna make it down to berlin again this year?
[09:44] <felixge> I think the early tickets are already available: http://de.amiando.com/jsconfeu.html?page=392146
[09:45] <sveisvei> felixge:  oh yes, trying to bring some of my js colleagues as well
[09:45] <sveisvei> oh, they are??...
[09:45] <felixge> I found this link somewhere
[09:45] <felixge> I'm still working on confirming it's for realz
[09:45] <felixge> ;)
[09:45] <felixge> but if it is I'll get my tickets right away
[09:45] <sveisvei> hehe, lols...
[09:45] <felixge> knowing how fast they sell out
[09:45] <sveisvei> hmm, check with janl :P
[09:46] <sveisvei> yeah, I think these are going fast
[09:46] <mape> How many are they selling?
[09:46] <mape> How much spread language wise was there last year?
[09:47] <felixge> not sure how many they really sell, the sponsors get lots of free tickets
[09:47] <mape> k
[09:47] <felixge> but I'd say ~100
[09:47] <sveisvei> its eu, so its abit fragmentet? But most geeks speek english, right?
[09:47] <felixge> maybe a bit more
[09:47] <felixge> yeah, english
[09:47] <mape> Yeah, my german isn't that good so..
[09:47] <felixge> all talks were in english
[09:47] <felixge> I assume they'll be english again this year
[09:47] <mape> But most attendants were german?
[09:48] <sveisvei> I didnt get that impression mape
[09:48] <mape> k
[09:48] <javajunky> the germans, in fact the whole of europe really has a really good grasp of english, the english less so ;) 
[09:48] <felixge> mape: I think there were a lot of germans, but it was pretty international
[09:48] <sveisvei> there wher a gang of 10 sweedes at least :P
[09:48] <mape> Ah neat
[09:48] <sveisvei> and alot of french ppl
[09:48] <mape> At least there were some good looking people around then
[09:49] <felixge> mape: ?
[09:49] <mape> felixge: bad joke about swedes being good looking
[09:49] <mape> Not sure that applies to guys though ;)
[09:51] <sveisvei> felixge:  let me know when*/if you confirm that these tickets are real
[09:54] <felixge> sveisvei: will do
[09:54] <felixge> ACTION will buy all of them and get rich selling them to desperate people
[09:54] <felixge> :)
[09:54] <felixge> like: http://iwilldoalmostanythingforajsconfticket.com/
[09:54] <felixge> :D
[09:54] <sveisvei> felixge:  looks like it, same *vendor* as last time
[09:55] <sveisvei> hehe
[09:55] <felixge> sveisvei: yeah, but I'm still gonna wait for confirmation before buying my tickets ;)
[09:55] derbumi has joined the channel
[09:57] <sveisvei> there where 226 participants last year if this list is correct:http://www.amiando.com/jsconfeu09.html?page=310094#EventGuestListPanel, probabaly isnt...
[10:00] <felixge> sveisvei: oh I think there will be more tickets, just more expensive
[10:00] <felixge> ;)
[10:00] <felixge> (that list you linked to also contains people who did not pay for a ticket)
[10:01] <sveisvei> Yeah, didnt make sense that 200ish ppl would fit inside that room
[10:06] teemow has joined the channel
[10:15] maritz has joined the channel
[10:20] hassox has joined the channel
[10:29] rolfb has joined the channel
[10:32] iwasbiggs has joined the channel
[11:00] ssteinerX has joined the channel
[12:02] TheEnd2012 has joined the channel
[12:03] micheil has joined the channel
[12:03] pavelz has joined the channel
[12:03] pkrumins has joined the channel
[12:03] mediacoder has joined the channel
[12:03] JshWright has joined the channel
[12:11] jed_ has joined the channel
[12:12] kriszyp_afk has joined the channel
[12:17] kriszyp_afk has joined the channel
[12:18] demolithion has joined the channel
[12:19] sveisvei has joined the channel
[12:21] siculars has joined the channel
[13:03] jherdman has joined the channel
[13:07] justinlilly has left the channel
[13:08] davidsklar has joined the channel
[13:11] dnolen has joined the channel
[13:18] felixge has joined the channel
[13:18] felixge has joined the channel
[13:20] <felixge> _ry: you're not up yet by any chance?
[13:28] <jed_> i'm not sure anyone is awake in SF at this hour.
[13:28] <felixge> jed_: but you are! That's even better, meant to talk to you as well :)
[13:28] <felixge> jed_: I heard you rocked that talk!
[13:29] <jed_> i'm really not looking forward to the video.
[13:29] <jed_> i think i blew through it way too fast.
[13:29] <jed_> 30 minutes exactly, which woulda been fine for the b-slot.
[13:30] <jed_> but yeah, i think it went pretty well.
[13:30] <felixge> jed_: well, there were a lot of tweets, people were very interested 
[13:30] <felixge> :)
[13:30] <felixge> anyway, I was gonna ask you a fab question
[13:30] <jed_> yeah, gotta get cracking on getting tests and docs in shape.
[13:30] <jed_> oh yah?
[13:30] <felixge> I'm working on a new module called 'formidable' meant to parse file uploads but also to submit file uploads
[13:30] <felixge> (essentially a module that makes it easy to work with web forms in both directions)
[13:31] <felixge> I really also want it to work with fab
[13:31] <jed_> okay.
[13:32] <felixge> does fab allow me to get the raw incoming buffer chunks?
[13:32] <felixge> (as in really buffers, not the strings node used to give out)
[13:32] <jed_> indeed.
[13:32] <jed_> all (fab) does is take whatever node sends
[13:32] <jed_> and put it in a { body } object.
[13:33] <jed_> i'm going to rewrite the templates to use buffers outgoing too.
[13:33] ithinkihaveacat has joined the channel
[13:33] <felixge> sweet
[13:33] <jed_> (ray morgan is going to do the same for mu)
[13:34] <felixge> jed_: ok, I guess in that case I'll just have to figure out if it makes sense to do this as an app
[13:34] <felixge> jed_: or as a lib to be used within an app
[13:35] kevwil has joined the channel
[13:35] <jed_> felixge: i think this could this could be done in a bunch of apps.
[13:36] <jed_> i'd really like to keep each app small enough to fit in one page.
[13:36] <jed_> felixge: lemme know if you need any help, i should probably set up a wiki for external apps that folks develop.
[13:37] <felixge> jed_: I'll let you know! :)
[13:38] <jed_> so, you're thinking of handling multi-part, for example?
[13:38] <felixge> jed_: let me make you a gist with the API I have in mind
[13:40] <jed_> okay, cool!
[13:41] <felixge> jed_: https://gist.github.com/1b76983c27398f2e5be3
[13:42] <jed_> checking...
[13:42] herbySk has joined the channel
[13:43] <jed_> felixge: got it.
[13:44] <jed_> felixge: so the question is whether to have one event or two, for files and fields?
[13:44] <jed_> felixge: is there a case where you would need to differentiate?
[13:44] <felixge> I want to provide 3 levels of abstraction
[13:45] <felixge> level 1 (not shown), would just emit an event for each part where the part object is a stream
[13:45] <felixge> level 2 (the last example): is a little more high level, it recognizes the meaning of the different parts, writes files into temporary files, and buffers and unescapes field data
[13:46] <felixge> level 3 (first example): creates 2 key-value hashes, one for normal fields, and one for files
[13:46] <felixge> the API would be identical for normal requests and multipart ones (but only multipart ones will ever emit files)
[13:47] <felixge> I'm not quite sure how I'm going to expose each level exactly yet, but I think it can be done
[13:47] <felixge> so once I know the exact API we'd need to decide what would be the most natural way to do this in fab
[13:47] <felixge> assuming that fab users would like to have all 3 levels of detailness available to them as well
[13:48] <jed_> felixge: well, i think you might be able to write each as an app.
[13:48] <jed_> where the high-levels are apps that wrap the lower levels.
[13:48] <jed_> (so you can decide how much overhead you want to incur)
[13:48] <jed_> i need to head to breakfast with a friend, but let's chat later today, okay?
[13:49] <felixge> jed_: sure, enjoy breakfast! :)
[13:49] <jed_> felixge: will do! first non-bacon breakfast in a looooong time.
[13:49] <jed_> felixge: aight, talk to you soon!
[13:49] <felixge> ttyl
[13:52] voodootikigod_ has joined the channel
[13:57] ncb000gt has joined the channel
[14:00] cloudhead has joined the channel
[14:03] gf3 has joined the channel
[14:03] gf3 has joined the channel
[14:09] alex-desktop has joined the channel
[14:12] cloudhead has joined the channel
[14:18] Azeroth-Working has joined the channel
[14:22] JAAulde has joined the channel
[14:22] JAAulde has joined the channel
[14:23] Yuffster has joined the channel
[14:24] <nefD> blargh.. still trying to find a decent script/service that'll let me monitor a page for changes and show me diff's :P
[14:24] <nefD> getting difficult to keep up with new modules on the node github wiki page
[14:25] <mape> nefD: let me look a second, know there were tons of other sites like the one I made
[14:25] <nefD> mape:  Thanks muchly!
[14:26] <mape> nefD: http://notifo.com/
[14:26] <nefD> I found one or two, but they were riddled with flash ads, so I was very skeptical about pointing them at anything node related (and especially giving over my email addy)
[14:27] <mape> http://femtoo.com/
[14:27] avidal has joined the channel
[14:27] <mape> http://notify.me/
[14:27] aryounce has joined the channel
[14:27] <nefD> ahh, awesome.. thanks again
[14:28] <nefD> i almost decided to just write up some kind of monitoring service/daemon process myself, but got a bit sidetracked :P
[14:28] <mape> I really should translate ours inte english :/
[14:30] <nefD> mape:  Does your app perform some kind of diff against an older copy of the targeted page (to subsequently pull or highlight the specific changes), or does it simply check to see if it IS different?
[14:31] <mape> It just sends the new items relative to the last check
[14:31] <mape> So it is rather primitive in that sence
[14:33] <nefD> yea, it's been an interesting challenge thinking about the best way to perform a diff on the new content vs. the old, if I wanted to pull out only the new or changed content
[14:34] <nefD> i suppose it'd probably be easier to leverage some kind of existing bash program to do the actual diff, though
[14:34] <mape> could just parse the page, cache the items on your end to make sure you never get the same
[14:34] <mape> thing is that if we were to do that a lot of applications would be lost, like checking for ads on ebay that reacur with the same name and whatnot
[14:35] <nefD> yeah, my first thought was to form a hash of 'old' or 'processed' pages, and compare that hash against fresh copies of the pages when they are pulled in.. if the hashes are different, it would branch off into a more verbose check
[14:35] <nefD> ah, yeah, thats a thought..
[14:35] <nefD> hard to differentiate the important content from the, er, not so important content :)
[14:38] <jbrantly> I'm just jumping into this convo, but there are diff algos implemented in JS
[14:40] <jbrantly> http://code.google.com/p/google-diff-match-patch/
[14:41] nefariousD has joined the channel
[14:41] <nefariousD> doh.. crash..
[14:41] <jbrantly> hmm
[14:42] <jbrantly> I'm just jumping into this convo, but there are diff algos implemented in JS
[14:42] <jbrantly> http://code.google.com/p/google-diff-match-patch/
[14:42] <nefD> ooooh cool.. thanks for the linkage
[14:42] <nefD> this would be mighty helpful :D
[14:42] <nefD> would at least get over the actual diff hurdle
[14:42] steadicat has joined the channel
[14:42] <jbrantly> I was also able to successfully port one (because I didn't like the output of diff-match-patch). Not too hard.
[14:43] <jbrantly> I could give you if interested
[14:43] <nefD> ultimately, i'd love to be able to offer an RSS feed on my site which simply aggregates any daily changes to the projects/articles/etc page and the modules listing page of the node wiki on github
[14:44] <nefD> jbrantly:  yeah, that would be fantastic
[14:44] <mape> that sounds really neat
[14:45] <nefD> its just so damn difficult to keep up with the new stuff being developed for node without being able to see whats new beyond the 'so-and-so changes this page 1 day ago' bit at the bottom
[14:47] joshbuddy has joined the channel
[14:47] joshbuddy has joined the channel
[14:49] <jbrantly> http://gist.github.com/372562
[14:49] <jbrantly> keep in mind it's.. uhh.. "in development"
[14:49] <jbrantly> console.log scattered about and such
[14:50] <mape> hiight!
[14:50] <jbrantly> you pass in two arrays, and it returns the diff between those two arrays
[14:50] <jbrantly> in my usage, I used arrays of strings where each string was a line
[14:53] <jbrantly> interpreting the output is a whole separate matter, but one you'll have with any diff algo :)
[14:57] rednul has joined the channel
[15:00] <nefD> jbrantly:  very cool, thanks again for the linkage
[15:00] <jbrantly> np, good luck
[15:00] <nefD> thanks, i'll need it :P
[15:01] <ewdafa> hm can i flush a stream somehow?
[15:01] <nefD> i guess though, i'f my aim is specifically to hit those github wiki pages, it might not be so bad.. tooling it to be useful beyond that narrow requirement (ie: doing things the right way) would take a bit more time and effort :)
[15:02] ssteinerX has joined the channel
[15:06] <mape> Is there any handy way of sending post data to another webservice through core node?
[15:07] <mape> over ssl
[15:08] <felixge> mape: no, but I'm working on it :)
[15:08] <felixge> mape: well, for now you can use the querystring module to send simple POST stuff
[15:08] <felixge> shouldn't be too hard
[15:08] alexiskander has joined the channel
[15:08] <mape> And it handles ssl?
[15:14] <felixge> mape: node handles ssl
[15:14] <felixge> mape: if it doesn't, it's a bug
[15:14] <mape> great
[15:17] <mape> When writing modules..
[15:18] <mape> And writing defensive code, when does it go from elegant to well.. Not so elegant?
[15:18] javajunky has joined the channel
[15:21] softdrink has joined the channel
[15:28] <felixge> mape: when it becomes hard to test
[15:28] <felixge> usually it means you either need more functions, or re-consider if all those cases really need handling
[15:29] <mape> Well rather in cases where I am asking for a string and a user sends a function
[15:32] joshbuddy has joined the channel
[15:32] joshbuddy has joined the channel
[15:33] batasrki has joined the channel
[15:39] ithinkihaveacat_ has joined the channel
[15:40] softdrink has joined the channel
[15:43] jed_ has joined the channel
[15:44] fictorial has joined the channel
[15:44] fictorial has joined the channel
[15:52] aryounce has left the channel
[15:55] dgathright has joined the channel
[15:57] WALoeIII has joined the channel
[15:59] admc has joined the channel
[16:02] dnolen has joined the channel
[16:06] dandean has joined the channel
[16:06] psynaptic has left the channel
[16:14] botanicus has joined the channel
[16:15] sudoer has joined the channel
[16:17] joshbuddy_ has joined the channel
[16:17] joshbuddy_ has joined the channel
[16:19] fizx has joined the channel
[16:20] bpot has joined the channel
[16:21] mnutt has joined the channel
[16:22] WALoeIII has joined the channel
[16:22] fizx has joined the channel
[16:27] jtaby_ has joined the channel
[16:28] jtaby_ has joined the channel
[16:33] kriskowal has joined the channel
[16:33] <rektide> technoweenie: its not a web app framework, but w/r/t to OT's of the issue, there is Obby and the Infinote protocol
[16:33] <rektide> etherpad clone
[16:33] <rektide> ""
[16:34] <technoweenie> ah cool
[16:34] <rektide> i'm probably 6 months off from when i expect to start integrating it with my web framework
[16:34] <kriskowal> hey, _ry, you mentioned "taking out modules" at lunch on sunday
[16:35] <kriskowal> i think it would be okay if you took modules out of node.js
[16:36] <kriskowal> read: i would be more than happy to provide a modules implementation externally and use node core just for io
[16:37] admc has joined the channel
[16:37] <kriskowal> it would amount to doing for node what narwhal already does for other systems that do not provide modules inherently.
[16:38] <rektide> technoweenie: ps i am in black rock right now, http://www.urbandictionary.com/define.php?term=black+rock
[16:38] <technoweenie> are you saying you're on crack?
[16:38] <technoweenie> oh maryland, i'm in odenton :)
[16:39] <botanicus> kriskowal: the thing about modules, what it would mean? No require / exports.* = or what?
[16:39] <technoweenie> also if you watch LOST... The Black Rock: http://photogallery.longlostlist.net/albums/userpics/10001/exoduspart2-0032.jpg
[16:40] WALoeIII has joined the channel
[16:41] <jbrantly> kriskowal: what was the reasoning? Just to reduce the scope of what node does (and leave CommonJS to others)?
[16:41] <kriskowal> botanicus i can't be sure what _ry meant specifically since he just said "what if we just get rid of modules" in no particular context, but i think it would be okay if a node program were not provided a "require" function and "exports" object, but rather just some mechanism for grabbing its internal modules (which ry has moved in the direction of in recent builds)
[16:41] psynaptic has joined the channel
[16:42] psynaptic has left the channel
[16:42] <kriskowal> i say this only because it's trivial to build a variety of compliant implementations of require/exports on top of the node command, it just means that we would need a node wrapper
[16:42] <kriskowal> so, jbrantly, yes, i think it would be fine for node to reduce scope.
[16:43] <botanicus> kriskowal: I see. I don't know, I'm happy w/ require etc
[16:43] <kriskowal> just as it did with psuedo-promises
[16:43] <jbrantly> kinda makes sense, actually
[16:43] <kriskowal> well, suffice it to say i'm *really* happy with require/exports.  i just think that it would be okay for them to be implemented outside of node core.
[16:44] isaacs has joined the channel
[16:44] <jbrantly> one issue with it is that it might fragment the node community a bit. Some would continue using CommonJS, others would not.
[16:44] <kriskowal> on narwhal, it would be a matter of writing a bootstrap.js so that node bootstrap.js <yourmodule> would work
[16:44] <botanicus> kriskowal: I see.
[16:45] <kriskowal> which is how we graft modules onto javascriptcore and rhino, among other things.
[16:45] <MattJ> Lua has the concept of "loaders". At startup you can put loader functions into this array, and when anyone calls require() the loaders are called in order until one returns a table (roughly)
[16:46] <MattJ> This is how Lua supports both binary and pure-Lua modules with require(), but I've done fun stuff like loading modules over HTTP, from compressed files, etc.
[16:46] <MattJ> It gives some flexibility, and you can change/extend the logic at runtime
[16:47] <kriskowal> yeah, narwhal has that too
[16:47] <kriskowal> require.loaders
[16:47] <kriskowal> oh, no…
[16:47] <MattJ> Wouldn't that suffice for Node too, then?
[16:47] <kriskowal> require.loader is a multiplexer loader, so require.loader.loaders is the array of loaders
[16:48] felixge has joined the channel
[16:48] felixge has joined the channel
[16:49] <rektide> my one concern with removing modules is
[16:49] <rektide> whats left
[16:49] <rektide> when i want to use someone elses library for modules
[16:49] <rektide> do i have to read it from a file and eval it?
[16:50] <rektide> otoh, if node accepted multiple file arguments,
[16:50] <rektide> i wouldnt mind having the modules library as arg[0]
[16:50] <botanicus> I have a question about testing. I want to be able to watch changed test files and run tests after each change (fs.watchFile). Which means I can't use process.addListener("exit", function () { runMyTests() }). Any ideas how to do it?
[16:53] <nefD> hmm.. fairly long winded or in-depth database related question for anyone who cares to comment..
[16:53] <technoweenie> botanicus: run your tests in a separate process?
[16:54] <nefD> I'm working on a browser game project, and I need to be able to store maps to a database. Each map is grid based, and contains a cell for each x,y coordinate. So a 10x10 map would contain 100 cells.. each cell would need to store bits of information about its makeup and contents
[16:54] <technoweenie> just run => exit fast and display errors if it didnt pass
[16:54] <nefD> I wouldn't be writing to these records very often, mainly just reading from them
[16:54] <nefD> my question isn;t so much HOW to do this, my question is which database system or package would be best suited to this type of storage and functionality
[16:56] <nefD> aside from querying for individual cells, i'd also need to be able to run select queries for cells which exist in a particular, rectangular region of the containing map.. ie: all cells between (x,y) 5,3 and 15,13
[16:56] <botanicus> technoweenie: it makes sense, thanks
[16:56] <technoweenie> nefD: no clue... is this a web app or a desktop app? 
[16:56] <nefD> web app
[16:57] <technoweenie> nefD: i'd probably reach for redis to start... but maybe something like mongo for better querying abilities
[16:57] <nefD> my base line solution is mysql, but im curious as to whether one of the NoSQL variants might be better suited
[16:57] <nefD> redis and mongo, gotcha.. I'll check that out, thanks for the suggestion.. what about couch?
[16:58] <technoweenie> perhaps... couch also has the evently feature that would be awesome for this
[16:58] <jbrantly> I like couch. I'm planning on using it for my own game. But I wasn't really planning on using it to store map info. That would just be located in a file and read into memory on app startup.
[16:58] <technoweenie> couchdb can give you a live stream of data updates so you can update shit in real time
[16:58] <jbrantly> lots of reads of static content usually means caching :)
[17:00] <technoweenie> nefd: unless you're itching to play with something new, you could probably stick to what you know (mysql) and focus on the game
[17:01] <mape> Hmm I'm wondering about the ecosystem of node, I'm trying to write a module right now but I'm to incompetent to create it with all the low level that needs to be sorted out. And while there is a plethora(more or less) of modules it feels like that is hindering me from releasing anything. Depending on other modules to work, packaging that in a neat way..
[17:01] deanlandolt has joined the channel
[17:02] <mape> Should there be a separate "train" from core perhaps thinking of growing the userbase/the ease of adding to the community?
[17:07] <nefD> technoweenie:  I guess my main point of contention at the moment is the small amount of mysql support from within node.. i'm currently utilizing dbslayer (which is working very well), but that project hasn't seen any activity in quite a while, and I feel slightly nervous about relying on it to continue functioning were I to upgrade mysql or my OS in the future
[17:08] <mape> nefD: You havee
[17:08] <mape> *haven't tried the node-mysql?
[17:08] <technoweenie> then mongo
[17:08] <nefD> i have, but it was a few weeks ago
[17:09] <mape> I tried it and worked fine for my purposes
[17:09] <mape> Can't say I pressed it really hard (cached very heavily) but yeah
[17:09] <nefD> mape:  I suppose I was worried about making heavy use of it while its still in a somewhat development heavy phase
[17:09] <mape> I guess that is always an issue untill someone puts it in an heavy development phase :)
[17:10] <mape> moment 22
[17:10] indiefan has joined the channel
[17:10] <mape> u, catch 22 in english ;)
[17:11] <mape> Until someone takes a big enough leap of faith... Things tend to stay steady
[17:12] <mape> And either it is a slow steady trickle or a group of people make sure it flows more steady
[17:12] <nefD> indeed
[17:12] <mape> And without funds it is a very had problem
[17:13] RayMorgan has joined the channel
[17:16] dgathright has joined the channel
[17:16] <mape> *hard
[17:18] tjholowaychuk has joined the channel
[17:22] <tjholowaychuk> stupid question. is the only benefit of nextTick() really to let the other routines catch up? ive seen some uses of it that did not really make tons of sense to me
[17:23] <mape> tjholowaychuk: Isn't it more a percausion to make sure it runs before anything else?
[17:23] <deanlandolt> tjholowaychuk: it's to do setTimeout(..,0) but without all the overhead
[17:24] <inimino> it's to empty the call stack
[17:25] <inimino> tjholowaychuk: is that what you meant by "let the other routines catch up"?
[17:25] <isaacs> rektide: removing modules?
[17:26] <isaacs> also, in the refactor on my fork, if you want to have differnet loaders, that's quite easy.
[17:26] <isaacs> but they live on module.loaders and module.compilers, not in require.loaders
[17:26] mjr_ has joined the channel
[17:32] <tjholowaychuk> inimino: its basically just for faux async though no?
[17:32] <inimino> tjholowaychuk: I'd say real async, but yes
[17:33] <rektide> isaacs: keep scrolling up, it was kriskowal citing something _ry had said
[17:33] joshholt_ has joined the channel
[17:33] <rektide> oh hell, should i copy paste it to you in a /msg ? you werent here
[17:34] <isaacs> huh?
[17:34] stephenlb has joined the channel
[17:34] <tjholowaychuk> inimino: well yea but i mean its still all user land code thats going to be executed regardless, i think thats where it confuses me a bit. otherwise people would just be wrapping ever odd routine in nextTick. I will go read the implementation then maybe it will make more sense  lol
[17:34] <isaacs> oh, rektide, i see it.
[17:34] <isaacs> logs, ftw
[17:36] BinaryPie has joined the channel
[17:36] saikat has joined the channel
[17:36] <isaacs> _ry: don't get rid of modules!
[17:36] <isaacs> _ry: please!
[17:37] <tjholowaychuk> woah? getting rid of modules?
[17:38] <isaacs> tjholowaychuk: i'm hoping it was just some random comment and not actual plan :)
[17:38] piranha has joined the channel
[17:38] <tjholowaychuk> isaacs: I obviously missed that haha, hopefully 
[17:39] <isaacs> but, it wouldn't be too hard to implement something like node --with-modules foo.js
[17:39] <isaacs> or even node lib/module.js foo.js
[17:40] <rektide> that was what i said
[17:40] <jbrantly> isaacs: yea, that's what Kris Kowal was saying. Personally though I think it would fragment the community a bit.
[17:40] <rektide> node lib/module.js foo.js
[17:40] CodeOfficer has joined the channel
[17:40] <isaacs> rektide: you COULD do something like that today, since you get process.argv
[17:40] <rektide> theres gotta be some way to bootstrap the modules library
[17:41] <rektide> without writing a runtime loader
[17:41] <rektide> like i do atm
[17:41] <rektide> cause i am not intelligent and weird
[17:44] <herbySk> in fact, node.src could be as little as process.compile(process.binding('fs').somethingtoread(argv[1]))
[17:44] <herbySk> that is, src/node.js
[17:49] brapse has joined the channel
[17:50] <isaacs> there's a point at which node is so streamlined that it's just a pita to use
[17:51] <isaacs> i mean, why not just get rid of all the javascript, and ship g++ and git?
[17:51] <isaacs> "here's how you install node.  first, you download v8... then, you write node and compile it.
[17:51] <isaacs> "we give you a compiler, what more do you need!? jeez!"
[17:51] <tjholowaychuk> haha
[17:51] <isaacs> i think a simple extensible module system and a handful of modules that are almost certainly going to be necessary/useful in the http world, that's what node should have.
[17:52] kjeldahl has joined the channel
[17:52] <isaacs> an http engine, some process/fs stuff, basic debugging, query string/url parsing, path resolution, these things are a pain to write over and over again, and commonjs require() is a good convention.
[17:54] <tjholowaychuk> oh :) totally get the usage for nextTick now. my bad.. guess I should try things before i talk
[17:54] tek has joined the channel
[17:54] <isaacs> tjholowaychuk: it's a higher-priority setTimeout(fn, 0)
[17:54] <tjholowaychuk> :D
[17:55] <isaacs> tjholowaychuk: also, like 1000 other metaphors...
[17:55] justinlilly has joined the channel
[17:57] <tjholowaychuk> verrry nice, shall use it now instead of ignoring it
[17:57] <mape> isaacs: But how do you handle a system where there are multiple dependancies without a package handler?
[17:57] <isaacs> mape: whu?
[17:57] <isaacs> you mean, you'd want to put a package manager in node-core?
[17:57] <tjholowaychuk> haha
[17:57] <mape> isaacs: Modules, that depend other eachother
[17:58] aho has joined the channel
[17:58] <tjholowaychuk> definatelllyy no PM should ship with node
[17:58] <isaacs> that's a terrible idea.  a common one, but a terrible one just the same.
[17:58] <mape> isaacs: No that isn't the way to go, but there needs to be some way to ghave a generic way of handeling dependencies on modules
[17:58] BinaryPie has joined the channel
[17:58] <isaacs> mape: that's what require() is for
[17:58] <mape> If node is going to be low level, most modules will depend on other modules
[17:59] <tjholowaychuk> IMO you should just require('somemodule') and anything in the load path willing to respond to that is fine. PMs can provide this at the user level but in libraries you should not use a PM directly
[17:59] <mape> And as a user I want to fetch "this" and get what is needed
[17:59] <mape> Not have to look for 4 dependencies
[17:59] <tjholowaychuk> git submodules :D haha. but yeah i mean its fine to use a package manager but dont force others to use it
[17:59] psynaptic has joined the channel
[18:00] <mape> From what I heard earlier git submodules are a pita
[18:00] <tjholowaychuk> mape: this is typically what i suggest http://wiki.github.com/visionmedia/kiwi/library-developer-best-practices
[18:00] teemow has joined the channel
[18:01] <tjholowaychuk> mmm pitas
[18:01] <mape> tjholowaychuk: yeah, but seems others tend to put dependencies in their own git repo
[18:01] <mape> And regardless, there needs to be a standard
[18:01] <tjholowaychuk> at this point you kinda have to
[18:01] <mape> to let the not so in the know develop stuff
[18:02] <mape> the more barries the less people contribute, which might be a good thing if one would like "those" to keep out
[18:03] dgathright has joined the channel
[18:03] <tjholowaychuk> yeah thats not always such a terrible thing IMO. Drupal is fucked over because of that... sure they have like 4000 modules but 90% of them are shit 
[18:04] <mape> Yeah, I guess it is a degree of keeping poor programmers out
[18:04] <deanlandolt> tjholowaychuk: that seems like such an apple mentality though
[18:04] <mape> But then again those poor programmers would tell their friends about node
[18:04] brianmario has joined the channel
[18:04] <mape> deanlandolt: HEY! Don't badbouth Apple
[18:04] <mape> ACTION gets the pitchfork
[18:05] <tjholowaychuk> im not saying its the way to go. everyone has a way to contribute, be it docs or whatever
[18:05] psynaptic has left the channel
[18:05] <tjholowaychuk> no point making it harder to get rolling with node. but from my experience with Drupal it was a very annoying thing
[18:06] <deanlandolt> yeah, but it seems like an easy problem to solve w/ something as simple as community ratings
[18:06] <mape>  But the ratings won't solve the dependancies?
[18:06] <deanlandolt> no, of course not...i'm talking about the 4000 modules problem
[18:06] <deanlandolt> but you can't solve the dependencies issue in node anyway
[18:06] <mape> Well, that is a good issue to have :)
[18:07] <mape> Just look at jQuery
[18:07] <deanlandolt> in my opinion it's the /worst/ place to do it
[18:07] <mape> Tons of shitty plugins but still a lot of people using it
[18:07] <deanlandolt> indeed...and the cream rises
[18:07] <mape> deanlandolt: How so? Shitty code will always be there
[18:08] <mape> Javascript is a crappy language because the code most produce is shit
[18:08] <mape> Why bother with node.js?
[18:08] <deanlandolt> wait, huh? how does some shitty programs make a language shit?
[18:08] <mape> wait, huh? how does some shitty modules make a project shit?
[18:09] <stephenlb> mape, what languages do you like?
[18:09] <mape> stephenlb: Javascript
[18:09] <jbrantly> packages seems like a decent way to solve the dependency problem
[18:09] <deanlandolt> i never said shitty modules makes a project shit
[18:09] <deanlandolt> i said the opposite...let a thousand flowers bloom -- even if most of them smell like ass
[18:10] <tjholowaychuk> personally i kinda like the lack of a package manager
[18:10] <tjholowaychuk> its super handy for quickly installing things
[18:10] <tjholowaychuk> and mapping dependencies but at the end of the day flexibility is what you want
[18:10] <jbrantly> by packages I mean Packages/1.0 plus maybe Packages/Mappings and implementations to support it
[18:10] <mape> deanlandolt: Then I'm sorry, just went on holiday so the beers are smelling like flowers. But yeah, the way to build a critical community is to get lots of users, and then it is up to the leaders to choose the path
[18:11] <jbrantly> sure. The package manager can be flexible in how it operates. But I think the key is consistency within modules on how to reference dependencies
[18:11] <jbrantly> then you can use whatever package manager you want
[18:11] <_ry> kriskowal: i don't think i can take out modules at this point
[18:11] <kriskowal> aye
[18:11] <_ry> kriskowal: but i've been thinking about having a node-core binary
[18:12] <_ry> which would just provide .. something basic
[18:12] <_ry> *shrug*
[18:12] <kriskowal> it's of no consequence to me.
[18:12] <mape> tjholowaychuk: Well for example I'm trying to build a module that does a quick http request with post to a service and returns a responce. That isn't as easy as I would like it to be. Sure I'm not as good as I would like to be but that either makes me not do a module or depend on someone that created a module that does what I want.
[18:13] <kriskowal> if you do go with a node core binary, it would be great if you kept the global object clean and just injected a loader for the internals into the main script
[18:13] <mape> So either I don't contribute something that I think would be nice for the community or I depend on someone else, which would make my module harder to use for people just getting into node
[18:13] <deanlandolt> mape: if you want that to be just a few lines of code you may be working at the wrong level
[18:13] <tjholowaychuk> mape: for sure, but i mean you can do several things. a) use a PM    b) submodule   c) localize their lib in yours etc 
[18:13] <kriskowal> i noticed you're going with a new lazy loader technique
[18:14] <_ry> kriskowal: in any case it's not something i'm going to think about for a while :)
[18:14] <kriskowal> it would be good to have a method that tests whether an internal module exists
[18:14] <kriskowal> aye aye
[18:14] <mape> deanlandolt: Working at the wrong level?
[18:14] <tjholowaychuk> mape: use Express haha require('express/http').post('http://some-uri', function(err, content, response){ ... })
[18:14] <mape> tjholowaychuk: Localizing the code just seems like a bad decision? Why not benefit from their progression?
[18:15] <tjholowaychuk> mape: and that is something you have to keep in mind, however its not always a bad thing since you know you shit wont break lol
[18:15] <tjholowaychuk> mape: even take node / v8 for example. your not relying on an external build of v8 so its easier to control
[18:16] <_ry> mape: are you going to patch me with your new docs?
[18:16] <mape> tjholowaychuk: Well personally I don't think a "haha" responce is a way to go if you are trying to build a community
[18:16] <tjholowaychuk> ps. anyone good with python here? I suck at this waf shit. if you have a dependency on a lib using make or cmake etc whats the best way to set this up in the wscript?
[18:16] <mape> _ry: If you want to, ofcouse
[18:16] <_ry> mape: i want
[18:16] <_ry> tjholowaychuk: look at the examples in node
[18:17] <mape> I'm rather new to the whole aspect of open source so I don't know the whole hand shake, do don't do aspect
[18:17] <tjholowaychuk> mape: im giving you suggestions lol there is not going to be a PM in node AFAIK and probably never will be
[18:17] <_ry> tjholowaychuk: conf.check(lib='efence', libpath=['/usr/lib', '/usr/local/lib'], uselib_store='EFENCE')
[18:17] <_ry> for example
[18:17] <mape> But yeah, I'll merge things and push it in some ways (long time ago I fiddled with pushing in git)
[18:18] <tjholowaychuk> _ry: what about if its localized in ./deps ? just shell out and make?
[18:18] <mape> tjholowaychuk: Hehe I know, just talking about general ideas and attitude towards "lesser" node users
[18:19] <tjholowaychuk> mape: im not bashing you if thats what you mean. i respect everyones work, everyone working on node is great
[18:19] <mape> _ry: Where there any changes you wanted made before merging? I know there are tons of other possible docs contribs that might want to be "merged"
[18:20] <_ry> mape: nah it's good, it can still be changed after merge
[18:20] <mape> tjholowaychuk: We are on the internets, bash me all you way ;) Nah just wondering about the thoughs and ideas on building the community.
[18:20] <mape> _ry: Jup
[18:20] <mape> *thoughts
[18:21] <tjholowaychuk> mape: haha never!! everyone starts somewhere. and totally there is no problem with that. I just dont think there is a definitive answer ATM
[18:21] rauchg has joined the channel
[18:21] derbumi has joined the channel
[18:21] tekky has joined the channel
[18:21] devinus has joined the channel
[18:21] <mape> Yeah, there are always issues, I just think for a young project exklusion isn't the way to go. Unless it hinders or destroys the project as a whole.
[18:22] <tjholowaychuk> isaacs: how are you handling external dependencies in npm? say if a sqlite mod is installed and sqlite itself is not
[18:23] <mape> Looking at jquery I would love their approach att contribs, they want to reduce the "impact" of helping as much as possible. I would love to help on the docs but I've forgotten all I know about git. But I'll learn it.
[18:24] <mape> But most people are very lazy, and perhaps you don't want those people around but they do tend to add up
[18:24] <tjholowaychuk> what is jquery doing? last I checked it was just a drupal site and you register /  upload your plugins
[18:24] ewdafa has joined the channel
[18:24] <tjholowaychuk> which I found annoying to be honest, i signed up just to post links to my github repos lol
[18:24] <tjholowaychuk> but never hosted anything with them
[18:25] <mape> tjholowaychuk: From what resig said he wanted a system where you could checkout the source, make a fix, and sumbmit it without using a repository
[18:25] <mape> *submit
[18:25] <mape> A low entry way of fixing stuff
[18:25] <tjholowaychuk> hm
[18:26] <tjholowaychuk> well i mean im sure ryan would accept a regular diff
[18:26] <ncb000gt> honestly, imo, something like pip would be awesome, it checks pypi and a couple other repos, but also allows pulling from places like git, tarballs, etc. or are you guys more talking about how the "pypi" side should be setup and managed?
[18:26] <tjholowaychuk> but i guess you need git to work with HEAD
[18:26] <tjholowaychuk> or doOoO you 
[18:26] <isaacs> tjholowaychuk: you mean, non-node deps?
[18:27] <mape> tjholowaychuk: I looked at that, and I threw together http://node-modules.mape.me/ copy paste jQuery plugins stuff, which would fetch github frontpage stuff
[18:27] <tjholowaychuk> isaacs: yup. was just trying to think, because I would rather not bundle "discount" with my little markdown bindings but otherwise if you install without having discount installed already it would obviously blow up
[18:27] maushu has joined the channel
[18:27] <isaacs> tjholowaychuk: you could do that with a preinstall script.
[18:27] <isaacs> tjholowaychuk: { "scripts" : { "preinstall" : "which sqlite" } }
[18:27] <mape> But I still think a repo of modules/plugins is a good thing for the community. Sure people will find the github wiki-page but the people you loose also add up
[18:28] <isaacs> tjholowaychuk: or, of course, you could have a more sophisticated thing that checks for the existence of whatever, and then prints an error and does exit 1 if it's not there.
[18:28] <mape> Just gathering all the awsome node.js stuff is of great value
[18:28] <isaacs> tjholowaychuk: but, since those dependencies aren't managed by npm, it doesn't make much sense to handle them the same as node-package deps
[18:28] <mape> And having a central place for that which is easy to use is of great value
[18:29] <tjholowaychuk> isaacs: ya i agree. hmm.. im not even sure how it would fail right now. im assuming waf has descriptive messages in regards to that so it might be best to just leave it as-is
[18:30] <deanlandolt> mape: no doubt...it's just a matter of building it...looks like you've got a good start there
[18:30] <mape> Well frontend is just the lazy part ;)
[18:30] <isaacs> tjholowaychuk: you could also have a pre-install script that checks for sqlite, and if not found, checks for apt-get or port or homebrew, and installs it.
[18:30] <tjholowaychuk> mape: cool man. i agree looks like a good start.
[18:30] <mape> But with *** oath/connect and a github parser that fetches info
[18:30] <mape> Just a good source of info
[18:31] <mape> (not sure github likes parsing)
[18:31] <mape> But as long as you have a sence of "I need to be on this thing" that is a good thing
[18:31] <mape> Sence that will merge producers and users
[18:31] <mape> *Since
[18:32] <mape> And that will allow users to build cool stuff and talk about it, as well as producers getting excitement from having users use their module
[18:32] <tjholowaychuk> isaacs: definitely. one problem with that i guess is because the package names get totally fucked sometimes its sqlite3-dev or just sqlite etc. thank sfor the input i will try and figure out a decent solution
[18:32] <nefD> +1 to mape :D
[18:33] <nefD> anything that makes it easier to see the new modules and projects being developed for and with node would be great
[18:33] <tjholowaychuk> mape: that would be kinda cool, you could easily query them for tags etc, and just point to the tarballs
[18:33] <mape> Yeah
[18:34] <mape> Put as much stuff as possible on github
[18:34] <tjholowaychuk> misewell offload that ya
[18:34] <mape> but allow users to login though twitter/facebook/oath, follow stuff and get a mail/rss when stuff changed
[18:34] <tjholowaychuk> the main reason i wanted to host the packages with kiwi is for stats lol
[18:34] <tjholowaychuk> but thats a lame reason
[18:34] <mape> Increases involvment and excitement
[18:35] <mape> tjholowaychuk: Not at all
[18:35] <mape> Why code open source at all?
[18:35] <mape> Humans are egotistical creatures, people who don't agree on that just don't realice it (:P)
[18:35] <deanlandolt> mape: what kind of question is that? why *not*?
[18:36] <mape> deanlandolt: Why not what?
[18:36] <deanlandolt> software engineers are *logical* creatures ;)
[18:36] <deanlandolt> you said why code open source at all
[18:36] <deanlandolt> my answer to that question is *why not* -- i've yet to hear a particularly compelling reason
[18:36] <tjholowaychuk> i try to open source everything i can
[18:36] <mape> It was a rhetorical question, people code because it makes them feel good.
[18:37] <deanlandolt> yes, and i gave yo ua rhetorical and actual answer...
[18:37] <mape> Open souce that is.
[18:37] <mape> deanlandolt: Aww burn :(
[18:37] <herbySk> isaacs: reply here, it's faster - ok, push it as fast as possible, I see no hope here, I'd like to know which is adopted, so I know what am I going to rewrite.
[18:37] <deanlandolt> rhetorically...why not...the answer isn't necessarily ego...programmers are logical...by nature
[18:38] <tjholowaychuk> personally i just love open source for learning. i never went to school so i had to learn just from reading code, if there was no open source id be totally fucked
[18:39] <mape> deanlandolt: I doubt that very strongly, then why don't most people keep anonymous doing open source?
[18:39] <mape> It is a matter of recieveing and getting
[18:39] <mape> And if the community is shitty you don't want to give
[18:40] <mape> If it was purely for the cause of open souce people would give regardless if the community is crap
[18:40] <mape> But that isn't the case
[18:40] <isaacs> herbySk: yeah, i hear ya.  for my purposes, i'd rather go back to focusing on npm.  the package manager game is more fun.
[18:40] <mape> Even though we are "logical"
[18:40] <deanlandolt> mape: i didn't say there was no personal benefit -- that's one of the primary reasons...but it's not *necessarily* about ego -- there are huge practical benefits other than ego stroking
[18:40] <isaacs> i need to get npm to a 0.1.0 asap
[18:40] <mape> deanlandolt: Such as? (is a bad community)
[18:41] <deanlandolt> learning, reputation, having your work improved by others...
[18:41] <mape> And that still holds up in a bad community?
[18:41] <deanlandolt> bad community? what are you talking about?
[18:41] <deanlandolt> i mean, it doesn't matter if the community's good or bad
[18:42] <MattJ> ouch, it does, very much :)
[18:42] <deanlandolt> it's obviously cooler when the community's cool...i think it's safe to say the node comm's pretty cool (having met a lot of you last weekend i can say that for /sure/ :)
[18:43] <nefD> meh, (2 cents) I tend to disagree that a bad community can still foster relevant, helpful, and forward moving progress (at least, in any meaningful way)
[18:43] <deanlandolt> in any event, i agree there should be a place where packages are hosted...but i'd argue there should be many *places* packages are hosted...and there will be
[18:44] <deanlandolt> nefD: you don't always need a community to move forward -- most really cool stuff is done by a very small group of people
[18:44] <nefD> deanlandolt:  Size of community has little bearing on the quality of said community :)
[18:44] <deanlandolt> node (and server side js in general) is just a lot more ambitious than that -- it'd suck if the community were weak...i think it's clear that it's not
[18:45] <deanlandolt> there will obviously be places where packages are hosted -- i don't see why that has to be sanctioned by ryan or anyone else...we're all free to put up our own package repos...that's what's awesome...at some point one will probably take hold
[18:46] <mape> deanlandolt: But why not "lead" and have a central place to present things
[18:46] <_ry> isaacs: looking at hte module stuff
[18:46] <mape> Sure good things can surface from shitty conditions but those aren't the optimal conditions
[18:46] <isaacs> _ry: great!
[18:47] <deanlandolt> mape: i disagree that the conditions are shitty
[18:47] <mape> deanlandolt: I'm not saying they are shitty, I'm just saying they can be more optimal
[18:47] <deanlandolt> the condition of package management is shitty, no doubt...but node can't (and won't) fix that
[18:47] <mape> They can't?
[18:47] <tjholowaychuk>  shouldnt
[18:47] <deanlandolt> yeah, shouldn't too
[18:47] <isaacs> mape: there are a few of us working on that
[18:47] <_ry> isaacs: it'd be nice to pull path and events out before
[18:48] <mape> Since that would cause?
[18:48] <_ry> the module.js move
[18:48] <_ry> uh but whatever
[18:48] <tjholowaychuk> mape: the community will adopt the ideas that they like
[18:48] <isaacs> _ry: i could do that.  it's no big deal.  the first few changes are just moving code.
[18:48] <deanlandolt> but really, i'd say can't...it doesn't belong in core...it belongs in the hands of the community...w/ isaacs, with the sproutcore guys, w/ whomever
[18:48] <isaacs> deanlandolt: ++
[18:48] <tjholowaychuk> mape: the downfall of kiwi may be the YAML  haha :D but yeah.. bash sucks at parsing JSON
[18:48] <mape> The strong minded, and perhaps those are the oens you want to keep
[18:49] <mape> I'm just throwing ideas and will be happy to take a beating
[18:49] <isaacs> tjholowaychuk: bash sucks at parsing everything.
[18:49] <tjholowaychuk> isaacs: never!! haha
[18:49] <isaacs> tjholowaychuk: i didn't know that it was any better with yaml.  isn't json a subset of yaml anyhow?
[18:50] <tjholowaychuk> iscaacs: the reason I can get away with parsing YAML in bash is because the whitespace (for the most part) is reasonably predictable
[18:50] <deanlandolt> mape: i get what you're saying, and i agree it'd be cool if something /just surfaced/ -- but it's important to understand what node is and *isn't* :)
[18:50] <tjholowaychuk> iscaacs: I might play with some JSON parsing using awk though
[18:50] <mape> deanlandolt: Yeah, but who is to say what node is and what is isn't, except for the very close to node commumity.
[18:51] <deanlandolt> umm, who? ryan...
[18:51] <mape> The "it would be cool if something just surfaces", why not surface things?
[18:51] <mape> deanlandolt: For sure :)
[18:51] <deanlandolt> and he's been pretty clear about this kind of stuff
[18:51] piranha has joined the channel
[18:52] <mape> Then I must have been out of the loop and apologize for talking about it
[18:53] <mikeal> tjholowaychuk: i thought you were putting it all in node anyway?
[18:53] <tjholowaychuk> mikeal: putting what in node?
[18:53] <deanlandolt> np...fwiw i also kinda take the "why not surface things" side of things often and have to remind myself that that's not how this works :)
[18:54] <mikeal> are you guys talking about kiwi again?
[18:54] <tjholowaychuk> just package managers in general
[18:54] mme has joined the channel
[18:54] <mikeal> why bash?
[18:54] <tjholowaychuk> but yeah i considered re-writting in js. at the time it was brutal trying to keep up with the changes in node though
[18:54] <mikeal> i hate bash, i really do
[18:54] <tjholowaychuk> i love it, for some things
[18:54] <mikeal> i use zsh as my actual shell
[18:55] <mikeal> and oh-my-zsh is the hotness
[18:55] <mikeal> so much awesome git completion :)
[18:55] <mape> deanlandolt: Yeah, I mean, why not take a stab at it,  if the communitys good is what is the purpose nothing bad is coming out of it. Better to try too steer the ship rather the not
[18:55] <tjholowaychuk> i have 2-3 char aliases for everything i do in git
[18:55] <tjholowaychuk> makes me forget how it really works hahah
[18:55] <mjr_> bash is like vi, sucks but it's everywhere.
[18:55] <tjholowaychuk> but hey
[18:55] <mape> It might go side ways but then that is often because something else (better) had more wind
[18:56] <nefD> *gasp*
[18:56] <nefD> Vim does *not* suck!
[18:56] <nefD> ACTION is flustered
[18:56] <mape> ACTION throws nano on nefD 
[18:56] <mjr_> nefD: if you use vim for working on node, then you get a pass.
[18:56] <nefD> ok, i'll enjoy my pass then :D
[18:57] <nefD> i actually use vim for all my coding needs at work.. php, css, html, js, python, whatever
[18:57] <mape> So, what has ry said about modules that I totally missed out on? :)
[18:57] mcarter has joined the channel
[18:58] <deanlandolt> quite a few things -- for starters, that he regrets adding them in the first place
[18:58] <mape> Oh, that is a thing :)
[18:58] <nefD> whats wrong with modules?
[18:58] <mikeal> tjholowaychuk: with oh-my-zsh you can use tab completion for all the commands, branches and remotes that are active
[18:58] <mikeal> it's *hot*
[18:58] <tjholowaychuk> dope
[18:59] <nefD> hmm, may have to check zsh out
[18:59] <tjholowaychuk> im trying to stop using my aliases since its making me forget shit. kind of like how ORMs rape your SQL skills
[19:00] <mikeal> i'm happy to forget my SQL skills
[19:00] <deanlandolt> tjholowaychuk: you'd rather write sql?!
[19:00] <mape> deanlandolt: So how should node grow without modules?
[19:00] <mikeal> need to free up that real estate in my brain for something useful
[19:00] <mikeal> i'd rather use CouchDB :)
[19:00] <mape> Everyone just rewrite the wheel?
[19:00] <tjholowaychuk> deanlandolt: I write sql lots, but no not really lol
[19:00] codehero has joined the channel
[19:00] <deanlandolt> mape: i'm not suggesting that it should...just filling you in
[19:00] <mape> mikeal: Why couch over mongo? (friends looooove mongo)
[19:00] <codehero> greetings, does anyone know of a port of XMLHTTPRequest for node?
[19:00] <mape> deanlandolt: Just wondering if you know why
[19:01] <mikeal> i have a couple hundred reasons
[19:01] <nefD> couchdb is nice, i guess.. but if you were to line up 30 job interviews, I don't think couchdb experience would amount to much :)
[19:01] <mikeal> mongo is incredibly missleading
[19:01] <mape> mikeal: Hilight 2 :P
[19:01] <mikeal> nefD: actually a lot more people are using CouchDB than MongoDB
[19:01] <mikeal> except in the Ruby space
[19:01] <jbrantly> nefD: I actually recently had a potential employer be impressed that I had some exposure to couch
[19:01] <deanlandolt> i can't speak for ryan and can't remember exactly but IIRC because it squashes possible innovation in the module space
[19:01] <nefD> and yet, a magnitude more are yet using postgres, mysql or oracle :P
[19:02] <mjr_> more people also use .net.
[19:02] quirkey has joined the channel
[19:02] <mape> deanlandolt: So the modules destroy the module space?...
[19:02] <mikeal> mape: MongoDB has an API kinda like couch without being truly schemaless and consistency guarantees worse than Redis
[19:02] <mikeal> and for Redis that level of consistency is fine
[19:02] <mikeal> because it's targetted for a different use case
[19:02] <deanlandolt> mikeal: couch is _not_ truly schemaless ;)
[19:02] <mikeal> umn…. yes it is :)
[19:02] charlesjolley has joined the channel
[19:03] <mikeal> it stores JSON, period
[19:03] <deanlandolt> you can't start top level keys with an _
[19:03] <mape> ACTION gets the popcorn (pizza)
[19:03] <mikeal> none of the indexing is based on the structure of the keys
[19:03] <deanlandolt> umm, yeah it is...based on the _id key ;)
[19:03] <mikeal> deanlandolt: yes you can, you just can't step on the ones that couch already uses
[19:03] <mikeal> yes, you must have an _id and couch gives you a _rev
[19:03] <deanlandolt> the ones couch already uses? sounds a bit like a schema ;)
[19:04] <mikeal> but all the indexing you do on the real data stays schemaless because you can normalize the index in map/reduce
[19:04] <deanlandolt> i know all about it...just pointing it out -- couch is not _completely_ schemaless...but it's certainly close
[19:04] <mikeal> instead of relying on per-key indexing
[19:04] <deanlandolt> true
[19:04] <mikeal> the big thing for me is that the indexing scheme not be bound to the structure of the data
[19:05] <mikeal> because that means you still have to go through this big phase of changing data before you stick it in the database in order to index it
[19:05] <mikeal> which makes the "schemaless" part kind of worthless
[19:05] <deanlandolt> heh...good point
[19:05] <mikeal> and i love me some replication :)
[19:06] <mikeal> that's the thing most people don't get about couchdb, replication is intended to be a transport, not just a scaling feature
[19:06] <jbrantly> couch is rough though when it comes to things like uniqueness
[19:06] <mattly> mikeal: exactly
[19:06] <jbrantly> basically, it simply doesn't do it, and you need to handle it elsewhere
[19:06] <deanlandolt> mikeal: yeah, i definitely get that...i'm hoping to roll couch-style replication into persevere soon...which means you'll be able to do it on top of sql and mongo
[19:06] <mikeal> jbrantly: either you can make a consistent key which is unique, or you have to do one more query on another field to check
[19:06] <mikeal> it's your call
[19:07] <mikeal> i usuually try to make a consistent key that is unique and not use the default uuid for the keys
[19:07] <deanlandolt> (with the caveat that all your changes have to go through persevere, so not /quite/ as nice)
[19:07] <mikeal> it makes things a lot easier
[19:07] <jbrantly> mikeal: the query thing has a race condition, and the unique key works as long as you only have 1 server
[19:07] <deanlandolt> jbrantly: or you can have a /uniqueness/ server, but that's a big ol' single point of failure
[19:08] <jbrantly> deanlandolt: right. I totally get that the whole point of couch *not* having that kind of feature is for scaling. Still... sucks in practical terms when you actually run into it.
[19:08] <mikeal> jbrantly: uniqueness on the key will also get enforced during replication
[19:08] <mikeal> so you can have it unique between two servers,  you'll just have to resolve the conflicts
[19:09] <deanlandolt> mikeal: i wouldn't call that uniqueness though
[19:09] <mikeal> you'll lose one
[19:09] <deanlandolt> (having to resolve conflicts)
[19:09] <voodootikigod_> hey oh
[19:10] <deanlandolt> that said, if you want uniqueness and scaling, well, you're gonna have to do some work -- simple as that
[19:10] <mikeal> voodootikigod_: i think you'd still be sleeping :)
[19:10] <jbrantly> a great, typical example is users. You want unique users. You don't want to tell the user after-the-fact that their name conflicts
[19:10] <voodootikigod_> nah
[19:10] <jbrantly> and what deanlandolt said :)
[19:10] <voodootikigod_> been rocking
[19:10] <mikeal> deanlandolt, jbrantly: this is where you can do really cool stuff with Redis :)
[19:10] <mikeal> jbrantly: that builtin user system in couchdb handles that :)
[19:10] <deanlandolt> mikeal: damn strait!
[19:11] <jbrantly> mikeal: not familiar with that
[19:11] <deanlandolt> mikeal: how does it handle it?
[19:11] <mikeal> the user system is new in 0.11 and hasn't been fully documented yet
[19:11] <mikeal> the user domain + username is part of the _id for the users
[19:12] tlrobinson_ has joined the channel
[19:15] hellp has joined the channel
[19:18] <_ry> isaacs: having a problem with even the first commit
[19:18] <isaacs> _ry: oh?
[19:19] <isaacs> _ry: what's the problem?
[19:19] <voodootikigod_> _ry: any direction on how to set baud rate for serial port?
[19:20] <_ry> isaacs:  git checkout ef675f767cef891110b09890d6ef81c7f162f788  
[19:20] <_ry> isaacs: ./configure --debug --prefix=$HOME/local/node && make test-all
[19:20] <voodootikigod_> i can figure it out, but wanted to see if you had something readily rockable
[19:21] <voodootikigod_> btw i heard you went on a tirade about your love :)
[19:21] <mjr_> voodootikigod_: are you using SunOS 4, or HP-UX?
[19:21] <voodootikigod_> linux
[19:21] <kriszyp_afk> speaking of schemas for couch, it would be really cool if couch could provide a hyper schema to indicate its key element (not for structure, but for indicating how to go navigate from an entity in a view to the full resource)
[19:22] <_ry> voodootikigod_: i don't know - how do you do that normally?
[19:22] <_ry> is that some termios thing?
[19:22] <voodootikigod_> part of the stream read/write 
[19:22] <voodootikigod_> all good
[19:22] <voodootikigod_> i will get it
[19:22] <jbrantly> kriszyp: if I understand you right, I thought it did
[19:23] <kriszyp> oh really?
[19:23] <kriszyp> per the JSON Schema rfc?
[19:23] <_ry> tirade about my love? 
[19:23] <_ry> ACTION remembers nothing
[19:23] <voodootikigod_> heard you went on alike an hour fuck javascript
[19:24] <mape> hah
[19:24] <_ry> nah, i think that was kriskowal
[19:24] <_ry> ;)
[19:24] <voodootikigod_> hahhahaha
[19:24] <voodootikigod_> i also heard you endorsed your love for modules
[19:24] <voodootikigod_> :)
[19:24] <jbrantly> kriszyp: I have a feeling I'm misunderstanding you though. But http://wiki.apache.org/couchdb/HTTP_view_API#Access.2BAC8-Query   
[19:24] <voodootikigod_> i believe it was "everlasting love"
[19:24] <voodootikigod_> L(
[19:24] <mikeal> kriszyp: i think a better solution for couch is an app for a db that gives a really good visualization of all the information
[19:24] <mikeal> enforcing anything like a schema is never gonna happen
[19:25] <kriszyp> I am not taking about enforcing any schema
[19:25] <mikeal> i do want to know stuff tho like "how many documents have key "x""
[19:25] <jbrantly> kriszyp: the point there is the "id" is always returned in the view, so you can look up the full resource
[19:25] <mikeal> and of those how many of them are of a certain type, and of those how many have another key
[19:25] <kriszyp> providing a hyper schema wouldn't affect couch's behavior at all, it is just mechanical documentation
[19:25] <kriszyp> right jbrantly 
[19:25] <isaacs> _ry: i see.  when i factored out, i didn't take the removed function.
[19:25] <kriszyp> and advertising that so generic rest clients know to use "id"
[19:26] <kriszyp> it is not RESTful atm, because a generic REST client doesn't know how to use the "id" unless it is speficially wired for couch
[19:26] JAAulde has joined the channel
[19:26] <_ry> isaacs: yeah, seems that way
[19:26] <kriszyp> the schema is basically just {links:["rel":"full", "href":"{id}"]}
[19:27] <deanlandolt> mikeal: HATEOAS and all that
[19:27] <kriszyp> right, implementing GET, PUT, DELETE, etc. is pretty small part of REST
[19:27] <deanlandolt> which i believe damien's endorsed
[19:27] <mikeal> what is HATEOAS
[19:27] <mikeal> that acronym is way too long
[19:27] <deanlandolt> hypertext as the engine of application state
[19:27] <deanlandolt> heh...true
[19:27] <mikeal> that can't be an acronym
[19:27] <isaacs> mikeal: it's a group of peoplke who are against OAS
[19:27] keeto has joined the channel
[19:28] <mikeal> someone needs to let that one go
[19:28] <kriszyp> I thought you worked with the couch folks?
[19:28] <mikeal> i do
[19:28] <mikeal> but we have no idea what we're all thinking
[19:28] <mikeal> because most of us are crazy
[19:28] <kriszyp> heh, no problem :)
[19:29] <mikeal> the document semantics are really nice and restful with GET, PUT, POST, DELETE and COPY
[19:29] <mikeal> but when you start doing view queries it gets a bit ugly
[19:29] <isaacs> _ry: i put removed back into lib/events.js, but i can go back and insert that earlier
[19:29] <mikeal> which you can now cleanup with the rewriter
[19:29] <kriszyp> right, but just saying that there is more to REST than implementing the uniform interface (GET,PUT, etc)
[19:29] cmlenz has joined the channel
[19:29] <isaacs> inimino: thatnks for the quote :)
[19:30] <mikeal> the service discovery stuff I've never put a huge amount of stock in
[19:30] <_ry> isaacs: cool
[19:30] <deanlandolt> mikeal: this is less about service discovery and more about navigation
[19:30] <kriszyp> and working with generic REST clients (like in dojo), it would make couch a lot easier to work with if it has some way of indicating the links that it uses
[19:30] <mikeal> because even if you know how the interfaces to all the data work and you can dynamically work it all out, the actual data and document semantics aren't something that can be "discovered"
[19:30] <kriszyp> right, but the navigation can be automated
[19:31] <mikeal> yeah
[19:31] <mikeal> i guess I just rarely actually reference one document from another
[19:31] <deanlandolt> your views all reference docs
[19:31] <mikeal> usually they are pretty self contained and the stuff i need to index is what joins them together
[19:31] <kriszyp> for example in dojo, one can do a query/view request on couch, and if it knows the linking format, one can load the full item by calling store.loadItem()
[19:31] <mikeal> sure
[19:32] <mikeal> you could also just do the query with include_docs=true :)
[19:32] <kriszyp> it makes it really easy because the stores plug right into widgets
[19:32] <mikeal> then you don't even need another query
[19:32] <kriszyp> doesn't that do the full docs? obviously you don't want that in most cases
[19:32] <mikeal> yup
[19:32] <deanlandolt> mikeal: i thought that was discouraged because of the seek implications?
[19:32] <CIA-77> node: 03Michaeljohn Clement 07master * rac9d9f4 10/ src/node.js : better function test in addEventListener - http://bit.ly/dqbBLE
[19:32] <_ry> inimino: thanks
[19:32] <rauchg> _ry: the way http.createServer works now, when request.upgrade is true, the connection doesn't close upon write? 
[19:33] <_ry> rauchg: ?
[19:33] <isaacs> _ry: removed-removal aside, thoughts?  other things you'd like changed?
[19:33] <mikeal> deanlandolt: it's negligible 
[19:33] <rauchg> basically, how do i prevent the connection to close 
[19:33] <rauchg> for a websocket on top of http.Server
[19:33] <mikeal> if you're going to request all the docs in the query anyway, it's better to eat the seek instead of the extra query
[19:33] <_ry> isaacs: the first 3 seem fine 
[19:33] <kriszyp> but it can produce large query results if the docs are big
[19:33] <mikeal> hell, even if you only need a few of them
[19:33] <kriszyp> don't want to download a 1MB query for example
[19:33] <deanlandolt> oh...cool...but in any case you a lot of the time you just want to lazily load the docs
[19:34] <_ry> rauchg: you control the closing at that pint
[19:34] <mikeal> i'd still rather do a single 1MB query instead of 10 30K queries
[19:34] <_ry> rauchg: which isn't so good actually
[19:34] <_ry> because most people will ignore upgrade
[19:34] <deanlandolt> mikeal: sometimes you don't need 30K requests, especially in a ui paradigm that lazily loads results in
[19:35] <mikeal> it really depends on what you're optimizing for
[19:35] <rauchg> _ry: what happens if i don't want to close the connection but there's no HTTP Upgrade header 
[19:35] <rauchg> for example, xhr multipart 
[19:35] <rauchg> or xhr streaming
[19:35] <mikeal> in a few months, I'd say BrowserCouch is a better option for all of this
[19:35] <mikeal> just replicate the damn database in to localstorage
[19:35] <_ry> rauchg: by default it does keep-alive
[19:36] <mikeal> then you get offline, access is super fast and cheap
[19:36] <_ry> isaacs: can you rebase on top of inimino's latest commit
[19:36] <isaacs> _ry: yep.  noted.
[19:36] <isaacs> _ry: i'll rebase on top of whatever is in ry/master when i get around to it
[19:36] <deanlandolt> mikeal: what's this? where's BrowserCouch coming from?!
[19:37] <mape> jsconf?
[19:37] <rauchg> _ry: cool 
[19:37] <rauchg> i'm unsure about the benefits of .upgrade detection vs exposing a hijack() method in connection
[19:37] <mikeal> http://github.com/mikeal/browsercouch
[19:38] <mikeal> atul originally wrote it as an experiment
[19:38] <mikeal> i got it on github and started improving it
[19:38] <mikeal> and now peter braden has been going buck wild
[19:38] <mikeal> he's trying to get Futon working at the moment
[19:38] <deanlandolt> holy crap
[19:38] <mikeal> and i've gotta figure out how to shard a JSON serialized btree in to localstorage so we can persist view queries
[19:38] <deanlandolt> yeah, i remember when atul did that (as an example of why sql in the browser is the wrong solution)...didn't realize anyone ran with it htough...awesome!
[19:39] <mikeal> yeah
[19:39] <mikeal> peter got replication working
[19:39] <mikeal> now he's getting the by-sequence index functional so that it does better conflict resolution
[19:39] <mattly> oh awesome
[19:40] <mikeal> i love javascript
[19:41] piranha has joined the channel
[19:43] isaacs has joined the channel
[19:48] dhaza has joined the channel
[19:49] <dhaza> hi..what does the option "persistent" do in a fs.watchFile call?
[19:50] xla has joined the channel
[19:52] brapse has joined the channel
[19:55] Yuffster has joined the channel
[20:01] davidsklar has left the channel
[20:06] joshbuddy has joined the channel
[20:06] joshbuddy has joined the channel
[20:25] <tjholowaychuk> anyone here use any of Tim's various async DSLs?
[20:27] jed_ has joined the channel
[20:40] derbumi has joined the channel
[20:40] bmizerany has joined the channel
[20:43] psynaptic has joined the channel
[20:43] psynaptic has joined the channel
[20:45] psynaptic has left the channel
[20:51] pdelgallego has joined the channel
[20:54] Azeroth-IsWorkin has joined the channel
[20:57] mme has joined the channel
[21:01] sh1mmer has joined the channel
[21:03] darkf has joined the channel
[21:05] WALoeIII has joined the channel
[21:09] bmizerany has joined the channel
[21:12] <maushu> In the docs there is this: "Note that running untrusted code is a tricky business requiring great care. To prevent accidental global variable leakage, process.evalcx is quite useful, but to safely run untrusted code, many more steps must be taken."
[21:12] <maushu> What steps?
[21:12] jherdman has left the channel
[21:12] arnaudsj has joined the channel
[21:13] <frodenius> process isolation could be a solution
[21:13] sh1mmer has joined the channel
[21:14] quirkey has joined the channel
[21:18] <maushu> frodenius, done that, but that is just a single step.
[21:20] <mjr_> maushu: if you run untrusted code, you pretty much need to put it in a different process
[21:21] <mjr_> otherwise, things can leak out
[21:21] <maushu> ...thats process isolation.
[21:21] <mjr_> why, yes
[21:21] <mjr_> so your question is, if you didn't want to put it in a process, what steps should you take?
[21:23] <mjr_> Maybe we should change that bit in the docs to explicitly recommend process isolation for untrusted code.
[21:24] <felixge> _ry: you around?
[21:25] <felixge> _ry: are you sure about this: http://github.com/felixge/node/commit/b88e638daa0f3e6be5f591dcf41d8de74272cd2b#L1R726 ?
[21:25] <felixge> I mean it's the same logic I used for stdout and it's working
[21:29] derbumi has joined the channel
[21:30] rolfb has joined the channel
[21:34] javajunky has joined the channel
[21:36] devinus has left the channel
[21:40] iwasbiggs has joined the channel
[21:42] ssteinerX has joined the channel
[21:45] <CIA-77> node: 03Ryan Dahl 07master * r27ec33a 10/ wscript : Add some libpaths for SSL - http://bit.ly/bFDPui
[21:45] <_ry> felixge: yeah but the c function is also opposite
[21:45] <_ry> so it works
[21:45] <felixge> _ry: ah ok :)
[21:46] <felixge> _ry: I didn't know if tty meant blocking or non-blocking
[21:46] <_ry> (actually it would work either way - it'sjust going to block)
[21:46] <_ry> tty = nonblocking
[21:46] <_ry> not really the right term
[21:47] <_ry> stdoutCanPoll() would be better
[21:47] <_ry> stdoutCanPollOn()
[21:47] <_ry> :/
[21:47] <_ry> you can't poll (select()) on file file descriptors
[21:47] <_ry> you can on tty file descriptors
[21:48] <felixge> that's why libev exists, right?
[21:48] <_ry> nope
[21:48] <_ry> we're the only project that knows this
[21:48] <felixge> ?
[21:48] <felixge> you discovered a *nix secret?
[21:48] <felixge> :D
[21:48] <_ry> i mean, people know this - but no one tries to abstract it
[21:49] <_ry> yeah, it's basically a secret
[21:49] <_ry> there are no docs on it
[21:49] <felixge> ryan just unlocked the merlin of *nix badge :)
[21:49] <felixge> ok, let me see if I can get my patch fixed / cleaned
[21:50] <felixge> _ry: what needs to be done to support buffers in fs?
[21:50] <felixge> I really want that
[21:50] <_ry> did you see the patch i sent you
[21:50] <felixge> I didn't see an attachement
[21:50] <felixge> ok, turns out that was a problem with my eyes, it's there
[21:50] <felixge> let me apply that
[21:51] <felixge> _ry: so you directly edited my patch?
[21:52] keeto has joined the channel
[21:52] derbumi has joined the channel
[21:52] <_ry> felixge: kinda
[21:52] <felixge> _ry: hm, any pro tip on how I tell git to replace that patch?
[21:52] <felixge> :D
[21:53] <_ry> git reset --hard HEAD^^^; git am < patch
[21:53] <_ry> :)
[21:53] <_ry> can reflog the others later
[21:53] <felixge> _ry: well, but I'll have to manually cherry-pick the other patches I had?
[21:53] <felixge> ok
[21:54] <_ry> or just git checkout master; git checkout -b stdio_coupling2; git am < patch
[21:54] <_ry> git checkout -b stdout_coupling2 ry/master; git am < patch
[21:55] <_ry> whatever :)
[21:55] <felixge> I think git rebase -i is doing great
[21:55] <felixge> lets me edit the patch
[22:00] mattly has joined the channel
[22:05] <maushu> Woah, this process manager works pretty well.
[22:05] <maushu> :3
[22:05] <felixge> maushu: what ya hacking at?
[22:06] <javajunky> _ry: perhaps a stupid question, but when the openssl is fully integrated will there be js method available for sha1/md5 etc. ?
[22:06] <maushu> Remember appjet?
[22:06] <isaacs> _ry: what's git am?
[22:06] <_ry> javajunky: mm probably going to let that be outside
[22:06] <felixge> isaacs: applies a patch that is mail formated
[22:06] <_ry> javajunky: not sure though
[22:06] <maushu> javajunky, I think there already is.
[22:06] <_ry> isaacs: its for applying patches made with git-format-patch
[22:07] <isaacs> neat... but, doesn't git apply do the same thing?
[22:07] <_ry> git am commits the result
[22:07] <isaacs> oh, i see, this parses a mbox
[22:07] <_ry> git apply just makes changes
[22:07] <maushu> felixge, remember appjet?
[22:08] <felixge> maushu: vaguely, some sort of server site js stuff that didn't take off?
[22:08] charlesjolley_ has joined the channel
[22:08] <javajunky> maushu: Really ? .  I'm currently messing about with http://www-cs-students.stanford.edu/~tjw/jsbn/ for providing PKCS#1 ..and I've 'ported'/included http://pajhome.org.uk/crypt/md5/sha1.html for sha1 .. but I see that openssl includes all this stuff natively ..which would make things like oauth a damn sight faster :)
[22:08] <maushu> It did take off, they just decided to focus on another product.
[22:08] yatiohi has joined the channel
[22:08] <mjr_> It's really odd that Unix doesn't support select/epoll on file-based file descriptors.  How did that happen?
[22:09] <_ry> javajunky: yeah, i mean - i guess we should do that if we're already linking to openssl
[22:09] <maushu> I thought there was a module with that stuff.
[22:09] <_ry> javajunky: currently there is http://github.com/waveto/node-crypto
[22:09] <javajunky> maushu, there is but it requires compiling stuff, which I'd *like* to avoid, but if we're linking to something that provides it all ...
[22:09] <javajunky> indeed :) 
[22:09] <maushu> javajunky, http://github.com/brainfucker/hashlib
[22:10] <maushu> ...
[22:10] <maushu> oh.
[22:10] <maushu> But its faster! \o/
[22:10] saikat has joined the channel
[22:10] <tjholowaychuk> IMO we need a pure-js lib to mirror what hashlib or crypto provide
[22:10] <javajunky> maushu: yes, but its more off-putting for people new to node :) 
[22:10] <tjholowaychuk> so that we can just plug in whichever
[22:10] <felixge> _ry: those failing tests don't really make sense - do they?
[22:10] <_ry> ich moechte teil einer jugendbewegung sein
[22:11] <_ry> felixge: i didn't look into it really - do you get the same behavior?
[22:11] bmizerany has joined the channel
[22:11] rtomayko has joined the channel
[22:11] <felixge> _ry: I do, I'm not sure if it's caused by my patch
[22:11] <felixge> _ry: I'll check now
[22:12] <_ry> it is
[22:12] <javajunky> anyway, was just a question, if node is being built against openssl anyway it would be nice (imho) to expose some of those methods :) I'm off for bedski cu.
[22:12] <felixge> _ry: hm, not for me
[22:12] <felixge> _ry: I get the same on ry/master
[22:12] <_ry> for real?
[22:12] <felixge> _ry: I can do a 'make clean', but I don't think that should be it?
[22:12] <_ry> ACTION checks again
[22:13] <_ry> ./node_g test/simple/test-child-process-ipc.js works
[22:13] <felixge> (I'm still very confused about when I need to run 'make clean', it's only v8 upgrades right?)
[22:13] <felixge> not for me
[22:13] <felixge> Assertion failed: (0), function Binding, file ../src/node.cc, line 1314.
[22:13] <_ry> you sure you're on ry/master ?
[22:14] <felixge> Abort trap
[22:14] <felixge> yeah, 99% sure
[22:14] <felixge> I'll re-build from scratch
[22:15] <_ry> git rev-list HEAD -1
[22:15] <felixge> 27ec33aad73046b01fe23525e4d596771d2945be
[22:15] <_ry> yeah- make distclean
[22:15] <_ry> maybe you're hitting some other bug
[22:15] <_ry> i haven't seen that assert error
[22:17] sudoer has joined the channel
[22:18] <tjholowaychuk> *needs to learn python / understand waf better
[22:19] cruxst has joined the channel
[22:24] <felixge> _ry: getting the error on the fresh build as well
[22:24] aryounce has joined the channel
[22:24] aryounce has left the channel
[22:24] <felixge> _ry: it happens on pretty much every test in debug mode
[22:24] <tjholowaychuk> anyone know if jsconf vids are up anywhere
[22:24] <felixge> tjholowaychuk: I think they'll need some more time for post-production
[22:25] <tjholowaychuk> damn :(
[22:29] dgathright_ has joined the channel
[22:29] <felixge> _ry: can you reproduce the issue?
[22:29] Tim_Smart has joined the channel
[22:31] <_ry> felixge: nope
[22:31] <_ry> felixge: mac?
[22:31] <felixge> _ry: y
[22:32] <_ry> felixge: 
[22:32] <_ry> http://buildbot.nodejs.org:8010/waterfall
[22:32] <_ry> you sure you don't have uncommited changes?
[22:33] <felixge> yeah, 100% sure
[22:33] <_ry> felixge: http://www.flickr.com/photos/tr4nslator/4531793017/
[22:33] <felixge> :)
[22:34] <felixge> I guess it would rock if somebody else could run 'make test-all' on osx?
[22:35] <tjholowaychuk> hold up i will
[22:35] Yuffster has joined the channel
[22:35] <tjholowaychuk> running
[22:35] <_ry> felixge: which tests are you hitting that on?
[22:35] <felixge> _ry: every test in debug mode
[22:37] felixge has joined the channel
[22:37] felixge has joined the channel
[22:37] <_ry> felixge: [01:49|% 100|+ 156|-   0]: Done                                      
[22:37] <felixge> _ry: on osx?
[22:37] <_ry> yeah
[22:39] <felixge> _ry: hm, damn. gotta head to bed now - will try to come on early tomrrow morning to catch you
[22:39] <felixge> tjholowaychuk: I'll check the log if you post results
[22:39] <felixge> gn8
[22:39] <_ry> felixge: lter
[22:39] <tjholowaychuk> sounds good, just had to build
[22:39] <tjholowaychuk> [00:33|% 100|+  78|-   0]: Done
[22:40] <_ry> tjholowaychuk: ./configure --debug
[22:40] <tjholowaychuk> fuck
[22:40] <tjholowaychuk> haha
[22:43] <tjholowaychuk> just finished building
[22:44] charlesjolley_ has joined the channel
[22:44] <tjholowaychuk> _ry: what does the debug mode even alter / add ? so far everything has been straight forward i havent checked out any debugging / profiling functionality for v8 or node
[22:47] <tjholowaychuk> _ry: [02:10|% 100|+ 156|-   0]: Done
[22:48] micheil has joined the channel
[22:49] hassox has joined the channel
[22:50] gf3 has joined the channel
[22:56] charlesjolley_ has joined the channel
[23:05] siculars has joined the channel
[23:08] freshtonic has joined the channel
[23:13] jtaby_ has joined the channel
[23:25] creationix has joined the channel
[23:28] <_ry> tjholowaychuk: there are a lot of assert()s in the code that get compiled out 
[23:28] <_ry> tjholowaychuk: node_g keeps them in
[23:29] <_ry> sanity chekcs basically
[23:29] <tjholowaychuk> right duh, totally forgot about assert
[23:30] <_ry> node_g finds a lot of bugs
[23:30] ssteinerX has left the channel
[23:30] <_ry> it's pretty useful to check it
[23:31] <tjholowaychuk> make install does not install node_g right? or do you have to configure with --debug 
[23:34] <tjholowaychuk> if thats the case ill add it to nvm so its easy to switch between the two
[23:35] <CIA-77> node: 03Julian Lamb 07master * r5f8f561 10/ (4 files in 4 dirs): add setKeepAlive function, which enables and sets the TCP keep-alive timer - http://bit.ly/94qGCs
[23:36] <_ry> tjholowaychuk: it does
[23:36] <tjholowaychuk> _ry: weird.. all I have is node, node-waf, and node-repl
[23:36] <_ry> you have to configure with --debug
[23:36] <maushu> You need to compile with the debug flag?
[23:37] <maushu> *configure
[23:37] <tjholowaychuk> _ry: oh and then you get regular node AND node_g?
[23:37] <tjholowaychuk> <-- newb
[23:37] <_ry> yeah
[23:42] <creationix> tjholowaychuk: did you see my changes to my version of nvm?
[23:42] <tjholowaychuk> creationix: nope
[23:42] mattly has joined the channel
[23:42] <tjholowaychuk> creationix: k did now
[23:42] <tjholowaychuk> haha
[23:42] <creationix> I implemented the TODOs in my PATH based version
[23:45] kenneth_reitz has joined the channel
[23:50] mikeal has joined the channel
[23:57] rtomayko has joined the channel
