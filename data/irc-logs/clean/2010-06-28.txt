[00:14] statim has joined the channel
[00:15] <statim> throwing something out there, let me know if anyone has heard of such a thing: data.get('users').get('123').val() would return data['users']['123'], but wouldnt error if data['users'] didnt exist. Â likewise data.get('users').get('123').set('name', 'bob') would make data.users['123'].name == 'bob'. Â sort of a magic object that isnt picky about errors. Â anyone seen something like this?
[00:16] <mape> json path thingy
[00:16] <jashkenas> statim: yes. check out soaks in CoffeeScript, and safe navigation in Groovy.
[00:16] <mjr_> jashkenas: oh, bummer.  Well, at least now you know more about regex. 
[00:16] <statim> mape, yes probably... although not sure json path can set as well as get
[00:16] <statim> jashkenas:  cool will check thanks
[00:16] <jashkenas> statim: data.users?.property.call()
[00:17] <jashkenas> would return undefined if data.users didn't exist.
[00:18] <statim> jashkenas:  ahh cool so the ? just prevents the rest from happening if its null
[00:18] <jashkenas> yep.
[00:18] <statim> that is cool... wonder how hard it would be to do that in js, not familiar with coffeescript
[00:19] <mape> its evil
[00:19] <jashkenas> statim: that line above compiles into this JS: 
[00:19] <jashkenas> data.users == undefined ? undefined : data.users.property.call();
[00:20] <statim> jashkenas:  right, i mean to make it as elegant though haha
[00:22] <Tim_Smart> statim: You could always create a 'Model' prototype that you can re-use
[00:27] liucougar has joined the channel
[00:30] bacon__ has joined the channel
[00:33] steadicat has joined the channel
[00:35] mw has joined the channel
[00:37] paramaw has joined the channel
[00:39] joshbuddy has joined the channel
[00:39] joshbuddy has joined the channel
[00:47] ajpiano has joined the channel
[00:48] pgriess has joined the channel
[00:50] freshtonic has joined the channel
[00:50] findyourownpath has joined the channel
[00:51] findyourownpath_ has joined the channel
[01:00] KaptianKrispy has joined the channel
[01:08] khug has joined the channel
[01:09] derferman has joined the channel
[01:12] <KaptianKrispy> mde: you there?
[01:14] shimon_ has joined the channel
[01:14] gbot2 has joined the channel
[01:14] derferman has joined the channel
[01:16] ditesh|cassini has joined the channel
[01:17] benburkert has joined the channel
[01:18] shimon_ has joined the channel
[01:18] <shimondoodkin> bla bla test
[01:18] hassox has joined the channel
[01:18] <shimon_> it works
[01:19] gbot2 has joined the channel
[01:19] malkomalko has joined the channel
[01:22] <malkomalko> anyone have any suggestions using node for making soap calls?  I'm trying to interact with some api's that use soap
[01:23] <shimondoodkin> soap is http
[01:23] <manveru> xml over http
[01:23] <shimondoodkin> you can also post form/xml-encoded
[01:23] <shimondoodkin> as post body insted form-url-ecoded
[01:24] <shimondoodkin> also you can keep alive
[01:24] <malkomalko> alright, let me try out a few things, that should point me in the right direction I think
[01:25] <manveru> how do you decode base64?
[01:25] <manveru> anything builtin?
[01:26] zenom_ has joined the channel
[01:26] <shimondoodkin> http://www.w3schools.com/SOAP/soap_example.asp
[01:26] <shimondoodkin> ther eis a base 64 js file in several frameworks
[01:27] <zenom_> I'm new to node.js and I am messing with the twitter-node library for node.js. Basically I want to stream the latest 10 twitter items to our site.  I got the code working to grab the tweets....
[01:27] liucougar has joined the channel
[01:27] <zenom_> my question is, how do I make the browser connect to the server? When I get the tweets how do I push them to the browser in otherwords?
[01:28] <mscdex> zenom_: you can use something like socket.io
[01:28] <zenom_> Do I just create a server as well, then on the emit for "tweet" with twitter-node add it to the output?
[01:30] kersny has joined the channel
[01:31] <shimondoodkin> theoreticaly you should do server side pool and do long pool on client side
[01:32] <shimondoodkin> wich means in php you pool you node server and get the tweets or load it from file to render it on server
[01:32] <shimondoodkin> long pool means
[01:32] marshall_law has joined the channel
[01:32] <shimondoodkin> you do ajax request
[01:32] <Tim_Smart> long poll you mean
[01:32] <shimondoodkin> as it receives data it requests another one
[01:32] <mscdex> some browsers can do better than long poll though
[01:32] <Tim_Smart> Or you use socket.io, and it handles duplex communication for you.
[01:33] <mscdex> well, pretty much all browsers but IE
[01:33] <mscdex> all major browsers :-P
[01:33] <shimondoodkin> lets ignore ie
[01:33] <mscdex> even so, socket.io still handles long poll too
[01:33] <shimondoodkin> :P
[01:34] <shimondoodkin> is ther a long pool server example anywhere?
[01:34] <Tim_Smart> IE does special ActiveX "multipart" style html pages
[01:34] <mscdex> IE does long poll i'm afraid
[01:34] <shimondoodkin> tim ?what?
[01:34] <mscdex> :-\
[01:34] <mscdex> firefox does multipart
[01:34] <zenom_> shimondoodkin: are you saying like save to mongodb and ajax request from mongodb?
[01:34] <shimondoodkin> i think ie also does multipart
[01:34] <mscdex> chrome and latest safari/webkit nightly uses websockets
[01:34] <zenom_> or am i misunderstanding
[01:35] <mscdex> i've never seen IE do multipart
[01:35] <Tim_Smart> shimondoodkin: Just use http://socket.io/
[01:35] <shimondoodkin> i dont know
[01:35] <Tim_Smart> Bam. Real-time communication solved.
[01:36] <shimondoodkin> cool
[01:37] <zenom_> guess I still don't get what you guys are saying :)
[01:37] <shimondoodkin> you have an example in the website
[01:38] <shimondoodkin> it does realtime client
[01:38] <sechrist_> socket.io is
[01:38] <shimondoodkin> and there is also a node js server
[01:38] <sechrist_> awesome
[01:38] <shimondoodkin> yes it is a url
[01:39] <shimondoodkin> Tim does socket.io  has sendToAll kind of?
[01:39] <mscdex> it has a broadcast method
[01:40] <_announcer> Twitter: "Too many nodejs modules, too little time to read the source." -- A'braham Barakhyahu. http://twitter.com/BlessYahu/status/17212940910
[01:40] <_announcer> Twitter: "fabjs is twisting my noodle.  Think I'm going to stick with raw js, till I learn node better." -- A'braham Barakhyahu. http://twitter.com/BlessYahu/status/17212956176
[01:41] <shimondoodkin> socket io has a confusing and funny url 
[01:46] <shimondoodkin> bye
[01:58] <_announcer> Twitter: "well, maybe some smaller nodejs modules as well..." -- A'braham Barakhyahu. http://twitter.com/BlessYahu/status/17214455262
[01:58] SteveDekorte has joined the channel
[01:59] <mscdex> someone ought to point BlessYahu to the node api docs at the bottom of the page
[01:59] <mscdex> :-P
[02:01] joshbuddy has joined the channel
[02:01] statim has left the channel
[02:05] JimBastard has joined the channel
[02:05] <JimBastard> man, this dual-sided stuff is bending my fucking mind
[02:06] <JimBastard> getting the require() to work right is fucking hard
[02:06] <JimBastard> mape: can i get a jsonp feed of the irc stats? ill setup an interface if you want
[02:07] <JimBastard> i got my ass kicked today by binary file reading and commonjs async script loading in the browser. i could use something fun >><<
[02:09] wilmoore has joined the channel
[02:10] paramaw_ has joined the channel
[02:10] SamuraiJack has joined the channel
[02:16] softdrink has joined the channel
[02:21] findyourownpath_ has joined the channel
[02:21] <pkrumins> just pushed node-video out
[02:21] <pkrumins> http://github.com/pkrumins/node-video
[02:22] <pkrumins> it's doing theora video over node
[02:22] <pkrumins> it can stream it also via <video> tag, but I didn't push that yet.
[02:22] <pkrumins> needs more work, also works on FireFox only, as Chrome has bugs (writing bugreport to them now)
[02:23] <pkrumins> didn't write readme yet, that tomorrow together with Stacked Video.
[02:24] <pkrumins> the c++ source code has an easter egg btw
[02:24] <pkrumins> whoever notices it gets a laugh
[02:25] <ryah> pkrumins: you need some docs :)
[02:25] <pkrumins> ryah: i always document thoroughly :) (see other projects for proofs, like node-png or node-jpeg)
[02:26] <pkrumins> I'm adding the docs tomorrow :)
[02:26] <ryah> pkrumins: http://github.com/pkrumins/node-video/blob/ad400a33679dc578984e9f8515a0711564f17a1f/tests/theora-frames-full.js#L42-47
[02:27] <pkrumins> looking
[02:27] <ryah> 1) why binary
[02:27] maqr has joined the channel
[02:27] <ryah> 2) why sync
[02:27] <ryah> 3) why settimeout?
[02:27] tarion3 has joined the channel
[02:28] <pkrumins> oh, settimeout to illustrate a lagging streaming server that sends one frame piece every 100ms
[02:28] <pkrumins> sync just to write it quicker without another callback
[02:28] mtodd has joined the channel
[02:28] <pkrumins> binary because well i am on node 0.1.95, and it seems to require 'binary' to send binary data? no?
[02:29] <pkrumins> this is just a test for <video> tag streaming
[02:29] <pkrumins> nothing major, i'll probably reorganize code
[02:29] <pkrumins> this actually should go into discovery/ directory
[02:30] <pkrumins> that i put things that i discover as i hack on a project
[02:30] <maqr> i'd like to start using javascript as a scripting language the way one might use perl or python or ruby... is node.js a sensible starting point? or is there some other commonjs project i shuold be looking at?  my aim isn't to write a web app, but to have the largest library of modules available
[02:30] <pkrumins> and a real test of streaming will use the StreamingVideo from node-video module.
[02:30] <jashkenas> maqr: if you want the largest library of modules ... look at Rhino. You can get at Java from there.
[02:31] <Tim_Smart> maqr: Node.js can also fits your needs there, if you are look for something async
[02:31] <maqr> jashkenas: hmm, ok
[02:32] <maqr> Tim_Smart: i am... but is node.js limited to the modules found in the nodejs api?
[02:32] <Tim_Smart> maqr: Reasonably easy to create bindings to C / C++ library. Also http://wiki.github.com/ry/node/modules
[02:33] <Tim_Smart> *libraries
[02:33] <maqr> Tim_Smart: wow, that's a much larger amoutn than i expected
[02:33] <jashkenas> maqr: that page is your one stop shop for node modules.
[02:34] <maqr> jashkenas: rhino looks more mature, but way harder to get into... i'm looking to write little applications, not servlets or beans or anything like that
[02:35] <maqr> node.js looks great, my first impression was it was for writing web servers... but i think this will work fine :)
[02:35] <jashkenas> maqr: all for the best then. what sort of modules are you looking for?
[02:36] <Tim_Smart> Node.js is still very network orientated, but I'll be one to toast for change.
[02:36] <maqr> jashkenas: mostly stuff for getting at files, parsing them, posting them to a web server, and checking for results
[02:36] <Tim_Smart> Definitely has quite a bit of potential in the GUI field.
[02:37] <ryah> the network is the computer
[02:37] <maqr> jashkenas: which looks like all the node.js stock api could handle... i just wanted to make sure i'm not trying to fit myself into a web server framework, just because the api makes it look like it could be done
[02:37] <mjr_> The node.js is the computer.
[02:37] <maqr> jashkenas: if people are using node.js for other things, and it looks like they are, then it's probably a safe bet
[02:38] <jashkenas> maqr: yeah, it's very well suited for that. files + http are great right now.
[02:38] <ryah> maqr: it's not a web framework - just good support for http
[02:38] <jashkenas> ryah: if you're around now, I'd be very curious to hear your thoughts on Steve Dekorte's comparison of a Node.js/callback proxy versus an Io/coros proxy: 
[02:38] <jashkenas> Node: http://www.iolanguage.com/paste/p/f05588fa6.html
[02:38] <jashkenas> Io: http://www.iolanguage.com/paste/p/2f7b5fce1.html
[02:39] <maqr> jashkenas: my plan is to make a little tool for tumblr theme developers to push up their latest work, rather than having to use tumblr's web interface, if you were wondering :)
[02:39] <mjr_> I noticed that one has fewer lines.
[02:39] <jashkenas> maqr: fun.
[02:39] <maqr> ryah: oh ok, all the buzz i hear is about how it's X times faster than a normal webserver
[02:39] <maqr> and i'm not sure what "evented I/O for V8" really means yet :)
[02:40] <jashkenas> mjr_: I think that the question is more about whether we're comfortable and settled on writing out the explicit callback form, longhand. Or if it seems like there's room for improvement with this example (coros or not).
[02:40] <Tim_Smart> jashkenas: I would have thought you could just set up a sys.pump to create a good proxy
[02:41] <mjr_> maqr: the phrase "evented IO for V8 JavaScript" is what got me involved, but I agree that it can be a bit opaque if you don't know why that combination of things is interesting.
[02:41] <ryah> maqr: that's okay. mostly it's in development - but 6 months from now hopefully node will be a good choice for end users
[02:41] <maqr> sounds like a good place to jump in then :)
[02:41] <jashkenas> Tim_Smart: is sys.pump documented yet?
[02:41] <maqr> i'd say i "know" js, but i've only ever used it inside the web browser
[02:42] <ryah> maqr: that said, i think node is the only ssjs project worth pursing right now
[02:42] <Tim_Smart> jashkenas: Nope. But it documents itself particularly well: http://github.com/ry/node/blob/master/lib/sys.js#L286-302
[02:43] <Tim_Smart> Actually, it could might as well be.
[02:43] <maqr> ryah: it's odd, because other languages seem to have the web tacked on later... but with javascript, i didn't even know that one could require() until i started reading the node.js docs, and i never thought of it in any standalone way
[02:43] <ryah> jashkenas: two different styles to writing evented code
[02:43] <maqr> ryah: unless the 'ss' in 'ssjs' really just means "will run outside of a web browser"
[02:44] <ryah> jashkenas: one is 'javascripty' and simple
[02:44] steadicat has joined the channel
[02:44] <ryah> the other is not javascripty and involves context switching
[02:44] <zenom_> since I cannot do an ajax request across ports it appears, how do you guys suggest me getting my data to a ruby app that is being pulled from a node.js (twitter updates is the data in json format)
[02:44] <jashkenas> ryah: so you're comfortable with the difference -- that's encouraging to hear. thanks.
[02:45] <ryah> i'm fairly convinced combining cooperative threads with events is a horrible choice - it should be one or the other
[02:46] <ryah> hence node will never have it
[02:46] kriszyp_ has joined the channel
[02:47] <ryah> because it's too difficult to keep track of yields. complicates programming model
[02:48] <ryah> (note: node used to have "promises" which could "wait()" for completion - it was awful and i removed it because of the bug it led to)
[02:48] <ryah> (the implementation was also really bad - but that wasn't why it was removed)
[02:50] <ryah> if you have coroutines with tcp sockets that emit 'data' events (instead of looping and doing a blocking read()), you need to be very very careful everytime you call a function
[02:50] <ryah> because that function might yield
[02:50] <ryah> somewhere very high up in the callstack even - in some 3rd party module
[02:50] <ryah> and you get context switched out
[02:50] <ryah> then your back on the event loop
[02:50] <ryah> and you might, for example, recieve another 'data' event
[02:51] <ryah> and now you re-enter the same callback before the previous one had completed
[02:51] <ryah> this requires explicit locking for a lot of states
[02:51] <Tim_Smart> and locking is annoying
[02:51] <jashkenas> sure. that all makes sense implementation-wise. threads are threads are threads.
[02:51] <jashkenas> I was wondering from more of an aesthetic perspective ...
[02:52] <ryah> jashkenas: i find the event model reflect reality
[02:52] <ryah> one process - one thread
[02:52] <ryah> sorry, i find the event model reflects reality better
[02:53] <ryah> and i think in complex I/O systems the event model is easier to work with
[02:53] <ryah> because in the end - the compter is evented
[02:54] <ryah> there isn't something sitting in a loop polling a socket ofr new data
[02:54] <ryah> doing a blocking read()
[02:54] <jashkenas> that's a nice argument -- from first principles.
[02:54] <ryah> data arrives
[02:54] <ryah> you handle it
[02:54] <ryah> there are all these layers that try to simplify this reality
[02:54] <Tim_Smart> jashkenas: I also found his javascript example seems to as bloated as possible
[02:54] <Tim_Smart> jashkenas: I'll see if I can re-write it
[02:54] <ryah> and that is largely why software sucks
[02:54] <jashkenas> ryah: you might want to add some of these thoughts to your node.js/#about section. It talks about servers and speed, but talking about events as reflecting the reality of the computation is a nice way to think about it.
[02:55] fizx has joined the channel
[02:55] <ryah> mjr_: i want to write a new libc
[02:55] <jashkenas> Tim_Smart: looking forward to seeing it.
[02:55] <ryah> mjr_: like diet libc
[02:56] <ryah> mjr_: but only expose nb io
[02:56] <ryah> mjr_: don't have to follow posix either, since it's sucks
[02:56] <ryah> s/'s//
[02:56] <ryah> node for c, that is
[02:56] <ryah> just do syscalls directly
[02:57] <ryah> it would be meant to statically link to
[03:02] <Tim_Smart> jashkenas: ryah: I'm pretty sure this is all you need for a proxy? http://gist.github.com/455395
[03:05] <Tim_Smart> + that uses buffers rather than strings which means better performance
[03:08] <jashkenas> ah, sys.pump isn't in the current release.
[03:08] <jashkenas> Tim_Smart: http://gist.github.com/455396
[03:09] <Tim_Smart> Looks good. I'm not sure if I prefer new Number() over parseInt though
[03:11] <Tim_Smart> Either way, I like it a lot better than io-language's approach. It is far less cryptic
[03:12] <Tim_Smart> (Or maybe its just because I have stared at Javascript for more hours of my life)
[03:12] bradleymeck1 has joined the channel
[03:13] <bradleymeck1> how do you authenticate as the same npm user on a different machine?
[03:14] <Tim_Smart> bradleymeck1: Manually set the config?
[03:14] <Tim_Smart> take a look in ~/.npmrc
[03:14] <bradleymeck1> guess thats the standard way :/
[03:17] <Tim_Smart> jashkenas: Was that from a blog post written by Steve or something? Or are you talking to him?
[03:17] <jashkenas> Tim_Smart: both of those are from a conversation earlier in this room. If you look in the debuggable logs for today, you'll see it.
[03:18] <Tim_Smart> !logs
[03:23] <Tim_Smart> jashkenas: Found and read.
[03:26] mtodd has joined the channel
[03:26] rauchg_ has joined the channel
[03:28] ako has joined the channel
[03:38] findyourownpath has joined the channel
[03:38] <_announcer> Twitter: "Node.js for .net allready exists; it's called IAsyncHttpHandler #LittleKnownFact #dotnet #web" -- Tom Janssens. http://twitter.com/ToJans/status/17223209854
[03:38] softdrink has joined the channel
[03:40] bpot has joined the channel
[03:45] Aria has joined the channel
[03:47] <rauchg_> *right*
[03:51] <Tim_Smart> People will always try and justify themselves...
[03:55] <chilts> that's pretty funny, take _one_ aspect and say "It's the same"
[03:58] cataska has joined the channel
[03:58] aho has joined the channel
[04:04] fizx has joined the channel
[04:06] <_announcer> Twitter: "Seems like this. 48 node.js time to make application with the contest. http://nodeknockout.com/" [ja] -- ç«ä¹ä». http://twitter.com/tricknotes/status/17225068042
[04:07] fizx_ has joined the channel
[04:09] Validatorian has joined the channel
[04:18] <mjr_> ryah: I think the embedded Linux people have themselves a diet libc, no?
[04:20] <mjr_> ryah: but what do you need from libc anyway?  
[04:25] mattly has joined the channel
[04:27] <mape> Ah, bbq
[04:35] softdrink has joined the channel
[04:37] davidwalsh has joined the channel
[04:49] <marshall_law> creationix: fyi, i'm in mountain view this week
[05:12] satori has joined the channel
[05:21] liucougar has joined the channel
[05:22] <creationix> marshall_law: awesome, we should meet up
[05:23] <marshall_law> yup
[05:23] <marshall_law> tues or wed would be good for me
[05:23] <marshall_law> i don't have a car, so anything nearby a caltrain station is preferable ;)
[05:23] <creationix> how about a node meetup wednesday night in Palo Alto
[05:23] <creationix> we're less than a mile from the caltrain
[05:24] <Tim_Smart> creationix: Steal this if you wanna: http://github.com/biggie/biggie-router/blob/master/lib/biggie-router/modules/static.js#L52-58 http://github.com/biggie/biggie-router/blob/master/lib/biggie-router/modules/gzip.js#L37-70
[05:24] <marshall_law> sounds ideal
[05:24] <creationix> I live just a block from the station and I walk to work every day
[05:24] <marshall_law> beautiful
[05:24] <marshall_law> i know the palo alto station relatively well
[05:26] marshall_law_ has joined the channel
[05:26] <creationix> ryah: would you be able to come down wednesday evening for a node metup?
[05:27] softdrink has joined the channel
[05:27] <Tim_Smart> Hmm I need a better way of chaining pumps
[05:28] <creationix> Tim_Smart: thanks, I'll look at them tomorrow, I'm off to bed
[05:29] <creationix> It's still Sunday night here
[05:30] marshall_law has joined the channel
[05:30] <Tim_Smart> 5:30pm Monday here :p
[05:30] <creationix> yeah, I know, crazy
[05:33] creationix has joined the channel
[05:33] pandark_ has joined the channel
[05:33] creationix has joined the channel
[05:33] jsilver has joined the channel
[05:37] marshall_law has joined the channel
[05:39] marshall_law_ has joined the channel
[05:54] jsilver has joined the channel
[05:55] derferman has joined the channel
[06:02] MattJ has joined the channel
[06:04] <_announcer> Twitter: "Node.js variable scoping is irritating the hell outta me. I'm giving this thing 10 more minutes before I pour the scotch. #promiseandathreat" -- Clint Andrew Hall. http://twitter.com/clintandrewhall/status/17231276931
[06:09] ph^ has joined the channel
[06:12] tlrobinson_ has joined the channel
[06:13] qFox has joined the channel
[06:15] khug has joined the channel
[06:16] <rauchg_> ryah: how did you set up that bot ? it's pretty rad
[06:16] <mape> announcer?
[06:16] derferman has joined the channel
[06:17] mikeal has joined the channel
[06:17] <rauchg_> mape: yes
[06:17] <mape> nope that wasen't ryan
[06:18] <rauchg_> who is it 
[06:21] <mape> someone who doesn't idle
[06:22] <satori> Hi node ppl. Is there anyone here who can give me advice on how to deal with blocking c++ functions in addons?
[06:23] <satori> I am currently using the eio thread pool to call the blocking methods. Is this advised?
[06:25] <manveru> how do you guys handle POST uploads that are base64?
[06:25] <manveru> i've tried a couple of js implementations for base64 decode, but i always end up with a corrupted binary output
[06:27] <satori> there is a node addon for base64 - http://github.com/pkrumins/node-base64 should be faster than pure js. Not used it myself
[06:27] <manveru> yeah, i tried that... same result
[06:27] <mape> There was a patch that exposed the base64 function node uses internally
[06:27] <manveru> i converted the same input in ruby and get the correct output...
[06:28] <manveru> so i'm sure my data is fine
[06:28] <manveru> vbindiff shows that there is an extra first byte in the output of js
[06:29] <mape> File an issue with the implementations and supply example data?
[06:29] <manveru> "C2 89 50 4E 47 0D 0A 1A" instead of "89 50 4E 47 0D 0A 1A 0A"
[06:29] <mape> Or ask pkrumins
[06:31] <manveru> i'll file one if i find the cause...
[06:33] <benoitc> mm how can extend String object in a module ?
[06:34] ph^ has joined the channel
[06:35] <mape> extend the prototype?
[06:39] <benoitc> mape: yes but I get undefined error
[06:39] <benoitc> so I guess I have to export it or smth like it
[06:40] <satori> Not for javascript type like String.
[06:40] <satori> String.prototype.myFunc = function() {}; should work anywhere
[06:40] <mape> benoitc: you want to extend the prototype inside of a module and have that be used in the other scope?
[06:42] <benoitc> i've done http://www.friendpaste.com/6NoWm5RbQ4PkYg8Yoga2YW like you do , but when I want to use it in an exported function from the mulde (export.myFunc = function() {} ) it's undefined
[06:42] <benoitc> mape: ^^
[06:43] <benoitc> so I think  I need to make changes globally
[06:43] <mape> exports
[06:44] MattJ has joined the channel
[06:45] <benoitc> uh ?
[06:45] <mape> exports.myFunc
[06:45] <benoitc> ah yes
[06:45] <benoitc> but that's not the pb, just a typo here
[06:46] trochala has joined the channel
[06:46] <benoitc> my porblem is to expose modified String in exported functions
[06:47] <mape> To be honest I'm not really sure you can since I believe the modules run sandboxed
[06:47] <satori> I just tried this and it works as expected
[06:47] <satori> in mymodule.js:
[06:47] <satori> String.prototype.myFunc = function() { return "TEST" }
[06:47] <satori> in test.js:
[06:47] <satori> var mymod = require("./mymodule");
[06:47] <satori> var sys = require("sys");
[06:47] <satori> sys.puts("".myFunc());
[06:47] <satori> works fine
[06:49] <mape> Good to know :)
[06:50] <benoitc> satori: try in the same module exports.somefunc = function() { "".myFunc() };
[06:50] <benoitc> here it's undefined
[06:51] <satori> there is no return statement in your somefunc function
[06:51] <satori> it's not reutrning anything at all hence undefined.
[06:51] <benoitc> mmm nm my object was undefined
[06:52] <satori> ahh
[06:52] <benoitc> sry for the noise
[06:52] virtuo has joined the channel
[06:53] <satori> try this...
[06:53] <satori> mymodule.js:
[06:53] <satori> var sys = require("sys");
[06:53] <satori> String.prototype.myFunc = function() { return "TEST" }
[06:53] <satori> exports.someFunc = function() { sys.puts("".myFunc()) };
[06:53] <satori> test.js:
[06:53] <satori> var mymod = require("./mymodule");
[06:53] <satori> mymod.someFunc()
[06:53] <_announcer> Twitter: "Interesting things are happening. Node.js-like systems revolutionizing our understanding of arzitekture Web services." [ru] -- Nick Mitin. http://twitter.com/NickMitin/status/17233376231
[06:54] <_announcer> Twitter: "Node.js can not configure, but to write a network service that needs the project." [ru] -- Nick Mitin. http://twitter.com/NickMitin/status/17233395795
[06:54] <satori> The String object protoype *is* modified globally as soon as you add the prototype method
[06:54] marshall_law_ has joined the channel
[06:58] kriszyp has joined the channel
[06:58] kodisha has joined the channel
[06:58] nuba has joined the channel
[06:58] SvenDowideit has joined the channel
[06:58] coffeecup has joined the channel
[06:58] tsyd has joined the channel
[06:58] callen has joined the channel
[06:58] mqt has joined the channel
[06:58] eyzn has joined the channel
[06:58] Pilate has joined the channel
[06:59] marshall_law has joined the channel
[06:59] <manveru> omg
[06:59] dabreaka has joined the channel
[06:59] <manveru> i solved it...
[07:00] <manveru> forgot passing encoding to fs.writeFile
[07:00] <manveru> so it used utf8 instead of binary
[07:01] <mape> Anyone here used node+textmate?
[07:01] <mape> manveru: hehe
[07:06] <manveru> wonderful :)
[07:06] <manveru> spent half my battery figuring that out :(
[07:08] marshall_law__ has joined the channel
[07:08] jsilver has joined the channel
[07:08] rauchg_ has joined the channel
[07:10] marshall_law has joined the channel
[07:10] teemow has joined the channel
[07:10] dabreaka_ has joined the channel
[07:12] <_announcer> Twitter: "Lazeroids:  Andy Baio : Lazeroids - multiplayer HTML5 Asteroids with Node.js, JQuery, and audio; source here   http://lazeroids.com/" -- Paolo Patronimic. http://twitter.com/salve/status/17234161212
[07:12] <_announcer> Twitter: "@ NickMitin not so much Node.js, as general idea of event programming. I recently write little things on AnyEvent, and it is very good. easy" [ru] -- Ð¡ÐµÑÐ³ÐµÐ¹ ÐÐ°ÑÑÑÐ½Ð¾Ð². http://twitter.com/martynov/status/17234169825
[07:13] marshall_law has joined the channel
[07:14] linuxsable has joined the channel
[07:17] RR_ has joined the channel
[07:17] linuxsable has joined the channel
[07:18] marshall_law_ has joined the channel
[07:25] marshall_law has joined the channel
[07:27] marshall_law_ has joined the channel
[07:28] khug has joined the channel
[07:28] tyfighter has joined the channel
[07:31] ewdafa has joined the channel
[07:32] mql_ has joined the channel
[07:33] <khug> mape: yep
[07:33] <mape> khug: for commands?
[07:34] <khug> oh, no node-specific bundles if that's what you're getting at
[07:35] <khug> thought maybe fs.watchFile was acting up since txmt scans the directories all the time
[07:36] <khug> which, coincidentally, you can compare the mtime's in the callback to weed out the traffic
[07:37] marshall_law_ has joined the channel
[07:42] khug has joined the channel
[07:42] jetienne has joined the channel
[07:43] marshall_law has joined the channel
[07:45] marshall_law_ has joined the channel
[07:47] xla has joined the channel
[07:48] marshall_law_ has joined the channel
[07:50] mAritz has joined the channel
[07:51] aubergine has joined the channel
[07:52] marshall_law has joined the channel
[07:53] marshall_law_ has joined the channel
[08:00] zomgbie has joined the channel
[08:02] romainhuet has joined the channel
[08:06] SteveDekorte has joined the channel
[08:08] <mAritz> Sembiance: i'm working on a node-redis-orm. any requests? :)
[08:08] <benoitc> does HttpClient maintain a pool of connectios for keepalive or should i maintain it ?
[08:08] <benoitc> connections
[08:09] <SteveDekorte> ryah: you mentioned the need to be careful when using coros - I find the opposite - that I encounter more unexpected and complex behavior with callbacks
[08:10] marshall_law has joined the channel
[08:10] khug has joined the channel
[08:10] <mape> SteveDekorte: why not do mongo instead? :)
[08:10] <mape> * mAritz 
[08:10] <SteveDekorte> mape: mongo?
[08:11] <mAritz> mape: i don't know... i don't like the name "mongo". :P
[08:11] <mape> incorrect tab, but perhaps that has with "experience" of the language to do?
[08:11] <mape> meh
[08:11] <_announcer> Twitter: "Node.js HTML5 driven multiplayer Asteroids - source code available. http://lazeroids.com/" -- Christian Heilmann. http://twitter.com/codepo8/status/17236530544
[08:11] <mAritz> i don't even really know anything about mongo. i'll look it up, wait a second :)
[08:12] <SteveDekorte> what is mongo? :)
[08:13] <Validatorian> Aria been on?
[08:13] <RR_> what is the most interesting thing any of you have seen done with node.js lately?
[08:15] slaskis has joined the channel
[08:18] <_announcer> Twitter: "Would have been clever if it wasn't down (http://lazeroids.com/) Node.js driven multiplayer asteroids using html and js." -- Jamie. http://twitter.com/jamiei/status/17236806963
[08:19] <mAritz> isn't mongodb the same as an rdbms from the data structure and all that, except the lack of sql?
[08:21] <mAritz> it seems to me, redis is pretty different from all that and offers a greater level of control over what is done in what way. of course an orm takes that away again, but this way i can still have the comfort of an orm and the power of redis by using redis directly.
[08:22] <jetienne> mAritz: in ultra short, this is a key/value database, which is nice for running large database spreaded around the world
[08:22] <jetienne> mAritz: my understanding which is quite shallow
[08:22] Tim_Smart has joined the channel
[08:24] N` has joined the channel
[08:24] <_announcer> Twitter: "@innovimax I tried RingoJS while experimenting with NodeJS. It was so horribly slow to start up I gave up inside of ten minutes." -- Robin Berjon. http://twitter.com/robinberjon/status/17237044416
[08:27] <Tim_Smart> ^--- Confirms my suspicions
[08:28] <mAritz> jetienne: redis and mongo both kinda are. however both have diverted from the pure key/value and are more key/somedatastructure. mongo seems to have gone more in the direction of the original rdbms datastructures.
[08:30] <jetienne> mAritz: i could not comment as i dont looked at them seriously. But "original rdbms" seems like a good point for adoption
[08:30] <jetienne> mAritz: is there a company behind reddis ?
[08:30] <mAritz> yes
[08:30] <mAritz> uhm... what was it called
[08:30] <mAritz> vmware
[08:31] <mAritz> :)
[08:31] <RR_> sure is
[08:31] <mAritz> they recently acquired antirez (main dev of redis) and are helping him financially and technologically (both hardware and knowledge afaik)
[08:31] <jetienne> time will tell then :)
[08:32] <RR_> maritz?
[08:32] <RR_> haha
[08:32] <mAritz> RR_?
[08:32] <mAritz> what?
[08:32] <jetienne> paul ? 
[08:32] <mAritz> fritz?
[08:32] <_announcer> Twitter: "@robinberjon [RingoJS vs NodeJS : Ringo horribly slow] Good to know, Thanks !" -- á¸innovimax/á³. http://twitter.com/innovimax/status/17237356229
[08:32] <RR_> nothing
[08:32] <mAritz> oh
[08:32] <mAritz> damnit
[08:33] <jetienne> i was in a startup with maritz
[08:33] <jetienne> impressive guy
[08:33] <mAritz> wth?
[08:33] <mape> eh..
[08:33] <mAritz> are you all trolling me right now?
[08:33] <mape> haha
[08:33] <jetienne> paul maritz is the name of vmware ceo
[08:34] <mAritz> oh, that's quite a coincidence :)
[08:34] <jetienne> :)
[08:49] <_announcer> Twitter: "Trying to get Node.js running on windows.." -- Bjarte Djuvik NÃ¦ss. http://twitter.com/bjartn/status/17238021050
[08:50] TomY has joined the channel
[08:52] <manveru> ACTION is once again split between mongodb and couchdb...
[08:53] <mAritz> manveru: redis! *hides*
[08:53] <manveru> lol
[08:54] caolanm has joined the channel
[08:56] <manveru> nah, i don't think redis is a good match :)
[08:57] <Validatorian> ACTION loves redis
[08:59] <manveru> i also don't think it's about loving or hating redis
[08:59] <manveru> just that i like to use the right tools for my problems
[09:00] <manveru> and of course... i could hammer down my nested data until something is left that redis can digest, but a real document store is much more comfortable
[09:01] markwubben has joined the channel
[09:01] hellp has joined the channel
[09:07] marshall_law_ has joined the channel
[09:07] findyourownpath has joined the channel
[09:08] dabreaka has joined the channel
[09:09] <ewdafa> manveru: have you sampled cassandra also?
[09:09] <manveru> ewdafa: no
[09:09] <ewdafa> take a look at that
[09:09] <manveru> there are hundreds of k/v stores around... no time to look at them all :P
[09:10] <ewdafa> cassandra isn't your ordinary one
[09:10] <ewdafa> http://en.wikipedia.org/wiki/Apache_Cassandra
[09:13] <manveru> yeah, reading already
[09:13] <manveru> node binding?
[09:13] <ewdafa> it has been mentioned, not sure what state it's currently in
[09:14] <ewdafa> yeh nothing yet :/
[09:14] <ewdafa> http://github.com/ryedin/node-cassandra
[09:14] <manveru> ok, i'll stick with couchdb for this project :)
[09:15] <ewdafa> :3
[09:15] <manveru> if i'm lucky enough to need something better, i'll consider it
[09:15] <ewdafa> spotlight needs to hurry up and reindex my drives
[09:16] maushu has joined the channel
[09:18] <ewdafa> cassandra will be one to watch for the future anyhow
[09:18] margle has joined the channel
[09:20] marshall_law_ has joined the channel
[09:21] <maushu> ewdafa: It uses Java! Ew ew EW!
[09:21] <ewdafa> well yes, but so does lucene
[09:22] <ewdafa> ram is cheap nowdays
[09:22] <maushu> EW!
[09:22] <ewdafa> pack it to the gills!
[09:23] xla has joined the channel
[09:25] BBB has joined the channel
[09:30] <_announcer> Twitter: "Reading comet with node.js ... what a interesting read : http://www.slideshare.net/amix3k/comet-with-nodejs-and-v8" -- Roshan Bhattarai. http://twitter.com/roshanbh/status/17239631162
[09:36] <_announcer> Twitter: "@fossmo @bjartn Discussed node.js on Win at #ndc2010 with @srstrong and @silverSpoon One option is: http://is.gd/d7qiJ or http://is.gd/d7qmm" -- John St. Clair. http://twitter.com/StClairJohn/status/17239874362
[09:40] <mape> Ned_: Gettin the new version of irc onto npm? :)
[09:42] shimondoodkin has joined the channel
[09:44] <shimondoodkin> hi
[09:46] <mape> hey
[09:46] <Ned_> mape: yes, I should do that
[09:46] <Ned_> would you like that ?
[09:46] <Ned_> ;-)
[09:46] <mape> for sure
[09:46] <mape> should create a "nag" feature for npm
[09:47] <Ned_> oh well, I might have a look in a bit :-)
[09:47] <mape> if the github repo is updated and the npm isn't within 24h a message is sent nagging to update
[09:47] <mape> Nice :)
[09:47] <Ned_> heh
[09:47] <Ned_> gotta do dishes now :-(
[09:55] botanicus has joined the channel
[09:57] BennyBorn has joined the channel
[09:57] <BennyBorn> hi folks
[09:58] <Tim_Smart> ryah: Has this been resolved? http://groups.google.com/group/nodejs/browse_thread/thread/2086d04954d85f6a
[09:58] <BennyBorn> someone got a code snippet of how this emitter stuff works? wanna build a module that emits something
[10:01] <Tim_Smart> BennyBorn: EventEmitter?
[10:01] <BennyBorn> jep
[10:01] <BennyBorn> but i havent found an example how to implement this
[10:02] <shimondoodkin> found a fun program http://www.winsplit-revolution.com/home
[10:03] <shimondoodkin> to use it you hit ctr alt + a numpud number several times
[10:03] mtodd has joined the channel
[10:06] aubergine_ has joined the channel
[10:07] <shimondoodkin> it allows you to work and to chat at the same time
[10:09] <mAritz> http://www.wolframalpha.com/input/?i=pi%25+of+1337 OH MY GOD!
[10:10] <mape> OH MY GOD that is old. :P
[10:11] <Tim_Smart> BennyBorn: https://gist.github.com/e30cff468e0bfac17448
[10:12] <BennyBorn> great, thanx
[10:13] <mAritz> mape: not as old as my mom! BAM!
[10:13] <mAritz> oh wait
[10:13] <mAritz> damnit
[10:13] <Tim_Smart> powened
[10:18] <mape> So any good ideas for node knockout?
[10:18] <shimondoodkin> a node server
[10:18] <shimondoodkin> captcha solving competition
[10:19] khug has joined the channel
[10:20] <mape> captcha solving competition?
[10:20] <shimondoodkin> yea
[10:20] <shimondoodkin> like in real time
[10:20] <shimondoodkin> and other group is betting on the solving competitors
[10:20] <mape> What use would that have?
[10:20] <shimondoodkin> fun
[10:20] <caolanm> mape: uhm creating false accounts on sites?
[10:21] <shimondoodkin> a betting engine on somthing actual
[10:21] <caolanm> sounds pretty dodgy to me
[10:21] <mape> Duh well then you don't do competitions, then you have people solve them for porn
[10:23] <shimondoodkin> lets do something with challange something that is popular for today's world 
[10:24] <shimondoodkin> something people are addicterd to... 
[10:24] <shimondoodkin> betting on captcha solvers
[10:24] <shimondoodkin> 42
[10:25] <shimondoodkin> [13:20] <caolanm> mape: uhm
[10:25] <shimondoodkin> oop
[10:25] <shimondoodkin> s
[10:27] <shimondoodkin> actualy i would be happy to have my framework done, then i will be able to do somtething real with it in two days
[10:28] fermion has joined the channel
[10:29] <shimondoodkin> any other ideas?
[10:29] <shimondoodkin> other then bettng on captcha solvers
[10:29] <kuya> whats your framework for?
[10:30] <shimondoodkin> to build data managment apps  on mongodb
[10:30] <mape> I was thinking of a distrobuted network that returns data to the mother
[10:30] <mape> like folding@home
[10:30] <maushu> FOR THE MOTHERSHIP!
[10:30] <mape> the central server handles and sends out jobs
[10:30] <mape> and then recieves answers and use those
[10:31] <kuya> what about security?! ;)
[10:32] <mape> ?
[10:32] <kuya> what format are the jobs? just js snippets?
[10:32] <kuya> can they run anything? 
[10:32] <mape> Yeah
[10:33] <mape> Like if I wanted my lost password bruteforced I could send that out to multiple computers
[10:33] <mape> like a botnet
[10:33] <mape> only in node, and not to evil
[10:33] <kuya> js distributed ray tracer? :)
[10:33] <shimondoodkin> to do a web development ide: to rewrite kind of etherpad for programming javascript, to make nodejs testing  for many users on same server, upload and download and duplicate githubs quickly, and make a windows  app to push a folder to the web to that sarver to share a folder and run and test it on that shared server.
[10:33] <mape> Hehe yeah thought about that as well
[10:33] hassox has joined the channel
[10:33] <mape> Just divide the image into tons of smaller pieces
[10:33] <mape> then you farm that out
[10:34] <kuya> i want to write a web text editor 
[10:34] <mape> bespin?
[10:34] <kuya> dont like it 
[10:34] <mape> do a textmate clone and people will eat that up like there is no tommorow
[10:34] hassox has joined the channel
[10:34] <shimondoodkin> with zencoding
[10:35] <mape> zencoding?
[10:35] <shimondoodkin> <tr><td></td></tr> * 20
[10:35] <shimondoodkin> it is a text editor sort cuts synax
[10:35] <shimondoodkin> shortcut
[10:35] <mape> oh the tr>td*5<<div deal
[10:36] <mape> Yeah thought it was a neat idea, never end up using it though
[10:37] <mape> the nice thing with a webbased editor is that you could share your snippets/bundles
[10:37] <mape> or have a realtime collab snippet
[10:37] <mape> like an appstore for snippets/themes
[10:38] <shimondoodkin> lets charge for snipets 0.1$
[10:38] stagas has joined the channel
[10:38] <shimondoodkin> it might work!!!
[10:39] <_announcer> Twitter: "Just watched: Jed Schmidt - A (fab) Approach To Web Apps  http://bit.ly/d8uNOV  It looks really cool! #nodejs" -- George Stagas. http://twitter.com/stagas/status/17242390636
[10:39] pandark_ has joined the channel
[10:40] BennyBorn has left the channel
[10:41] keeto has joined the channel
[10:46] <shimondoodkin> fab js syntax is very fascinating
[11:04] aubergine has joined the channel
[11:05] tmedema has joined the channel
[11:08] <_announcer> Twitter: "s/sys.puts/console.log/g  Yay, #nodejs switching to firebug logging api http://tinyurl.com/29yqz5f" -- Fabian Jakobs. http://twitter.com/fjakobs/status/17243612945
[11:10] <_announcer> Twitter: "http://abrdev.com/?p=1121 - 2.0 Redis pub / sub + Node.JS = niiiiiice" [ro] -- Paul Dmitryev. http://twitter.com/cleg/status/17243722037
[11:14] khug has joined the channel
[11:18] aubergine has joined the channel
[11:19] <shimondoodkin> fab can
[11:19] <shimondoodkin> 't
[11:19] <shimondoodkin> do work in my project.
[11:19] <_announcer> Twitter: "@StClairJohn @fossmo @srstrong @silverSpoon If you ever get the subsystem-unix up and running with node.js please give me the instructions:)" -- Bjarte Djuvik NÃ¦ss. http://twitter.com/bjartn/status/17244117811
[11:19] b_erb has joined the channel
[11:19] <shimondoodkin> it cant  choose route, template and data 
[11:20] <shimondoodkin> all at once for many data models
[11:20] <shimondoodkin> and allow like dotnet abilities
[11:20] <shimondoodkin> like webform
[11:24] <b_erb> is there a way to deep-clone objects in v8?
[11:24] <shimondoodkin> http://github.com/shimondoodkin/nodejs-mongodb-app/blob/master/merger.js
[11:25] <b_erb> there is no 'native' way?
[11:26] <b_erb> like eval(uneval(obj)) in Spidermonkey
[11:27] <khug> objects are always passed by reference in JS
[11:27] <khug> you have to deep clone manually
[11:28] <b_erb> yes, i know
[11:28] mklappstuhl has joined the channel
[11:28] <shimondoodkin> is there like new prototype...
[11:28] <b_erb> but i thought a native way might give me performance benefits
[11:28] <khug> I dont disagree that it would be faster
[11:29] <khug> but I wonder how dirty that would feel to the guys writing v8
[11:29] <khug> since it's not spec
[11:29] <shimondoodkin> lol
[11:29] <b_erb> i don't know about the internals of Spidermonkey, but that was my first thought
[11:29] <shimondoodkin> mine is well writtern
[11:31] <shimondoodkin> is this might work?: var x={a:1,b:{c:3}}; var y= new x; or x.prototype=x; var y= new x; 
[11:32] <shimondoodkin> i dont know how new works with sub objectcs
[11:34] marshall_law has joined the channel
[11:35] luisbug has joined the channel
[11:47] mitkok has joined the channel
[11:47] BBB has joined the channel
[11:48] khug has joined the channel
[11:49] <shimondoodkin> ive not found a better way then cloning objects yourself
[11:58] steadicat has joined the channel
[11:58] findyourownpath has joined the channel
[11:59] mklappstuhl has joined the channel
[11:59] femto has joined the channel
[12:04] <_announcer> Twitter: "@samfosteriam too bad the server transport can't use a function wrapper so no port would be necessary. #notsocommonjs #nodejs" -- Peter Higgins. http://twitter.com/phiggins/status/17246308790
[12:06] <_announcer> Twitter: "@MarkNijhof its from the node.js documentation" -- gregyoung. http://twitter.com/gregyoung/status/17246383499
[12:06] phiggins has joined the channel
[12:07] aubergine has joined the channel
[12:14] khug has joined the channel
[12:14] mitkok has joined the channel
[12:19] <_announcer> Twitter: "I know absolutely nothing in there but it sounds cool as event http://lacantine.org/events/webworkerscamp nodeJS # # # Tornado NoSQL" [fr] -- Cyprien DECOUTY. http://twitter.com/cyprienDecouty/status/17247097239
[12:22] holydevil has joined the channel
[12:28] jherdman has joined the channel
[12:31] <_announcer> Twitter: "Web applications are real-time: jSocket, Node.JS, Redis, MQ. http://abrdev.com/?p=1121" [ru] -- Igor Minyaylo. http://twitter.com/iminyaylo/status/17247717240
[12:34] blackdog_ has joined the channel
[12:34] blackdog__ has joined the channel
[12:35] <_announcer> Twitter: "Watched @jedschmidt's presentation at #jsconf on #fabjs. Badass approach to platform development! http://bit.ly/905DhJ (video) #nodejs #js" -- Spot. http://twitter.com/spotnyk/status/17247970426
[12:37] <_announcer> Twitter: "http://howtonode.org/express-mongodb # nodejs" [lv] -- ChillyBwoy. http://twitter.com/ChillyBwoy/status/17248089172
[12:41] blackdog_ has left the channel
[12:41] marshall_law_ has joined the channel
[12:42] blackdog_ has joined the channel
[12:48] <manveru> how would you write a module that should be usable both as a commonjs module and in a browser?
[12:48] <shimondoodkin> use this.blahblabh instead of export
[12:49] oleg__ has joined the channel
[12:50] kjeldahl has joined the channel
[12:56] <phiggins> use commonjs transport/c or something
[12:56] botanicus has joined the channel
[12:56] <phiggins> http://twitter.com/samfosteriam/status/17248005530 just mentioned that this morning
[12:56] <jbrantly> manveru: just keep in mind the context of each. For commonjs, you use "exports" and the scope is local. In the browser, there is no exports and the scope is global. A common pattern would be to wrap your module in a function (to ensure local scope) and then only expose functionality via exports or attaching to the global object (just check for require && exports or something)
[12:56] mw has joined the channel
[12:56] <jbrantly> manveru: alternatively you can use something like http://github.com/jbrantly/Yabble or RequireJS
[12:57] <manveru> hmm
[12:57] <phiggins> requirejs + transport/c was what I was alluding to
[12:57] <manveru> ok, i'm going with the simpler way :)
[12:58] <manveru> just checking for exportability
[12:58] <pkrumins> satori, manveru: my base64 code works, i wrote it because no other module really worked for binary data
[12:58] <manveru> pkrumins: yeah, i found out
[12:58] <jbrantly> manveru: the key there is to make sure you don't do var variable; in the global scope
[12:58] <pkrumins> though mine does encoding only, no decoding
[12:58] <phiggins> http://github.com/kriszyp/transporter there is this, too
[12:59] <manveru> pkrumins: wrote data using utf8 encoding instead of binary...
[12:59] <phiggins> kriszyp just pointed me to it
[12:59] <pkrumins> manveru: yeah
[12:59] <pkrumins> i'll add decoding on the first need.
[12:59] <pkrumins> laziness is virtue of programming :)
[12:59] <manveru> ^^
[12:59] <manveru> it's just image data, so encoding would be useless
[13:00] <shimondoodkin> i would rather say high efficiency
[13:00] <shimondoodkin> on the importent staff like time
[13:00] <manveru> even wrote my own decoder using Buffer... that's how i found my mistake
[13:05] Linnk has joined the channel
[13:05] <_announcer> Twitter: "node.js senior framework has emerged express, connect, geddy three of the ... which I am most bullish on connect ..." [zh-CN] -- aki. http://twitter.com/aki_xavier/status/17249703042
[13:06] mscdex has joined the channel
[13:07] pgriess has joined the channel
[13:08] <mAritz> hm... i still don't like (fab).
[13:08] <mAritz> (after watching half of the jsconf talk. other half still running)
[13:08] <shimondoodkin> i like it but i cant use it
[13:08] <caolanm> (but you seem so fond of parenthesis!)
[13:08] <caolanm> ;)
[13:09] <_announcer> Twitter: "Only recently discovered, node.js also can embed C and C + + code to run ..." [zh-CN] -- aki. http://twitter.com/aki_xavier/status/17249930873
[13:09] aubergine has joined the channel
[13:09] <_announcer> Twitter: "# Node.js slides by @ b_erb http://bit.ly/d87t43" [af] -- Christian Ranz. http://twitter.com/ranzwertig/status/17249984600
[13:10] <mAritz> yeah, i relly like using parenthesis. (but only in conversations. (but there i really love it))
[13:10] <phiggins> i like to [embed (my parens)]
[13:10] <caolanm> mAritz: :D
[13:10] <Linnk> are you guys old lispers or something? :P
[13:11] <mape> Linnk: You just recently got a lisp?
[13:11] <Linnk> mape: I got a scheme at university :/
[13:11] <phiggins> i resssent that
[13:11] <mape> hehe
[13:12] <phiggins> rethent?
[13:12] <shimondoodkin> does anyone really know linux here? i forgot my password and cant get any grub consule at boot, u  have ubuntu server 10
[13:13] <mape> Linnk: While at uni you should try to find a girl that you can make get closure
[13:13] <shimondoodkin> i have
[13:13] <phiggins> bootdisk, vi /etc/shadow
[13:13] <mape> forgot my password? :S
[13:13] <manveru> shimondoodkin: http://grml.org/
[13:13] <shimondoodkin> yea i did a testing machine a while ago
[13:13] saikat has joined the channel
[13:14] <Linnk> mape: There's not a lot of girls at computer science, but I'll try ;)
[13:15] <mape> Linnk: I guess you can go with the girl with lisp
[13:15] <_announcer> Twitter: "#haxenodejs Welcome to all interested the haXe programming language and Node.js runtime" -- BlackDog. http://twitter.com/blackdog66/status/17250338903
[13:16] <manveru> does anyone have an openid consumer in node?
[13:16] <Linnk> mape: I'm trying to sweet up a dentist right now, think that where I'll put my energy :)
[13:16] <mAritz> the more i watch the talk, the less i understand how that works. :(
[13:16] <manveru> there's even a lib for smalltalk... but no js?
[13:18] rob___ has joined the channel
[13:18] markwubben has joined the channel
[13:21] <manveru> guess i have to go with janrain for now
[13:21] <shimondoodkin> mAritz: maybe you can exaplain  to what refers the word that in your last sentense
[13:22] markwubben has joined the channel
[13:26] sanderjd has joined the channel
[13:26] sanderjd has left the channel
[13:28] KaptianKrispy has joined the channel
[13:28] nsm has joined the channel
[13:29] bweaver has joined the channel
[13:31] tzmartin has joined the channel
[13:31] maqr has joined the channel
[13:32] davidwalsh has joined the channel
[13:35] davidwalsh has joined the channel
[13:36] BBBB has joined the channel
[13:36] maqr has joined the channel
[13:37] SamuraiJack has joined the channel
[13:40] davidsklar has joined the channel
[13:49] deanlandolt_home has joined the channel
[13:51] steadicat has joined the channel
[13:51] bradleymeck has joined the channel
[13:52] luisbug has left the channel
[13:53] <_announcer> Twitter: "initial commit of noddycouch, a minimal #couchdb toolkit for #nodejs : http://github.com/benoitc/noddycouch/blob/master/example.js" -- benoÃ®t chesneau. http://twitter.com/benoitc/status/17252750294
[13:56] zaach has joined the channel
[13:56] gf3 has joined the channel
[14:04] findyourownpath has joined the channel
[14:04] davidsklar has joined the channel
[14:05] tav_ has joined the channel
[14:07] <_announcer> Twitter: "had a good week-end hacking: added some nice improvements to #nvm #nodejs, fixed a few bugs in #jslint on v8 & tested the WP 3.0 upgrade" -- SÃ©bastien. http://twitter.com/arnaudsj/status/17253648277
[14:15] jetienne has joined the channel
[14:19] kodisha has joined the channel
[14:21] kersny has joined the channel
[14:25] bpot has joined the channel
[14:25] saikat` has joined the channel
[14:30] <_announcer> Twitter: "Telling Sinatra on thin vs. Express on node.js benchmarks: http://tjholowaychuk.com/post/543953703/express-vs-sinatra-benchmarksoa" -- Ratan J. Sebastian. http://twitter.com/rjsvaljean/status/17255126154
[14:30] kersny has joined the channel
[14:34] findyourownpath has joined the channel
[14:34] <bradleymeck> !tweet you alive again _utility?
[14:35] _utility has joined the channel
[14:36] <bradleymeck> !tweet tweet?
[14:41] ajpiano has joined the channel
[14:43] everton has joined the channel
[14:44] pzich has joined the channel
[14:44] ajpiano has joined the channel
[14:49] <_announcer> Twitter: "Dear Ruby developers learning Node.js: JavaScript is not Ruby. That is all." -- Flip Sasser. http://twitter.com/flipsasser/status/17256415901
[14:50] Yuffster has joined the channel
[14:51] <_announcer> Twitter: "Mr. node.js, 0.1.98 I started to work with Cygwin or any http://nodejs.org/changelog.html" [ja] -- terurou / YAGI.Teruo. http://twitter.com/terurou/status/17256554366
[14:56] ajpiano has joined the channel
[14:58] <mAritz> "Dear Ruby developers learning Node.js: JavaScript is not Ruby. That is all." This is the single most annoying thing about the node.js community: ruby. :(
[14:59] <b_erb> i want to get time delta between two lines of code in my application, how could i do that?
[14:59] <b_erb> dealing with date conversions seems to overloaded
[15:00] <shimondoodkin> is date-date is sufficient?
[15:01] <phiggins> var now = +new Date(); code(); var then = now - +new Date(); ? 
[15:01] <_announcer> Twitter: "server-side javascript is back: http://nodejs.org" -- DINH ViÃªt HoÃ . http://twitter.com/dinh_viet_hoa/status/17257188050
[15:01] <shimondoodkin> or getTimeyou dont need +
[15:01] <shimondoodkin> oops
[15:01] <shimondoodkin> you dont need +
[15:01] <phiggins> shorter.
[15:01] <halorgium> mAritz: haha, what do you see? lack of understanding for closures?
[15:02] <mAritz> halorgium: no, the apparent necessity to rebuild ruby frameworks exactly the way they are in ruby... :/
[15:02] <shimondoodkin> var s=new Date();code();var delta=(new Date())-s;
[15:03] <halorgium> mAritz: hehe, same thing happens everywhere :/
[15:03] <halorgium> new rubyists building stuff like java/php
[15:07] <caolanm> mAritz: I would generally agree, some of the best APIs come from people really using js to its full potential and not trying to fight it or force it to behave like something else (especially object orientated!)
[15:07] <mAritz> i'm certainly not using class.js *whistle*
[15:08] <caolanm> hehe
[15:08] <caolanm> I'm with crockford on this one... js seems more functional then OO to me
[15:09] <halorgium> caolanm: it is prototypical :P
[15:09] <caolanm> yeah
[15:09] <halorgium> i hardly use prototypes though
[15:09] <halorgium> i just nest closures
[15:10] <caolanm> hmm, me too... perhaps I'm undermining my own point here ;)
[15:10] gwoo has joined the channel
[15:10] <halorgium> sometimes undermining oneself is good, keeps people guessing ;D
[15:11] <caolanm> hell, I don't even know what I'm thinkng most of the time
[15:11] <halorgium> i don't think you're alone in more ways than one :P
[15:11] <bradleymeck> are people that upset about js != ruby?
[15:12] phiggins has joined the channel
[15:12] <caolanm> ACTION avoids the ruby bait
[15:12] gf3 has joined the channel
[15:13] <bradleymeck> idk the last time i used prototypes actively, though i do abuse closures something awful, wish i could flatten down all of them to save lookup time sometimes :(
[15:13] gf3 has joined the channel
[15:14] <caolanm> does anyone else here avoid using 'this' and 'new'?
[15:15] <shimondoodkin> i dont use them when i do structures
[15:15] <caolanm> I never use new, and keep changing my mind about using this in a lot of places
[15:15] <caolanm> unless I'm working with someone elses code ofc
[15:15] <shimondoodkin> this mean it changes varibals in the context
[15:16] <bradleymeck> i use it to allow interfaces to extend other ones, but i check for it quite often
[15:16] <TomY> i really like it when libraries allow the argument following a callback to be an optional invocant
[15:16] <caolanm> TomY: doesn't underscore do that?
[15:16] <TomY> otherwise i find i am constantly wrong about what "this" refers to
[15:16] <caolanm> TomY: right, that seems more like a work around for the fact that 'this' is confusing then
[15:17] <caolanm> why not just avoid it?
[15:17] <bradleymeck> i never use this if i can avoid it, tend to save the binding at creation time
[15:17] <caolanm> bradleymeck: same here
[15:17] <TomY> do you mean have a "var myThis = this;" at the top of every methog?
[15:17] <TomY> method
[15:17] <bradleymeck> no, just on constructors
[15:17] <TomY> you have the methods defined within the constructor then?
[15:18] <bradleymeck> var $this=$global==this?{}:this;
[15:18] <bradleymeck> quite often
[15:18] <TomY> can see the advantage of that
[15:18] sanderjd has joined the channel
[15:18] sanderjd has left the channel
[15:19] <bradleymeck> disadvantage is that it requires a tiny bit more during object creation, however invocation is a tiny bit faster. so it has trade offs
[15:19] pgriess has joined the channel
[15:19] <TomY> i constantly run into the this problem
[15:20] <_announcer> Twitter: "raise Nginx + NodeJS =)" [ru] -- Albert Kh. http://twitter.com/f0ks/status/17258495639
[15:22] <bradleymeck> which, not knowing what 'this' is?
[15:22] <_announcer> Twitter: "love the warm welcome from the node.js community, @flipsasser" -- technowÃ¼rst. http://twitter.com/technoweenie/status/17258647001
[15:24] <shimondoodkin> in there a forum application in node js?
[15:24] <shimondoodkin> is
[15:25] <shimondoodkin> it might be an idea for the competition- to reinvent the wheel - to create a forum in javascript
[15:26] <bradleymeck> im sure someone has one lying about
[15:26] <bradleymeck> but would still be fun to make
[15:27] kersny has joined the channel
[15:27] kersny has left the channel
[15:27] <TomY> bjartek, yep
[15:28] <TomY> think i might change the way i write "classes"
[15:28] <bradleymeck> there are no real classes just types
[15:29] joshbuddy has joined the channel
[15:29] malkomalko has joined the channel
[15:30] <TomY> yeah, but in my head there are :-)
[15:30] olegp has joined the channel
[15:32] mql_1 has joined the channel
[15:32] <_announcer> Twitter: "@technoweenie I can't speak for the Node.js community. I'm a Ruby developer learning Node.js myself." -- Flip Sasser. http://twitter.com/flipsasser/status/17259316083
[15:33] gerad has joined the channel
[15:33] cloudhead has joined the channel
[15:34] <bradleymeck> !tweet @flipsasser if you have any questions come to the irc.freenode.net#node.js
[15:34] <mape> Its up again? :)
[15:37] <bradleymeck> yea, broke this weekend, just put it up again, was busy w/ gf being hurt
[15:38] flipsasser has joined the channel
[15:39] phiggins has joined the channel
[15:39] <mAritz> dear flipsasser: you're right about the ruby devs :D
[15:39] <mAritz> and welcome ^^
[15:39] <jherdman> bradleymeck: is that the preferred channel now?
[15:40] <bradleymeck> preferred?
[15:40] <flipsasser> mAritz: thanks! i'm a ruby dev myself; i just get grumpy when people try to do things "the ruby way" in js
[15:40] <jherdman> err... sorry. brainfart. ignore that query :)
[15:41] peburrows has joined the channel
[15:42] <ryah> hello node people
[15:42] mikeal has joined the channel
[15:42] <mAritz> hello node god
[15:43] <caolanm> hey ryah
[15:43] <bradleymeck> yello ryah
[15:44] <mape> ryah: Who maintains the irc logs?
[15:44] <ryah> mape: felixge
[15:46] <bradleymeck> ryah, looked at the v8::ScriptData again, for some reason cant get the file to save right, some c++ bleh
[15:46] <mape> Hmm k, I threw together http://nodejs.se/ for some irc stats, do you think he would mind if I fetch the logs/last log every once in a while?
[15:47] indiefan has joined the channel
[15:47] <ryah> mape: sweet
[15:47] <caolanm> mape: looks cool :)
[15:48] <ryah> i don't think he would
[15:48] <caolanm> ACTION ups message count to get onto the list
[15:48] <caolanm> spam spam spam
[15:48] <ryah> mape if you built it into his logger you could update that table in realtime
[15:48] <mape> Guess more functionality can be added but good enough start :) Guess I should make it fetch messages realtime as well, so as long as the bot is running I don't need to fetch them
[15:48] <mape> .. yeah, hehe
[15:49] <ryah> some graphs would be cool too ;)
[15:49] <caolanm> how about most mentioned projects? ;)
[15:50] <mape> Yeah, guess a graph to show how active the channel is by time of day might be handy
[15:52] <CIA-76> node: 03Ryan Dahl 07master * r5a25338 10/ (54 files in 8 dirs): Upgrade V8 to 2.2.20 - http://bit.ly/b9YUX7
[15:52] hobson has joined the channel
[15:52] <b_erb> cloudhead: cradle serializes queries, so queries of one connection are not executed concurrently
[15:53] <b_erb> so does felixges node-couchdb 
[15:54] <b_erb> i wonder how can i build an application where each incoming http request executes several database calls
[15:54] felixge has joined the channel
[15:54] felixge has joined the channel
[15:54] <b_erb> obviously, one connection is a bottleneck
[15:55] <b_erb> on the other hand, you might not want to create a new connection for each incoming request
[15:55] <b_erb> pah, sounds like pooling
[15:55] <felixge> hey, does anybody in here have experience with writing proxies?
[15:55] <felixge> I'm hitting a wall with a little HTTP proxy in terms of implementing https
[15:56] jakehow has joined the channel
[15:56] <mjr_> b_erb: you can either get a connection pool, or just spawn new connections every time.
[15:57] <mjr_> b_erb: since the CouchDB protocol is simple HTTP anyway, it isn't that hard to just make your own queries as necessary.
[15:57] <bradleymeck> mmm, how to make an object {} have instanceof Foo and Bar == true... in ie capable js
[15:57] <mjr_> felixge: what's the wall?
[15:58] <b_erb> mjr_: i tried the later one, but obviously node.js can process more incoming requests than it can create new http client connections
[15:58] <felixge> mjr_: well, my incoming request has the method "CONNECT"
[15:58] <felixge> mjr_: Am I supposed to forward that to my upstream as well?
[15:58] <felixge> mjr_: that's what I'm doing right now, as well as setting 'secure = true' when creating the client
[15:59] <mjr_> b_erb: are you running out of file desdriptors?  
[15:59] <felixge> mjr_: but I get parse error's from the client
[15:59] <mjr_> felixge: so you are implementing an HTTP proxy that browsers would use?
[15:59] <felixge> mjr_: yeah, the proxy will be used to block access to certain sites
[16:00] <aubergine> hi, has anyone here used valgrind with node ?
[16:01] <mjr_> felixge: I'd have to look into it more to say for sure, but I thought that the CONNECT method was a special one for proxies that says, "sorry proxy server, you don't get to look at this, please connect me upstream and  just pass raw bytes back and forth."
[16:01] <felixge> mjr_: ah
[16:01] <felixge> mjr_: so I should try doing a tcp connection rather than using http client
[16:01] <felixge> mjr_: that makes sense :)
[16:01] <b_erb> mjr_: i'm not sure. after a while, i get Error: EINVAL, Invalid argument at doConnect (net:720:19)
[16:02] <mjr_> I THINK so.  I'd have to look at what squid does, which is what I always do when I have questions about how proxies work.
[16:03] <mjr_> b_erb: obviously you'll need some sort of backpressure at some point, like a max number of outgoing connections, for a simple start.  
[16:03] <felixge> mjr_: :)
[16:03] <mjr_> b_erb: I'm surprised by EINVAL though.
[16:04] <mjr_> felixge: when you figure out the answer, can you let me know?  I think I'm going to run into this myself in the near future.
[16:04] xircweb has joined the channel
[16:05] <b_erb> mjr_: the full stack is: Error: EINVAL, Invalid argument / at doConnect (net:720:19) / at net:784:9 / at dns:114:36 / at IOWatcher.callback (dns:53:15) / at node.js:204:9
[16:05] <felixge> mjr_: yip
[16:05] <mjr_> b_erb: oh, so DNS is failing sometimes.
[16:05] <mjr_> You'll likely win big by implementing a simple DNS cache in your program.
[16:06] <b_erb> ah nuts, i'm stupid. should have looked down the stack, of course it' dns
[16:06] <mjr_> Which will just push the breaking point to a different part of your program.  :)
[16:06] <mjr_> Implementing backpressure is hard.
[16:06] <_announcer> Twitter: "uupaa.js the Node I / F Naa interesting" [ja] -- ArcCosine. http://twitter.com/ArcCosine/status/17261675238
[16:08] <b_erb> mjr_: probably the first time i miss ThreadPoolExecutor.RejectionPolicies from java ;)
[16:09] <mjr_> I'm not a Java guy, so I don't know what that is.  I'll bet it's a wonderful abstraction though.
[16:10] <mjr_> And I'll bet that 75% of the time it is what you want, and then 25% of the time you find yourself battling it and needing to understand how it really works internally.
[16:10] <mjr_> Just a guess though.
[16:10] <b_erb> and you're probably right with that
[16:12] <b_erb> in short, you can bubble up tasks between overflowed thread pools, but i wanted to get rid of such things. welcome node
[16:13] <_announcer> Twitter: "macports at this time put the nodejs. Sleep? Sleep?" [ja] -- Tsukasa Hoki. http://twitter.com/mongorian_chop/status/17262074838
[16:13] steadicat has joined the channel
[16:19] creationix has joined the channel
[16:20] xircweb has joined the channel
[16:23] <felixge> ryah: does res.writeHead() flush automatically ?
[16:23] tyfighter has joined the channel
[16:24] tyfighter_ has joined the channel
[16:24] <felixge> it seems like it doesn't
[16:24] <felixge> damn
[16:25] <creationix> felixge: why do you need it flushing?
[16:26] <felixge> creationix: so I can tell my client that his CONNECT request has been granted
[16:26] <felixge> creationix: (writing a http proxy with https support)
[16:26] <felixge> anyway, g2g
[16:26] <creationix> ok, good luck
[16:27] felixge has joined the channel
[16:28] bpot has joined the channel
[16:31] siculars has joined the channel
[16:31] mAritz has joined the channel
[16:31] <b_erb> how can i release the connection of a http.Client?
[16:33] <bradleymeck> client.connection.destroy()?
[16:34] markwubben has joined the channel
[16:35] kersny has joined the channel
[16:35] sanderjd has joined the channel
[16:38] <_announcer> Twitter: "@stevenharman Although if you're going to run on OSX only you're probably better off using the node.js runner as it is better supported." -- Scott Walker. http://twitter.com/pragma_tech/status/17263619218
[16:38] jspiros has joined the channel
[16:39] rauchg_ has joined the channel
[16:39] <aurynn> node.js runner?
[16:43] kloeri has joined the channel
[16:43] marienz has joined the channel
[16:44] derferman has joined the channel
[16:45] <_announcer> Twitter: "wrote a bit about my recent node.js experience with child processes: http://techno-weenie.net/2010/6/28/tee_and_child_processes/" -- technowÃ¼rst. http://twitter.com/technoweenie/status/17264061571
[16:45] <_announcer> Twitter: "@benoitc: jasmine-nodejs for me http://is.gd/d7S35 (See also http://is.gd/d7S4T about that)" -- Bruno Michel. http://twitter.com/brmichel/status/17264069798
[16:46] jspiros has joined the channel
[16:48] jspiros has joined the channel
[16:51] figital has joined the channel
[16:52] WALoeIII has joined the channel
[16:52] aho has joined the channel
[16:52] softdrink has joined the channel
[16:55] khug has joined the channel
[16:57] markwubben has joined the channel
[16:57] Aria has joined the channel
[16:58] <_announcer> Twitter: "after a day to use node.Js working on noddycouch & couchapp-node, some erlang to relax ouf!" -- benoÃ®t chesneau. http://twitter.com/benoitc/status/17264897355
[16:58] indiefan_ has joined the channel
[17:00] indiefan__ has joined the channel
[17:00] jspiros has joined the channel
[17:01] jspiros has joined the channel
[17:03] aubergine_ has joined the channel
[17:03] jspiros has joined the channel
[17:03] <jspiros> So sorry, everyone, that should be the last of it
[17:04] <mscdex> ?
[17:04] <mjr_> jspiros is spilling out into the Gulf of Mexico.
[17:07] <mscdex> :S
[17:09] sanderjd has left the channel
[17:10] <_announcer> Twitter: "@technoweenie Is the code in your node.js post CoffeScript?" -- ecin krispie. http://twitter.com/ecin/status/17265653047
[17:10] felixge has joined the channel
[17:10] mtodd has joined the channel
[17:11] aubergine has joined the channel
[17:16] <_announcer> Twitter: "@joemccann Sounds like I need to come down and get schooled on node.js oneathesedays. Embarrassingly, I'm have a rough start of it." -- Clint Andrew Hall. http://twitter.com/clintandrewhall/status/17266029035
[17:17] aglemann has joined the channel
[17:17] Ori_P has joined the channel
[17:17] sh1m has joined the channel
[17:17] mjijackson has joined the channel
[17:18] <mjijackson> hi all
[17:19] liucougar has joined the channel
[17:19] <mjijackson> I seem to be having some trouble building the docs. My doc/api.html is empty.
[17:19] <mjijackson> after a `make doc install`
[17:20] stevendavie has joined the channel
[17:21] <ryah> mjr_: you should put pcap on npm
[17:21] <mjr_> Yeah, I was looking at that last night.
[17:22] <mjr_> I want to make the things in the examples dir be standalone programs, but I couldn't figure out how to do that.
[17:22] <ryah> mjr_: http://github.com/ry/node_postgres/blob/8f54a00a563d30c48945e84db4050b4a91ccbbfd/package.json
[17:23] <mjr_> I want people to be able to install node_pcap and then get http_trace.js in /usr/local/bin
[17:23] <felixge> ryah: will node send any data of its own if I directly use res.socket.write()?
[17:23] <mjr_> or just http_trace, with no .js, something they can run from the command line and not care that they are running node.
[17:23] <felixge> ryah: trying to figure out why I get "Unknown SSL protocol error in connection to " from curl when trying to proxy https requests
[17:24] jspiros has joined the channel
[17:24] <felixge> mjr_: you wrote the pcap module?That thing is really awesome :)
[17:24] <felixge> mjr_: thanks!
[17:24] <jspiros> That was just ridiculous
[17:24] <jspiros> mjr_: I enjoyed your joke, though
[17:24] <mjr_> felixge: yeah, that's whatI'm working on these days.  Are you using it?
[17:24] <felixge> mjijackson: try: make doc/api.html
[17:24] aconran_ has joined the channel
[17:25] <felixge> mjr_: I don't know what I would use it for, but I played with it and it was lots of fun :)
[17:25] sanderjd has joined the channel
[17:25] <felixge> mjr_: can I sniff stuff in my wireless network with it? :)
[17:25] <mjr_> almost
[17:25] <mjr_> That's what I'm working on this week.
[17:25] <mjijackson> felixge: thanks. same result though
[17:25] <mjijackson> are you able to build the docs from HEAD?
[17:25] <mjr_> felixge: my hope is that examples/http_trace.js can be used as a command line httpscoop.
[17:26] <felixge> mjr_: oh that would be fun, for me, not my co-workers ... :)
[17:26] <mjr_> or a more usable version of tshark/wireshark, optimized for debugging HTTP.
[17:26] <felixge> mjr_: I actually could see this become really useful for debugging, in fact I might want to use it to debug my HTTPS issue right now
[17:26] <mjr_> Something that we could just point people to when they are having trouble with node instead of, "OK, run tcpdump and decipher all of that madness"
[17:27] <felixge> tcpdump makes me cry like a little scared girl :)
[17:27] <mjr_> kitten staring at lasers is what I often feel like.
[17:27] <ryah> felixge: no
[17:27] <felixge> ryah: ok, didn't think so. Guess I have to debug further
[17:28] <ryah> felixge: a test/simple/test-https-curl.js using curl would be greatly valued
[17:29] <felixge> ryah: well, right now I'm trying to write a https proxy, so node itself doesn't do any SSL
[17:29] <felixge> ryah: but yeah, I might get into that later as well - will keep a test in mind
[17:30] <felixge> (by https proxy I mean a local http proxy server for my browser)
[17:30] <ryah> forward proxy
[17:30] <felixge> ryah: yes
[17:30] <ryah> like you connect to the proxy without ssl
[17:31] <ryah> and the proxy does https connections?
[17:31] <ryah> there is some issue with the CONNECT http method
[17:31] <felixge> ryah: maybe that's my issue
[17:31] <felixge> ryah: I seem to be getting the CONNECT request just fine
[17:31] <ryah> i am not so familiar with this aspect of HTTP, but apparently it's the same as the Upgrade header
[17:31] <ryah> meaning that after CONNECT you tunnel data
[17:31] <felixge> ryah: yes, that's how it's supposed to work
[17:32] joshbuddy has joined the channel
[17:32] joshbuddy has joined the channel
[17:32] <felixge> ryah: but it seems that something goes wrong right after I establish connection
[17:32] technoweenie has joined the channel
[17:32] <ryah> yeah, the parser doesn't recognize that right now but i have a patch in my gmail for this
[17:32] <felixge> ryah: why would the parser be involved at this point?
[17:32] <felixge> ryah: because of keep-alive?
[17:32] <ryah> it needs to know to stop parsing the stream
[17:32] <technoweenie> ryah: https://gist.github.com/15bf02e4c88b2c36b03c  i used curl --trace, does that work?
[17:33] <ryah> technoweenie: what's this?
[17:33] <felixge> ryah: well that would explain my issue : ).
[17:33] jxson has joined the channel
[17:33] <technoweenie> ryah: thats the chunky parser error
[17:33] <ryah> technoweenie: ah
[17:33] <felixge> ryah: feel free to forward me that patch if you'd like somebody to review/test ist
[17:33] <felixge> * it
[17:33] <ryah> felixge: okay - one sec
[17:33] <ryah> technoweenie: one sec
[17:34] <technoweenie> ryah: if that format is cool, i'll just post a ticket.  it only triggers it from the remote server sadly.  
[17:34] <felixge> (ryah has just activated his stop-the-world garbage collector : )
[17:35] <creationix> :)
[17:35] <technoweenie> felixge: whats that mean
[17:35] <felixge> technoweenie: he told us both to wait "one sec"
[17:35] <technoweenie> felixge: ah ok
[17:35] <felixge> technoweenie: I'd be worried if there were no more references pointing to me :)
[17:35] <felixge> technoweenie: (v8 uses a stop-the-world garbage collector like this)
[17:35] <mjr_> felixge: two people tried to acquire the ryah lock.
[17:36] <mjr_> ryah has yet to implement MVCC on himself.
[17:36] <bradleymeck> _utility source now ported to be using interface, http://github.com/bmeck/_utility ... need to make interface's name better and calls nicer, but its an example of aggressively hiding private data as well as doing odd things with closures...
[17:36] <technoweenie> hey has anyone looked at doing clean restarts w/ node?  specifically: responding to a signal to stop listening, finish existing requests, and dying while a new process spins up?
[17:37] <technoweenie> i'm assuming i can just call server.close() and it'llf inish existing requests
[17:39] <felixge> technoweenie: yeah
[17:40] <felixge> technoweenie: that sounds about right
[17:41] <_announcer> Twitter: "Today I submitted an iPhone app to app store, and learned about the http CONNECT method while working on https for a node.js forward proxy." -- Felix GeisendÃ¶rfer. http://twitter.com/felixge/status/17267603509
[17:41] <felixge> ACTION off to beach volleyball
[17:42] <ryah> i can't find that connect patch...
[17:43] <felixge> ryah: ok : /. Ok let me know in case that changes, I'll be back in ~3h
[17:43] <ryah> felixge: http://github.com/sgala/node/commit/2f8693c5274e1827e01842383607d7ee0eaf848e
[17:43] <felixge> ryah: otherwise I can look into doing a patc
[17:43] <felixge> * patch
[17:44] <felixge> ryah: that was fast :)
[17:44] <felixge> ryah: thanks
[17:44] <ryah> i had to look in the "fork queue"
[17:44] visnup has joined the channel
[17:44] <ryah> that's the first time that page was of any use
[17:44] pandark_ has joined the channel
[17:44] <felixge> :)
[17:47] mattly has joined the channel
[17:47] <felixge> ryah: don't merge that yet, got to go now - but it seems like this broke incoming CONNECT requests entirely
[17:47] <ryah> i won't
[17:48] <ryah> i have to get him to sign the CLA first :/
[17:48] <ryah> really wish github could handle that...
[17:51] nofxx has joined the channel
[17:54] llyykcaj has joined the channel
[17:55] <creationix> ACTION once had plans to make my own github
[17:55] <creationix> written in node of course ;)
[17:56] <aurynn> nodehub!
[17:58] <creationix> does anyone know how to find what's causing my node program to get slower over time
[18:00] <mscdex> a watched node never gets faster
[18:00] <mscdex> ACTION watches the user count dwindle
[18:00] <mjr_> wow, brutal split
[18:00] <mscdex> 90 now lol
[18:00] <mjr_> lonely on this side of the split
[18:01] aconran__ has joined the channel
[18:01] mostlygeek has joined the channel
[18:01] maushu has joined the channel
[18:01] Aikar_ has joined the channel
[18:01] sr_ has joined the channel
[18:01] webbot has joined the channel
[18:01] pandark_ has joined the channel
[18:01] jxson has joined the channel
[18:01] joshbuddy has joined the channel
[18:01] jspiros has joined the channel
[18:01] stevendavie has joined the channel
[18:01] liucougar has joined the channel
[18:01] sh1m has joined the channel
[18:01] aubergine has joined the channel
[18:01] mtodd has joined the channel
[18:01] Aria has joined the channel
[18:01] aho has joined the channel
[18:01] WALoeIII has joined the channel
[18:01] kloeri has joined the channel
[18:01] kersny has joined the channel
[18:01] mAritz has joined the channel
[18:01] siculars has joined the channel
[18:01] tyfighter_ has joined the channel
[18:01] jakehow has joined the channel
[18:01] peburrows has joined the channel
[18:01] flipsasser has joined the channel
[18:01] cloudhead has joined the channel
[18:01] mql_1 has joined the channel
[18:01] gwoo has joined the channel
[18:01] pzich has joined the channel
[18:01] tav has joined the channel
[18:01] davidsklar has joined the channel
[18:01] bradleymeck has joined the channel
[18:01] deanlandolt_home has joined the channel
[18:01] davidwalsh has joined the channel
[18:01] KaptianKrispy has joined the channel
[18:01] rob___ has joined the channel
[18:01] blackdog_ has joined the channel
[18:01] jherdman has joined the channel
[18:01] holydevil has joined the channel
[18:01] b_erb has joined the channel
[18:01] keeto has joined the channel
[18:01] shimondoodkin has joined the channel
[18:01] xla has joined the channel
[18:01] dabreaka has joined the channel
[18:01] Pilate has joined the channel
[18:01] eyzn has joined the channel
[18:01] mqt has joined the channel
[18:01] callen has joined the channel
[18:01] tsyd has joined the channel
[18:01] coffeecup has joined the channel
[18:01] SvenDowideit has joined the channel
[18:01] nuba has joined the channel
[18:01] kriszyp has joined the channel
[18:01] trochala has joined the channel
[18:01] qFox has joined the channel
[18:01] gbot2 has joined the channel
[18:01] [[zz]] has joined the channel
[18:01] hdon has joined the channel
[18:01] ceej has joined the channel
[18:01] _announcer has joined the channel
[18:01] sveisvei has joined the channel
[18:01] chewbranca has joined the channel
[18:01] kuya has joined the channel
[18:01] pkrumins has joined the channel
[18:01] KungFuHamster_ has joined the channel
[18:01] pufuwozu` has joined the channel
[18:01] DRMacIver has joined the channel
[18:01] ivan has joined the channel
[18:01] FoxFurry1 has joined the channel
[18:01] rudebwoy has joined the channel
[18:01] foobarfi1hter has joined the channel
[18:01] tpryme has joined the channel
[18:01] sechrist_ has joined the channel
[18:01] sigma_ has joined the channel
[18:01] LionMadeOfLions has joined the channel
[18:01] Guest42356 has joined the channel
[18:01] ddollar has joined the channel
[18:01] PyroPeter has joined the channel
[18:01] pavelz has joined the channel
[18:01] bjartek has joined the channel
[18:01] nefD has joined the channel
[18:01] ryan[WIN] has joined the channel
[18:01] skampler has joined the channel
[18:01] marketing has joined the channel
[18:01] rphillips has joined the channel
[18:01] drudge has joined the channel
[18:01] hoodow has joined the channel
[18:01] voodootikigod has joined the channel
[18:01] mape has joined the channel
[18:01] rektide has joined the channel
[18:01] aakour has joined the channel
[18:01] CIA-76 has joined the channel
[18:01] sid3k has joined the channel
[18:01] mikemike86 has joined the channel
[18:01] jakob has joined the channel
[18:01] onar has joined the channel
[18:01] Atmoz has joined the channel
[18:01] trodrigues has joined the channel
[18:01] sdgvf has joined the channel
[18:01] geeks_bot has joined the channel
[18:01] zhesto has joined the channel
[18:01] Epeli has joined the channel
[18:01] frodenius has joined the channel
[18:01] halorgium has joined the channel
[18:01] innu has joined the channel
[18:01] inarru_ has joined the channel
[18:01] NickP has joined the channel
[18:01] Astro has joined the channel
[18:01] jwm has joined the channel
[18:01] pquerna has joined the channel
[18:01] avidal has joined the channel
[18:01] mediacoder has joined the channel
[18:01] konobi has joined the channel
[18:01] ryah has joined the channel
[18:01] Sembiance has joined the channel
[18:02] <mscdex> heh
[18:02] <mscdex> 90->206
[18:03] <pkrumins> just upgraded nodejs-proxy with new config and some code rewrite, also now works with binary data correctly http://github.com/pkrumins/nodejs-proxy
[18:03] <pkrumins> but this is peanuts, this module is just for fun, nothing serious.
[18:04] <mscdex> i think that's what felix was working on earlier
[18:04] <mscdex> http/https proxy
[18:05] atmos_ has joined the channel
[18:05] sanderjd has left the channel
[18:05] <creationix> I'm just doing db inserts in a tight loop and it's not scaling nicely over time
[18:05] benburkert has joined the channel
[18:06] pgriess has joined the channel
[18:07] technoweenie has joined the channel
[18:07] olegp has joined the channel
[18:07] malkomalko has joined the channel
[18:07] Clooth has joined the channel
[18:07] tlrobinson has joined the channel
[18:07] adamholt has joined the channel
[18:07] <pkrumins> felixge: you working on a proxy also?
[18:08] <pkrumins> creationix: you know what I am thinking right now about, how do asynchronous database bindings work?
[18:08] <pkrumins> creationix: i mean the call itself to a database library call is synchronous itself, is it put in a light thread like a file operation?
[18:08] ollym has joined the channel
[18:09] <creationix> pkrumins: yeah, I'l working on some good idioms, mikeal had a neat idea though
[18:09] <creationix> where you could specify which columns to keep in ram
[18:09] <pkrumins> what's his idea?
[18:09] <creationix> and queries using only those properties could be sync since there is no IO
[18:09] <mjr_> Does the V8 GC only run at idle?  I have a tight loop in my program that sometimes does a lot of work and runs out of memory.  If slow it down with some setTimeouts though, it doesn't run out of memory.
[18:09] <ryah> mjr_: no
[18:09] <pkrumins> creationix: aha.
[18:10] <creationix> but others might need to hit the disk and would be async
[18:10] <pkrumins> and how would you know which ones hit the disk?
[18:10] <pkrumins> and which ones turn out to be mem only?
[18:10] <pkrumins> based on column?
[18:10] <mjr_> ryah: how does it decide when to run?
[18:10] <creationix> pkrumins: well, I'm assuming there would be an async api that only has access to the ram data
[18:10] <ryah> mjr_: black box
[18:10] <mjr_> magic
[18:10] <creationix> and using that api you simply can't query the other stuff
[18:11] <pkrumins> ah.
[18:11] maqr has joined the channel
[18:11] <creationix> btw everyone, I found what was killing my benchmark, I was queueing up all the db writes into a massive array, and then shifting one at a time off it
[18:11] <creationix> shift + large array = bad
[18:11] Linnk has joined the channel
[18:12] <mjr_> free lunch: not available
[18:14] <creationix> pkrumins: s/async/sync/ but I think you know what I meant
[18:14] <bradleymeck> wonder if linked list speed would be faster
[18:14] <creationix> bradleymeck: well, you can do a fast shift if you do a little by hand
[18:15] joshbuddy_ has joined the channel
[18:15] <creationix> but I'l just rewriting it to not shift at all, it should be much faster when I'm done
[18:15] <creationix> I was getting 100,000 inserts in 6 seconds
[18:17] mostlygeek has joined the channel
[18:18] admc has joined the channel
[18:19] <_announcer> Twitter: "node.js + V8 engine = future web server platform?" -- cd. http://twitter.com/caidong/status/17269879095
[18:21] tilgovi has joined the channel
[18:22] <_announcer> Twitter: "yay! rain / coffee / hacking away at nodejs, good day" -- TJ Holowaychuk. http://twitter.com/tjholowaychuk/status/17270038121
[18:22] mikeal has joined the channel
[18:23] <creationix> yeah, 100,000 inserts in 1.2 seconds !
[18:23] <creationix> that's more like it
[18:23] <technoweenie> inserting into what?
[18:23] <_announcer> Twitter: "node.js + v8 engine + redis = private/personal cloud platform ?" -- cd. http://twitter.com/caidong/status/17270138713
[18:23] <technoweenie> oh your couchdb-clone in node?
[18:23] <creationix> my home-built couch clone in node
[18:23] <technoweenie> sweet
[18:24] <technoweenie> whats the memory usage like afterwards
[18:24] <creationix> process.getMemUsage?
[18:24] <technoweenie> process.memoryUsage()
[18:24] aglemann has joined the channel
[18:27] BBBB has joined the channel
[18:27] <rauchg_> technoweenie: wouldn't it be better if it was a getter
[18:27] <rauchg_> get memoryUsage(){ 
[18:28] kersny has left the channel
[18:29] kersny has joined the channel
[18:29] <technoweenie> rauchg_: dont tell me, file a patch to node :)
[18:29] <creationix> technoweenie: https://gist.github.com/eabe4457356bfdfbfe22
[18:30] <technoweenie> creationix: cool
[18:30] khug has joined the channel
[18:30] <creationix> doesn't seem to be letting go, but not bad overall
[18:30] <jetienne> vsize: 3105087488 <- am i reading this right ? this is 3gbyte ?
[18:31] <_announcer> Twitter: "First 24 hours with #nodejs. Trying to make a non-blocking multi-file upload server with progress bars and on-the-fly process of large files" -- Jaime GÃ³mez ObregÃ³n. http://twitter.com/JaimeObregon/status/17270635530
[18:31] <technoweenie> creationix: well at least your heap total is about 2/3 the size of rss
[18:32] <creationix> is that a good thing?
[18:32] <technoweenie> creationix: well my node app looks like this after running for about a day: RSS: 117 MB Heap Total: 6 MB Heap Used: 4 MB
[18:32] ewdafa has joined the channel
[18:34] <shimondoodkin> why there are bugs in node js?
[18:35] <technoweenie> shimondoodkin: because no software is perfect
[18:35] <mjr_> What is the sound of one hand clapping?
[18:35] <blowery> bugs have to live somewhere
[18:35] <creationix> shimondoodkin: so you have something to fix
[18:35] <shimondoodkin> it seems that it is a small extention to v8
[18:35] <dcolish> that just made my day!
[18:35] <jetienne> mjr_: you pplay darbouka for 2 years and you know it
[18:36] <jetienne> mjr_: im not kidding :)
[18:36] <shimondoodkin> where are the bugs usualy?
[18:36] <jetienne> i even do 1 finger clapping :)
[18:36] <dcolish> shimondoodkin: right next to the trolls
[18:37] <creationix> shimondoodkin: look at the issues on the node github site
[18:37] <shimondoodkin> dcolish you make my day
[18:37] <dcolish> thanks :P
[18:37] <creationix> technoweenie: ok, 1,000,000 inserts in 13 seconds
[18:37] <creationix> this new version scales much more linearly
[18:37] <creationix> eats half a gig of ram in the process though
[18:37] <dcolish> woah, creationix what db?
[18:38] <creationix> dcolish: my home-grown one
[18:38] <creationix> very fast for key-value stuff and inserts
[18:38] <dcolish> sounds like it
[18:38] <creationix> hmm, the resulting file on the hd is only 39mb
[18:38] <creationix> I wonder what's eating so much ram
[18:39] <creationix> 333mb in heapUsed
[18:39] <technoweenie> node could use some memory inspection tools
[18:39] <technoweenie> i hear there's a chrome heap inspector or something
[18:39] <mjr_> Yeah, Chrome has one.
[18:40] <creationix> My buffer allocation should only be twice the total size of the resulting file
[18:40] <creationix> what else uses heap in node
[18:40] <creationix> ?
[18:40] <mjr_> All of V8?
[18:41] <jetienne> maybe you simply got a leak
[18:41] <jetienne> i had one in crypto hash 2weeks ago
[18:41] <creationix> yeah, but leaking what?
[18:41] <creationix> my app basically build a single queue, processes it into a single buffer and writes it to disk
[18:41] <jetienne> well thats your code, not mine, but to you to know :)
[18:41] <mjr_> ryah: is the V8 heap profiler available in node?
[18:42] <jetienne> but=up
[18:42] bmizerany has joined the channel
[18:42] <creationix> hmm, I'll chunk my writes into groups using process.nextTick
[18:42] <creationix> that may help the ram
[18:42] <ryah> mjr_: yeah, --log_gc
[18:43] <mjr_> oh, cool
[18:43] <ryah> mjr_: ./node --v8-options
[18:43] khug has joined the channel
[18:43] christkv has joined the channel
[18:43] <shimondoodkin> was nodejs tested with like valgrind for memory leaks?
[18:44] <mjr_> creationix: are you going to explore --log_gc and hp2ps, then let everybody know how to do it?
[18:44] <jetienne> --optimize_ast (optimize the ast) <- what is ast ?
[18:44] <creationix> mjr_: what's that?
[18:45] <creationix> oh, I see
[18:45] <rauchg_> technoweenie: i thought you were the process.* maintainer
[18:45] <rauchg_> j/k
[18:46] <ryah> jetienne: abstract syntax tree
[18:46] <creationix> wow, log_gc makes the app slow and use LOTS of ram
[18:47] <creationix> good thing I got 8gb, cause it's hovering around 2gb
[18:47] neytema has joined the channel
[18:48] <ryah> creationix: regarding your tight loop
[18:48] <ryah> what db driver are you using?
[18:49] <creationix> ryah: it's not, it's a db implemented in node
[18:49] <ryah> creationix: is it writing to disk/
[18:49] <creationix> ryah: yes
[18:49] <creationix> serialized writes, but using async write
[18:49] <ryah> creationix: are you getting push back from the disk when it can't handle more data?
[18:49] <creationix> hence the massive queue
[18:50] <ryah> or are you just queueing it all up in memory?
[18:50] <creationix> well, my original test did everything in a single tight for loop, so, no matter how fast the disk was, it all got queued
[18:50] <creationix> except for the first insert
[18:50] <creationix> I'm trying it in chunks now using process.nextTick
[18:50] <creationix> but it seems about the same performance
[18:51] <ryah> creationix: where is the data coming from?
[18:51] <ryah> are you generating it?
[18:51] <creationix> ryah: generated by the loop
[18:51] <creationix> just simple json
[18:51] <ryah> creationix: you should wait until the last write is complete
[18:51] <ryah> before making the next data to send
[18:52] <creationix> ryah: for the benchmark?
[18:52] <creationix> it's already doing that internally, but queues up requests that come to fast
[18:52] Guest80696 has joined the channel
[18:52] <ryah> i don't know what you're doing - but just in general - don't flood your memory with things waiting to be written
[18:53] <creationix> ok, I'll try it with the insert requests being serial
[18:53] <jetienne> maybe you got memory fragmentation too. i got a code which ends up with 130mbyte used according to OS, but only 10mbyte used internally
[18:53] holydevil has joined the channel
[18:53] <jetienne> the remaining being holes in the memory
[18:53] <jetienne> even if i guess v8 is smarter than my code on this
[18:54] mtodd has joined the channel
[18:55] <ryah> creationix: my experience with making node fast is this: it's really fast until you hit GC
[18:55] <ryah> *really fast*
[18:55] <creationix> sounds about right
[18:55] <ryah> but GC slow stuff down a lot
[18:56] <creationix> in real use, I doubt an app is going to do 1M inserts in a tight loop
[18:56] <ryah> to avoid GC, keep less objects around
[18:56] kwe has joined the channel
[18:56] <creationix> ryah: does fs.write queue internally if it's called too fast
[18:56] <creationix> maybe that would be a better queue, than mine?
[18:57] <ryah> creationix: no
[18:57] <ryah> creationix: it'll start new threads to serve the requests
[18:57] <creationix> eww, that would be bad
[18:57] <ryah> yes
[18:57] gjohnson has joined the channel
[18:57] <mjr_> yikes
[18:58] <kwe> Anyone know of any ldap libs I could use from node? Have to implement a user directory API and would live to use as a node.js project
[18:59] TS_ has joined the channel
[18:59] <kwe> S/live/love/
[19:00] hober has joined the channel
[19:00] <peburrows> anybody have suggestions for a websockets server setup? I've heard HAProxy works; any other suggestions?
[19:01] <shimondoodkin> is nginx works?
[19:01] <creationix> ryah: well, if I don't send the next insert till the previous has come back, It's a little slower, but uses a LOT less ram
[19:01] <creationix> 1,000,000 inserts in 0m40.885s
[19:01] <creationix> with about 50mb rss in the end
[19:01] <peburrows> nginx will close the connection so it won't work for websocket
[19:01] <creationix> vs 13 seconds with 500mb ram
[19:02] tjholowaychuk has joined the channel
[19:02] <jetienne> two at a time may be a good tradeoff
[19:03] <shimondoodkin> theres a trick
[19:03] <shimondoodkin> >
[19:03] <shimondoodkin> http://stackoverflow.com/questions/2419346/can-nginx-be-used-as-a-reverse-proxy-for-a-backend-websocket-server
[19:03] <shimondoodkin> timeout client    86400000
[19:03] tjholowaychuk has joined the channel
[19:03] isaacs has joined the channel
[19:03] <mape> Anyone had issues with michaels websocket server on latest chrome dev?
[19:03] <creationix> jetienne: ok, I'll try that, but it's a little more logic...
[19:04] tjholowaychuk has joined the channel
[19:04] tjholowaychuk has joined the channel
[19:05] <creationix> jetienne: yep, 13 seconds with 49mb of ram
[19:05] <creationix> 10 at a time
[19:05] <peburrows> shimondoodkin: yeah, that's for HAProxy. I'm just curious if there are other options. nothing against HAProxy, I just want to research my options before making a final choice
[19:06] <jetienne> creationix: ok so the first version were filling your own queue like mad and never releasing it.
[19:06] <jetienne> maybe you were creating 1000000 threads :)
[19:06] <creationix> jetienne: all versions are with the same lib, just different use cases in the test script
[19:06] <creationix> always one thread
[19:06] <shimondoodkin> also i know there is along pool  module for nginx
[19:06] <creationix> it internally always does the writes one at a time
[19:07] mklappstuhl has joined the channel
[19:07] <shimondoodkin> http://stackoverflow.com/questions/1160454/nginx-proxy-to-comet
[19:07] <shimondoodkin> http://www.igvita.com/2009/10/21/nginx-comet-low-latency-server-push/
[19:07] <creationix> actually, I'm grouping the writes internally into a single buffer
[19:07] <creationix> so 1,000,000 inserts in a tight loop would do (1 insert as a single buffer, then 999,999 as a single buffer)
[19:07] <ryah> jetienne: there is a limit on the number of threads it can create
[19:08] <creationix> maybe I should limit how many to pull off the queue at a time and not just grab all of them
[19:08] <shimondoodkin> i personaly prefer nginx because of simplisity of its configuration
[19:08] flipsasser has left the channel
[19:10] sanderjd has joined the channel
[19:11] <pkrumins> i hate term "comet"
[19:11] <pkrumins> cause it means 10 different things
[19:11] paulwe has joined the channel
[19:11] <pkrumins> why the hell people keep using it, it's so deceptive.
[19:11] <pkrumins> got to write a rant about it
[19:11] <creationix> alright, I found the sweet spot at around 1000 concurrent writes at a time
[19:12] <creationix> (queued writes that is)
[19:12] <pkrumins> otherwise we'll stick with this idiotic term forever.
[19:12] <creationix> pkrumins: windex?
[19:12] <pkrumins> creationix: no no, "comet"
[19:12] <mikeal> nginx is so simple it's almost entirely undocumented :P
[19:13] <creationix> alright 105,000 inserts per second
[19:13] <mikeal> very nice
[19:13] <creationix> good enough for a proof of concept db
[19:13] mtodd has joined the channel
[19:13] <mikeal> and it's durable :)
[19:13] <creationix> yep
[19:13] <creationix> and the db file is only 27mb
[19:13] <mikeal> i bet group commit would make that more like 150K
[19:13] <malkomalko> just using the filesystem creationix?
[19:14] <mjr_> ryah: after over a month and handling over 4M requests, my node proxy server is still around 32MB RSS:  mjr      29780  0.1  1.8  73120 33068 ?        Sl   May15 113:51 /usr/local/bin/node ./logfront.js
[19:14] <peburrows> I think I'll just go with HAProxy; I want to do true WebSockets â don't wanna fake it with something like long-polling.
[19:14] <shimondoodkin> peburrows: there is a working stack: http://github.com/stephenlb/nodejuice
[19:14] <creationix> mikeal: it's already grouping about 1000 records at a time
[19:14] <mikeal> oh i see
[19:14] <mikeal> group commit is more efficient 
[19:14] <technoweenie> mjr: whats the heap usage like
[19:14] <creationix> mikeal: what do you mean?
[19:14] <mikeal> after you post the code i can work on it :)
[19:14] <technoweenie> or do you have to kill the server to get that... ha
[19:15] <shimondoodkin> peburrows: is haproxy works as reverse proxy like nginx?
[19:15] <mikeal> with group commit you prepare everything for the write beforehand in the queue, you do a write, when that write returns you do one write with all the pending queue
[19:15] <mikeal> so  you write however many are pending
[19:15] <technoweenie> shimondoodkin: haproxy is a much better proxy than nginx
[19:15] <mikeal> if you aren't under load, you'll be write 1 each time
[19:15] <mikeal> if your'e under high load you'll do like 10K at a time
[19:15] hsoj_ has joined the channel
[19:15] tzmartin has joined the channel
[19:16] <mjr_> technoweenie: not sure, because I forgot to start repl on that one.  :)
[19:16] <mikeal> creationix: did you put the code on github yet?
[19:16] <mikeal> i wanna play with it :)
[19:16] <peburrows> shimondoodkin: nodejuice looks neat â I'll check it out. thanks
[19:17] <creationix> mikeal: about to
[19:19] <creationix> mikeal: here's what I got so far, I'll make a proper repo later http://gist.github.com/454687
[19:20] <mikeal> push it to a repo so i can fork :)
[19:21] <creationix> mikeal: what should I call it?
[19:21] <malkomalko> you can fork a gist mikeal
[19:21] <creationix> minicouch?
[19:21] <mikeal> name it something more node oriented
[19:21] <mikeal> nstore
[19:21] <creationix> yeah, technically gists are repos, just without all the features in github
[19:22] <shimondoodkin> nodejs-jsondb
[19:22] <creationix> nstore, I like that
[19:22] <malkomalko> does it actually use couchdb or is it all fs based?
[19:22] markwubben has joined the channel
[19:22] <mikeal> it's not couchdb
[19:22] <creationix> mikeal: by the way, it's not 100% done, you can't read something that was just inserted in the same process
[19:22] <mikeal> it's simpler and a pure node api, no network
[19:23] <mikeal> "what just inserted"
[19:23] <creationix> malkomalko: yeah, it's like node-dirty with some inspiration from couch
[19:23] <mikeal> er "was just inserted"
[19:23] <creationix> mikeal: yeah, inserts get written to the file, but the index isn't updated
[19:23] <malkomalko> got it
[19:23] <mikeal> oh i see
[19:23] <creationix> so selects won't see it until you restart the app
[19:23] <mikeal> do you want to update the index before or after the write?
[19:24] <mikeal> probably after
[19:24] <mikeal> that way readers can read the last consistent state
[19:24] <ceej> creationix: guess what?
[19:24] <creationix> mikeal: I was thinking about that
[19:24] <creationix> ceej: what?
[19:24] <mikeal> you don't have MVCC
[19:24] <ceej> heroku is finally going to upgrade to 0.1.99 this week :)
[19:24] <mikeal> so you don't need to worry about revision conflict
[19:25] <mikeal> er conflicts
[19:25] <creationix> mikeal: I would like MVCC
[19:25] <creationix> ceej: awesome!
[19:25] <tjholowaychuk> ceej really? i was just pushing stuff on the weekend that wont work (yet) thats sweet
[19:25] <ceej> yep :)
[19:25] <tjholowaychuk> good timing 
[19:25] <mikeal> then you definitely want the last consistent state
[19:26] <mikeal> or else you won't be able to properly check within the queue for the last revision 
[19:26] <creationix> mikeal: should be easy since this is all in-process in a single-threaded node app
[19:27] <mikeal> for now, just update it after the write before you fire the callback for the write
[19:27] <creationix> mikeal: easy enough
[19:27] <creationix> then I know the offset and length too
[19:27] <creationix> (for the meta stuff)
[19:27] <mikeal> right
[19:28] <mikeal> you would have to write some extra code to negotiate pulling from an in-memory structure instead of on disc if you did it beforehand
[19:28] <creationix> mikeal: http://github.com/creationix/nstore
[19:28] <mikeal> hardcore forking action
[19:28] <creationix> mikeal: exactely, that was what I had planned, but I now see it breaks MVCC
[19:28] <_announcer> Twitter: "@JaimeObregon please if you may share the code of uploads with status for nodejs" -- Shimon Doodkin. http://twitter.com/doodkin/status/17274145344
[19:28] <bradleymeck> mmm how to add an object to an already existing object's prototypechain, i know about sys.inherit(), but was hoping for something without touching c++ land
[19:28] <mikeal> you know what would be cool
[19:29] <creationix> bradleymeck: __proto
[19:29] <creationix> or something like that
[19:29] <bradleymeck> wouldnt that just overwrite the proto?
[19:29] <mikeal> db.set(key, value) db.set(key, rev, value)
[19:29] <mikeal> you could make MVCC optional
[19:29] <kuya> nice creationix 
[19:29] <malkomalko> hey creationix add an empty data directory into the repo so you can run the test without errors
[19:30] <creationix> malkomalko: git doesn't support empty directories
[19:30] <malkomalko> you just add a .gitignore
[19:30] <malkomalko> ahh, I didn't know you work for sencha
[19:30] <malkomalko> really digging the extjs designer :)
[19:30] <creationix> :)
[19:31] <mikeal> i like this a lot
[19:32] <mikeal> when i want to build something really simple, this is so nice
[19:32] <mikeal> just a pure in-node API to store data that is consistent and append-only so i can just use rsync for backups
[19:33] <creationix> yeah, that's the goal
[19:33] <malkomalko> might try tackling adding some capped collections to this
[19:33] <malkomalko> that way I can make sure I keep the file sizes trim or to a certain # of records
[19:34] <mikeal> once there is code for vacuum you'll want to call it when the file size hits a certain levle
[19:35] <creationix> malkomalko, mikeal, note that I don't know the license on this yet, so contribute at your own risk
[19:35] <creationix> most likely it will be MIT as either me or sencha
[19:35] <creationix> depends how much I develop it on company time
[19:35] <malkomalko> of course
[19:35] <mikeal> as long as it's MIT i don't care about the ownership
[19:35] <malkomalko> just nice for me to look at to learn
[19:36] <creationix> mikeal: I'm 99.9% sure it will be MIT
[19:37] <mikeal> cool
[19:37] <creationix> but if it ends up in sencha labs there will be a CLA involved
[19:37] <mikeal> like i said, i don't care about ownership assignment if it's MIT or Apache
[19:38] <mikeal> lunch time!
[19:39] <Linnk> anyone here uses Express for web development?
[19:40] <mape> the sys module holds console.log right?
[19:40] <bweaver> Linnk: I just finished building a small site it in.
[19:40] <creationix> mape: nope
[19:40] <creationix> console.log is implemented seperately, but same as sys.puts
[19:40] <Linnk> bweaver: cool, it's quite nice, but I'm having some problems with including stylesheets
[19:41] <mape> creationix: ok so it is there regardless of if I require sys?
[19:41] <creationix> mape: yep, it's a global
[19:41] <mape> nice
[19:41] <bweaver> Linnk: Is it a sass problem or are the stylesheets not serving up?
[19:41] <_announcer> Twitter: "@ryanstewart No problem. I've had my head buried in several websockets projects recently. Glad to help. You could always spin up Node.js. :)" -- Daniel Shaw. http://twitter.com/dshaw/status/17274914879
[19:41] itistoday has joined the channel
[19:42] itistoday has left the channel
[19:42] <Linnk> bweaver: the stylesheets seem to not serve up, when I go to /css/style.css, it just returns "OK" (plain text, not HTTP status code)
[19:42] <creationix> Linnk, bweaver, in case you don't know tjgholowaychuk (the original express author) and I are working on a new framework that includes most the functionality from express
[19:42] <bweaver> creationix: I've been curious about that; will Connect replace Express?
[19:43] <creationix> I don't think tj wants to kill express, but I know he's using connect for a personal project or two
[19:43] <creationix> and we're both paid by our day job to work on connect
[19:43] <creationix> so it should keep moving for some time to come
[19:45] <creationix> mikeal: do you know how to get the current location of a file pointer in node?
[19:45] <creationix> so when I open a file in append mode, I want to know the offset of there it's about to write to
[19:45] <bweaver> Linnk: I'm not sure if this will help, but here's what I'm doing to serve static content for development: <http://pastebin.org/363806>
[19:46] <malkomalko> i asked this yesterday but my irc channel blew up.. SOAP is just xml over http right?  I'm trying to write a wrapper for some api's
[19:46] <bweaver> Linnk: My project structure looks like: site/app.js, site/media/js/foo.js, site/media/css/styles.css, etc.
[19:46] <kuya> 2
[19:46] <creationix> malkomalko: lots of xml over http
[19:46] <malkomalko> yup
[19:46] <malkomalko> god I hate xml
[19:47] <_announcer> Twitter: "Vows â Asynchronous BDD/Testing Framework for Node.js | http://vowsjs.org | http://github.com/cloudhead/vows | vote: http://bit.ly/cTXPjn !" -- Alexis Sellier. http://twitter.com/cloudhead/status/17275282759
[19:47] mklappstuhl has joined the channel
[19:47] <creationix> I was suprized to find how much xml webdav uses in the protocol
[19:47] <bweaver> Linnk: Then those serve up as /media/js/foo.js, /media/css/foo.css, etc.
[19:47] <creationix> cloudhead: vows looks nice
[19:47] <cloudhead> creationix: thanks : )
[19:47] <cloudhead> I put in a lot of work into it
[19:48] <ollym> ffs why is v8's GC so slow
[19:48] <creationix> cloudhead: are you up in nyc?
[19:48] <ollym> thats such a pain
[19:48] Linnk has joined the channel
[19:48] <cloudhead> creationix: in Montreal, moving to SF in a couple months
[19:48] <malkomalko> nice move
[19:48] <creationix> awesome, I just moved to south bay, so I'll be around
[19:48] <cloudhead> great
[19:48] <malkomalko> I'm in nyc, not pushing the tech boundaries
[19:49] <cloudhead> hehe
[19:49] <Linnk> bweaver: looks a lot like my structure, but for debugging purposes I reduced it to a single "css" dir, and then a get function that renders files in that dir with no layout
[19:52] <creationix> nstore is MIT, now to get the initial version done so I can announce it
[19:52] sanderjd has left the channel
[19:52] paul__ has joined the channel
[19:54] <malkomalko> what are the plans for it, and let me know if and how I can help, it's very interesting to me
[19:54] <bradleymeck> mmm are jsdom's nodelists not live right now?
[19:54] <ryah> http://gist.github.com/456271 <--
[19:55] <ryah> so painful
[19:55] <creationix> malkomalko: well, I plan on using it for the db store for a demo connect app I'm building, but I hope it will be a general purpose datastore for lots of small to medium node apps
[19:55] <technoweenie> ryah: oh is that for $0 ?
[19:55] <ryah> technoweenie: yeah
[19:55] <ryah> proper $0
[19:55] <technoweenie> yikes
[19:55] <ryah> yeah
[19:56] <ryah> on linux, setproctitle()
[19:56] <ryah> ACTION shakes his head.
[19:56] <creationix> ryah: at least it will be fairly self-contained
[19:56] <creationix> I like the new per-platform files
[19:56] <_announcer> Twitter: "#reddit Vows - Asynchronous BDD Framework for Node.js: submitted by  alexissellier  [link] [comment] http://bit.ly/b6UBhU #rulez" -- REDDITSPAMMOR. http://twitter.com/REDDITSPAMMOR/status/17275872822
[19:57] <creationix> ryah: is there a way to get the current file offset for an open file?
[19:57] <creationix> I open a file in append-only mode and I want to know the file offset where it will write to by default
[19:58] <ryah> no, i don't think so
[19:58] bulters has joined the channel
[19:58] <bulters> g'day all
[19:59] <creationix> hmm, well since I'm reading the file too, I guess I can just count the size and manually set the offset when writing
[19:59] <ryah> creationix: or just leave the offset null
[19:59] <creationix> a single read-write file handle can do writes and reads at the same time right?
[19:59] <creationix> using threads
[20:00] <ryah> yes
[20:00] <creationix> ryah: my problem is I need to know what offset the data I'm writing will go to, so I can read it back later if needed
[20:00] <ryah> creationix: why not use wht WriteStream class?
[20:00] <ryah> s/wht/the/
[20:00] <creationix> how would WriteStream help
[20:01] <creationix> I'm using a plain write now without an explicit offset, and it's working
[20:01] <ryah> it handles the queuing
[20:01] <creationix> will it tell me what offset the chunk ended up being written to?
[20:01] <bradleymeck> *shakes fist in attempt to summon tmpvar*
[20:02] <creationix> or can I just assume writes will go in the order I specify and pre-calculate the offsets
[20:02] rauchg_ has joined the channel
[20:02] <ryah> creationix: it will make the order correct
[20:02] <creationix> hmm, that might work, does it take fd or file path as input
[20:03] <creationix> ACTION looks at the api docs
[20:03] <bulters> Is there currently a 'sanctioned' way of deploying node apps?
[20:03] <creationix> I need sequential append-only writes and random access reads
[20:03] <ryah> bulters: no
[20:04] <aurynn> Someone should write a .egg-like container, clearly :)
[20:04] <isaacs> aurynn: no!!!
[20:04] <aurynn> lol
[20:04] <creationix> eggs are the source of all evil (well if snakes are evil that is)
[20:04] <bulters> ryah: ok. that's clear... ;-)
[20:05] <isaacs> if i have anything to do with it, node packages will be zips or tarballs forever
[20:05] <isaacs> i may have to cave and start using zip instead of .tgz
[20:05] <isaacs> it's a completely irrational preference for tgz.  it's just so easy and universal.
[20:05] <_announcer> Twitter: "http://vowsjs.org/ is not only an awesome Node.js testing system but it has a beautiful site!" -- Ralph Lotion. http://twitter.com/stuartloxton/status/17276428310
[20:05] <pkrumins> pushed documentation of node-video!
[20:06] <creationix> isaacs: well zip doesn't support symlinks does it
[20:06] <pkrumins> node-video is for doing <video> streaming of html5 via node!
[20:06] <aurynn> ACTION needs to push her REST URI dispatch to github
[20:06] <creationix> (of course windows doesn't like them either)
[20:06] <pkrumins> and creating theora videos via node.js
[20:06] <aurynn> pkrumins, does it support h264? ;)
[20:06] <isaacs> creationix: well, it's exceedingly rare to have symlinks inside an npm package anyhow
[20:06] <aurynn>  /troll
[20:06] <pkrumins> aurynn: :)
[20:06] <pkrumins> aurynn: i started with h264
[20:07] <pkrumins> but then found out it had terrible flaws and wasn't supported :)
[20:07] <isaacs> creationix: but i'm not sure, exactly.  tusk and nodules use zip, and that's sort of becoming the standard.
[20:07] <isaacs> creationix: trying to choose my battles ;)
[20:07] <pkrumins> so i instantly moved to theora.
[20:07] <shimondoodkin> i runmy apps on this setup: http://github.com/shimondoodkin/nodejs-autorestart
[20:07] <pkrumins> but i am gonna add support for h264 as well later, when more browsers support it.
[20:07] <isaacs> shimondoodkin: that looks a lot like node-supervisor
[20:08] <creationix> ryah: is it possible to create a writeStream from an existing fd
[20:08] <isaacs> shimondoodkin: but with more bells and whistles
[20:08] <creationix> or get the fd out of an existing writeStream 
[20:08] <ryah> creationix: i think so
[20:08] <shimondoodkin> actualy i wanted aess is more
[20:08] <shimondoodkin> less
[20:08] <ryah> felixge: ---^
[20:08] <creationix> I'd love to share the fd between my reader and writer so guarantee it's the same file
[20:08] <creationix> ACTION doesn't like race conditions
[20:09] <isaacs> shimondoodkin: it looks like this is using monit and stuff, though
[20:09] <shimondoodkin> no it uses nothing
[20:09] <shimondoodkin> jus 1 line of bash
[20:09] <isaacs> shimondoodkin: i mean, it's got a conf file for monit to use
[20:09] <shimondoodkin> the conf is for upstart
[20:10] <shimondoodkin> ther is no pooling 
[20:10] <shimondoodkin> it simply does while true tun node
[20:10] <shimondoodkin> *run node
[20:10] <creationix> shimondoodkin: :), that's how I run howtonode.org , infinite loops are great
[20:11] <isaacs> shimondoodkin: that's roughly what node-supervisor does, but with the added feature of crashing the child proc when a file changes.
[20:11] <isaacs> shimondoodkin: basically, it restarts the child proc when it crashes, unless it crashes in under a second 10 times in a row, or something like that.
[20:12] <shimondoodkin> my simply exits by itself as a node app future
[20:12] <shimondoodkin> i probably need to make it with call back
[20:13] <shimondoodkin> is there a better way?
[20:13] tjholowaychuk has joined the channel
[20:13] <aurynn> is there a argument parser for node, or do I have to write one? I probably missed the reply to this last time
[20:14] <tjholowaychuk> aurynn: switch(){}
[20:14] <tjholowaychuk> :)
[20:14] <aurynn> :P
[20:14] khug has joined the channel
[20:14] voodootikigod has joined the channel
[20:14] <tjholowaychuk> aurynn: serious lol no need for option parsers
[20:15] <mscdex> aurynn: there's some on the modules list
[20:15] <isaacs> aurynn: most people have rolled their own things, but there's a few out there.
[20:15] <isaacs> ACTION wrote one that isn't that awesome.  there are a few that are also not that awesome.
[20:15] <mde> aurynn: Kind of basic, but there's this: http://github.com/mde/geddy/blob/master/geddy-core/lib/parseopts.js
[20:15] <mscdex> aurynn: http://wiki.github.com/ry/node/modules#parsers-commandline
[20:15] <mde> Right, mostly just "serviceable."
[20:15] <aurynn> ah-hah. If only I'd looked there first.
[20:15] voodootikigod has joined the channel
[20:16] <isaacs> trollop on ruby is quite nice, but i have'nt used trollop.js
[20:16] <_announcer> Twitter: "Vows - Asynchronous BDD Framework for Node.js http://dlvr.it/26XqL" -- Tech & Friki Stuff. http://twitter.com/FrikiFeeds/status/17277019147
[20:18] chrischris has joined the channel
[20:18] <creationix> ryah: writeStream looks nice, but it's more work to get it working the way I need than to just implement my stream from scratch
[20:18] mw has joined the channel
[20:19] <isaacs> shimondoodkin: ohh... it looks like nodejs-autorestart also is used to start a node program at boot
[20:19] <isaacs> shimondoodkin: i was trying to figure out how it differs from supervisor, but that makes sense.
[20:19] khug has joined the channel
[20:22] <shimondoodkin> isaacs: i did not knew that
[20:22] <isaacs> oh, maybe i'm misreading it
[20:23] <shimondoodkin> i did not knew that superviser does not boot
[20:23] <shimondoodkin> *load on boot
[20:23] <isaacs> yeah, you have to start node-supervisor manually just like any other node program
[20:23] <isaacs> but you can do "node-supervisor -p my-program.js -w path/to/watch/
[20:24] mklappstuhl has joined the channel
[20:24] wink_ has joined the channel
[20:25] <isaacs> you could of course create an init.d script or something to run that command on boot
[20:26] <shimondoodkin> yes that wht i did.. actualy
[20:26] <shimondoodkin> i wrote an init script
[20:26] <shimondoodkin> for upstart not for init.d
[20:29] ako has joined the channel
[20:29] mjijackson has joined the channel
[20:29] kersny has left the channel
[20:30] webbot has joined the channel
[20:30] caolanm has joined the channel
[20:31] <caolanm> quick q... IE doesn't like using the type application/javacsript for including js, but it should ignore that if I use it server side right?
[20:31] <shimondoodkin> you have atypo
[20:31] aho has joined the channel
[20:31] <caolanm> I mean... I can respond with the Content-Type set to application/javascript
[20:31] kersny has joined the channel
[20:32] <caolanm> and not break anything
[20:34] <mscdex> i dunno
[20:34] bmizerany has joined the channel
[20:34] <mscdex> why not use "text/javascript" ?
[20:35] <shimondoodkin> caolanm are you downloading scripts to run on serverin nodejs?
[20:36] <caolanm> mscdex: because its officially obsolete
[20:36] <mscdex> meh
[20:36] <caolanm> and given the choice I'd like to follow standards
[20:36] <caolanm> but if it breaks stuff I'll just use text/javascript
[20:36] <mscdex> well, IE and standards are not compatible ;-)
[20:36] <caolanm> but I also think it probably just ignores whatever the server returns for the mime type
[20:36] <caolanm> so I might be able to sneak in some standards when its not looking
[20:37] <mscdex> not if IE can help it!
[20:37] <shimondoodkin> it probably paritaly use the mime to detect images and binary data
[20:38] <hober> strictly speaking, "application/ecmascript" is "the standard," but browsers (the lot of them) prefer "text/javascript," and that preference is getting baked into HTML5. So just use "text/javascript" and stop worrying about it.
[20:38] <caolanm> \o/
[20:38] <caolanm> that's the sort of answer I want
[20:38] <caolanm> win win
[20:38] <caolanm> thanks hober
[20:42] <mscdex> heh
[20:43] ves_ has joined the channel
[20:46] <ves_> hi folks, I don't suppose anyone could shed any light on this compile failure: http://gist.github.com/452757 - looks v8 related but google fails me :( also don't have any further info about my environment just now since it's the works machine and I'm home :/
[20:46] <ves_> this was from the latest github source over at http://github.com/ry/node
[20:47] bulters has joined the channel
[20:48] <shimondoodkin> maybe the trunck did not complile as i saw in the continius integration several days ago.  
[20:48] <ves_> shimondoodkin: sorry, I also tried with the latest release and had the same thing
[20:54] indiefan has joined the channel
[20:54] <mscdex> ves_: ryah just updated v8 today, so maybe that is causing problems? try this one instead: http://github.com/ry/node/tarball/67f7fe5e5c210f42fd3c27809a97245b4eb242f9
[20:56] <ves_> mscdex: cheers, I will do when I'm next in. same thing with the latest build on the site though (2010.06.21 node-v0.1.99.tar.gz) unless that suffered the same issue. I've since managed to compile the latest github trunk on my mac, too so I suspect my work machines setup. just wish I could track down the issue
[20:57] <mscdex> hmm
[20:57] <shimondoodkin> ive compiled node-v0.1.99.tar.gz today sucsessfuly on ubuntuserver 10
[20:58] pavelz has joined the channel
[20:58] drostie has joined the channel
[20:58] <mscdex> ves_: what platform is this?
[20:58] <ves_> mscdex: suse
[20:58] <ves_> unsure of version :/ should probably come back with more info tomorrow..
[20:59] <maushu>  Man, node always amazes me.
[20:59] <mscdex> ok
[20:59] <mscdex> _announcer always amazes me.
[20:59] <ves_> ports all blocked and all that jazz at work though so difficult enough :)
[20:59] <mscdex> ves_: yeah, no problem
[20:59] <maushu> I put my http server on siege with 200 concurrent users during 5 minutes and I can still access it with the same speed from my browser.
[21:00] <technoweenie> maushu: do you monitor the memory usage?
[21:00] <technoweenie> i think that'd be interesting too
[21:01] <maushu> Let me check.
[21:01] pgriess has left the channel
[21:01] <ryah> ves_: make distclean all
[21:02] giacecco has joined the channel
[21:02] pgriess has joined the channel
[21:02] <ves_> ryah: will do, and I'll try the build linked by mscdex 
[21:03] <giacecco> hi all, anybody can help a newbie with a kind of error I never saw before?
[21:03] <mscdex> giacecco: sure, what is it?
[21:04] <giacecco> it looks like this:
[21:04] <giacecco> events:11
[21:04] <giacecco>         throw arguments[1];
[21:04] <giacecco>                        ^
[21:04] <giacecco> Error: Parse Error
[21:04] <giacecco>     at Client.ondata (http:861:22)
[21:04] <giacecco>     at IOWatcher.callback (net:502:31)
[21:04] <giacecco>     at node.js:221:9
[21:04] <giacecco> what's that "events:11"?
[21:04] <maushu> technoweenie, 54k mb during siege.
[21:04] <shimondoodkin> it is parse error
[21:04] <maushu> I mean, 54mb.
[21:05] zenom_ has joined the channel
[21:05] <giacecco> shimondoodkin: yep, but where?
[21:05] <giacecco> in a library?
[21:05] <giacecco> why no code of mine is referenced?
[21:05] <shimondoodkin> you see there  are line numbers after the functions adnd file names
[21:05] <shimondoodkin> at node.js:221:9
[21:06] <shimondoodkin> at 221 line at 9'th char
[21:06] <mscdex> giacecco: are you trying to eval code in your program or anything like that?
[21:06] <maushu> technoweenie, that includes shared memory with other nodes, so I'm not sure exactly how much.
[21:06] <technoweenie> maushu: ah ok cool
[21:06] <mscdex> giacecco: or JSON.parse?
[21:06] <giacecco> mscdex: no, the only reference to "parse" I have is
[21:06] vmx has joined the channel
[21:06] <maushu> technoweenie, ok, "real" memory without siege is 4mb.
[21:06] <shimondoodkin> also youo might use try,catch: try{your code}catch(e){sys.puts(e.stack)}
[21:06] <giacecco> in a require('url').parse(request.url) in a simple web server
[21:07] <mscdex> ah
[21:07] <technoweenie> thats during/after its being sieged?
[21:07] <maushu> 32mb
[21:07] <maushu> 32mb during siege
[21:07] <mscdex> giacecco: insert a debug statement that outputs request.url, since it sounds like it's malformed
[21:08] <maushu> Wait, forgot the other 4mb, thats 36mb.
[21:08] <giacecco> mscdex/shimondoodkin : tried that already; the interesting bit is that my code works, but the whole thing crashes after doing my thing
[21:08] <giacecco> member:mscdex/member:shimondoodkin: infact you see that my own source is not referenced in the error description
[21:08] <maushu> technoweenie, seconds after the siege ends the memory usage decreases by 19mb.
[21:09] <shimondoodkin> you might want to put in in gist and send us a link
[21:09] <mscdex> giacecco: right. but it's a call to url.parse
[21:09] <mscdex> what does the request.url look like?
[21:09] <giacecco> mscdex: trivial: "/0002" for example
[21:09] <giacecco> mscdex: I am writing a little URL shortener as an exercise
[21:10] <giacecco> I'll check in git now so you can see the whole thing if you're interested
[21:11] <mjijackson> What is the best way to detect if you're running in a CommonJS environment as opposed to a browser?
[21:11] <shimondoodkin> test if there s a windows.ocation
[21:11] <technoweenie> if(require) 
[21:11] <technoweenie> ?
[21:11] <shimondoodkin> location
[21:12] <mjijackson> technoweenie: that could work...
[21:12] <mscdex> giacecco: require('url').parse("/0002") works fine for me
[21:12] <technoweenie> window.location would work too. or even just window
[21:12] <giacecco> mscdex: I know! :-(
[21:12] <technoweenie> if(require && require.paths)
[21:12] <technoweenie> shrug
[21:13] <shimondoodkin> thats more specific
[21:13] <blowery> mjijackson: i'd test for a navigator object. bit of a better test than window.. maybe. :)
[21:13] <blowery> technoweenie: that'll fail if require isn't defined
[21:13] <blowery> if(typeof require !== "undefined")...
[21:14] <mikeal> i do
[21:14] <mikeal> var require
[21:14] <technoweenie> ah there you go
[21:14] <mscdex> giacecco: i'd upload the code you're trying to use somewhere
[21:14] <mikeal> if (require && require.path)
[21:14] <mscdex> giacecco: because there must be something else going on
[21:15] <giacecco> mscdex: the feeling I have is that there's an event spaghetti somewhere
[21:15] <mscdex> giacecco: sounds delicious
[21:15] <shimondoodkin> i'm hungry
[21:16] <mjijackson> blowery: if (typeof require) works best i think...
[21:16] <giacecco> [GRR git's stopped working]
[21:16] <mjijackson> correction; if (typeof require !== 'undefined')
[21:18] <giacecco> check this please http://drop.io/tym5tod
[21:18] <vmx> hi. node segfaults for me when i try debugging with eclipse and --debug-brk. here's the backtrace, although not very useful although i've compile node with --debug: http://www.friendpaste.com/2GkRXy8TgUDAvvzmTVwXmJ
[21:19] <vmx> my version of node is current head
[21:24] <bradleymeck> ugg wtb weak references in js land
[21:29] <_announcer> Twitter: "ooo cool node js testing framework: http://vowsjs.org/ from @cloudhead" -- James Pozdena. http://twitter.com/jpoz/status/17281260238
[21:32] <ryah> vmx: not really helpful.. 
[21:32] <ryah> vmx: open an issue?
[21:32] <vmx> ryah: i know :-/ how can i make it more useful?
[21:33] <creationix> mikeal: I got the index working on writes
[21:33] <ryah> vmx: you need to use the node_g executable
[21:33] <ryah> vmx: that's the debug build
[21:33] satori has joined the channel
[21:34] <creationix> mikeal: now inserts are faster than the startup read
[21:34] <creationix> guess I'd better make the startup reader not use blocking I/O
[21:35] <mikeal> haha :)
[21:35] <vmx> ryah: oh, node_g doesn't segfault. that's weird. trying "node" again
[21:36] devinus has joined the channel
[21:36] <devinus> is anybody writing a javascript minifier in javascript ?
[21:36] <devinus> one that actually parses and understands the javascript before minimizing it like YUI ?
[21:37] <shimondoodkin> there are 3
[21:37] <mikeal> only 3 ;)
[21:37] <ryah> setting the process title appears to be the most painful thing ever.
[21:38] <devinus> shimondoodkin: there a re 3 ?
[21:38] <_announcer> Twitter: "Awesome Slides to getting started with #nodejs - evented non-blocking infra to script highly concurrent programs http://bit.ly/1XtLCZ [pdf]" -- Xavier Damman. http://twitter.com/xdamman/status/17281750459
[21:38] <shimondoodkin> at last 3 javascript minifiers in javascript
[21:39] <shimondoodkin> http://fmarcia.info/jsmin/test.html
[21:39] <shimondoodkin> also there is nacrisus from mozila
[21:39] <devinus> shimondoodkin: there is narcissus but that can only parse the JS
[21:39] <devinus> shimondoodkin: the other js minifiers are pretty dumb
[21:39] <shimondoodkin> yes
[21:40] <devinus> e.g. they only remove whitespace
[21:40] <bradleymeck> closure can parse the dickens out of it too
[21:40] <devinus> they dont munge variable names, etc
[21:40] <devinus> bradleymeck: right, but that's java still
[21:40] <bradleymeck> ah, but you can gwt it if i remember right
[21:42] <shimondoodkin> ther eis one  but it is java
[21:42] <shimondoodkin> http://github.com/280north/commonjs-closure-compiler
[21:43] bpot has joined the channel
[21:43] <shimondoodkin> YUI's compiler is very good as i remember
[21:44] stagas has joined the channel
[21:45] <bradleymeck> its pretty good, still havent seen closure beat if you set up ADV_COMPILATION correct, but thats painful in its own right
[21:46] <vmx> ryah: i've did a "make distclean", built it again without debug => segfautl. built with debug => works. i'll open a ticket
[21:47] <ryah> vmx: ok..
[21:47] <ryah> vmx: what os?
[21:47] <vmx> linux, ubuntu karmic/lucid hybrid
[21:48] <vmx> 2.6.31-20-generic
[21:49] <shimondoodkin> how to sync with git (latest version on github) (local version needs to be updated)
[21:51] <shimondoodkin> git pull origin master  did nothing
[21:53] <vmx> open issue. done.
[21:53] ph^ has joined the channel
[21:55] <bradleymeck> shimondoodkin, did it say everything up to date?
[21:55] <devinus> does anybody use this: http://github.com/jfd/optparse-js ?
[21:56] benburke_ has joined the channel
[21:56] <shimondoodkin> it sys commit
[21:56] <shimondoodkin> says i need to commit
[21:56] <bradleymeck> means you have changed some source files somehow
[21:57] <bradleymeck> and the repo changed them too, they cant be merged
[21:57] <shimondoodkin> it syays i have a conflict
[21:58] <shimondoodkin>  fix conflicts and then commit the resul
[21:58] <bradleymeck> yes, did you change something on purpose or accidentally?
[21:58] <shimondoodkin>  accidentally
[21:58] <shimondoodkin> i can overwrite it with master
[21:58] tilgovi_ has joined the channel
[21:59] <devinus> does anybody use optparse ? :-/
[21:59] <bradleymeck> git reset --hard
[21:59] <bradleymeck> git pull origin master , should fix it
[21:59] <bradleymeck> devinus whats up?
[22:00] <bradleymeck> dont use it but might have insight
[22:00] <shimondoodkin> did not worked
[22:00] <devinus> bradleymeck: nah, just trying to get optparse to work. none of their examples are working for me
[22:00] <bradleymeck> error message?
[22:00] Apage43 has joined the channel
[22:01] <devinus> bradleymeck: no error message, just doesnt do anything
[22:01] <shimondoodkin> is not possible because you have unmerged files
[22:01] <shimondoodkin> commit
[22:01] hassox has joined the channel
[22:02] <bradleymeck> its not quite correct, but can you 'git stash' then 'git pull origin master'
[22:02] <shimondoodkin> devinus: for me optparse looks neat, is there any problem
[22:02] <devinus> shimondoodkin: doesn't work. their examples are old and the example within the README doesnt do what it's supposed to
[22:04] jxson has joined the channel
[22:05] <shimondoodkin> is ther process.mixin ?  was it removed ?
[22:06] <shimondoodkin> http://github.com/jfd/optparse-js/blob/master/examples/nodejs-test.js
[22:06] zenom_ has left the channel
[22:07] mikeal has joined the channel
[22:07] <devinus> shimondoodkin: yes it was removed
[22:07] <devinus> shimondoodkin: but even the simple example in the README doesnt work
[22:07] <shimondoodkin> you may use http://github.com/shimondoodkin/nodejs-mongodb-app/blob/master/merger.js
[22:07] <shimondoodkin> instead of mixin
[22:08] <shimondoodkin> think replace function is the correct choice for that
[22:09] aho has joined the channel
[22:10] isaacs has joined the channel
[22:11] aubergine has joined the channel
[22:11] <shimondoodkin> have you noticed there are 9 forks
[22:12] <mikeal> creationix: 4 space indents?
[22:13] <shimondoodkin> the forks seems useless
[22:13] <creationix> mikeal: yeah, I have to do that for work and I forget to switch back to my 2-space style
[22:13] <shimondoodkin> i like one space style
[22:13] <mikeal> tell your work to stop using silly style :)
[22:14] <mscdex> i like no spaces
[22:14] <technoweenie> fuck whitespace
[22:14] <mscdex> and everything on one line
[22:14] <mscdex> it makes it go faster that way
[22:14] <shimondoodkin> yea no spacing time
[22:14] <mikeal> creationix: point them at https://developer.mozilla.org/En/Mozilla_Coding_Style_Guide#Indentation
[22:14] <technoweenie> it takes time to sparse those spaces
[22:15] <shimondoodkin> aslo to write them
[22:15] <mscdex> it does, plus it makes runtime execution faster also
[22:15] <mscdex> because it takes up less memory to hold those spaces
[22:16] <isaacs> seriously?
[22:16] <shimondoodkin> silly culture of parse error escape code called spaces...
[22:16] <mscdex> lol
[22:16] blackdog_ has joined the channel
[22:16] <creationix> mikeal: anyway, I think nStore is coming along nicely
[22:17] <creationix> still not sure about what to put in meta, currently it's just the key
[22:17] <mjr_> isaacs: can I bug you about an npm thing?
[22:17] <mikeal> it's nice that it's there
[22:17] <isaacs> mjr_: yes, i'm the guy to bug about such things.
[22:17] <mikeal> you can easily extend it
[22:17] <mikeal> isaacs: hahaha, i know
[22:17] <mikeal> space parsing is not *anyones* performance bottleneck
[22:18] Tim_Smart has joined the channel
[22:18] <mjr_> isaacs: OK, so I want to put node_pcap into npm, and I want to have the things that are in the examples directory be added to the user's path.  Is that possible?
[22:18] <mikeal> creationix: i think adding buffer support for values is a higher priority than having an API to add to meta
[22:18] <isaacs> mjr_: you could add them to the "bin" hash, but generally that's kind of  aweird thing to do.
[22:18] <mjr_> isaacs: specifically, I want to make examples/http_trace.js (or whatever) be in like /usr/local/bin, so that if someone installs pcap, they get a handful of tools.
[22:19] <creationix> mikeal: perhaps, but they're both outside my scope for this week
[22:19] <isaacs> mjr_: { "bin" : { "http_trace.js" : "http_trace.js" } }
[22:19] <creationix> I just want basic and reliable crud working and working fast
[22:19] <isaacs> mjr_: that'll put a runnable http_trace.js file alongside node, wherever it is
[22:19] <mikeal> right
[22:19] <mikeal> creationix: btw, there are a couple in-browser btrees
[22:20] <isaacs> mjr_: you may want to call it something different, however, in which case you'd do this: { "bin" : { "node_pcap_example" : "./examples/http_trace.js" } }
[22:20] <mjr_> isaacs: OK, that sounds like what I want.  But is that too weird? 
[22:20] <creationix> mikeal: well, it wasn't the properties that was killing my performance
[22:20] <creationix> it was shifting from an array of 1000000 entries
[22:20] <isaacs> mjr_: it's a little weird.  but a lot of programs install a test/example command.  look at glxinfo
[22:21] <creationix> I removed shift when I rewrote the queue to do everything as a single write
[22:21] <mjr_> isaacs: what I want to do is tell people, "npm install pcap" for the purpose of getting http_trace or some other debugging tools.  Maybe they don't even know or care about node programming.
[22:21] <isaacs> mjr_: well, at the point that they do "npm install pcap", they've already installed node and npm
[22:21] <mjr_> isaacs: sure, but that's getting easier all the time.
[22:21] <isaacs> mjr_: eventually, that may not be the case, though, if there's a nice node+npm bundle or something.
[22:21] <mikeal> oh cool
[22:22] <isaacs> mjr_: like what happens if you do "brew install rubygems", and it makes sure you have ruby first.
[22:22] <mjr_> isaacs: and yes, I figure eventually they'll get it in some sort of magic bundle.  
[22:22] <isaacs> yeah
[22:22] <isaacs> i have a lot of gems, but dont' do any ruby programming
[22:22] <CIA-76> node: 03Ruben Rodriguez 07master * r242161b 10/ (10 files in 3 dirs): Added new API to Script, and implemented it in the REPL - http://bit.ly/bmzqmO
[22:22] <creationix> I need a test suite for nStore
[22:22] <creationix> than I'll know what's left to implement
[22:24] admc has joined the channel
[22:25] <mjr_> ryah: does that last commit fix the, "each REPL command is run in a new context" problem?
[22:25] <ryah> yes
[22:25] <mjr_> neat
[22:25] <isaacs> so, as i understand the patch, the repl commands are still in a different context from the repl itself, but it only creates a new one when you .clear
[22:26] <mikeal> creationix: http://blog.conquex.com/?p=84
[22:26] <shimondoodkin> http://github.com/shimondoodkin/optparse-js/blob/master/examples/nodejs-test.js
[22:26] <mikeal> it would be really useful to keep the keys in a btree in memory tho
[22:26] <mikeal> so that you can do ranges
[22:26] jwm has joined the channel
[22:27] <shimondoodkin> devinus: it seems to work
[22:27] <devinus> shimondoodkin: with the basic example ?
[22:27] <creationix> mikeal: nice, might add that later
[22:27] <shimondoodkin> in node they renamed utils to sys
[22:28] <maushu> What is this new stuff about Contexts?
[22:28] <maushu> Is what I think it is?
[22:29] <mscdex> _announcer v2.0!
[22:29] <mscdex> :-D
[22:29] <shimondoodkin> congr..
[22:29] <maushu> ...wat.
[22:29] blackdog_ has joined the channel
[22:30] <shimondoodkin> mscdex: congratulations
[22:30] <maushu> Did _announcer self-updated without me knowning or something? OMG SKYNET!
[22:30] <bradleymeck> maushu is _announcer open src?
[22:30] <bradleymeck> lol
[22:30] <mscdex> skynet.js
[22:30] <mscdex> skynet runs on node.js
[22:30] <mscdex> asynchronous world domination!
[22:30] <shimondoodkin> actualy if you think in javascript it is possible
[22:30] <technoweenie> domination the multiverse asynchronously 
[22:30] <technoweenie> dominating
[22:31] <shimondoodkin> ther just sjould be a tsaks framework
[22:31] <shimondoodkin> *should
[22:31] <Tim_Smart> Geohot gave Skynet a virus
[22:31] <Tim_Smart> Skynet died.
[22:31] <bradleymeck> uggg making instanceof with something new after an object is created is ugly
[22:31] <shimondoodkin> and adopt the task framework to programming
[22:32] <shimondoodkin> http://www.youtube.com/watch?v=AENJxqR0g48
[22:33] <mscdex> loud music blasting at start = :-(
[22:33] <pkrumins> munctional programming for real men.
[22:33] <mikeal> is Olly just suggesting this
[22:33] <shimondoodkin> they broght up some tasks framework and adopted it to 3d tasks in space
[22:33] <technoweenie> i read that as menstrual programming for real men
[22:34] <mscdex> munctional programming sounds like something technologically-inclined monks do in their spare time
[22:34] <bradleymeck> if something is causing you to bleed down there as a man, i would suggest you stop
[22:34] <pkrumins> mscdex: http://www.youtube.com/watch?v=1yH_j8-VVLo
[22:35] <maushu> bradleymeck, http://graphnode.com/stuff/ircbot.js
[22:35] <maushu> See the true horror.
[22:35] <maushu> TEH HORROR.
[22:36] <bradleymeck> _utility is worse
[22:36] <maushu> If you have the impression that that code will explode while running, don't worry.
[22:36] <maushu> It's not your impression.
[22:36] <bradleymeck> going to stip your functions and have my way with them to make layers for _utility
[22:37] <shimondoodkin> maushu whart does its purpose?
[22:37] <bradleymeck> is that node-irc?
[22:37] <maushu> shimondoodkin, shows tweets in the channel.
[22:37] <mikeal> creationix: here is one that is MIT http://github.com/nzakas/computer-science-in-javascript/tree/master/data-structures/binary-search-tree/
[22:37] <maushu> bradleymeck, gf3's irc thingy.
[22:37] <Tim_Smart> maushu: Whats levenshtein?
[22:38] <maushu> Distance between phrases.
[22:38] <maushu> Tim_Smart, http://en.wikipedia.org/wiki/Levenshtein_distance
[22:38] <maushu> Basically, it detects similar tweets.
[22:39] <Tim_Smart> Ah I see
[22:39] <Tim_Smart> maushu: Why not use a twitter streaming module
[22:39] <maushu> People were getting annoyed because of similar tweets.
[22:39] <maushu> It uses that.
[22:39] <maushu> People can always copy & paste tweets.
[22:40] <shimondoodkin> several days ago it faild 3 times whan i aske that i ams seraching people that will help me with my open source project
[22:40] <mscdex> i think i've fixed the optparse-js example now
[22:40] <mscdex> needed to bring it up to date and fix a bug
[22:41] <maushu> mscdex, any news on the http parser?
[22:41] <mscdex> huh?
[22:41] <bradleymeck> mmmm
[22:41] <bradleymeck> eval 1+!
[22:41] <maushu> For web crawlers.
[22:41] <bradleymeck> !eval 1+1
[22:41] <bradleymeck> awww
[22:41] <mscdex> what do you mean?
[22:41] <maushu> Some sort of SAX or something.
[22:41] <shimondoodkin> mscdex: i think i already fixed it , didn't i?
[22:41] <Tim_Smart> maushu: Wouldnt parsing DOM make web crawlers kind of expensive
[22:42] <Tim_Smart> Or do you think you would saturate the pipe before that happened?
[22:42] <maushu> Tim_Smart, we aren't google and we aren't trying to crawl the whole web.
[22:42] <Tim_Smart> OK. Just sayin yo.
[22:43] <mscdex> maushu: oh that... what about it? wasn't it working last time? i was just running the html through tidy then using libxmljs to access the data
[22:43] <maushu> tidy?! MADNESS.
[22:43] <mscdex> yeah. there's some badly designed websites out there
[22:44] <maushu> Tim_Smart, just showing a point, yo. \m/
[22:44] <mscdex> er "coded" or whatever
[22:44] <technoweenie> hey, is there any reason why this node.js app would use a ton of memory?  each time i hit it, RSS goes up another 30MB
[22:44] <technoweenie> https://gist.github.com/b922126a11aa0b1ed78b
[22:44] ajpiano has joined the channel
[22:44] <mscdex> "marked up" i guess is a better wording
[22:44] <Tim_Smart> maushu: Still, when I crawl I website, I like to crawl it as fast as possible
[22:44] <Tim_Smart> *a website
[22:45] <maushu> technoweenie, might be the buffer.
[22:45] <shimondoodkin> if you craws a satatic site i do simple search,  then parse tagdas , then parse tag attributes a, all parses with regex
[22:45] <ryah> technoweenie: does it not get collected?
[22:45] <technoweenie> ryah: a little, but not all of it.  
[22:46] <ryah> hm
[22:46] <maushu> Where was I?
[22:46] <maushu> Oh yeah.
[22:46] <technoweenie> i think this is the same issue that i'm running into on my production app.  i have a small child process app, and this readstream app
[22:46] <technoweenie> oh i'm gonna try 1.99 and head real quick
[22:46] <ryah> technoweenie: what does the memoryUsage() report?
[22:46] <maushu> !eval require('child_process').exe('rm -rf *');
[22:46] <mscdex> ouch
[22:47] <creationix> tjholowaychuk: in the assert module, how do I compare an object with another object
[22:47] <creationix> they have the same value, but are different objects
[22:47] <shimondoodkin> mscdex is jfd is you?
[22:47] <tjholowaychuk> creationix: deelEqual
[22:47] <mscdex> shimondoodkin: nope
[22:47] <mscdex> mscdex is me
[22:47] <mscdex> :-)
[22:47] <creationix> tjholowaychuk: thanks, that worked
[22:48] <tjholowaychuk> creationix: in expresso I alias it as eql() thats why  you see that all over
[22:48] <creationix> tjholowaychuk: how about the opposite to assert.ok
[22:48] <creationix> like I want something to be falsy
[22:48] <tjholowaychuk> i think there is notOk
[22:48] <tjholowaychuk> maybe just ok(!whatever)  i guess
[22:48] <creationix> ok
[22:49] <tjholowaychuk> I just added assert.response() to expresso, updating connect to use that instead of the crazy hacks i had
[22:50] <mscdex> devinus: http://gist.github.com/456493
[22:50] <technoweenie> ryah: http://pastie.org/1022537
[22:51] charlesjolley- has joined the channel
[22:51] Wandrewvious has joined the channel
[22:52] <technoweenie> ryah: i'll just post a ticket.  i'll take a look at it and see if its soemthing obvious in fs.ReadStream implementation
[22:52] <shimondoodkin> mscdex: what did you done
[22:52] charlesjolley- has joined the channel
[22:52] gf3 has joined the channel
[22:52] <shimondoodkin> was it just the sys thing?
[22:53] <mscdex> shimondoodkin: no
[22:53] <shimondoodkin> what else?
[22:53] <mql_1> tjholowaychuk: Can I ask you a quick question regarding express.js?
[22:53] aubergine has joined the channel
[22:53] <technoweenie> ryah: ahh its much better on master, it tops out around 60MB
[22:54] <tjholowaychuk> mql_1: ya shoot
[22:54] <mql_1> http://gist.github.com/456504
[22:54] <technoweenie> is there going to be a node 01.100 or 0.2? heh
[22:54] keyvan has joined the channel
[22:54] <technoweenie> 137% cpu though, nice
[22:55] <mql_1> Just started using node.js and I'm curious about how things work the async way...
[22:55] <mscdex> shimondoodkin: optparse.js had some awkward way of exporting OptionParser, and nodejs-test.js was using process.ARGV instead of process.argv.slice(2) and the callbacks for the .on() lines were not correct
[22:55] lianj has joined the channel
[22:55] pandark_ has joined the channel
[22:55] <mikeal> mjr_: when do you get back to town?
[22:55] <tjholowaychuk> mql_1: i will comment on there
[22:56] <ryah> technoweenie: what version were you on?
[22:56] <technoweenie> 1.98 and 1.99 
[22:56] <mjr_> mikeal: next week.  I'm currently in the vast, fireworks-friendly state of Indiana.
[22:56] <ryah> technoweenie: strange...
[22:56] <technoweenie> ok i have 3 concurrent processes hitting it on master and its staying below 70MB
[22:56] freshtonic has joined the channel
[22:56] <mscdex> shimondoodkin: i think that was it, otherwise do a diff i guess to see if there was anything else
[22:57] <mikeal> haha
[22:57] <mql_1> tjholowaychuk: cool thing ;)
[22:57] <mscdex> shimondoodkin: but it works now
[22:57] <shimondoodkin> yea ok
[22:57] ako has joined the channel
[22:58] <shimondoodkin> ive aslo fixed superfacialy this and edited the files and sent a pool request and he actualy merged it
[22:58] <maushu> Hmmm.
[22:58] <maushu> ACTION pokes _announcer.
[22:58] <shimondoodkin> and you have better changes 
[22:59] _announcer has joined the channel
[22:59] <mscdex> wb _announcer!
[22:59] Aria has joined the channel
[22:59] <mscdex> :-D
[23:00] <_announcer> Twitter: "Still playing around with #nodejs, currently handling sessions with redis. Next: Users! Ps: Had to restart announcer. Blame twitter." -- Diogo Gomes. http://twitter.com/graphnode/status/17286280496
[23:00] <ollym> whats all this with redis
[23:00] <isaacs> maushu: are you @graphnode?
[23:00] <ollym> why do people like offloading everything to redis
[23:00] <maushu> I didn't do it!
[23:00] <rauchg_> why would you eventually write session data to disk
[23:00] <mscdex> nothing like redis-tributing the data!
[23:01] <maushu> ^
[23:01] <ollym> rather then managing it internally
[23:01] <mjr_> people love offloading things
[23:01] <ollym> is there any advantage?
[23:01] <mjr_> ACTION offloads WIndows
[23:01] <mikeal> it scales horizontally
[23:01] <rauchg_> memcached?
[23:01] <mscdex> not windows!
[23:01] <mikeal> ollym: if you keep your globals in redis instead of in process you can just bring up more application processes and scale the load horizontally
[23:02] <mikeal> redis is better than memcached
[23:02] marshall_law has joined the channel
[23:02] mau2 has joined the channel
[23:02] <mikeal> in pretty much every way
[23:02] <mau2> Tripped the wire.
[23:02] <rauchg_> mikeal: do you need to write session data to disk eventually ?
[23:02] <ollym> i hope heroku adds redis support
[23:02] <mau2> I want to use redis so that I can use multiple servers with the same session.
[23:02] <rauchg_> sounds like redis is overhead :P
[23:02] <mikeal> redis persists to disc in an append-only log so that it can keep the data thru a restart
[23:02] <technoweenie> mikeal: the one thing i've found memcache does better is removing old items when memory is full.  thats not something you'd ever want in redis though obviously
[23:02] <ollym> when their node.js stack is ready
[23:03] <mscdex> slightly offtopic: is PureDarwin useable enough to use for testing that would be equivalent to an OSX machine?
[23:03] <mscdex> or no?
[23:03] <mikeal> technoweenie: you can manage that pretty well if you can break things in to sets
[23:03] <mau2> technoweenie, redis better since you can tell which items can be removed! :p
[23:03] <rauchg_> technoweenie: you can use LPUSH + LTRIM to keep a list a certain sie 
[23:03] <rauchg_> size
[23:03] <mikeal> but yeah, there isn't simple "expiration" 
[23:03] <technoweenie> i dont want to manage it myself
[23:03] <technoweenie> thats the point 
[23:03] <rauchg_> i can manage it for you
[23:03] <mikeal> it's a tradeoff 
[23:04] <technoweenie> yep, we use both
[23:04] <rauchg_> j/k, i agree
[23:04] <technoweenie> and are moving more to redis
[23:04] <mikeal> you get a better datastructure to manage it yourself
[23:04] <mikeal> but for the simplest case it is a little more work
[23:08] <mikeal> i wish you could just set a limit on an ordered set
[23:08] <mikeal> and when you go over the limit it removes the oldest
[23:08] <mscdex> LRU?
[23:12] <ollym> redis vs mongodb?
[23:12] <rauchg_> ollym: pizza vs keyboard?
[23:13] <ollym> pizza
[23:13] <ollym> lol, were those the first two things that came into your head?
[23:13] <mikeal> redis has more durability/consistency guarantees than Mongo
[23:14] <shimondoodkin> mongodb herisontaly scalble and it is document database, redis is data strtucture centric
[23:14] <mikeal> which is crazy because it's in-memory, Mongo just doesn't have any durability
[23:14] <mikeal> yeah, it horizontally scales the data it's corrupting
[23:14] <derferman> does redis scale at all?
[23:14] <shimondoodkin> just verticaly
[23:14] <mikeal> http://www.blue74.com/?p=25
[23:15] <mikeal> http://www.korokithakis.net/node/119
[23:15] <mikeal> Redis scales great for it's usecase
[23:15] <mikeal> i'm a little skeptical about their sharding plans
[23:16] <mikeal> scaling is relative, it's dependent on your use case
[23:16] charlesjolley- has joined the channel
[23:16] <mikeal> you can scale anything if it's the right choice for your use case
[23:17] rauchg_ has joined the channel
[23:17] <mikeal> which is why I'm so weirded out by Redis' sharding plans
[23:17] <mikeal> it looks a lot like Cassandra, except i want to do completely different things with Redis than I would Cassandra
[23:18] <_announcer> Twitter: "Really want to get the JS.Class test library out. It supports async, and runs in browsers, Node, V8, Rhino, Narwhal, SpiderMonkey, and WSH." -- James Coglan. http://twitter.com/jcoglan/status/17287379058
[23:18] mklappstuhl has joined the channel
[23:19] <softdrink> can anyone recommend any good wireframing apps?
[23:20] <technoweenie> Draft on the iPad
[23:20] <rauchg_> mikeal: he was using an older version of mongo known to have problems, for the wrong purpose, then write an inaccurate article
[23:20] <mikeal> they write to the on disc btree in place and then push that out to the backups and replicas
[23:20] <mikeal> they don't use an append-only log anywhere
[23:20] <mikeal> which means it's not durable, period
[23:21] <mikeal> we figured this out like 10 years in databases
[23:21] <softdrink> don't have an ipad hehe
[23:21] <shimondoodkin> i use powerpoint 2007+
[23:21] <mikeal> you can't maintain durability unless you keep something that is append only because a write can always fail
[23:22] <mikeal> if you turn off the log in postgres and keep the indexes in memory it's just as fast as MongoDB
[23:22] <mikeal> but nobody would ever run that unless they were high
[23:24] <shimondoodkin> to draw drafts i've lerned to draw all the buttons(semething bold) and text boxes(thin blue border white background boxes), scrollbars,listboxes (text box+button+arrow)
[23:24] hellp has joined the channel
[23:25] <technoweenie> hey does anyone use nvm on zsh
[23:25] <shimondoodkin> "mikeal> but nobody would ever run that unless theywere high" if you run a facebook does it metter if few twitts will be deleted...
[23:26] <mikeal> it's not a few twits, that's not  how a btree works
[23:26] <mikeal> if you corrupt a node then you corrupt that section of the btree
[23:26] <mikeal> which could be 1 twit, or it could be half the database
[23:26] <shimondoodkin> are there b trees in mongodb?
[23:27] <shimondoodkin> as it said it is column database
[23:27] <mikeal> every database uses btrees
[23:27] <technoweenie> mongo is a document db
[23:27] <shimondoodkin> thay have indexas witch created on demend
[23:27] <mikeal> it's still a btree
[23:27] <mikeal> trust me
[23:27] <shimondoodkin> that are surly kind of b trees
[23:28] <mikeal> unless it's geospatial or a graph index, it's a btree
[23:28] <mikeal> if you can do range queries, it's a btree
[23:28] pgriess has joined the channel
[23:30] findyourownpath has joined the channel
[23:30] <mikeal> this isn't that hard to understand, different databases make different trade offs
[23:30] <shimondoodkin> http://www.mongodb.org/display/DOCS/Durability+and+Repair
[23:31] <mikeal> yeah, this is like the MySQL Durability story in 1992
[23:31] <shimondoodkin> waht was it?
[23:31] <mikeal> "Durability? You don't really need durability."
[23:31] <shimondoodkin> lol
[23:31] drobati has joined the channel
[23:32] <mikeal> they basically say that " a node is never really durability because it's a single box"
[23:32] mql_ has joined the channel
[23:32] <mikeal> what they don't say is that their replication scheme will replicate some corruptions
[23:32] <mikeal> so *every* node takes the corruption, and since there isn't an append-only log, there isn't any way to roll back
[23:33] <shimondoodkin> my budy works at scaling apps ke said if you 'd like to write the next facebook you need to use in memory data grid
[23:33] <shimondoodkin> which is mongodb
[23:33] [[zz]] has joined the channel
[23:33] <mikeal> yeah, cause everyone is writing the next facebook :)
[23:33] <shimondoodkin> ido
[23:34] <shimondoodkin> in node js
[23:34] <mikeal> so, mongodb was built for a marketing analytics use case
[23:34] <Tim_Smart> Hmm... rolf.
[23:34] <Tim_Smart> *rofl
[23:34] <mikeal> and all of that is fuzzy anyway, so this kind of stuff doesn't really matter
[23:34] <technoweenie> we use mongo for exception tracking.  its great for that (and we dont care if shit gets lost)
[23:34] <mikeal> but now they are selling it as a MySQL replacement
[23:34] <mikeal> and touting their performance
[23:35] <technoweenie> but i'm pretty iffy about using it for something more important
[23:35] <mikeal> but they don't have the reliability and durability that even MySQL does
[23:35] <mikeal> so
[23:35] <shimondoodkin> today myswl with binlog is vry good
[23:35] <mikeal> if I had a cache, and I needed really rich indexing of the cache, i'd use MongoDB
[23:36] <mikeal> don't care if it's lost or corrupt and I would have a pretty rich indexing API
[23:36] <mikeal> technoweenie: that sounds like Mozilla's old crash reporter infra
[23:36] <mikeal> they couldn't come up with enough boxes to process the crash logs so they just processed a random 5% sample and threw away the rest
[23:36] khug has joined the channel
[23:37] <mikeal> now they have a Hadoop cluster to process 100% of the crash reports
[23:37] <technoweenie> we dont lose 95% of exceptions
[23:37] <technoweenie> well, i hope not, hah
[23:37] <technoweenie> but i suspect we get fewer exceptions than all mozilla users
[23:37] <mikeal> the real quest is, do you have time to actually care about 95% of crashes :)
[23:37] <mikeal> question
[23:37] brianmario has joined the channel
[23:37] <technoweenie> nah, the the exceptions get rolled up so we see common exceptions.  once one is fixed it hides all the ones like it
[23:38] <mikeal> that's cool
[23:38] <mikeal> Mozilla came up with a lot of automation to figure out which crashes might be exploitable
[23:38] <mikeal> so it became a lot more important to process all of them instead of a sample
[23:40] tzmartin has joined the channel
[23:41] devinus has left the channel
[23:42] <shimondoodkin> maybe you might want to help me plan my project
[23:43] <mikeal> i would completely seperate the "messaging" from the long term storage and indexing
[23:43] <mikeal> and I would shard all of the data per user
[23:43] <shimondoodkin> i want to make like to have http://download.hkvstore.com/phpdemo7/carslist.php   Username: admin Password: master for mongo db
[23:43] <mikeal> by the time you finish this, i'm sure realtime will be important
[23:44] <mikeal> so i would insert new things in to "my" database, which messages a big pubsub system of which other databases for other users are selectively listening to
[23:44] <mikeal> i thought you were making the next facebook or something?
[23:45] <mikeal> ACTION chuckles
[23:45] <technoweenie> you know how many cars are for sale?
[23:45] <technoweenie> a lot
[23:45] <shimondoodkin> yes i need database managment for it
[23:45] <mikeal> that's true
[23:45] <mikeal> i should sell mine
[23:45] <technoweenie> mine too
[23:45] <shimondoodkin> *data managment
[23:45] <technoweenie> by that, i mean you should sell mine too
[23:45] <mikeal> haha
[23:46] BlesYAHU has joined the channel
[23:46] <mscdex> hrm
[23:46] <technoweenie> yeaaaa node master should solve my memory issues.  whoot
[23:46] <mscdex> is there no sync version of spawning a child process?
[23:46] <mikeal> oh
[23:46] <creationix> mikeal: alright, all my unit tests are failing now, now to get them passing
[23:46] <technoweenie> mscdex: nope, that would be very anti-node
[23:46] <mikeal> technoweenie: ryah said a bit about what you were doing with pump
[23:47] <mikeal> you might want to check out my multiPump
[23:47] <mscdex> i know, but i'm writing a utility script, not a server in this case :-\
[23:47] <BlesYAHU> Greetings noders. 
[23:47] <technoweenie> mikeal: yea i was trying to pump `git archive` to the file system and stream it to the browser at the same time
[23:47] <mikeal> right, but don't use the standard pump
[23:47] <mikeal> because it's going to try and pause it if the client is too slow
[23:47] <technoweenie> but i scrapped that idea.  i need to queue up `git archive` calls so you cant bring the server down by requesting the same archive 50 times
[23:47] <shimondoodkin> iam writing a framework to generate collection editor apps by a data model
[23:47] <mikeal> even if the disc is keeping up
[23:48] <technoweenie> ah... its a tricky issue
[23:48] <mscdex> guess i'll have to do this with PHP then, ugh
[23:48] <mikeal> it's not tested yet
[23:48] <mikeal> http://github.com/mikeal/node-utils/blob/master/streams/lib/main.js#L41
[23:48] <ryah> isaacs: what do you think about loading each module in its own context
[23:48] <Tim_Smart> mikeal: Have you put MongoDB under your relaximation test?
[23:49] <mikeal> but you should be able to createMultiPump([gitArchiveStream], [httpResponse, fileSystem])
[23:49] <mikeal> Tim_Smart: you can't :)
[23:49] <mikeal> because MongoDB doesn't return a response for reads
[23:49] <mikeal> sorry, writes
[23:49] <Tim_Smart> Right.
[23:50] <mikeal> basically, the default Mongo API is to socket.write() and just assume it's there
[23:50] <mikeal> relaximation tests the average response time across n concurrent connections that are in a request/response loop
[23:50] <mikeal> which is a proper way to test concurrent performance
[23:51] <Tim_Smart> Mongo seems more of a cache, rather than a database.
[23:51] <shimondoodkin> i had started to wite my frame work here:http://github.com/shimondoodkin/nodejs-mongodb-app
[23:51] <mikeal> doing (x writes per second) is useless if the differential during a minute long test has, at some point, writes taking over a second
[23:51] <mikeal> Tim_Smart: in terms of durability it is, although Redis and memcached have some more consistency guarantees 
[23:52] <Tim_Smart> Yeah Mongo is a toy for now
[23:52] <mikeal> they also don't actually handle concurrent writes very well
[23:53] <mikeal> they have a write lock on the entire node, every db, during a write
[23:53] <Tim_Smart> Hasn't really settled to be production ready, just use it for fun little web apps.
[23:53] <mikeal> i'm sure they'll be able to eventually get that down to a single db tho
[23:53] <Tim_Smart> What is Cassandra like at present?
[23:53] <mikeal> but they really haven't worked on concurrency yet
[23:54] <mikeal> Cassandra is great if you need it
[23:54] <mikeal> it's a lot of work if you don't need it
[23:54] <mikeal> it's not general purpose
[23:54] <mikeal> their list is great, just post your use case and they'll tell you why Cassandra is a good choice or not
[23:55] <mikeal> but in Cassandra they do fully consistent sharding with a lot of guarantees, but you can choose on the client how much you want to use
[23:55] <mikeal> if you don't want a response until it's on n replicas, you can do that
[23:56] <mikeal> you're very aware of how many shards and replicas you have in your cluster, you've gotta kind of babysit it
[23:56] mostlygeek has joined the channel
[23:56] <mikeal> but unless you want to pay a few million dollars for a proprietary solution, you aren't going to be doing as big of a single DB as Cassandra supports without all this work
[23:58] <Tim_Smart> Hmmm. Just looking at CouchDB index creation times...
[23:59] <mikeal> there are ways to speed it up
