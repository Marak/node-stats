[00:02] JimBastard has joined the channel
[00:10] RayMorgan has joined the channel
[00:17] jamiew_ has joined the channel
[00:19] aguynamedben1 has joined the channel
[00:19] jamiew_ has joined the channel
[00:25] jasonwang has joined the channel
[00:30] RJ2 has joined the channel
[00:36] alexiskander has joined the channel
[00:55] charlenopires has joined the channel
[00:56] jdzp has joined the channel
[01:08] bryanl has joined the channel
[01:22] jasonwang: hey guys, i published what i have now for blogging engine, please check newsgroup for details!
[01:23] jspiros has joined the channel
[01:29] RayMorgan has joined the channel
[01:33] Pilate: jasonwang, link? i was thinking about starting in on that this weekend
[01:36] mikeal has joined the channel
[01:41] pjb3 has joined the channel
[01:46] elliottcable: is there a built-in method for me to check if an object is a descendant of another object?
[01:46] grantmichaels has joined the channel
[01:46] elliottcable: or do I need to manually climb the __proto__ chain?
[01:48] elliottcable: go javas
[01:48] elliottcable: oops
[01:52] tmpvar has joined the channel
[01:54] ashb: elliottcable: do you mean instanceof?
[01:54] ashb: or the other there is https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Global_Objects:Object:isPrototypeOf
[01:54] ashb: (which is ES5, not sure if v8 implements it yet tho)
[01:54] elliottcable: hrm
[01:54] elliottcable: the latter would be perfect, but I don’t think it’s available
[01:55] elliottcable: instanceOf is only useful with constructors and such, I’m not doing that; I simply have one object that’s a descendant of another
[01:55] elliottcable: hrm k
[01:55] ashb: yeah v8 hasn't been particualrly quick on implementing ES5
[01:55] ashb: (i know its only 'just' ratified, but there was a number of htings that were were almost certian ot be in there for at least a year)
[01:56] elliottcable: yeah
[01:56] elliottcable: doesn’t have Object.getPrototypeOf either
[01:56] elliottcable: and that’s 1.8.1?
[01:56] elliottcable: oh, ugh, JS 1.8.1
[01:56] elliottcable: that is *so annoying*
[01:56] ashb: 1.8.1 is just mozilla extensions
[01:56] ashb: the biggest lack is the Object.defineProperty
[01:57] ashb: given __proto__ exists you can write most other things in pure JS
[01:57] elliottcable: do any of y’all know of a ES5 patchworking library of some sort?
[01:57] elliottcable: something I can drop in to get support for these things in interpreters before ES5?
[01:57] ashb: but Object.defineProperty lets you create non-enumerable props from JS
[01:57] ashb: narwhal might have bits of one
[01:57] elliottcable: yeah I’m aware of that
[01:57] elliottcable: ack narwhal
[01:57] ashb: Object.defineProperty and .seal need native code to achieve
[01:57] elliottcable: meh I’ll just `while (list.__proto__` or summat
[01:58] sudoer has joined the channel
[01:58] ashb: http://github.com/280north/narwhal/blob/master/engines/default/lib/global-es5.js
[01:59] elliottcable: holy—
[01:59] elliottcable: ugh!
[01:59] ashb: haha. missing isPrototypeOf tho
[01:59] elliottcable: I wish Narwhal didn’t have that idiotic packaging crap, though.
[01:59] elliottcable: same for jQuery/etc and their object systems.
[01:59] ashb: NMP
[02:00] elliottcable: I’m going to have to write my own stack, of *non-inter-depentant* modules, becuse each of these systems wants to play God in my interpreter
[02:00] ashb: taht one doesn't have any exports and is patching up the built ins
[02:01] elliottcable: eh?
[02:01] elliottcable: oh yeah
[02:01] elliottcable: but I’m hesitant to make my stuff dependant on an external library when I’m really only using one file; I’m also hesitatn to just yank that file out, even if the licensing allows it.
[02:01] ashb: its MIT
[02:01] ashb: its there if you want it.
[02:02] elliottcable: yeah
[02:02] elliottcable: ACTION ponders
[02:02] ashb: i'd suggest you get it into node then you dont have to dpeend on it
[02:02] elliottcable: eh
[02:02] elliottcable: No, still have to depend on it
[02:02] rictic has joined the channel
[02:02] elliottcable: most of this ecology is geared to work cross-interpreter, cross-client/server boundaries
[02:02] elliottcable: because that’s the eventual goal: to get a single execution environment
[02:02] ashb: then youre fuckced. a lot of that cant be done with IE
[02:02] elliottcable: heh
[02:03] elliottcable: ignoring IE, of course
[02:03] ashb: anyway - its 2am. sleep time for me
[02:03] elliottcable: o7 ashb!
[02:03] elliottcable: thanks for the help in any case.
[02:10] jspiros has joined the channel
[02:15] jspiros has joined the channel
[02:26] vvsh has joined the channel
[02:26] vvsh: hello, twitter's stream API looks very interest, do anybody know how do they implement the design on their server?
[02:28] vvsh: i was wondering if its possible for use node.js to hold a connection indefintely and send data back whenever its available, or i;m on the wrong track, can someone point me some directions 
[02:31] tlrobinson1 has joined the channel
[02:31] tlrobinson1 has left the channel
[02:44] jacobolus has joined the channel
[02:46] joshthecoder: vvsh, you only receive data via their streaming api, you don't send data
[02:46] tlrobinson: elliottcable: "idiotic packaging crap"?
[02:47] vvsh: joshthecoder: i know that, i just interest in how the twitter guy implement their API on their server side
[02:48] joshthecoder: why do you need those details?
[02:48] elliottcable: tlrobinson: ignore me, I’m just bitter.
[02:48] joshthecoder: just curious?
[02:48] vvsh: joshthecoder: yeah, just want to know how does it work:)
[02:48] joshthecoder: you can try asking on #twitterapi if there's any devs idling there
[02:49] vvsh: tried there, but everyone seems to be sleeping
[02:51] vvsh: is it possible to hold an connection open indefeintely in node.js? i tried to leave out the response.finish() on response, but the response.sendBody() doesn't seems to send the data to client.
[02:53] jspiros has joined the channel
[02:54] elliottcable: Okay. Ack. I *hate* to have to ask this.
[02:54] elliottcable: But … how do I, uh, for lack of a better word, ‘subclass’ these Function objects core to Node?
[02:55] elliottcable: i.e. `process.Promise`. How do I create a new, equivalent, thing, with further functionality?
[02:55] elliottcable: I’ve been *completely* circumventing the faux-classy-esque part of JavaScript’s object system, and working *soely* with the prototypal aspect.
[02:56] elliottcable: So, now that I need to, erhm, ‘subclass’ one of Node’s core, erhm, ‘classes,’ I’m not sure what to do.
[02:56] taf2: is there a encodeURI method in nodejs?
[02:56] elliottcable: tlrobinson: https://developer.mozilla.org/En/Core_JavaScript_1.5_Guide/Predefined_Functions/Escape_and_unescape_Functions
[02:56] elliottcable: oops, tlrobinson, that was for taf2
[02:56] elliottcable: taf2: … that.
[02:57] taf2: ah cool, didn't realize builts :)
[02:57] taf2: thanks elliottcable 
[02:57] elliottcable: taf2: your answer is yes, `encodeURI`.
[02:58] taf2: assuming window is not the global object, is it node?
[03:00] joshthecoder: vvsh, not sure if node http server is "push" friendly
[03:01] taf2: ACTION sees GLOBAL is it
[03:02] joshthecoder: vvsh, this might interest you a bit: http://pushmodule.slact.net/protocol.html
[03:04] joshthecoder: so you'd make short http requests to push data to the connected clients (subscribers)
[03:04] joshthecoder: example: nginx + http push module  <---> node.js application publisher
[03:05] kriskowal: eliottcable, ES5 specifies Object.create(prototype) for subtyping.  node has process.inherit(selfCtor, superCtor) or something.  look at how it works.
[03:05] kriskowal: it sets up a __proto__ chain
[03:05] kriskowal: through the indirect means of constructor prototypes
[03:05] vvsh: joshthecoder: that's really good idea, atm i using lighty, not sure if they have push module or not, but i will look into it
[03:06] kriskowal: i personally recommend using Object.create for interoperability
[03:06] kriskowal: function X() {}; X.prototype = Object.create(Y.prototype);
[03:07] kriskowal: elliottcable ^ (misspelled your handle)
[03:07] jspiros has joined the channel
[03:18] jasonwang: Pilate: awe.cc if you are interested
[03:18] Pilate: wow what perfect timing i just sat back down ;)
[03:19] taf2: in node http client docs... response.addListener("body", function(chunk) { ...  does this mean it's called multiple times if the response is large? if so, is there a done call back?
[03:20] joshthecoder: vvsh, twitter uses jetty for streaming
[03:21] joshthecoder: which probably means there's some Scala/java code at work on their end
[03:21] taf2: ah i see complete
[03:22] vvsh: joshthecoder: i think they use scala because it was easy to scale
[03:22] joshthecoder: pssh
[03:24] taf2: ACTION likes node
[03:29] jasonwang has joined the channel
[03:29] jasonwang: Pilate: yah, the adding form doesn't work before, now it works
[03:29] kriszyp has joined the channel
[03:57] fictorial has joined the channel
[03:57] fictorial: what's the latest on binary/blob support?
[03:58] jdzp has joined the channel
[04:10] scudco has joined the channel
[04:23] taf2: is this in nodejs ? https://developer.mozilla.org/en/Parsing_and_serializing_XML
[04:25] taf2: ah nvm
[05:03] jacobolus has joined the channel
[05:16] elliottcable: kriskowal: nah, you misunderstood me. I implemented my own system for all of that (one of the reasons I dislike things like narwhal and CommonJS)
[05:17] elliottcable: kriskowal: I was speaking of, specifically, *subclassing*, not inheriting via prototypal inheritance
[05:17] kriskowal: i see.   i also wrote one such system.
[05:17] kriskowal: the reason for omitting such a system from narwhal was to avoid a holy war
[05:17] elliottcable: kriskowal: that is, creating a new thing that is identical to `process.Promise`, but with added functionality. Not inheriting a new object from *a* `process.Promise`, it had to ‘fit in’, so to speak
[05:17] kriskowal: but i've got one in chiron
[05:17] elliottcable: but that’s taken care of now
[05:17] kriskowal: snapshotting, i presume
[05:18] elliottcable: kriskowal: http://github.com/elliottcable/poopy.js
[05:18] elliottcable: kriskowal: as for the ‘subclassing’ solution, let me git push
[05:18] elliottcable: (I wrote it at Applebee’s, just sat down at home with WiFi again)
[05:18] kriskowal: i've actually read this
[05:19] kriskowal: it is not clear to me what real problem this solves.
[05:19] elliottcable: kriskowal: *shrug*
[05:20] kriskowal: there are clear stylistic differences, and i would not imply that there are no problems with pure prototypical inheritance.
[05:20] elliottcable: kriskowal: I disliked the *entire* system surrounding `new`, `thing.Foo` constructors, and single-depth inheritance; it’s possible to use JS entirely without touching any of that
[05:20] elliottcable: kriskowal: poopy.js is just my framework to make life easy, so I don’t have to deal with the bits I dislike
[05:20] kriskowal: sure.  "new" has real problems.
[05:21] elliottcable: http://github.com/elliottcable/poopy.js/commit/3f24c808fe1bab0b375244125aac2ad330b35d62#L0R274
[05:21] kriskowal: well, if you're interested in type systems, here's mine: http://github.com/kriskowal/chiron/blob/master/lib/chiron/type.js#L32-419
[05:22] elliottcable: that’s what I’m using for now; it’s the same system as beget(), without the flexibility
[05:22] elliottcable: i.e. a mini-beget()
[05:22] elliottcable:  /me reads
[05:23] elliottcable: ACTION fails to read
[05:23] elliottcable: yeah, I have ridiculously large quantities of trouble reading ‘normal’ JS
[05:23] elliottcable: or, for that matter, writing it /-:
[05:23] elliottcable: ’swhy I gave up and just went ‘my own way’ and developed my own ecology instead of picking bits from existing systems
[05:23] elliottcable: I find ‘normal JS’ completely unreadable, as opposed to C/Objective-C/Ruby/Io, from which I came to JS
[05:23] kriskowal: which is a very good exercise
[05:23] elliottcable: )-:
[05:24] kriskowal: everybody's gotta reinvent some wheel to know how it works.
[05:24] elliottcable: luckily, ryah is actually fairly messy, and somehow that messyness lent me a bit of ease-of-reading that was otherwise lacking
[05:24] kriskowal: poopy, in my opinion, doesn't really solve the principle with new
[05:24] elliottcable: kriskowal: I don’t think it’s *solveable*
[05:24] kriskowal: the factory-method problem.  no, it certainly is.
[05:24] elliottcable: kriskowal: but, I think it does do a fairly good job of restricting JS into an interesting, usable language
[05:25] elliottcable: I mean, it’s still JS, with all its’ flaws, but… slightly less in-your-face about its’ problems d-:
[05:25] kriskowal: i'd be interested in reading a rigorous treatise on how it does that.
[05:25] elliottcable: anyway, kriskowal (and, I suppose, tlrobinson), sorry I keep ragging on Narwhal. I actually have *no idea what it is*; but I see it associated with CommonJS a lot… so I suppose some of my hatred for CommonJS ‘bleeds over’ d-:
[05:25] kriskowal: behaviorally that is.  problem to solution kind of stuff
[05:26] elliottcable: kriskowal: it boils down to this: I sat down, and created a new language, by looking at all of JavaScript’s elements (both semantic and syntactic).
[05:26] kriskowal: we're pretty involved in both.  we're open to hearing arguments
[05:26] elliottcable: kriskowal: and then I restricted myself to writing *that* language, not actual ‘JavaScript’
[05:27] kriskowal: i know what you mean; i've done similar things in the past.
[05:27] kriskowal: the trouble is communication
[05:27] elliottcable: kriskowal: i.e. my non-existent subset-language that executes in JavaScript interpreters… doesn’t have the dot operator. It’s extremely explicit about each object being a hash, you *always* access members via myObj[key]
[05:27] elliottcable: kriskowal: communication?
[05:28] kriskowal: yeah.  being able to read each-other's code.
[05:28] kriskowal: it's hard, and worthwhile
[05:28] elliottcable: Oh, I see
[05:28] elliottcable: yeah.
[05:28] elliottcable: That’s the choice I had to make; I decided it was worth my time to break away from the JS community and create my own.
[05:29] elliottcable: I actually took that slightly farther with JESS; JESS source won’t actually run in a JS interpreter
[05:29] kriskowal: and here you are, in the js community, ragging on my shit :-P
[05:29] elliottcable: and finally decided that even that wasn’t far enough, and just designed my own language from scratch
[05:29] elliottcable: kriskowal: yeah pretty much.
[05:29] elliottcable: kriskowal: I have to be hard on things like narwhal and CommonJS; they threaten my ability to exist, so to speak
[05:29] kriskowal: really?
[05:30] kriskowal: weird.
[05:30] elliottcable: kriskowal: if ryah had teetered just a liiiiiitle bit further towards CommonJS, I wouldn’t be able to exist at all
[05:30] elliottcable: kriskowal: or rather at least, not on top of Node.js
[05:30] elliottcable: kriskowal: and I *really* like Node.js d-:
[05:30] scudco has joined the channel
[05:30] kriskowal: yeah, it's got some good stuff going on.
[05:30] elliottcable: kriskowal: anyway, I’ve got an interpreter to finish before midnight tomorrow night… much work to be done!
[05:30] elliottcable: ACTION wants to see a .paws file executing before 2010
[05:32] elliottcable: kriskowal: What *is* narwhal? From the documentation I initially read, I gathered that it was supposed to be some sort of umbrella project that covered a Node.js-esque POSIX system… and a standard library… and some browser abstraction stuff?
[05:32] elliottcable: kriskowal: do you have a link that is, you know, actually explicative?
[05:33] kriskowal: is this not explicative? http://narwhaljs.org/
[05:33] elliottcable: not really /-:
[05:34] kriskowal: it's a set of adapters for various engines that enables applications to run on multiple engines.
[05:34] elliottcable: the first half of the first paragraph makes it sound a bit like a sync Node.js… but then it gets into support for multiple interpreters
[05:34] elliottcable: and the browser
[05:34] elliottcable: and I don’t exactly see how a native POSIX-to-JS-interpreter abstraction layer like Node.js could exist simultaneously for multiple interps *and* the browser…
[05:34] elliottcable: so as to what it *actually is*, I am still list
[05:34] kriskowal: with as much of the code written in pure javascript as possible in order to permit the core libraries to be used across all of the engines
[05:35] kriskowal: not all modules can or should work in a browser, but those that can do
[05:35] kriskowal: like, there's no expectation for a file module to work in a browser.  it won't.
[05:35] kriskowal: but a url module can be written once and used in both places easily.
[05:35] elliottcable: What’s the relationship between Chiron and Narwhal?
[05:35] kriskowal: chiron is a package that can be installed by narwhal and its modules loaded by narwhal
[05:36] elliottcable: and Narwhal ↔ 280north?
[05:36] kriskowal: i'm working on making node one of the engines that narwhal can run on
[05:36] kriskowal: the narwhal project was started by 280north
[05:36] kriskowal: particularly by tom
[05:37] elliottcable: /-:
[05:37] kriskowal: about the same time as node
[05:37] elliottcable: that’s a fairly large turn-off to the idea; aren’t they responsible for *shudder* Cappuccino
[05:37] kriskowal: ad hominem?
[05:37] elliottcable: yeah pretty much d=
[05:37] elliottcable: ACTION shrugs
[05:37] kriskowal: i wrote about half of narwhal and have nothing to do with cappuccino, honestly
[05:38] elliottcable: I’m an elitist, opinionated jackass. It’s my best trait d-:
[05:38] elliottcable: ah, okay
[05:38] elliottcable: well yeah, I like you. After having talked with you, I’m much less inclined to give Narwhal the pass.
[05:38] elliottcable: but I’ll have to look more in-depth later. Interp to write.
[05:38] kriskowal: also ad hominem, but i'll take it
[05:38] elliottcable: Thanks for the convo d-:
[05:39] kriskowal: likewise.
[05:39] elliottcable: I dunno.
[05:39] elliottcable: I find it’s pretty easy to predict how someone will code from how they act.
[05:39] kriskowal: i've read some good code that was written by opinionated jackasses
[05:40] elliottcable: yes, but the code is also often opinionated.
[05:40] elliottcable: it’s a bit more difficult for code to be, uh, jackass-y(?)
[05:40] elliottcable: but still, point stands
[05:40] kriskowal: so perhaps those dimensions are orthogonal
[05:40] kriskowal: and perhaps not all opinions are created equally
[05:41] kriskowal: like some may correspond to actually good principles, an altogether unrelated dimension
[05:41] kriskowal: i am less interested in opinions than testable principles
[05:42] elliottcable: perhaps
[05:42] elliottcable: I’m a designer. I don’t do things based on testable principles; I do them based on my gut feeling.
[05:42] elliottcable: Now, I’m wrong a lot. A *lot*.
[05:42] elliottcable: But there’s a *huge* aspect to be taken into account, in terms of the unity of design that comes from that style.
[05:42] kriskowal: gut feelings sometimes belie good principles.  the subconscious is subtle.
[05:43] elliottcable: Sometimes, but not always. I like to retain a healthy disrespect for my intuition, while still following it unconditionally.
[05:43] kriskowal: rigorously searching for the principle behind the feeling is key.
[05:44] elliottcable: Often do. Sometimes can’t be bothered.
[05:44] elliottcable: That’s more something I do when A) other people question my actions, or B) I’m bored.
[05:45] elliottcable: because it has no bearing on my eventual choice; that starts out predetermined by my intuition, in most cases.
[05:46] kriskowal: excellent point, and i'm no different.  that's where commonjs is valuable.  it is the clash of intuitions, the test of there inherent value, the discovery of the underlying principles.  in the end, you get better principles, cultivate better intuition, and a better design that more people can live with.
[05:46] kriskowal: and that's where reuse becomes possible.  good code alone is not enough.
[05:46] elliottcable: Nah, I *extremely* disagree there.
[05:47] elliottcable: all of those are true *except* for “a better design that more people can live with”
[05:47] kriskowal: what is the principle behind your disagreement
[05:47] elliottcable: the rest, very true
[05:47] elliottcable: but that single one is the reason that I think outweighs all the others
[05:47] elliottcable: because you *don’t* get “a better design that more people can live with”
[05:47] elliottcable: instead, you get “a *worse* design that more people can live with”
[05:47] kriskowal: if the curator of the design does not hone to principles, that can be true.
[05:47] elliottcable: my goal in life isn’t to make something everybody can live with; in fact, I think that’s a horrid goal. It’s to make something *amazing*, interesting, creative, and above all, *good*.
[05:48] elliottcable: Inherently good, not good-as-voted-by-a-comittee
[05:48] elliottcable: because a group is *universally* stupider than its parts.
[05:48] kriskowal: these are familiar cliches
[05:48] elliottcable: that’s a statement often made and never backed up in fact; and, in fact, I have no more proof than anybody else I’ve seen offering it (usually they point to governments; I think that’s a fairly dumb comparison)
[05:49] elliottcable: but, regardless of that, I still find it to hold true 100% of the time; I have absolutely no interest in creating, or being a part of, anything *remotely* like C++, HTML5, or CommonJS
[05:49] kriskowal: i think you'll find that if you participate in the argument, the design will be better
[05:49] kriskowal: or at least may inform a better design in your independent work
[05:49] elliottcable: yes, better than it would have been if I hadn’t participated; but the argument will still go on, and the design will still be sub-par, forced to succumb to *everyone’s* desires.
[05:50] elliottcable: I’d much rather spend a year building something alone, and end up with something that is 95% of what I want, then spend a month contributing to somebody else’s committee clusterfuck, and end up with something that is 55% of what I want.
[05:50] kriskowal: sure, that's why about 80% of narwhal is beyond spec and about 90% of node is beyond spec as well.
[05:50] elliottcable: when I see another group of people striking out on their own, I’m much more likely to work with them instead of on my own; I find that such splinter groups tend to hold similar views to my own, having just split off from some project due to committee pains
[05:51] elliottcable: but when I see 90% of people going in one direction… yeah. I’m out of there on the first train to My Own Codebase-ville.
[05:51] kriskowal: i've been out there most of my life as well, doing my own thing.
[05:51] kriskowal: there's only so much you can do alone though.
[05:51] elliottcable: kriskowal: true enough; it just means you have to restrict yourself more
[05:52] elliottcable: kriskowal: I’ve had to drop quite a few projects in the past; I think Paws is about as far as I can possibly take this.
[05:52] elliottcable: kriskowal: If I had my way, I’d create my own processor architecture and work up from there. Unfortunately, there’s not enough time in my life for that. /-:
[05:52] kriskowal: i know how you feel. creation is messy.
[05:53] elliottcable: but I do, do so love it ^_^
[05:53] kriskowal: well, it leaves a mess.  that's why it's compelling to strike out and try to make something better from the ground up.
[05:53] elliottcable: I’m ridiculously positive right now, to tell the truth. I feel I’ve created something immesurably awesome in Paws.
[05:53] kriskowal: i wrote a thing called "swl" about 10 years ago that i felt like that about.
[05:53] elliottcable: link!
[05:53] kriskowal: i think i have three users.
[05:54] elliottcable: I don’t measure by users, generally
[05:54] kriskowal: my domain is not presently up.  caltech had a policy change and shut it down.
[05:54] elliottcable: I used to try to, but when I reached ~150 completed projects, and ~5 users (3 of them on a single one of the projects), I realized that was fairly stupid d-:
[05:54] kriskowal: alas
[05:54] elliottcable: I’m mostly in it for the fun / innovation atm
[05:55] elliottcable: also have some long-term plans for profit, but those aren’t my primary concern
[05:55] kriskowal: in any case, it presaged markdown, rst, and textile and i maintain is still more powerful, but that ship sailed a long time ago yet
[05:55] elliottcable: is it in the textile direction, or the Markdown direction?
[05:56] kriskowal: like you're fond of, it's in its own direction
[05:56] elliottcable: i.e. is it an all-powerful HTML replacement, or a superlight-and-readable ‘markup’ in the traditional sense of the word?
[05:56] kriskowal: it's more abbreviated and programmatic
[05:56] elliottcable: ah, so light, while trying to retain the power
[05:56] elliottcable: interesting
[05:57] kriskowal: no, it's a document language that compiles to html with configurable macros
[05:57] kriskowal: line-by-line, with half tags on special lines, or at the beginning and end of special blocks, recursively
[05:58] kriskowal: it separates the presentation and content concerns
[05:58] kriskowal: and i made it before CSS was widely available, so reusable html chunks were much more important.  they still are, but not to the same extent.
[05:59] kriskowal: anyhow, we're way off topic.  just trying to say i know where you're coming from.
[06:00] kriskowal: and that it would be good natured of you to reserve judgement about narwhal, and to some extent commonjs, until you have strong specific arguments. i do *really* want to know how i can better spend my time.
[06:01] elliottcable: protip: don’t be waiting on *me* for suggestions as to how to spend your time
[06:01] elliottcable: unless you want to help me prepare a Paws.js interpreter, or write an XMPP server or Wave clients
[06:03] elliottcable: d-:
[06:03] jacobolus has joined the channel
[06:14] jspiros has joined the channel
[06:16] CIA-56: node: 03Ryan Dahl 07master * r9553503 10/ src/node_http.cc : 
[06:16] CIA-56: node: Bugfix: Don't segfault on unknown http method
[06:16] CIA-56: node: Reported by Chakrit Wichian. - http://bit.ly/6Psy3N
[06:20] CIA-56: node: 03Ryan Dahl 07net2 * rfd73a3a 10/ (109 files in 11 dirs): Upgrade V8 to 2.0.5.4 - http://bit.ly/8MH5Pl
[06:20] CIA-56: node: 03Ryan Dahl 07net2 * r2c016ba 10/ Makefile : 
[06:20] CIA-56: node: 'make distclean' should not call 'waf clean'
[06:20] CIA-56: node: Because if configure hasn't been run, then an error is reported. - http://bit.ly/59FJh6
[06:20] CIA-56: node: 03Ryan Dahl 07net2 * r8fd46a3 10/ deps/v8/SConstruct : 
[06:20] CIA-56: node: Kill -Werror in V8 for GCC 4.4.1 users.
[06:20] CIA-56: node: http://code.google.com/p/v8/issues/detail?id=413 - http://bit.ly/6eqI9z
[06:20] CIA-56: node: 03Ryan Dahl 07net2 * rd975752 10/ (110 files in 12 dirs): Merge branch 'master' into net2 - http://bit.ly/7u2caY
[06:34] micheil has joined the channel
[07:31] chakrit has joined the channel
[08:00] scudco has joined the channel
[08:04] jdzp has joined the channel
[08:08] elliottcable: This is a bit … odd.
[08:08] elliottcable: open a reply, `new(String)("foo")`, and then do it again
[08:22] qFox has joined the channel
[08:36] CIA-56: node: 03Ryan Dahl 07master * r642c277 10/ (ChangeLog doc/api.txt doc/index.html wscript): bump version - http://bit.ly/8ngTQx
[08:41] JoePeck has joined the channel
[08:42] elliottcable: woop
[08:42] elliottcable: ty ryah_away
[08:54] jacobolus has joined the channel
[09:16] elliottcable: “Error: (no message)”, you truely are my bestest friend
[09:22] inimino: hm, hm
[09:25] elliottcable: inimino!
[09:25] Atmoz has joined the channel
[09:27] inimino: elliottcable!
[09:28] elliottcable: inimino: ##Paws
[09:48] mikeal has joined the channel
[10:19] felixge has joined the channel
[10:21] jacobolus has joined the channel
[10:25] eviltwin has joined the channel
[10:28] jacobolus has joined the channel
[10:48] botanicus_ has joined the channel
[11:09] Biscuits has joined the channel
[11:32] brandon_beacher has joined the channel
[12:12] RJ2_ has joined the channel
[12:13] Biscuits has joined the channel
[12:13] botanicus_ has joined the channel
[12:13] micheil has joined the channel
[12:13] gwoo has joined the channel
[12:13] mikekelly has joined the channel
[12:13] bengl has joined the channel
[12:13] evilhackerdude has joined the channel
[12:13] halorgium has joined the channel
[12:41] cloudhead has joined the channel
[13:10] alex-desktop has joined the channel
[13:39] bryanl has joined the channel
[13:55] Sembiance: :)
[14:17] soveran has joined the channel
[14:18] n8o has joined the channel
[14:28] kriszyp has joined the channel
[14:43] Booster has joined the channel
[14:45] davidsklar has joined the channel
[14:48] micheil has joined the channel
[14:54] micheil has joined the channel
[15:07] nsm has joined the channel
[15:08] nsm: hi guys, I have a Javascript question if anyone has a minute please
[15:08] eviltwin: nsm: I can try to help... but I won't promise much :)
[15:09] felixge has joined the channel
[15:09] nsm: eviltwin, thanks, so are anonymous objects shared in javascript
[15:09] nsm: hang on i'll post a sample
[15:10] eviltwin: not sure what the rules are with regard to pasting here... but I suggest you use pastebin or similar
[15:10] nsm: http://pastebin.com/d91e66c1
[15:11] nsm: if i call that function() multiple times with different functions <fn> will the { prop:value} be shared across them?
[15:12] eviltwin: I doubt it
[15:12] eviltwin: because you're using a literal for { prop: value }
[15:12] eviltwin: so it's creating a new one every time you call that function
[15:13] nsm: thanks
[15:13] eviltwin: but like I said at the start, I may be wrong
[15:13] nsm: hmm, brb
[15:16] nsm has joined the channel
[15:19] grantmichaels has joined the channel
[15:21] nsm: thanks eviltwin
[15:22] eviltwin: you figure out a fix?
[15:27] DamZ has joined the channel
[15:34] fictorial has joined the channel
[15:37] alexiskander has joined the channel
[15:40] charlenopires has joined the channel
[15:56] teemow has joined the channel
[16:17] n8o has left the channel
[16:33] jcrosby has joined the channel
[16:55] RayMorgan has joined the channel
[17:05] jdzp has joined the channel
[17:26] eddanger has joined the channel
[17:31] brandon_beacher has joined the channel
[17:34] kriskowal has joined the channel
[17:37] keeto has joined the channel
[17:45] jamiew has joined the channel
[17:46] scudco has joined the channel
[17:51] brandon_beacher_ has joined the channel
[17:55] binary42 has joined the channel
[17:55] binary42 has joined the channel
[18:22] brandon_beacher_ has joined the channel
[18:50] kriskowal has joined the channel
[19:26] tlrobinson has joined the channel
[19:38] kriszyp has joined the channel
[19:52] cadorn has joined the channel
[19:54] pjb3 has joined the channel
[19:57] kriskowal has joined the channel
[20:26] jamiew has joined the channel
[20:30] mikeal has joined the channel
[20:47] gwoo has joined the channel
[20:49] charlenopires has joined the channel
[20:55] JoePeck has joined the channel
[20:55] kriszyp has joined the channel
[20:55] Biscuits has joined the channel
[20:55] mikekelly has joined the channel
[20:57] brandon_beacher has joined the channel
[20:57] eddanger has joined the channel
[20:57] bengl has joined the channel
[20:57] evilhackerdude has joined the channel
[20:57] halorgium has joined the channel
[21:25] voxpelli-laptop has joined the channel
[21:25] voxpelli-laptop: Hi - any best practise for how to make a library that depends on another library?
[21:27] voxpelli-laptop: Require the user to add a path to require paths?
[21:28] voxpelli-laptop: Bundle the other library?
[21:35] stephenlb has joined the channel
[21:37] mikeal has joined the channel
[21:42] mattly has joined the channel
[22:13] danzat has joined the channel
[22:40] Booster has joined the channel
[22:51] eddanger has joined the channel
[22:57] cadorn has joined the channel
[23:03] Booster has joined the channel
[23:27] jdzp has joined the channel
[23:29] scudco has joined the channel
