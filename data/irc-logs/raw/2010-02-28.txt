[00:01] isaacs has joined the channel
[00:02] RayMorgan has joined the channel
[00:45] gf3 has joined the channel
[00:47] gf3 has joined the channel
[00:55] gf3 has joined the channel
[01:00] kriskowal: fixed spurious suffixes on readlink http://github.com/kriskowal/node/commit/dea3f3373776967b6de954b2fa13c5fb68f2c9bf
[01:01] mrjjwright has joined the channel
[01:11] eikke has joined the channel
[01:12] ocq has joined the channel
[01:16] tisba_ has joined the channel
[01:21] binary42 has joined the channel
[01:29] aguynamedben has joined the channel
[01:34] gf3 has joined the channel
[01:35] dnolen has joined the channel
[01:36] jcrosby has joined the channel
[01:40] jspiros_ has joined the channel
[01:41] jspiros has joined the channel
[01:47] joshbuddy has joined the channel
[01:50] dandean has joined the channel
[01:55] Connorhd: I've made a stab at a module to allow simple tcp style communication between node and the browser using the best possible method (currently websockets/long poll) if anyone is interested http://github.com/Connorhd/node_webstream
[01:58] gf3 has joined the channel
[02:00] gf3 has joined the channel
[02:09] charlenopires has joined the channel
[02:21] kriskowal: ryah_away is it intentional that Buffers initially contain garbage?  is this for speed?
[02:32] dmapopov has joined the channel
[02:48] RayMorgan has joined the channel
[03:05] RayMorgan_ has joined the channel
[03:34] gf3 has joined the channel
[03:38] mattly has joined the channel
[03:42] BryanWB has joined the channel
[03:50] isaacs has joined the channel
[03:53] micheil_mbp has joined the channel
[03:53] ryah_away: kriskowal: what would you have them contain?
[03:53] ryah_away: kriskowal: yes, it's faster than zeroing them out
[03:54] kriskowal: ok
[03:55] kriskowal: the tension is that the garbage poses a security problem.
[03:57] kriskowal: once es5 lands in v8, and we have workers, running suspicious code is going to be a compelling use-case
[03:58] kriskowal: distributed computation services, for example.
[03:59] kriskowal: so, given that there's a tension, we probably need to provide both options somehow
[04:05] kriskowal: i've also had some good luck exposing the buffer implementation as "node/buffer-engine" to narwhal+node, such that "node/buffer" monkey patches in some of the functions that don't need to be C.
[04:05] kriskowal: implemented fill, copy, and copyFrom in C though
[04:07] kriskowal: so, when i sync up my "narwhal-master" and "buffer" branches, i won't make the upstream mergeable buffer constructor fill implicitly.
[04:09] adamv has joined the channel
[04:10] stepheneb has joined the channel
[04:28] micheil: there really needs to be a correction on the documentation thread.. the jquery documentation is written by developers, the API documentation is auto-generated.
[04:36] kriszyp has joined the channel
[04:37] unomi: I mentioned that
[04:38] unomi: I don't really understand the resistance against autogenerated docs
[04:38] unomi: its not like you can't include freeform examples and whathaveyou
[04:38] micheil: the thing is. they aren't docs.
[04:38] unomi: api docs aren't docs?
[04:39] micheil: they're api documentation
[04:39] unomi: so they aren't what howtonode is? how is that a problem
[04:39] micheil: there something that may be used for very quick reference, but doesn't cover the details of practical use
[04:39] unomi: there is no reason why it couldn't 
[04:39] unomi: really, you can embed whatever you want in comments and have it pretty formatted along with the function description
[04:40] micheil: I don't really care, I find the documentation and source code enough at the moment.
[04:40] unomi: I just tend to think that it lends itself to narrative code
[04:40] unomi: and that its more natural to update the documentation when it is right next to the code you are changing
[04:41] unomi: nod, well, my curiousity is regarding what it is that people have against autodocs
[04:43] Tim_Smart: for those that are interested, coffeescript has a sexy new class makeover
[04:43] unomi: hey, awesome work with coffee-node :)
[04:44] Tim_Smart: You tried it? :p
[04:44] unomi: no, I am just brown nosing
[04:44] Tim_Smart: yeah it's a load of fun :D
[04:44] unomi: in my mind I have walked down that path and the aroma was good
[04:45] Tim_Smart: Add a node shabang to the top of the coffee file, and you have coffee executables :D
[04:45] unomi: it would actually go a long way towards getting the team that I am in, mostly ruby programmers, to embrace node
[04:45] unomi: which is obviously a good thing
[04:46] Tim_Smart: yeah, thing is, the compiler adds a relatively large overhead to require
[04:46] unomi: cant it dump some grinds for reuse?
[04:46] Tim_Smart: I need to put the compiler into a child process or something when requiring async
[04:46] Tim_Smart: It caches the compiler module after one use
[04:47] unomi: but not the resultant js from coffeescript?
[04:47] unomi: oh.. I actually thought it was a one pass translator
[04:47] Tim_Smart: yeah, it goes into the same module cache as the rest
[04:47] unomi: ah ok
[04:48] Tim_Smart: it parses the module to javascript, then passes it though the exact same module system as the others
[04:49] unomi: so perhaps it could keep a hash of the coffescript file and map it to some ground js?
[04:50] unomi: would still face an issue with async loading code
[04:51] unomi: but in some cases it might just wake up enough to realize it has already processed it, I am assuming that the module cache is not persistant, is it?
[05:06] mrjjwright has joined the channel
[05:08] isaacs has joined the channel
[05:11] joshbuddy has joined the channel
[05:11] joshbuddy has joined the channel
[05:21] kriskowal has joined the channel
[05:24] micheil has joined the channel
[05:31] _Ray_ has joined the channel
[05:31] _Ray_: If I use sys.exec, what can I use to set a timeout function? Since .timeout was removed
[05:33] steadicat has joined the channel
[05:35] CIA-77: node: 03kriskowal 07master * r2b91f8d 10/ src/node_file.cc : Fixed spurious suffixes on fs.readlink. - http://bit.ly/956F69
[05:36] ryah-away: _Ray_: you should probaby use createChildProcess itself
[05:37] ryah: _Ray_: sys.exec is just a simple wrapper around it
[05:38] _Ray_: ah, alright :)
[05:47] mumrah has joined the channel
[05:49] mumrah: i'm looking to read up on async design patterns
[05:49] mumrah: anyone have good starting points?
[05:50] ryah: _Ray_: importantly you can kill the process if it takes too long
[05:50] ryah: _Ray_: Promise.prototype.timeout() wouldn't do that
[05:55] cloudhead: anyone working on a node-env.js?
[05:56] cloudhead: Tim_Smart ?
[05:56] Tim_Smart: nope
[05:56] Tim_Smart: ryah: http://github.com/Tim-Smart/node/tree/coffee :D
[05:59] cloudhead: is that built-in cs preprocessing in node?
[05:59] Tim_Smart: Yeah
[05:59] cloudhead: nice
[05:59] cloudhead: if that was merged in, maybe I'd consider using cs
[06:00] Tim_Smart: If would certainly attract a lot of ruby-ists
[06:00] cloudhead: implicit returns and nicer function literals help a lot
[06:01] cloudhead: but I still find the syntax quirky
[06:01] cloudhead: I wish it was closer to js
[06:01] bpot has joined the channel
[06:02] bpot_ has joined the channel
[06:04] ryah: Tim_Smart: :)
[06:05] ryah: Tim_Smart: You should do it in a way that one can supply any filename extension
[06:05] ryah: Tim_Smart: and have it preprocessed in some way
[06:06] mumrah has joined the channel
[06:06] Tim_Smart: ryah: So more javascript compilers could be added?
[06:06] ryah: right
[06:06] ryah: i don't want to have coffee script specific stuff in node - but i wouldn't mind having a way to plugin to require()
[06:07] Tim_Smart: Yeah, I'm not sure of the best way of plugging into it yet
[06:08] Tim_Smart: this was just proof of concept
[06:08] ryah: require.onExtension('.coffee', function (fileContent) { /* compile it */ return javascriptContent; })
[06:08] ryah: ?
[06:09] Tim_Smart: then how would I go: /usr/local/bin/node test.coffee
[06:09] ryah: maybe you could make a little wrapper script with #!/usr/bin/env node
[06:09] ryah: node-coffee
[06:10] kriskowal: ryah working on iconv binding
[06:10] keeto has joined the channel
[06:10] kriskowal: new Transcoder(sourceCharset, targetCharset).transcode(sourceBuffer, targetBuffer)
[06:10] ryah: kriskowal: that works with buffers?
[06:10] Tim_Smart: ryah: Maybe have a folder where users can drop in module extensions
[06:11] kriskowal: the Transcoder keeps the state of the transcoding, so it's guaranteed to only consume and write complete multi-byte sequences
[06:11] ryah: Tim_Smart: that sounds like too much
[06:11] kriskowal: it's not terribly complicated
[06:12] Tim_Smart: ryah: Right. I'll think about it for a bit longer
[06:12] kriskowal: Tim_Smart, have you already done bindings for Narwhal?  someone has, i think.
[06:12] kriskowal: we have a plugin api for that kind of thing.
[06:12] Tim_Smart: kriskowal: It wasn't me
[06:12] kriskowal: you might want to look at the api, in any case
[06:13] Tim_Smart: Is Narwhal replacing commonjs?
[06:13] kriskowal: hah, no
[06:13] kriskowal: narwhal is intended to be an implementation of commonjs, has been from the beginning
[06:13] kriskowal: one of many
[06:13] Tim_Smart: right
[06:13] kriskowal: although, we do want it to run on any engine; it's designed to provide the standard library on minimal engine-specific adapters
[06:13] tmpvar: ryah, is there a specific reason why EventEmitter.emit() is implemented in c++?
[06:13] kriskowal: ergo, node
[06:14] tmpvar: also, hello!
[06:15] kriskowal: Tim_Smart, in any case, the API is that require.loader is in charge of searching, fetching, compling, and memoizing "module functions"
[06:15] kriskowal: require("loader/multi") gives you a multiplexing loader, which maps extensions to sub-loaders
[06:17] kriskowal: and, if you put a thingie in your package.json like {"preload": "coffee/preload"}, you can install your loader before your main program runs
[06:17] ryah: tmpvar: faster - i'd like to move it out if possible
[06:17] kriskowal: from there #!/usr/bin/env js will work at the top of your script
[06:20] micheil has joined the channel
[06:21] tmpvar: ryah, makes sense
[06:21] joshbuddy has joined the channel
[06:21] joshbuddy has joined the channel
[06:28] brapse has joined the channel
[06:30] kriskowal: ryah i could use a hint on how to link against libiconv
[06:30] kriskowal: via wscript
[06:33] jspiros has joined the channel
[06:34] ryah: kriskowal: does it use pkgconfig ? 
[06:34] ryah: pkg-config
[06:34] kriskowal: hm.  i'll look.
[06:34] bpot has joined the channel
[06:34] ryah: pkg-config --libs iconf
[06:34] kriskowal: i don't think we have to put it in deps
[06:35] kriskowal: ok
[06:35] kriskowal: doesn't appear to be there
[06:37] gf3 has joined the channel
[06:37] kriskowal: i'll ask tlrobinson; he got it working on narwhal-jsc
[06:37] kriskowal: just not with wscript
[06:37] tmpvar: ryah, ill take a look at moving emit into js tomorrow .. have a good night 
[06:41] ryah: kriskowal: look at how efence is done, for example
[06:42] kriskowal: k, thanks
[06:45] kriskowal: ryah, add ICONV to .uselib?
[06:47] ryah: kriskowal: yeah
[06:51] kriskowal: ryah, ah i'm in business.
[06:51] ryah: kriskowal: i kind of think this should be done as an addon though
[06:51] kriskowal: had to add -liconv to LINKFLAGS_DL
[06:51] kriskowal: that's fine by me; i don't think it's terribly coupled
[06:52] ryah: the wscript stuff should be the same
[06:52] ryah: or nearly
[06:52] kriskowal: i'll look into the process
[06:52] kriskowal: on that note, i think it might be advantageous to alter the addon protocol
[06:53] kriskowal: one of the notions i've got is that an addon is just like a module factory function
[06:53] kriskowal: you load it once, then you instantiate it by giving it a "target"
[06:54] kriskowal: the loader protocol i'm favoring these days takes an "{exports, require, module}" object as its only arg
[06:54] kriskowal: exports is essentially the addon target
[06:55] kriskowal: but there might be some value in permitting addons to link at run time with arbitrary modules via require
[06:55] kriskowal: e.g., require("buffer")
[07:06] mikeal has joined the channel
[07:07] JoePeck has joined the channel
[07:13] dandean has joined the channel
[07:22] mjr_ has joined the channel
[07:22] ryah: kriskowal: target is exactly 'exports'
[07:22] ryah: i should probably rename it in the documentation
[07:22] kriskowal: aye
[07:23] kriskowal: you follow the idea though, no?
[07:26] ryah: kriskowal: you mean breaking up node into some dlls?
[07:27] kriskowal: oh, not necessarily
[07:27] ryah: er
[07:27] ryah: just a C++ API to load modules?
[07:27] kriskowal: yes
[07:27] ryah: yeah - i suppose 
[07:27] kriskowal: with all the rights and responsibilities thereof
[07:27] ryah: but you know, i'm not such a fan of modules - i don't want them creaping too deap
[07:28] ryah: deep
[07:28] ryah: creeping
[07:28] ryah: meh
[07:29] ryah: so far there hasn't been so much of a need for that
[07:38] micheil has joined the channel
[07:43] _Ray_ has joined the channel
[07:57] kennethkalmer has joined the channel
[07:58] kjeldahl has joined the channel
[08:05] brainproxy has joined the channel
[08:10] _Ray_ has joined the channel
[08:21] nsm has joined the channel
[08:24] mrjjwright has joined the channel
[08:27] jed has joined the channel
[08:48] bpot has joined the channel
[08:52] gf3 has joined the channel
[08:54] gianni has joined the channel
[08:57] mattly has joined the channel
[09:19] binary42 has joined the channel
[09:31] kriskowal has joined the channel
[09:33] maritz has joined the channel
[09:35] xla has joined the channel
[09:36] xla: mornin
[09:36] xla: anybody here, who can help me with the http modue?
[09:36] xla: module*
[09:39] micheil: just ask your question, someone may respond
[09:40] xla: how can I handle a "couldn't connect to host" with the http.createClient? I need to get any response from my script for that specific case.
[09:42] micheil: hmm..
[09:43] micheil: I'm not sure, that's a new one I've never thought about
[09:44] xla: :)
[09:44] xla: I ran into it this mornin, while connecting to a offline riak node
[09:44] xla: curl is instantly answering with curl: (7) couldn't connect to host
[09:45] micheil: tried request.addListener(error) ?
[09:45] micheil: and do you have to use http with riak, or is tcp better suited?
[09:46] micheil: (considering the cost of the headers in http)
[09:46] xla: riak provide a http interface, no TCP support as far as I know
[09:46] micheil: okay
[09:46] micheil: I'd ask on the mailing list, you may get a more indepth answer there
[09:47] xla: addListener('error') doesn't work
[09:47] BryanWB: xla, how do u like riak? i was thinking of experimenting w/ it
[09:47] xla: I just started with it, but it feels like the better couch
[09:48] xla: have a working ring on 3 ec2 machines
[09:48] xla: and adding a new node is really easy
[09:48] micheil: ACTION has been using mongodb, admittedly from commandline and within rails.
[09:49] BryanWB: xla, sweet.
[09:49] xla: love mongo, but have to evaluate riak
[09:50] BryanWB: xla, mongo's sharding method of scaling is less appealing for something that really needs to scale
[09:50] micheil: mongo is still pretty awesome.
[09:51] felixge has joined the channel
[09:51] felixge has joined the channel
[09:52] xla: mongo's performance is incredible and I miss inplace updates, inserts and increments when working with any other DB
[09:52] xla: other question is: what do u want to scale?
[09:52] micheil: xla: mongo does have increments though
[09:52] xla: yay
[09:53] gf3 has joined the channel
[09:53] BryanWB: xla, for storing student information, where students upload all their work
[09:53] BryanWB: all their assignments
[09:54] BryanWB: xla, manageable w/ 60 kids, but this gets out of control w/ a 5,000 student school 
[09:55] qFox has joined the channel
[09:55] kriskowal has joined the channel
[09:58] xla: btw, found the way to get at least a error call
[09:59] xla: FYI client.addListener('error', fn);
[10:09] Tim_Smart: tbh riak looks awesome for large scale stuff
[10:10] nsm has joined the channel
[10:12] xla: it does
[10:12] Tim_Smart: The whole http interface suits node.js as well
[10:12] xla: the nice part is the ring joining
[10:12] xla: riak-admin join name@ip
[10:13] xla: the HTTP interface is a two-edged sword
[10:13] xla: like with couch, u can start really fast and playin around
[10:13] xla: but for serious setups http always brings overhead
[10:14] xla: I like the way mongo is going
[10:14] xla: with the native drivers, and if one needs http to communicate u can build it on-top of that
[10:19] mies has joined the channel
[10:21] nsm has joined the channel
[10:22] nsm has joined the channel
[10:23] ocq has joined the channel
[10:33] bpot has joined the channel
[10:42] spot_away has joined the channel
[10:44] piranha has joined the channel
[11:03] binary42 has joined the channel
[11:44] ocq has joined the channel
[12:03] maritz1 has joined the channel
[12:18] jed has joined the channel
[12:37] pyrotechnick has joined the channel
[12:58] micheil has joined the channel
[13:01] nsm has joined the channel
[13:26] neynenmo has joined the channel
[13:31] happyelephant has joined the channel
[13:51] kriszyp has joined the channel
[13:55] eikke has joined the channel
[14:08] piranha has joined the channel
[14:17] lifo has joined the channel
[14:20] xla has joined the channel
[14:25] eyzn has joined the channel
[14:42] ocq has joined the channel
[14:48] alex-desktop has joined the channel
[14:48] BryanWB has joined the channel
[15:02] piranha_ has joined the channel
[15:05] felixge has joined the channel
[15:05] felixge has joined the channel
[15:12] dandean has joined the channel
[15:19] _Ray_ has joined the channel
[15:23] paulca has joined the channel
[15:31] paulca has joined the channel
[15:36] drostie has joined the channel
[15:40] gwoo has joined the channel
[15:44] zoka has joined the channel
[15:44] mumrah has joined the channel
[15:53] mumrah: morning, chumps
[16:04] mumrah has left the channel
[16:04] ashb: anyone know of a not sucky syntax hilighter that will run on the server?
[16:04] ashb: i.e. not tied to the dom?
[16:09] tisba has joined the channel
[16:09] stepheneb has joined the channel
[16:10] tisba has joined the channel
[16:27] eikke has joined the channel
[16:40] joshbuddy has joined the channel
[16:40] joshbuddy has joined the channel
[16:56] bpot has joined the channel
[16:57] felixge has joined the channel
[16:57] felixge has joined the channel
[17:01] mattly has joined the channel
[17:07] teemow has joined the channel
[17:09] unomi has joined the channel
[17:11] eikke has joined the channel
[17:13] jan____ has left the channel
[17:16] cloudhead has joined the channel
[17:20] jan_____ has joined the channel
[17:32] dandean has joined the channel
[17:56] Davedan has joined the channel
[18:03] Harrison has joined the channel
[18:05] bpot has joined the channel
[18:05] eikke has joined the channel
[18:28] fwg_ has joined the channel
[18:32] piranha_ has joined the channel
[18:36] ocq has joined the channel
[18:40] brapse has joined the channel
[19:00] paulca has joined the channel
[19:02] piranha has joined the channel
[19:04] kjeldahl has joined the channel
[19:05] eikke has joined the channel
[19:09] ryah: What about renaming close() to end()
[19:11] gwoo: for who?
[19:11] ryah: streams
[19:11] ryah: to correspond to the 'end' event
[19:11] ryah: (which happens at the other end)
[19:11] piranha has joined the channel
[19:12] gwoo: semantically it works, but it is different than what i have come to expect from streams
[19:12] gwoo: in other languages
[19:18] morgan: Hey Ryan, nice to meet you the other night
[19:30] jcrosby has joined the channel
[19:30] r11t has joined the channel
[19:35] tmpvar has joined the channel
[19:35] tmpvar: what are we using for performance testing? (non http server)
[19:42] ryah: morgan: you too 
[19:42] ryah: tmpvar: make benchmark
[19:42] r11t has joined the channel
[19:42] ryah: tmpvar: it's very primative
[19:46] mumrah has joined the channel
[19:47] mumrah: anyone have any good resources for async application design?
[19:47] mumrah: design patterns, rather
[20:04] tmpvar: ryah, I'm torn between two ideas.. on one hand I love how node is self contained (all deps), and on the other i wish it were nothing more than a core and I could reuse some important libs on the browser
[20:05] tmpvar: ACTION hates duplication
[20:06] ashb: tmpvar: what parts would you want to reuse?
[20:07] tmpvar: for instance, if I wanted to reuse EventEmitter elsewhere, namely the browser, I'd have to have to maintain the same code in another repo
[20:07] ashb: git subtree perhaps?
[20:08] ashb: dont most client side libs already provide support for custom events?
[20:08] tmpvar: yeah, i don't know if its worth it heh
[20:09] tmpvar: ashb, yeah
[20:09] ryah: i like this idea of a supervisor process. 
[20:10] tmpvar: ryah, nice.  I'm trying to build up some libs that I can use on the browser and node seamlessly.. and one of the things I'm going to need is streams / "pipes" which is where this EventEmitter issue came from
[20:11] pjb3 has joined the channel
[20:11] piranha_ has joined the channel
[20:13] eikke has joined the channel
[20:13] tmpvar: this could be a very long path however.. full of emulating nextTick and other platform specific functionality
[20:14] bpot has joined the channel
[20:15] ryah: tmpvar: nextTick(fn)  = setTimeout(fn,0)
[20:15] ryah: for browser
[20:15] ryah: tmpvar: have you looked at js.io?
[20:15] ryah: i think they have a good way of integrating server side and client side
[20:16] Connorhd: setTimeout(fn,0) isn't actually immediate in all browsers is it?
[20:16] ryah: probably ot
[20:17] Connorhd: just maybe worth knowning
[20:17] Connorhd: knowing*
[20:17] ashb: its 10ms i think
[20:18] ashb: but it *is* next tick, or as close as you can get
[20:18] mumrah has left the channel
[20:18] keeto: 13ms is what resig advises as the baseline for most browsers. 
[20:20] tmpvar: ryah, peeking now
[20:22] tisba has joined the channel
[20:23] happyelephant has joined the channel
[20:24] tmpvar: js.io is pretty interesting
[20:29] spot__: ryah: What do you do for a living?
[20:31] kriszyp has joined the channel
[20:33] spot__: ah.. nevermind
[20:34] Tim_Smart has joined the channel
[20:34] spot__: Greetings Tim
[20:35] Tim_Smart: greetings
[20:35] rolfb has joined the channel
[20:50] Booster has joined the channel
[20:56] spot__: tmpvar: I came in on the conversation late, so can you give me a one or two sentence explanation for wanting to run the same code in node & the browser?
[20:57] Tim_Smart: spot_: Re-using models in the browser would be useful
[20:58] tmpvar: spot__, two reasons really; 1. code reuse and other efforts to rid developers of duplication. 2. I'm working on a project that I'd like to share as much as possible (all?) code between the server and browser
[20:58] Tim_Smart: The only problem is, you would have to be aware of browser specific code
[20:59] tmpvar: yeah
[20:59] tmpvar: i guess that is what js.io is attempting to solve
[21:00] tmpvar: definitely a step in the right direction
[21:02] Tim_Smart: definitely
[21:17] r11t has joined the channel
[21:20] dnolen has joined the channel
[21:30] tmpvar: oh man, if cairo doesn't compile this time im going to loose my marbles
[21:40] Tim_Smart has joined the channel
[21:45] sveisvei has joined the channel
[21:50] sudoer has joined the channel
[21:51] gwoo has joined the channel
[21:52] jed has joined the channel
[21:52] Tim_Smart: tmpvar: rouge compiles are never fun :D
[21:54] nodejs_v8 has joined the channel
[21:54] tbassetto has joined the channel
[21:54] micheil_mbp has joined the channel
[21:54] Tim_Smart: <3 <3 http://jashkenas.github.com/coffee-script/#classes
[21:57] tmpvar: i need to be sold on coffeescript
[22:00] felixge has joined the channel
[22:00] felixge has joined the channel
[22:03] Tim_Smart: tmpvar: If you read through all the examples on the home page, and still aren't convinced, then you probably will never be
[22:04] tmpvar: oh I will (read), just got caught up in the compiling process again heh
[22:04] brapse has joined the channel
[22:08] dnolen has joined the channel
[22:09] hassox has joined the channel
[22:09] dnolen_ has joined the channel
[22:10] dekz has joined the channel
[22:15] happyelephant has joined the channel
[22:17] jcrosby has joined the channel
[22:19] JimBastard has joined the channel
[22:19] spot__: Greetings Jim!
[22:20] JimBastard: holler
[22:20] JimBastard: i was just reading the mailing list about mode
[22:20] JimBastard: http://github.com/rsms/mode/blob/master/doc/maintainers-guide.md
[22:21] JimBastard: looks like someone finally stepped up with a packaging system?
[22:21] dekz has joined the channel
[22:22] spot__: yeah looks that way
[22:22] brapse_ has joined the channel
[22:24] spot__: Has anyone experienced node removing an executable flag from itself? I have the normal runtime declaration at the top of my node file ( #!/usr/local/bin/node ), and I set my file +x and it runs fine as an executable, but removes the x from itself, or something else does. 
[22:24] spot__: Anyone else experienced this?
[22:25] steadicat has joined the channel
[22:25] JimBastard: nope
[22:40] morgan: ung, anyone know how to obtain private_key and certificate for a public site (google.com in this case)
[22:41] morgan: I've got the ca_cert and the request goes through now, but the data event returns garbage (encrypted?)
[22:41] mattly has joined the channel
[22:42] cdorn has joined the channel
[22:42] morgan: but connection.veriyPeer returns 1
[22:43] felixge has joined the channel
[22:43] felixge has joined the channel
[22:45] hassox has joined the channel
[22:46] ashb: morgan: ummm the private key is private...
[22:47] morgan: Yeah, that makes a lot of sense.. more confusing as to how to get this to work
[22:47] morgan: How to browsers to it?
[22:48] morgan: Seem from the exporting in Firefox, that it is done with only the CA
[22:50] rhys__ has joined the channel
[22:52] QuietKnight has left the channel
[22:55] ashb: have you read the wikipedia page on SSL or PPK crypto?
[22:55] ashb: might help
[22:55] rhys__: morgan: can you post / gist the code that's giving you ssl / tls problems?
[22:56] morgan: rhys__, yeah, give me a minute
[22:59] morgan: oh of course, as soon as I strip it down to a test case it works
[23:00] spot__: morgan: Well that is helpful information none-the-less :)
[23:00] morgan: Whoa, it was the User-Agent
[23:00] creationix has left the channel
[23:02] Booster has joined the channel
[23:04] spot__: really?
[23:04] spot__: that's interesting
[23:05] morgan: Yeah, if I used Firefox's header the response was garbled
[23:05] morgan: when I swtiched it to "NodeJS" it workd fine
[23:06] rhys__: does the same thing happen in a normal (non-ssl) request?
[23:10] morgan: Yeah, it does
[23:11] jgoulah has joined the channel
[23:11] rhys__: I wonder if it's a compression default that's being assumed for from the user-agent?
[23:11] rhys__: Is there anything interesting in response.headers?
[23:13] morgan: not really
[23:13] morgan: x-content-type-options and x-xss-protection
[23:13] morgan: those are the only out of ordinary headers
[23:13] ashb: morgan: 'garbled' is probably gzip encoded
[23:14] ashb: save it to a file (without the headers)
[23:14] ashb: then run the `file` command on irt
[23:14] ashb: *it
[23:14] morgan: removed gzip from accepted headers and it still does it
[23:15] ashb: what are the headers you are sending?
[23:16] morgan:         "User-Agent": "NodeJS",
[23:16] morgan:         "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
[23:16] morgan:         "Accept-Language": "en-us,en;q=0.5",
[23:16] morgan:         "Accept-Encoding": "gzip,deflate",
[23:16] morgan:         "Accept-Charset": "ISO-8859-1,utf-8;q=0.7,*;q=0.7",
[23:16] morgan:         "Keep-Alive": "115",
[23:16] morgan:         "Connection": "keep-alive",
[23:16] morgan:         "Cache-Control": "max-age=0"
[23:16] ashb: "Accept-Encoding": "gzip,deflate"
[23:16] ashb: you've told it you accept gzipped data
[23:16] morgan: with or without gzip in accept-encoding it does it
[23:16] ashb: get rid of that header entierly
[23:17] ashb: deflat is also a compression aglo
[23:17] ashb: http://en.wikipedia.org/wiki/DEFLATE
[23:18] ashb: deflate = remove are = make smaller :)
[23:18] morgan: nice, thats got it
[23:19] morgan: and now I know, I do not knwo crap about SSL
[23:19] dekz has joined the channel
[23:19] ashb: s/SSL/HTTP/ it would seem
[23:19] ashb: ;)
[23:43] mattly has joined the channel
[23:54] rictic has joined the channel
[23:54] hassox has joined the channel
[23:58] bryanl has joined the channel
[23:59] bryanl has joined the channel
