[00:00] atmos: http://github.com/ciaranj/node-oauth
[00:00] isaacs: halorgium: npm ls sax
[00:00] isaacs: halorgium: npm ls shows you whatever you type after "ls"
[00:00] isaacs: colorfully :)
[00:00] JimBastard has joined the channel
[00:00] atmos: OMG COLORS
[00:00] halorgium: isaacs: bot! in irc :P
[00:01] halorgium: my irc is like some peoples emacs
[00:03] _ry: isaacs: how do i get it to build my binding?
[00:03] JimBastard: fucking github fork queue, i dont get where my commits are
[00:03] JimBastard: i haz pull request, i no haz fork queue
[00:03] JimBastard: :-(
[00:03] atmos: JimBastard: regular git works :(
[00:03] JimBastard: i know
[00:03] atmos: JimBastard: i've also gotten pull reqs recently from folks that didn't actually change anything
[00:03] JimBastard: i can always merge by hand
[00:03] atmos: which was confusing as fuck
[00:03] JimBastard: thats what im saying atmos 
[00:04] JimBastard: i dont like it when things on the computer are inconsistent 
[00:04] JimBastard: >.<
[00:04] JimBastard: IM NOT VERY GOOD WITH THE INTERNETS HOW DID I GET HERE
[00:04] atmos: mirc is a wondeful thing
[00:04] atmos: ;)
[00:05] JimBastard: i graduated to webchat a few years ago
[00:05] JimBastard: when mibbit first came out
[00:05] mscdex: ribbit
[00:05] JimBastard: ahhh the early days of mibbit, when ctrl-t could dos a room
[00:05] atmos: i don't even know what that is
[00:05] atmos: does that predate irc ?
[00:06] halorgium: atmos: no, web based irc
[00:06] JimBastard: mibbit is baninated from freenode
[00:06] halorgium: and others?
[00:06] JimBastard: i like to think its partly my fault
[00:06] JimBastard: http://mibbit.com/
[00:06] tek has joined the channel
[00:06] halorgium: hmm, Ned_ is from the NZ?
[00:06] mscdex: yep
[00:07] halorgium: ACTION guesses WLG due to acsdata ;)
[00:07] halorgium: atmos: i'm quitting and moving back
[00:08] mikeal: sweet
[00:08] mikeal: http://github.com/mikeal/tweetstream
[00:08] sechrist has joined the channel
[00:08] technoweenie: what, you didnt like mine?
[00:10] mikeal: i didn't know of an API around the stream service?
[00:10] halorgium: twitter-node :)
[00:10] technoweenie: heh yea 
[00:10] halorgium: i didn't know about it till now either :P
[00:10] mikeal: i used that before, i thought it was just for the rest of the api
[00:10] mikeal: link?
[00:11] halorgium: http://github.com/technoweenie/twitter-node
[00:11] softdrink has joined the channel
[00:12] technoweenie: its actually for none of the api except streaming
[00:12] mikeal: i wish i would have known about this on Wednesday :)
[00:15] JimBastard: known about the modules page on the node wiki?
[00:15] JimBastard: or known about ctrl-f
[00:15] JimBastard: ;-)
[00:16] technoweenie: yea there was some interest in getting the rest of the twitter api added, but i've not seen a single commit
[00:17] mikeal: i totally looked at that
[00:19] technoweenie: ah you're not the first person to dot hat
[00:19] technoweenie: totally could've saved you 10 minutes
[00:19] mikeal: haha
[00:20] matthew_y: what part of twitter is missing 
[00:20] technoweenie: matthew_y: twitter-node only handles the streaming api
[00:21] technoweenie: i havent messed w/ the twitter api in a while or i'd add it
[00:22] mikeal: actually, looking at this, i still would have had to write some code
[00:22] matthew_y: ah yeah there is the http based API right?
[00:22] mikeal: I need something to be emitted when the status string is parsed and only have the JSON decoded one happen when there are listeners on that event
[00:23] mikeal: because I'm just going to send the JSON string directly to CouchDB and I wanted to be light on processing for tracking keywords that are really frequent
[00:23] technoweenie: ah
[00:23] technoweenie: probably best if thats a separate lib
[00:24] mikeal: oh dude
[00:25] mikeal: you should steal some of my parser
[00:25] mikeal: you're tracking JSON
[00:25] mikeal: you can totally just read till \r\n
[00:25] technoweenie: yea i saw that
[00:25] technoweenie: well, whatever, im not interested in maintaining a separate lib
[00:25] mikeal: it's insured to never exist in a JSON object, and that's what they even suggest using in the twitter API spec
[00:25] _announcer: Twitter: "@jalbertbowdenii No, not yet. I'm currently digging at node.js Addon & V8 . I've almost figured out how to code." by A.J. http://twitter.com/andrwj/status/14461848256
[00:26] _announcer: Twitter: "Node.js http://bit.ly/9iFn3E via @AddToAny" by Antal IstvÃ¡n MiklÃ³s. http://twitter.com/djdarkman/status/14461877499
[00:26] mape: I can see that getting.. annoying
[00:27] technoweenie:  /ignore _announcer
[00:27] mape: Oh I know how to ignore, not that I should have to
[00:28] sechrist has joined the channel
[00:34] technoweenie: how's json confirm that \r\n is never in a body?  cant you just do a tweet with a \r\n?  or does that get converted to \n
[00:35] technoweenie: i messed around with that, it broke down on busy keywords.  the current twitter-node handles trending topics just fine
[00:35] mjr_: it's not valid JSON unless the newline is escaped.
[00:35] _announcer: Twitter: "Node.js #webdesign http://bit.ly/9UOOmp" by Inv Amigo. http://twitter.com/invamigo3/status/14462330949
[00:36] technoweenie: ah
[00:36] mjr_: which makes newline delimeted JSON messages over HTTP such a great protocol.
[00:37] _announcer has joined the channel
[00:37] maushu: Filtering "via" too.
[00:38] halorgium: maushu: with brackets?
[00:38] maushu: Who needs brackets.
[00:38] maushu: Any via is filtered. The end.
[00:39] maushu: Wait.
[00:39] maushu: You mean [via]?
[00:39] maushu: Drat.
[00:39] mjr_: Just wrote a giant pile of JavaScript to decode ICMP messages.  node_pcap is coming along.
[00:39] mikeal: isaacs: did your require() changes ever get merged?
[00:41] isaacs: mikeal: no, not yet
[00:41] isaacs: mikeal: it needs some rebasing.
[00:42] _announcer has joined the channel
[00:42] isaacs: _ry: check man npm-scripts
[00:42] maushu: !so-last
[00:42] _announcer: I haven't yet received anything. Please try again later.
[00:42] isaacs: _ry: basically, you do something like:  "scripts" : { "install" : "node-waf configure build" }
[00:42] halorgium: maushu: no backend yet? ;)
[00:42] maushu: Too lazy.
[00:42] mikeal: i think this conversation about kiwi.require() is going to end with some "you can't do x with node's require" which that code might alleviate 
[00:42] maushu: Besides, I hope to convert this into my graphnode project.
[00:43] maushu: As a useful demo.
[00:44] isaacs: mikeal: yeah, i think so
[00:47] halorgium: isaacs: does commonjs packages make a distinction between a "compiled package descriptor" and "dynamic package descriptor"?
[00:47] isaacs: halorgium: i don't know what those things mean
[00:47] isaacs: halorgium: so, i doubt it?
[00:48] halorgium: isaacs: yer, lemme explain
[00:48] halorgium: in gemspecs, they can be dynamic as in, use Dir.glob('...')
[00:48] halorgium: but in the compiled form, it is the expansion of that
[00:48] halorgium: Gem::Spec.to_ruby
[00:48] isaacs: halorgium: ah.  like a way to generate the package at build time?
[00:49] halorgium: yes, exactly
[00:49] isaacs: halorgium: no.
[00:49] halorgium: :(
[00:49] halorgium: i'd love it if the attribute value could be a function
[00:49] isaacs: halorgium: you could probably do that with npm's scripts, though, and i'm sure kiwi gives you some lifecycle hooks.
[00:49] halorgium: rgr, having it at the core layer makes it great IMO
[00:49] isaacs: halorgium: basically, that's the domain of the packager, not the json spec.  i am committed to keeping package.json as json (which means, just data, no cycles, no functions)
[00:50] isaacs: mostly becasue that's just so damn simple.
[00:50] halorgium: yer, gotcha
[00:50] isaacs: but you could have a script that does something at certain points.  check man npm-scripts
[00:50] halorgium: but npm could support having functions at that layer and when compiling the package it would run those funcs
[00:51] isaacs: halorgium: well, that's what the scripts could be.  ie, not functions, but a script file that contains the added functionality
[00:53] halorgium: isaacs: yer, i get that was thinking of it as part of npm you see
[00:54] isaacs: halorgium: at this point, i think that sugar might be too complex to do in a general way.
[00:55] creationix has joined the channel
[00:55] creationix: _ry: Thanks to whoever fixed http to throw exceptions again
[00:55] creationix: I love my stack traces!!
[00:56] _announcer: Twitter: "Node.js: submitted by  DjDarkman  [link] [comment] http://bit.ly/bmoeMY #webdev" by Web Design Reddit. http://twitter.com/reddit_web_dev/status/14463314985
[00:56] halorgium: isaacs: perhaps
[00:56] isaacs: halorgium: but if you can maybe flesh out the idea a bit mroe explicitly, feel free to post an issue.
[00:57] technoweenie: man most shit from twitter is junk
[00:57] halorgium: isaacs: yer, still getting to grips with npm itself
[00:57] halorgium: technoweenie: s/twitter/the internet/
[00:57] isaacs: halorgium: at least post an issue so the idea isn't lost.  i work at a startup, my girlfriend's family is meeting my family this weekend, and then i'll be in mexico for a week.  so, i can pretty well assure as far as my mental log is concerned, this is all off the record.
[00:58] _announcer: Twitter: "Node.js goodies: http://wp.me/pFcGJ-2G" by Cory Flanigan. http://twitter.com/seeflanigan/status/14463432020
[00:58] halorgium: heh, downgraded node and npm does weirdness
[00:58] halorgium: required: >=0.1.93
[00:58] halorgium: actual: v0.1.93
[00:58] isaacs: hm... weird?
[00:58] isaacs: that sounds like a bug
[00:59] isaacs: engine version management is not handled entirely properly.
[00:59] mscdex: maushu: the end quotation mark is getting included in links at the end of a tweet
[00:59] rra has joined the channel
[00:59] technoweenie: mscdex: that might just be your irc client
[00:59] maushu: What quotation mark?
[00:59] mscdex: it's freenode's web client ;-)
[00:59] technoweenie: ok, its freenode's web client
[01:00] mscdex: the one after the first url
[01:00] maushu: Exactly.
[01:00] halorgium: inimino: is it because of the 'v'?
[01:00] maushu: Hmm.
[01:00] mattly: just because it's freenode's client doesn't mean it isn't shitty :p
[01:00] halorgium: oh, he left...
[01:00] inimino: halorgium: is what?
[01:00] technoweenie: you could separate the tweet from the author with a -- or something
[01:00] halorgium: inimino: sorry, was talking to isaacs
[01:00] technoweenie: so you dont have anything brushing up against any characters in the tweet
[01:01] halorgium: he was the closest i^G ;)
[01:01] maushu: I wonder if I can place a special character between the link and ".
[01:01] inimino: oh, I see
[01:01] technoweenie: twitter: omg omg http://url -- by author http://twitter/permalink
[01:01] technoweenie: hell, leave the author out you can get that from the twitter permalink
[01:01] inimino: ACTION will be sure to ask isaacs about the 'v'
[01:01] halorgium: inimino: ;)
[01:01] halorgium: technoweenie: just make it multiline
[01:01] _announcer has joined the channel
[01:02] halorgium: with all the metainfo!!! ;)
[01:02] halorgium: actually, json inspect!
[01:02] technoweenie: sure, display the location and annotation info too
[01:02] mscdex: no multiline :P
[01:02] halorgium: mscdex: come on, we're all ignoring it anyway :P
[01:02] _announcer: Twitter: "Testing urls in node.js announcer. http://www.graphnode.com/" -- Graphnode. http://twitter.com/graphnode/status/14463653830
[01:02] maushu: Ah! It works!
[01:02] mscdex: lol still a end quote
[01:02] saikat has joined the channel
[01:02] mscdex: oh i see
[01:03] mscdex: what did you end up using?
[01:03] maushu: \u000f
[01:03] mscdex: ah
[01:03] aconbere: does someone have a reasonable twitter list of node folks in it?
[01:04] maushu: aconbere, see node.js followers?
[01:04] maushu: http://twitter.com/nodejs/followers
[01:04] halorgium: does _ry actually use that?
[01:04] halorgium: or own it?
[01:04] maushu: No idea.
[01:05] maushu: I think so.
[01:05] aconbere: maushu: but that's not a 
[01:05] aconbere: "list"
[01:06] maushu: I accidentally the list.
[01:08] creationix: Woot!, http reverse proxy in node, that was much easier than trying to make my own protocol
[01:09] maushu: creationix, lazy way, eh?
[01:09] maushu: Besides, you could've just used JSON.
[01:10] maushu: { headers, body } and so on.
[01:10] creationix: I had actually designed a custom binary protocol that's more effecient than even json
[01:10] creationix: the problem is then you have to do your own framing and deframing in js code
[01:10] creationix: turns out it's a lot slower than just using the built-in http parser
[01:11] jedschmidt has joined the channel
[01:11] creationix: and json sucks for binary bodies
[01:12] jedschmidt_ has joined the channel
[01:13] creationix: I'm really excited for node v0.4.0 when we will be able to simply pass the fd to a child process and skip all the proxy business completely
[01:15] maushu has joined the channel
[01:17] mau2 has joined the channel
[01:22] Tim_Smart: creationix: I have been playing with node-router, and made a few local improvements. Do you want me to fork and push them?
[01:24] mau2: creationix, for binary bodies I would just send a flag like saying "the next <size> is binary" <binary data here> "data is over".
[01:24] mau2: Basically the socket would shift between binary and text.
[01:25] saikat has joined the channel
[01:29] mattly has joined the channel
[01:31] _announcer: Twitter: "Almost done with node-oauth2. Githubbing tomorrow. #nodejs" -- Ryan Fairchild. http://twitter.com/unscene/status/14465115426
[01:35] tmpvar has joined the channel
[01:37] scudco has joined the channel
[01:41] siculars has joined the channel
[01:43] stepheneb has joined the channel
[01:44] polotek has joined the channel
[01:44] jbrantly1 has joined the channel
[01:46] creationix: Tim_Smart: sure
[01:46] creationix: mau2: yeah, I did basically that, but it's still way slower
[01:48] rtomayko has joined the channel
[01:48] JimBastard has joined the channel
[01:49] tmpvar: whatup
[01:50] JimBastard: pooped um
[01:51] mjr_ has joined the channel
[01:52] polotek: creationix: just reading back in the logs about the binary vs json stuff
[01:52] polotek: did you look at the mongo BSON stuff at all?
[01:54] colincampbell has joined the channel
[01:54] colincampbell has left the channel
[01:55] creationix: polotek: I did, but I didn't need anything that fancy
[01:56] creationix: the problem was that doing the framing in js was just not as fast
[01:56] creationix: I'm sure if my protocol was implemented in hand optimized c code like _ry's http parser, then it would have been much faster
[01:57] polotek: word
[01:58] tmpvar: eh, fuck mongo
[01:58] tmpvar: i just sat through 10 hours of talks
[01:58] tmpvar: bored. lol.
[01:59] polotek: tmpvar: 10 hours on mongo? is there even that much to say?
[01:59] tmpvar: dude
[01:59] tmpvar: 8 tracks
[02:00] creationix: tmpvar: what conference?
[02:00] darkrho has joined the channel
[02:00] tmpvar: mongonyc
[02:00] creationix: ahh, that explains it
[02:01] Tim_Smart: Meh, I'm using couch atm
[02:05] creationix: Has anyone else experience writing reverse proxies
[02:05] creationix: I've got a super simple one using buffers all the way, and I'm only getting about 50meg/sec throughput while pegging both cpus
[02:06] creationix: hitting the app direct gives about 600megs/sec
[02:06] creationix: and pegs the cpus
[02:06] charlesjolley has joined the channel
[02:07] polotek: no idea about reverse proxies
[02:08] polotek: but in some tests I was running with Buffers it was taking a long time to load them with data.
[02:08] polotek: never bothered to find out why.  wasn't relevant at the time
[02:10] tlrobinson_ has joined the channel
[02:11] aaronblohowiak has joined the channel
[02:11] creationix: I am opening a new connection to the sub app on every connection to the parent server
[02:11] tlrobinson__ has joined the channel
[02:12] creationix: but I think that's required for most http
[02:12] creationix: hmm, that shouldn't matter for throughput tests anyway
[02:12] polotek: prolly
[02:12] polotek: that's how I would do it
[02:12] creationix: 99% of the time is streaming data
[02:14] creationix: hmm, how annoying: 
[02:14] creationix: ClientRequest.prototype.end does not take any arguments
[02:14] creationix: but the end event seems to send arguments
[02:14] creationix: I would think the two compatable 
[02:14] polotek: ?
[02:15] polotek: end event from ClientResponse you mean?
[02:19] isaacs_mobile has joined the channel
[02:19] mjijackson has joined the channel
[02:21] jedschmidt has joined the channel
[02:22] creationix: polotek: the end call you make on an http response object
[02:22] creationix: it throws an exception if you pass it any arguments
[02:23] creationix: but the end event you get when making an http client gives you an argument
[02:23] creationix: or so it seems
[02:23] creationix: I think the real issue is a binding problem
[02:23] polotek: is it the err argument?
[02:23] creationix: no, events don't have those
[02:23] creationix: just async functions
[02:24] creationix: doing this works:
[02:24] creationix: request.addListener("end", function () { child.end(); });
[02:24] creationix: but I want to be able to do this:
[02:24] creationix: request.addListener("end", child.end);
[02:24] polotek: oh I see
[02:24] polotek: wouldn't you have to bind it anyway?
[02:24] creationix: in the second case the "end" function can lose it's "this" depending on how it's written
[02:24] creationix: exactely
[02:25] creationix: I write functional style, and there is never binding issues there because you don't use "this"
[02:25] polotek: I love binding
[02:25] polotek: I do it in my spare time for fun
[02:25] polotek: ;)
[02:25] creationix: but functional vs OO is an argument for another day entirely
[02:26] polotek: yeah I don't have any insight into your issue
[02:26] markwubben has joined the channel
[02:26] creationix: well, manually binding it and passing the args seems to work for now
[02:26] _announcer: Twitter: "@tonibarbera: Yep, and planning to go even darker with node.js next :-)" -- Hernan Garcia. http://twitter.com/theprogrammer/status/14467934736
[02:26] creationix: moving on to something else
[02:28] tlrobinson_ has joined the channel
[02:30] isaacs_mobile: halorgium: don't know about your v, but itg could be that
[02:31] halorgium: isaacs_mobile: nah, i upgraded node and it worked
[02:32] halorgium: they were equal, and it didn't satisfy :/
[02:32] isaacs_mobile: Sounds like a bug. 
[02:32] isaacs_mobile: I don't test npm in anygthing but the latest node, though
[02:33] isaacs_mobile: Haven't gotten around to that nave testing thing yet. Or really any formal testing. 
[02:33] charlesjolley has joined the channel
[02:33] tmpvar: _ry, you around?
[02:33] JimBastard: sup aaronblohowiak 
[02:34] aaronblohowiak: JimBastard: i am wondering if all of these functions make sense
[02:34] aaronblohowiak: what does demodulize mean?
[02:34] charlesjolley has joined the channel
[02:34] JimBastard: i wanted to link up with you, you got some time?
[02:40] hellp has joined the channel
[02:41] Ned_: anyone know if a nice repl loop that can run in a script and listen for something like telnet connections to itneract with it ?
[02:41] Ned_: (I'm just looking for some way to conect to and debug my running process)
[02:41] Ned_: :-)
[02:42] halorgium: Ned_: repl now supports net
[02:43] halorgium: repl.start("node via TCP socket> ", socket);
[02:43] charlesjolley has joined the channel
[02:45] Ned_: halorgium: oh, like the core module ?
[02:45] isaacs_mobile has joined the channel
[02:45] Ned_: ACTION reads a bit ...
[02:45] Ned_: isaacs_mobile: is that on your phone or something ?
[02:46] isaacs_mobile: Yep.  Waiting at the airport. Sooooo bored.
[02:46] Ned_: heh
[02:46] Ned_: where are you off to ?
[02:46] Ned_: or meeting someone else ?
[02:46] isaacs_mobile: ACTION can't handle boredom.
[02:46] Ned_: heh, I'm not good with it either ... I have my iPhone for such occasions
[02:46] Ned_: :-)
[02:46] halorgium: isaacs_mobile: you don't have a laptop?
[02:46] isaacs_mobile: I'm picking up my mom. 
[02:47] Ned_: :-)
[02:48] tmpvar: awesome
[02:48] creationix: halorgium: can you connect to the repl socket with socat or something/
[02:48] creationix: I tried with the socat that homebrew installs and I couldn't get it to work
[02:49] halorgium: creationix: sure, or telnet or netcat
[02:49] creationix: well, I want it on a unix socket, not a tcp socket
[02:49] halorgium: ah, k
[02:49] creationix: but I didn't get it working with telnet either
[02:49] creationix: on a tcp socket
[02:50] halorgium: it just seemed to work for me
[02:50] halorgium: what went wrong?
[02:51] Ned_: Hmmm, 
[02:51] Ned_: I just got it working on a unix socket :-)
[02:51] Ned_: but err, it can't see variables in global scope ...
[02:51] creationix: well, socat complained that it didn't have readline
[02:51] Ned_: which is a little annoying ;-)
[02:51] creationix: telnet didn't seem to do much of anything
[02:51] halorgium: Ned_: you need to attach vars into scope
[02:52] creationix: halorgium: can you replace the scope with a new object?
[02:52] creationix: or just attach properties to it?
[02:52] halorgium: repl.start().scope.m = msg;
[02:52] WALoeIII has joined the channel
[02:52] halorgium: creationix: you can replace it i believe
[02:52] halorgium: or maybe not
[02:52] Ned_: halorgium: Hmmm, is that documented somewhere ?
[02:52] halorgium: Ned_: on the api.html
[02:52] Ned_: oh, I see
[02:52] Ned_: ACTION keeps reading
[02:52] Ned_: it's just further down ;-)
[02:52] Ned_: thanks
[02:53] creationix: yeah, the docs are pretty good on this one, just didn't work for me for some reason
[02:54] Ned_: halorgium: that's slightly weird syntax
[02:54] Ned_: doesn't reply.start().scope.var = var; 
[02:54] Ned_: actually start the repl ?
[02:54] halorgium: yes
[02:54] Ned_: right, oh I suppose you can do
[02:54] Ned_: var repl = rply.start()
[02:54] halorgium: the start isn't blocking or anything ;)
[02:54] Ned_: repl.scope.foobar = blah
[02:54] halorgium: yes
[02:54] Ned_: etc ?
[02:54] Ned_: right :-)
[02:55] Ned_: ACTION is typing slightly ahead of where he's thinking ;-)
[02:55] Ned_: must speed up brain ...
[02:55] creationix: hmm, telnet is working for me today, now to figure out how to copy "global" into the repl scope
[02:56] sechrist has joined the channel
[02:56] Ned_: creationix: let me know if you find a nice way of doing that :-)
[02:56] creationix: Ned_: sure thing
[02:57] Ned_: Ahhh, so I'm listening on a socket
[02:57] Ned_: then using:
[02:57] polotek: creationix: couldn't repl be modified so it would optionally take a scope object on creation?
[02:57] Ned_: socat READLINE ./console
[02:57] polotek: not suggesting you do it
[02:57] Ned_: that's working nicely
[02:57] polotek: just speculating
[02:57] creationix: Ned_: 2010/05/21 19:57:35 socat[23000] E unknown device/address "READLINE"
[02:58] creationix: I think my socat is neutered 
[02:58] creationix: Ned_: which OS/version are you using?
[02:59] Ned_: Ubuntu Lucid
[02:59] Ned_: creationix: ^^
[02:59] Ned_: creationix: well, you can just use
[02:59] creationix: I see
[02:59] Ned_: socat stdin ./console
[02:59] Ned_: which won't have readline, but should still work
[02:59] alexiskander has joined the channel
[03:00] halorgium: just wrap it in rlwrap as well ;)
[03:00] creationix: sweet, that worked! rlwrap socat stdin ./repl 
[03:01] Ned_: :-)
[03:01] Ned_: creationix: what os/ver you using ?
[03:01] creationix: OSX 10.6 with homebrew's socat
[03:02] Ned_: right
[03:02] Ned_: bah @ macs :p
[03:02] creationix: tell me about it
[03:02] creationix: I miss my linux
[03:02] Ned_: :-)
[03:02] tmpvar: yes
[03:02] Ned_: why don't you have some linux ?
[03:03] aurynn has joined the channel
[03:03] creationix: it doesn't run well on my mac
[03:03] creationix: and I need some of the mac programs for work
[03:03] polotek: aww man. mac bashing is gonna make me bail on you guys
[03:03] creationix: macs are cool, the sometimes I just miss the linux command-line tools
[03:03] halorgium: ACTION bashes polotek directly!!
[03:04] creationix: I'd gladly use either over windows
[03:04] polotek: halorgium: I'm fine with that.
[03:04] _announcer: Twitter: "@ryah great Yahoo presentation and great work with nodejs.  Thanks for being honest about where it needs improvement, keep up the good work!" -- Marc Harter. http://twitter.com/wavded/status/14469881068
[03:04] creationix: in fact I haven't used windows since before vista was released
[03:04] polotek: no need to bring windows into this
[03:04] polotek: just switched jobs and they won't let me use a mac
[03:04] KungFuHamster: use the tools you like
[03:04] polotek: it's seriously the only major downside to the new gig
[03:04] KungFuHamster: unless work forbids it
[03:05] polotek: true that mac isn't quite as flexible with providing unix tools
[03:06] polotek: but I have yet to be completely stumped by anything
[03:06] jwm: hehe
[03:06] polotek: some things are just more of a pita than you would want
[03:06] jwm: I just learned how to do a real maximize window in macos
[03:06] jwm: hold down shift and click +
[03:07] polotek: jwm: meh, just get a bigger monitor. maximize is overrated
[03:07] jwm: no, it really isn't
[03:07] jwm: and I've got a 42" and a 23"
[03:07] Ned_: ACTION was just looking at 30" cinema displays ... Mmmmmm ....
[03:07] jwm: dual screen heh
[03:07] creationix: Ned_: I got global passing in, but get strange eval errors now
[03:07] mattly: i use fill-screen whenever I can, there's a SIMBL plugin for that
[03:07] Ned_: creationix: how did you do it ?
[03:07] Ned_: I tried
[03:07] jwm: well just hold down shift
[03:07] Ned_: .start().scope = global
[03:07] Ned_: but that was made of fail
[03:07] jwm: why not maximize windows?
[03:07] jwm: what do I need to see my background around my browser for?
[03:08] jwm: and I have transparent terminals for that hehe
[03:08] jwm: anyone know of some cool jquery animated sites?
[03:08] _announcer: Twitter: "man, watching this Node.js intro & didn't realize that accessing from Ram & L1-2 cache is such a huuuuge difference than accessing the drive" -- Bigdaddy. http://twitter.com/djbigdaddy/status/14470089194
[03:08] jwm: looking for design ideas
[03:08] jwm: er I'm in node channel
[03:08] jwm: lol
[03:08] creationix: Ned_: https://gist.github.com/bef7f5bed75f75ae9afe
[03:08] Ned_: ta
[03:08] aconbere: Apple just wouldn't sell me a small laptop with a modern processor
[03:09] creationix: no, I shallow copied global onto scope
[03:09] aconbere: they still wont :(
[03:09] Ned_: HMmm, so is there any easy way to work out what methods an object has ?
[03:09] aconbere: but I'm very happy with my linux laptop
[03:09] jwm: I like my mac mini
[03:09] jwm: makes no sound, no heat
[03:09] jwm: no footprint
[03:09] jwm: hehe
[03:09] Ned_: creationix: nice
[03:09] creationix: jwm: my mac mini makes a nice monitor stand too
[03:09] Ned_: actually, that might just be answering my other question I just had ;-0
[03:10] jwm: creationix: mine would crush the poor thing
[03:10] jwm: hehe
[03:10] creationix: I figure the metal case is pretty tough
[03:10] jwm: I have 2 desks right now to hold the two monitors
[03:10] creationix: and the thing is dense inside
[03:10] jwm: but I think I am going to mount the 42" up high
[03:10] creationix: jwm: ahh, I just have a 24" dell lcd
[03:10] jwm: those are nice creationix 
[03:10] jwm: damn LCD price fixing
[03:11] Ned_: creationix: yeah, I have one of those too ... and a 20" 4:3 beside it
[03:11] jwm: I hope that crap stops
[03:11] jwm: LCD and ram price fixing 
[03:11] creationix: so is there a workaround the crazy eval error?
[03:11] creationix: EvalError: The "this" object passed to eval must be the global object from which eval originated
[03:11] creationix: sounds like repl is using a new context
[03:12] creationix: which I guess it has to do to hide the old globals
[03:16] creationix: Ned_: you need to not copy eval, it breaks stuff
[03:16] creationix: if (key === 'eval') return;
[03:16] creationix: the gist is updated
[03:16] Ned_: heh :-)
[03:16] Ned_: ta
[03:16] Ned_: I'm still running with my code that just copies a few things in :p
[03:16] creationix: that's safer
[03:16] Ned_: yeah ,I figured
[03:18] creationix: Ned_: heh, global doesn't even have variables declared at the top level
[03:18] creationix: they're not global, they're technically "local" to the file
[03:18] Ned_: right ...
[03:18] Ned_: :-(
[03:18] creationix: I'm pretty sure there is no way to get all variables in scope
[03:19] _announcer: Twitter: "Understanding node.js (Felix GeisendÃ¶rfer) http://ow.ly/17spJ7" -- Javascript News. http://twitter.com/del_javascript/status/14470656037
[03:19] carsonm has joined the channel
[03:19] halorgium: creationix: bruce-force it!!
[03:20] creationix: halorgium: up to how many letters?
[03:20] halorgium: creationix: i'm thinking 20 ;)
[03:20] creationix: hmm, so my repl will start after about 10 years of tight eval loops
[03:20] halorgium: yip
[03:24] polotek: creationix: so wait, how come repl.scope doesn't work?
[03:24] creationix: repl.scope works I think
[03:24] creationix: it's just that global doesn't have any variable that's declared with a var statement
[03:24] creationix: regardless of it's level
[03:25] Ned_: micheil: about ?
[03:26] polotek: oh I see
[03:27] micheil: hubba what?
[03:27] polotek: because it uses with(scope) that's no good
[03:27] micheil: ACTION is off.
[03:27] Ned_: heh
[03:27] JimBastard: fuck this project is hard
[03:27] Ned_: right
[03:27] Ned_: I had questions about websocket-server
[03:27] Ned_: ;p
[03:27] JimBastard: the code is easy, but i cant figure out a good name
[03:27] JimBastard: uggggggh
[03:27] Ned_: but I can catch you later
[03:27] Ned_: :_)
[03:28] micheil: Ned_: shoot me an email: micheil@brandedcode.com 
[03:28] polotek: JimBastard: too many g's.  keep looking
[03:28] Ned_: micheil: righto
[03:28] micheil: I'll reply in about 6 hours
[03:28] creationix: polotek: I don't think it uses with, that wouldn't hide the global scope
[03:28] micheil: have to go out.
[03:28] Ned_: micheil: sounds good
[03:28] Ned_: :-)
[03:28] Ned_: cheers
[03:28] creationix: I'm pretty sure it a real new scope using the stuff in the script module
[03:28] polotek: repl.js uses with
[03:28] polotek: unless I'm looking at the wrong part
[03:29] creationix: It may to do something else
[03:30] creationix: *something else with with
[03:31] polotek: I should go back to beating my head against my own problem :)
[03:33] polotek: maybe the repl should accept a "load" command that would load and eval a file
[03:33] polotek: then you can put init stuff in there
[03:33] polotek: that's what I usually find myself wanting
[03:33] creationix: or reuse the current scope
[03:34] creationix: instead of a sandbox
[03:34] polotek: take a look in repl.js
[03:34] polotek: the code is pretty straight forward
[03:35] polotek: try exporting that REPLServer and using it directly in your global scope.
[03:35] polotek: no idea what kind of side effects that would have
[03:35] polotek: but it's sure to be entertaining at least
[03:35] creationix: yeah, I intend to improve and/or rewrite the repl some day, it's got a LOT of things that bother me
[03:36] bpot has joined the channel
[03:36] mscdex: ACTION continues to dominate the Asterisk Manager Interface >:-)
[03:36] PyroPete1 has joined the channel
[03:37] polotek: if you wrote a small C++ binding you cold also pass your global into the constructor and bind it into the context
[03:37] polotek: but if you did that a kitten would surely be murdered
[03:38] creationix: hmm, can't have dead kitties on my conscience 
[03:39] creationix: is it possible to get auto-complete when using rlwrap?
[03:40] creationix: Too bad readling is gpl, or we could just include it in node
[03:43] creationix: hmm, seems rlwrap can't dynamically do autocompletion
[03:45] JimBastard: awesome wrapping every single one of these ><
[03:45] JimBastard: https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date
[03:47] creationix: JimBastard: sounds like fun
[03:56] sechrist has joined the channel
[03:58] _announcer: Twitter: "Making time to tinker w/ node.js; so far really liking socket.io, kiwi; looking at mongoose, express, do & paperboy." -- Scott Trudeau. http://twitter.com/sstrudeau/status/14472586271
[03:59] chakrit has joined the channel
[04:00] _announcer: Twitter: "Hacking the night away on a #nodejs framework.  Who needs sleep?" -- Tim Caswell. http://twitter.com/creationix/status/14472679639
[04:03] smtlaissezfaire has joined the channel
[04:09] mjr_: creationix: soon we'll have readline with tab completion in JavaScript.
[04:10] mjr_: But for now, rl-wrappers can only tab complete things from history, if any.
[04:10] Ned_: Hmmm, is it possible to catch 'Stream is not writable' errors ?
[04:11] saikat has joined the channel
[04:12] creationix: Ned_: what's throwing that?
[04:12] Ned_: websocket-server
[04:12] Ned_: basically, it appears some sockets are timing out
[04:12] Ned_: but it's not removing them from the list
[04:12] creationix: if it's an event emitter you need to listen to the "error" event to catch it
[04:12] Ned_: then it tries to send them messages
[04:12] Ned_: yes, that's what I was diong ...
[04:12] creationix: all streams are event emitters
[04:12] Ned_: but it doesn't appear to be working
[04:13] Ned_: yes
[04:13] tlrobinson_ has joined the channel
[04:13] Ned_: oh well, I'll keep prodding away
[04:13] Ned_: :-)
[04:13] creationix: hmm, dunno
[04:13] _announcer: Twitter: "What's for dinner: node.js & YQL." -- douglasp. http://twitter.com/douglasp/status/14473297019
[04:13] creationix: this twitter announcer is kinda cool
[04:13] Ned_: heh
[04:13] Ned_: who wrote it ?
[04:13] Ned_: is it node ?
[04:14] mscdex: maushu wrote it
[04:14] Ned_: cool
[04:14] mscdex: in node
[04:14] mscdex: :-)
[04:14] Ned_: nice
[04:17] creationix: ACTION is finally watching http://developer.yahoo.com/yui/theater/video.php?v=dahl-node
[04:18] matthew_y: creationix, samesies 
[04:22] softdrink has joined the channel
[04:23] _announcer: Twitter: "Trying to build a project with #nodejs #couchdb & #Titanjs for an interview next week. JavaScript ftw?" -- Jason Hegyessy. http://twitter.com/hegyessy/status/14473780089
[04:25] _announcer: Twitter: "i wonder if the #nodejs bot picks up on this node.js comment\nQUIT "lol"" -- John Doe. http://twitter.com/sc2time/status/14473860591
[04:26] aaronblohowiak: what do you guys think of this: http://neversaw.us/2010/5/20/py-a-la-node/
[04:27] aurynn has joined the channel
[04:27] cloudhead: creationix: what kind of stuff are you working on?
[04:27] _announcer: Twitter: "node.js \r\n%n%r #nodejs ')}+" -- John Doe. http://twitter.com/sc2time/status/14473968563
[04:28] cloudhead: re your tweet
[04:29] smtlaissezfaire has joined the channel
[04:30] darkrho: is it a game?
[04:32] steadicat has joined the channel
[04:37] stevendavie has joined the channel
[04:41] wilmoore_ has joined the channel
[04:45] mscdex: omg twitterbot hax!
[04:46] mscdex: !so-last
[04:46] _announcer: I haven't yet received anything. Please try again later.
[04:46] mscdex: :(
[04:46] mscdex: !so-next
[04:46] _announcer: Time left for the next fetch: 00:15:32
[04:46] mscdex: !so-check
[04:46] _announcer: Sorry. Nothing new to announce.
[04:46] mscdex: lies!
[04:46] smtlaissezfaire has joined the channel
[04:51] iwasbiggs has joined the channel
[04:52] creationix: cloudhead: just another hack at making a web framework
[04:53] mikeal has joined the channel
[04:54] aaronblohowiak: creationix: your github profile still says Richardson, TX, USA
[04:54] aaronblohowiak: :-)
[04:54] creationix: yeah, so does my bank account, drivers's license and everything else
[04:54] creationix: I even have a mortgage there
[04:55] creationix: someday I'll finish moving
[04:55] aaronblohowiak: lol
[04:56] cloudhead: creationix: ok, just curious, cause I'm working on something too
[04:57] creationix: cloudhead: I'm trying to find the balance between the simplicity of something like sinatra and the nice conventions of something like rails
[04:58] creationix: I would go the crazy route and do something like fab, but I'm making this framework for a more general audience
[04:59] cloudhead: creationix: ok, we'll you'll probably be done sooner than me then : )
[04:59] creationix: doubt it, I'm going for a full stack this time
[04:59] creationix: will take a while
[04:59] polotek: creationix: I've thought about what makes frameworks good a lot too
[04:59] cloudhead: I'll be happy if I can actually recommend a framework to people who ask
[04:59] polotek: what I really want is something with really modular parts that talk through a (semi) standard api
[04:59] cloudhead: which seems to happen very often
[05:00] creationix: polotek: agreed
[05:00] polotek: all the pieces are composed through code rather than config files.  more like django
[05:01] cloudhead: creationix: ah well, tell me when you've got a readme/blurb about it, I don't want to duplicate work
[05:01] polotek: what would be awesome is to spend some time sketching out the pieces, how they're composed and what the interfaces are
[05:01] polotek: then different people could work on parts
[05:02] cloudhead: polotek: I'm going the inverse route, where the parts are stand-alone, and the framework *is* the api
[05:03] creationix: cloudhead: standalone how?
[05:03] polotek: cloudhead: that's not different from what I'm talking about. essentially there is a small framework "kernel" that glues a few basic components together
[05:03] polotek: the rest is composed by the user
[05:03] cloudhead: creationix: as in, they are their own libraries, useable without the framework
[05:04] creationix: ahh, I see
[05:04] creationix: very modular
[05:04] cloudhead: I'm building the libs first, then the framework
[05:04] polotek: express does a decent job of modularizing parts, but they are all still designed to work with each other rather than used independently on their own merits
[05:04] cloudhead: yea
[05:06] cloudhead: express doesn't feel right though
[05:07] polotek: cloudhead: agreed, I don't like the req/res api
[05:07] creationix: polotek: req/res api?
[05:07] creationix: you mean like node's http callback?
[05:07] creationix: (I haven't used express much)
[05:07] polotek: the way it represents a request and response object
[05:08] polotek: and the methods on those
[05:08] polotek: don't really sit well with me
[05:08] cloudhead: yea
[05:08] creationix: oh, he wraps it in his own api right?
[05:08] polotek: creationix: yeah
[05:08] polotek: I don't mind the node version as a low level starting point to build on
[05:08] polotek: but express changes that without adding much
[05:09] polotek: or maybe I haven't dug into what it adds
[05:09] polotek: but it's also not documented well
[05:09] creationix: I agree and I prefer the node level, but I'm starting to be convinced that the node layer should be hidden from end users by a framework
[05:09] polotek: I don't think it should be "hidden" per se.  Just that a framework could provide higher level utility modules
[05:09] cloudhead: creationix: well, there really is no reason they would want to access the req object directly, in the context of a framework
[05:09] polotek: when you don't want to work at that low level
[05:10] creationix: I used to agree, I'm not saying the framework should restrict access to the node layer, but it should provide a coherent, complete layer on top of it
[05:10] polotek: the key difference from other frameworks is I want to be able to *choose* my abstraction level and how it's configured
[05:10] cloudhead: yah
[05:10] cloudhead: or beside it
[05:11] creationix: yeah, beside is a better word, that way you know it's not away from reach
[05:12] matthew_y has joined the channel
[05:12] softdrink has joined the channel
[05:12] creationix: node-router is basically candy on top of node's api with some sinatra-like routing
[05:12] polotek: sidebar: does anyone know how to format a chunked response correctly?
[05:12] polotek: specifically to be delivered to curl
[05:13] polotek: so you don't get that "error in chunky parser" crap
[05:13] polotek: creationix: yeah I like node router
[05:13] polotek: it's simple and useful
[05:13] polotek: but all it does is smooth some rough edges
[05:13] polotek: doesn't do anything that can't be absorbed and reasoned about easily
[05:14] tmpvar has joined the channel
[05:14] creationix: hmm, maybe I should just polish node-router instead of writing a new one?
[05:14] polotek: but consider a framework that recognizes an api for *any* router/dispatcher
[05:15] polotek: because the other one I want is one that maps to a persistent tree structure
[05:15] polotek: so /foo/bar maps to the bar object that is a child of the foo object in your node tree
[05:15] polotek: where "node" refers to lightweight tree nodes
[05:15] polotek: you could keep the full tree for a decent sized site fully in memory
[05:16] polotek: each node would serve as a reference to a persisted data model
[05:16] polotek: object
[05:16] aaronblohowiak: polotek: polotek  that is like jsonpath
[05:16] polotek: aaronblohowiak: yeah it could definitely use jsonpath to implement
[05:17] polotek: but that implementation wouldn't be important to the framework
[05:17] cloudhead: polotek: are you talking about the routing table?
[05:17] polotek: it just knows how to do if(route.match(req.url)
[05:17] mikeal has joined the channel
[05:17] polotek: or something similar
[05:17] creationix: interesting
[05:18] inimino: polotek: I did something that builds tree-like dispatching as it goes, maybe a similar idea
[05:18] aaronblohowiak: polotek: so i can only route on the url, not the http method or cookies?
[05:18] polotek: cloudhead: routing table?
[05:18] temp01 has joined the channel
[05:18] polotek: don't know terminology for lots of things.  :)
[05:18] cloudhead: polotek: like, url to action mappings
[05:19] polotek: inimino: the router just maps to the node
[05:19] polotek: the node has handlers for http methods
[05:19] aaronblohowiak: polotek: http://en.wikipedia.org/wiki/Routing_table
[05:19] aaronblohowiak: polotek: right, but your route.match(req.url) would not =)
[05:19] inimino: polotek: oh, ok, maybe a slightly different idea, then
[05:20] inimino: mine is more like a decision tree
[05:20] polotek: amounts to the same thing
[05:20] aaronblohowiak: inimino: link?
[05:20] polotek: but my old company build their internal cms around this idea
[05:20] polotek: and I really like the way it worked
[05:20] inimino: each level looks at something about the request (uri, query string, whatever) and then goes to the next level, which is either another decision, or a handler
[05:21] polotek: cloudhead: not sure if this is related to what I'm talking about
[05:21] polotek: conceptually it's a similar idea though
[05:21] inimino: aaronblohowiak: http://boshi.inimino.org/3box/nhttpd/ -- probably kind of incomprehensible code, needs a rewrite in half as many lines, I think
[05:21] aaronblohowiak: who needs routing tables when you can have an array of regular expression, function tuples ? ;)
[05:22] inimino: well, sometimes you want to do more sophisticated stuff
[05:22] polotek: inimino: could do it that way, but that would a lot of processing for routing
[05:22] polotek: instead you take the full url i.e. /foo/bar/view
[05:22] aaronblohowiak: inimino: ah, this is pretty perl-y
[05:22] polotek: take off the last part and that's the handler
[05:22] inimino: polotek: potentially, but it can be optimized all to hell as necessary
[05:23] polotek: the rest of the path /foo/bar should map directly into the tree
[05:23] polotek: if it doesn't that's a "not found"
[05:23] polotek: so it'll fall back
[05:23] polotek: could even fall through to a more traditional pattern matching router
[05:23] aaronblohowiak: inimino: this is actually, pretty interesting. neat ideas.
[05:23] inimino: polotek: ah, I see
[05:24] creationix: I like the fall-through idea
[05:24] creationix: my most common use case is to have static file server at the first layer
[05:24] creationix: and if it 404's, then fall through to something else
[05:25] inimino: yeah, fall through is really useful
[05:25] polotek: creationix: exactly
[05:25] creationix: the problem with fall through is that sometimes you want layers in front, but they're slow
[05:25] creationix: I don't want to have to stat for a file for each request
[05:26] aaronblohowiak: i like to think of the url like a filesystem and you can mount to various points on the filesystem.  if there is no FUSE handler, fall back to filesystem
[05:26] aaronblohowiak: err, physical filesystem
[05:26] polotek: how do the static web servers optimize this?
[05:26] creationix: but unix mounts will take over the mount point right?
[05:26] inimino: creationix: example?
[05:26] polotek: apache nginx
[05:27] creationix: I mean, I can optimize the problem away, but I don't want to have to
[05:27] aaronblohowiak: creationix: correct.
[05:27] creationix: Also, I want the framework to handle stuff like caching smartly
[05:27] aaronblohowiak: creationix: so you want to memoize the routing lookup =)
[05:27] creationix: some stuff can be caches much longer that others
[05:27] polotek: once the static router module is written, you wouldn't have to :)
[05:27] creationix: well, I don't want to memoize it all the time
[05:28] inimino: that's pretty much what I do, memoize it all the time
[05:28] creationix: maybe I want to drop in a static file in front of some action while the server is running
[05:28] creationix: if it's memoized, then the static file will never be seen
[05:28] aaronblohowiak: creationix: touch tmp/reload_routes.txt
[05:28] aaronblohowiak: ;)
[05:28] creationix: I guess you could watch the folder for changes and break the cache when a file appears
[05:28] inimino: well, changes to the routing can invalidate the cache
[05:29] polotek: inimino: yeah that's what I was thinking
[05:29] creationix: of course watchfile is useless on mac, it's just a 5 second poll
[05:29] inimino: well, you can poll when a request comes in
[05:30] creationix: I often employ short lived caches
[05:30] inimino: in other words, do the stat just before you serve the file, or decline to serve
[05:30] creationix: that way a hot server will pull most stuff from cache, but an idle server will get fresh data every time
[05:30] inimino: yeah
[05:31] inimino: store the stat data for 5s or so
[05:31] polotek: creationix: how does it expire?
[05:31] creationix: but then you get slow responses when the server isn't already warmed up
[05:31] polotek: set intervals?
[05:31] creationix: polotek: just a setTimeout
[05:31] creationix: in the same code that set the cache
[05:31] creationix: closures rock!
[05:31] polotek: it would have to be a rolling expire so you don't have spikes and valleys
[05:31] aaronblohowiak: creationix: i took a stab at that read through cache concept that we had talked about previously, but i employ a single setTimeout to sweep http://github.com/aaronblohowiak/JavaScript-datastructures/blob/master/read-through-cache.js
[05:31] inimino: instead of a setTimeout I just store the stat data, and when it was stored
[05:32] inimino: and then check its freshness before using it
[05:32] creationix: inimino: that works too
[05:32] inimino: it does mean you're doing an extra timestamp comparison on every request, though
[05:32] creationix: probably faster in the long run
[05:33] unomi has joined the channel
[05:33] creationix: I would think the js date function is faster than the libev timer
[05:33] creationix: the external setInterval would be the most lightweight though
[05:33] inimino: yeah, as it turns out most requests need the timestamp for logging anyway
[05:33] creationix: inimino: esactely
[05:33] creationix: *exactely
[05:34] inimino: what I haven't figured out is how really to nicely do stuff like ... well, logging
[05:34] inimino: if you don't want to build it in, but want it to be composable "middleware"
[05:34] inimino: or authentication
[05:35] cloudhead: inimino: I'm using a pub/sub model
[05:35] cloudhead: for logging
[05:35] inimino: I'm kind of hoping some sort of standard API would arise for doing middlewarey-type stuff
[05:35] inimino: cloudhead: hm...
[05:35] inimino: that sounds nicely decoupled
[05:35] creationix: pub/sub in the generic sense like EventEmitters?
[05:35] cloudhead: so all relevant objects are event emitters
[05:36] cloudhead: yea
[05:36] creationix: event hooks are a great way to do stuff like that
[05:37] cloudhead: yea
[05:37] inimino: hm... that sounds nice
[05:37] creationix: but how does the event listener modify the emitter?
[05:37] creationix: like for an authentication middleware
[05:37] cloudhead: modify?
[05:38] creationix: it may want to stop the request, or change it's path
[05:38] cloudhead: oh no, I'm just doing it for logging
[05:38] creationix: logging is easy, it's passive
[05:38] cloudhead: yea hmm
[05:38] inimino: yeah, that's true
[05:38] cloudhead: when emitting, the emitter could pass itself
[05:38] cloudhead: as an argument
[05:38] creationix: true, but in a non-blocking world, that's not enough
[05:38] polotek: that sounds dangerous
[05:39] inimino: I think emitting and having handlers cancel default is kind of not so nice
[05:39] creationix: it would need to wait to see if the listener wanted it to do anything
[05:39] creationix: so pass in a callback too
[05:39] creationix: or just a callback perhaps
[05:39] SamuraiJack has joined the channel
[05:39] cloudhead: hmm
[05:39] polotek: for middleware that could change things I think the wrapping pattern makes more sense
[05:40] inimino: wrap the request/response objects?
[05:40] creationix: an async wrap where you return the modified or unmodified object in the callback
[05:40] inimino: and override whatever you need to?
[05:40] creationix: and each layer waits on the callback
[05:40] polotek: plus if you use events the request is still running until whenever the handler code gets tot he point where it stops it
[05:40] polotek: rather than stopping at the site of hte hook
[05:40] aaronblohowiak: authentication is not a "cross cutting concern" (though authorization is.)  event emitting is for passive notification, it sounds like what you want is an implementation of the command pattern: http://en.wikipedia.org/wiki/Command_pattern
[05:40] inimino: so the middleware just has first crack at the request/response
[05:41] creationix: aaronblohowiak: right, I always misuse those words
[05:41] creationix: though authentication is often a pain when trying to make an api 100% restful
[05:42] polotek: creationix: how so?
[05:42] aaronblohowiak: creationix: :-)  in particular, authentication serves as a gateway to further processing, so I would even say it is part of a: http://en.wikipedia.org/wiki/Chain_of_responsibility_pattern
[05:42] polotek: aaronblohowiak: agreed
[05:43] aaronblohowiak: things get really really tricky when you talk about authentication and capability systems =/
[05:43] creationix: polotek: with authentication you're not getting or changing a resource, you're performing an action
[05:43] polotek: oh you mean the actual act of authenticating the client
[05:43] polotek: rather then checking auth on access to a resource
[05:43] cloudhead: creationix: you're creating a session though
[05:44] creationix: polotek: right, as aaronblohowiak said, authorization is what you do at every request once the user is authenticated and you know who they are through the session
[05:44] polotek: if the auth workflow is the only thing that breaks the rest paradigm I think you're doing really well
[05:44] creationix: I guess reading the session cookie is considered authentication, but that's different
[05:45] polotek: yeah I wasn't getting them confused.  I was wondering if there was something you were trying to do with authentication that I was missing
[05:45] cloudhead: has anyone attempted to formalize an async middleware api?
[05:45] creationix: I remember tons of discussion months ago
[05:46] cloudhead: yea
[05:46] cloudhead: don't know if anything came out of it
[05:46] inimino: there was some talk around the time of (fab) being new
[05:46] creationix: I think jsgi was the closest thing to a winner, is that right?
[05:46] cloudhead: isn't jsgi sync though?
[05:46] polotek: that ejsgi stuff looked nice
[05:46] creationix: well, the async version of it
[05:46] polotek: never tried to use it though
[05:46] creationix: maybe it had a code name
[05:46] inimino: ACTION hasn't looked at any of this
[05:47] polotek: search for ejsgi on the commonjs mailing list
[05:47] cloudhead: yea, it's sync
[05:47] cloudhead: #fail
[05:47] creationix: polotek:  that sounds right
[05:47] inimino: yeah, I saw some of the discussions go by, just didn't read any of the code
[05:47] tlrobinson: JSGI supports async via promises
[05:47] tlrobinson: i called it AJSGI, it's not completely formalized yet
[05:47] inimino: ah, right
[05:47] polotek: but...
[05:47] inimino: and streaming?
[05:48] tlrobinson: yes
[05:48] polotek: why exactly do we want middleware to be async?
[05:48] inimino: ok
[05:48] inimino: polotek: well, say it's gzip middleware
[05:48] tlrobinson: polotek: if the app is async the middleware must be async
[05:49] creationix: restricting middleware to sync in node makes it useless for many cases
[05:49] inimino: the trouble is "middleware" could be anything, but there are things like authn authz that can just look at the request headers and make a decision
[05:49] polotek: well I'm thinking of the django model
[05:49] polotek: the middle runs and completes before it gets to the app layer
[05:49] inimino: and there are things like filters, that have to touch every byte of the req or resp body
[05:49] polotek: and there's a parallel "unwrapping" where it flows back out the middleware layers
[05:49] creationix: and some things need to read external data through non-blocking io
[05:50] creationix: polotek: correct, but each layer would have to be callback based
[05:50] creationix: and streaming cuts through that
[05:50] polotek: streaming does cause issues
[05:50] inimino: you can also just pass around stream abstractions
[05:51] creationix: true, add async layers to the stream chunk events
[05:51] inimino: right
[05:51] polotek: inimino: that's what I was thinking
[05:51] polotek: it's a pattern I've been thinking about formalizing
[05:51] polotek: I'm doing it in evented-twitter
[05:52] creationix: that would work, though it sounds like an awful lot of overhead and doesn't let you do anything in parallel within a request
[05:52] inimino: but then you're sort of committing to something that's at a higher level than raw node req/resp API, so it's harder to standardize
[05:52] creationix: it's nice that node can serve large numbers of requests at the same time, but I also want each single request to come back asap
[05:52] joshbuddy has joined the channel
[05:52] polotek: http://github.com/polotek/evented-twitter/blob/master/lib/evented-twitter.js#L220
[05:53] creationix: inimino: I think the simple onion of async functions is simple enough, and onion per chunk event too
[05:54] polotek: so it works like traditional middleware in that you have it wrap the underlying app response
[05:54] polotek: if the app wants to stream it hooks into it
[05:54] inimino: yeah, that looks nice polotek 
[05:54] polotek: processes chunks and re-emits
[05:54] inimino: the only issue is trying to get everyone that's going to use your middleware API to agree on a stream API too
[05:55] creationix: ahh, so it's not a wrapper per chunk emit, but a rechunking of the stream
[05:55] polotek: creationix: correct
[05:55] creationix: much better
[05:55] polotek: inimino: yeah this isn't strictly analogous
[05:56] polotek: the TweetCollector has an api designed for the twitter domain
[05:56] creationix: the only thing missing is how would two middlewares that didn't  interact with eachother run in parallel?
[05:56] polotek: but there's no reason you can't say any wrapping middleware HAS to at least implement the normal stream api
[05:56] stagas has joined the channel
[05:57] creationix: "data" + "end" is pretty simple
[05:57] polotek: example of parallel middleware
[05:57] inimino: hm, I think I read some of this code before
[05:57] polotek: sorry if I'm obtuse guys.  I just don't get to noodle through this stuff very often
[05:57] polotek: at least not with people who actually care :)
[05:58] stagas: hi
[05:58] polotek: mean to put a "?" on the end of that.  creationix do you have an example?
[05:58] inimino: creationix: what kind of middleware would run in parallel?
[05:58] creationix: polotek: what if I had a middleware that gzipped the body and another that did a database lookup based on a header value
[05:58] creationix: the two are long running and can be run in parallel
[05:59] polotek: depends on what they need to do when they're io is done
[05:59] inimino: creationix: well, the db lookup could start when the request comes in... it doesn't need to see the body
[05:59] polotek: in my mind middleware has to be serial
[05:59] creationix: well, obviously anything rechunking the stream can't be parallel with anything else doing that
[05:59] polotek: so if you wanted to do something like this
[05:59] inimino: creationix: right
[05:59] polotek: you'd have to wrap them
[06:00] polotek: and only move to the next stage once they're both done
[06:00] creationix: and it's probably safe to do the same for the static parts of the request/response
[06:00] inimino: creationix: but anything that needs to touch the output of another middleware couldn't be parallel anyway
[06:00] polotek: inimino: right
[06:00] creationix: hmm, but maybe one middleware will change the stream based on the header modified by another middleware
[06:00] creationix: so nevermind
[06:00] creationix: forget my contrived example
[06:01] linuxsable has joined the channel
[06:01] polotek: creationix: you could use events to coordinate parallel middleware
[06:01] inimino: but something like a logging middleware could start an async INSERT on a database, while the request carries on
[06:02] polotek: but they would still have to all finish before invoking the app
[06:02] creationix: inimino: yes, and call the callback before the database comes back
[06:02] DracoBlue has joined the channel
[06:02] inimino: yes
[06:02] creationix: I winder if middleware could be used to implement routing and fallback
[06:03] creationix: then entire apps could be written from middleware stacks
[06:03] creationix: I would go for that
[06:03] mattly: creationix: that's what i've been working on actually
[06:03] polotek: well middleware is a bit of a misnomer anyway
[06:03] halorgium: creationix: you can pass a different function to the inner app
[06:03] qFox has joined the channel
[06:03] polotek: your routing path could lead to several app endpoints
[06:03] polotek: each "middleware" could be an app itself
[06:03] mattly: the thing i've been working on has no distinction between "middleware" and "endpoints"
[06:03] halorgium: this means that the inner app cannot directly call the real function
[06:03] creationix: ACTION will have to think about this for a while
[06:03] mattly: a request passes through a stack of functions
[06:04] inimino: hm
[06:04] mattly: a function can either respond, or hang a listener on an event for the response
[06:04] creationix: mattly: I like as long as it's fast
[06:04] halorgium: mattly: yes, my rack async did exactly this
[06:04] mattly: i need to do benchmarking
[06:04] polotek: mattly: we're on the same page
[06:04] creationix: yay
[06:04] mattly: and there's probably some sort of scenario i'm not thinking about
[06:04] inimino: mattly: so say you have a gzip filter in front of a static file server, what's the control flow?
[06:04] halorgium: mattly: it will be fast as long as you don't enforce people to have to proxy functions
[06:04] creationix: I think these layers are a good way to break the abstraction, now to make it fast
[06:05] steadicat has joined the channel
[06:05] creationix: s/break/break up/
[06:05] inimino: yes, benchmarking is premature, let's just make a nice architecture -- as long as it's not slow by design
[06:05] halorgium: inimino: http://github.com/halorgium/rack2/blob/master/examples.rb#L64 ;)
[06:05] mattly: it's written in coffeescript, but this is my little thing: http://github.com/mattly/neutrino
[06:05] halorgium: written in this style: http://github.com/halorgium/rack2/blob/master/procish.rb
[06:06] mattly: i need to update the actual js build
[06:06] creationix: I think as long as layers are able to short circuit parts, we're fine
[06:06] creationix: like don't bother rechunking a stream if you don't indent to modify it
[06:06] inimino: halorgium: got it
[06:07] mattly: inimino: basically your gzipper function would hang a listener on the data event for the responder
[06:07] polotek: mattly: so "send_body" is the common api
[06:07] mattly: and well on "begin"
[06:07] mattly: to alter the headers
[06:07] steadicat has joined the channel
[06:08] inimino: mattly: ok, makes sense
[06:08] stagas: mattly: nice licence
[06:08] stagas: :P
[06:08] mattly: heh
[06:08] polotek: so each middleware/wrapper has to catch "data" and re-emit "data"
[06:08] mattly: i need to work on this some more
[06:09] halorgium: polotek: they shouldn't need to
[06:09] creationix: ahh, so a caching filter could read a header/property describing how volitile a resource is and send headers/memoize accordingly
[06:09] polotek: a non modifying layer would simple have a passthrough
[06:09] inimino: it should be able to fall through, like creationix is saying, I suppose
[06:09] inimino: yes
[06:09] halorgium: polotek: the passthrough should be implied
[06:09] halorgium: a middleware should only wrap a function if it wants
[06:10] polotek: halorgium: so you're talking about wrapping at the function level?  rather than the whole request?
[06:10] polotek: in my head the gzipper becomes the app interface for all upstream middleware
[06:10] halorgium: polotek: a request is a series of events
[06:10] polotek: so it has to be have the same
[06:10] halorgium: and so is the response
[06:10] mattly: Neutrino makes no distinction between middleware and apps; a function can do one of the following:
[06:10] mattly: * modify the incoming request and punt to the next function
[06:10] mattly: * punt to the next function and do something asynchronously with the incoming request like log it somewhere
[06:10] mattly: * give the request a callback when a response is being constructed and punt the request to the next function
[06:10] mattly: * do nothing and punt to the next function
[06:10] mattly: * respond to the request
[06:11] mattly: basically that's about anything I think you'd want to do
[06:11] polotek: mattly: word
[06:11] creationix: ok guys, I'm sold on the idea
[06:11] inimino: ok, so a middleware/app is a set of event handlers, which have access to the 'next' handler in the stack
[06:12] creationix: yeah, that way they can do async stuff if needed
[06:12] inimino: and basically routing constructs a list of these
[06:13] polotek: it should probably asymetrical
[06:13] inimino: and the actual event handlers are the composition of all those functions
[06:13] polotek: so you can wrap the request but you don't need the same layers on the way out
[06:13] polotek: over vice versa
[06:14] creationix: yeah, each middleware can touch 4 points (static in, static out, stream in, stream out)
[06:14] creationix: and the ones it doesn't specify just pass through implicity
[06:14] inimino: static ?
[06:14] creationix: anything not streaming like headers
[06:14] polotek: as in not streamed
[06:15] inimino: ok
[06:15] mattly: the inbuilt router in neutrino takes an object of routes as keys mapped to functions / arrays of functions
[06:15] creationix: of course the headers and stream would need to be synced per layer
[06:15] mattly: it's conceptually similar to rack::map
[06:15] mattly: in that it covers the 90% case of routing /foo to something but not doing pattern matching, request method matching, etc
[06:16] inimino: yeah
[06:16] creationix: mattly: so there is a different stack per route possibly?
[06:16] mattly: yes
[06:17] inimino: I'd really like to see something interoperable here so we can try N different routing ideas without having to write N different authn, static file server, ... modules
[06:17] polotek: yep
[06:17] polotek: nice
[06:17] creationix: but you can also wrap several routes in common layers too?
[06:17] creationix: so maybe "/" gets gzip and cache, but only "/admin" gets auth
[06:17] mattly: creationix: basically i built a prototype of something in rack, where i was building apps based on JSON being loaded out of couchdb
[06:17] mattly: and i wanted to re-create the ability to do that with node
[06:17] mattly: right
[06:17] creationix: nice
[06:18] creationix: so there is a tree part and a layer part to the concept
[06:18] creationix: and onions are just like that, I've seen onions with multiple cores before
[06:18] inimino: yeah
[06:18] inimino: haha
[06:18] polotek: I think there is a top level common set of layers
[06:18] mattly: the thing that takes an array / arguments thing of functions looks for objects and turns them into functions that route
[06:18] polotek: and after routing each handler has an additional set of layers
[06:19] mattly: http://github.com/mattly/neutrino/blob/develop/lib/neutrino.coffee#L84
[06:19] mattly: which calls
[06:19] polotek: maybe not.  that doesn't sound easy to organize
[06:19] mattly: http://github.com/mattly/neutrino/blob/develop/lib/neutrino.coffee#L57
[06:20] creationix: ACTION remembers getting coffeescript highlighting into github
[06:20] inimino: router takes a request and gives you a set of layers
[06:20] halorgium: ok, here is how i think it should be done ;)
[06:20] halorgium: https://gist.github.com/59603b1b8dc5e061111c
[06:21] mattly: so if a router function gets a request it can't route, it passes to the next function in its chain
[06:21] mattly: if a router function matches a route, it shifts the request to that route's chain
[06:22] mattly: any functions that preceded the router function still ran, doing their thing (adding callbacks, etc)
[06:22] mattly: if a request reaches the end of the chain then a response is called
[06:22] mattly: and the response defaults to a 404 with an empty body
[06:22] ineation has joined the channel
[06:22] halorgium: mattly: so you've implemented a router, not a middleware stack
[06:23] mattly: of course some sort of earlier function in the chain could have modified that into a 410 or something else
[06:23] mattly: halorgium: it's a bit of both i think
[06:23] inimino: it's a router with chaining
[06:23] polotek: halorgium: sounds like they are intertwined
[06:23] mattly: really the router is a middleware
[06:23] halorgium: yer, IMO they should not be
[06:23] polotek: I would prefer to have them decoupled
[06:23] inimino: so things don't just get routed to one place, they get routed to a chain of things
[06:24] inimino: yeah, I think I like decoupling routing and middleware
[06:24] aaronblohowiak: there is the construction of a processing pipeline but there is also the dispatch of the request event, these are very different!!!
[06:24] polotek: ah, I like the router as middleware idea
[06:24] halorgium: polotek: lol, have you used rack/wsgi?
[06:24] _announcer: Twitter: "nice #pubsub example using #ruby publisher, #nodejs #redis backend  and then #websockets http://bit.ly/9pD9gP" -- sbusso. http://twitter.com/sbusso/status/14478572505
[06:24] halorgium: middlewares should take a request and send the request to one or many inner apps
[06:24] inimino: aaronblohowiak: yes
[06:25] polotek: halorgium: yeah, and pardon me for being dense but what about it :)
[06:25] inimino: aaronblohowiak: and the former need not happen again on every occurence of the latter
[06:25] halorgium: polotek: hehe, sinatra is a rack router, most things in fact are
[06:26] statim1 has joined the channel
[06:26] aaronblohowiak: inimino: exactly!
[06:26] halorgium: aaronblohowiak: you can have dynamic stacks too, where the construction is based on the request
[06:26] mattly: right
[06:26] halorgium: genetic middleware :P
[06:26] mattly: the inbuilt router in neutrino basically takes an object and makes it behave like rack::map
[06:26] aaronblohowiak: halorgium: so the construction of the pipeline is handled by the request handler that is called by the dispatcher
[06:26] creationix: halorgium: why would you need that?
[06:26] inimino: well, then there's the issue of when people want to route based on what's in the body ... but you probably want to draw a line somewhere
[06:27] halorgium: creationix: internationalization
[06:27] mattly: but if someone wanted to make a sinatra function with that type of dsl, and still work on top of the rest of it all, it's totally possible
[06:27] aaronblohowiak: inimino: there is nothing stopping someone from having one stage of their pipeline be to call a different router
[06:27] inimino: aaronblohowiak: sure, that's always true
[06:28] tlrobinson_ has joined the channel
[06:28] aaronblohowiak: inimino: but doing stuff on the body of the request requires pausing downstream =(
[06:28] inimino: aaronblohowiak: you can take any router and route every request to the same handler and then implement anything inside that handler, including another router
[06:28] halorgium: aaronblohowiak: nope
[06:28] aaronblohowiak: halorgium: i meant dispatching based on the body
[06:28] ako has joined the channel
[06:28] creationix: I do think middlewares need to be able to short circuit the chain, I guess that's easy, you just respond instead of passing on to the inner layer
[06:29] aaronblohowiak: inimino: yea
[06:29] halorgium: aaronblohowiak: paused until determined, yes
[06:29] creationix: well, pausing on the body is the same as unix console streams
[06:29] mattly: creationix: that's kinda what i meant earlier by chain shifting
[06:29] creationix: sort, for example buffers the input
[06:29] creationix: but less doesn't
[06:29] creationix: but they all use the same api
[06:29] halorgium: creationix: wsgi was crafted after unix pipes
[06:30] halorgium: so the similarity is not unexpected
[06:30] creationix: :)
[06:30] polotek: I'm not sure I like the idea of dynamic middleware
[06:30] halorgium: polotek: ratelimiting middleware?
[06:30] creationix: I like it dynamic in the static routing sense, but not more than that
[06:31] creationix: like only perform auth if it's under /admin
[06:31] polotek: routing can be dynamic
[06:31] halorgium: having a test middleware which introduces latency is quite useful too
[06:31] polotek: but not composing the middleware layers
[06:31] polotek: unfortunately I don't have the brain power to articulate why
[06:31] polotek: or respond to halorgium 
[06:31] creationix: well, middleware can choose to execute or not based on a header without making the ordering dynamic
[06:31] polotek: yeah
[06:32] polotek: it can totally short circuit
[06:32] halorgium: polotek: haha, not possible or crazy?
[06:32] creationix: well gents, this has been enlightening, but I've got to go to bed sometime
[06:32] polotek: halorgium: just not a good idea in my head
[06:33] inimino: neurons need sleep :)
[06:33] polotek: feels like a can of worms in terms of reasoning about behavior
[06:33] halorgium: polotek: yer, it is pretty scary cause it makes debugging almost impossible
[06:33] mattly: if people are talking about building a general-purpose rack/wsgi clone i'd love to pitch in though
[06:33] inimino: nn all
[06:33] mattly: i'd much rather contribute to something that's going to get momentum than keep polishing my own little thing
[06:33] halorgium: mattly: that'd be bad ;)
[06:33] halorgium: those are sync
[06:33] polotek: mattly: this isn't a clone. it's a different approach that borrows some good ideas
[06:33] mattly: halorgium: you know what i mean
[06:34] halorgium: mattly: the api i showed is pretty much all you need to make an async middleware stack
[06:34] halorgium: and luckily that api is what exists in node ;)
[06:34] creationix: I'll know in a few days if I want to propose a standard
[06:34] mattly: heh
[06:35] creationix: I'm an async function with a reference to the callback in hand ;)
[06:35] polotek: we shouldn't propose a standard
[06:35] polotek: we should just build a proof of concept and go "look this is badass"
[06:35] creationix: well, by propose, I mean just that
[06:35] polotek: THEN propose a standard
[06:35] mattly: working code over standards
[06:35] polotek: ah, carry on then
[06:35] halorgium: creationix: you saw my proposal right? ;)
[06:35] creationix: and then write a howtonode article about how this is how it should be done
[06:36] polotek: ACTION feels the batteries going dead
[06:36] creationix: halorgium: I think so, which gist was it?
[06:36] statim has joined the channel
[06:36] halorgium: https://gist.github.com/59603b1b8dc5e061111c
[06:36] halorgium: i'm going to get it working with node-compress
[06:36] aaronblohowiak: halorgium: that's more complex than you need.
[06:36] creationix: halorgium: bookmarked, thanks
[06:37] mattly: halorgium: so what about handling incoming requests?
[06:37] creationix has left the channel
[06:37] halorgium: aaronblohowiak: that is as complex as you need
[06:37] halorgium: mattly: req is an incoming request
[06:37] halorgium: aaronblohowiak: are you meaning i didn't need the outer function?
[06:38] polotek: i gotta pose this question again, not sure if I missed an answer earlier
[06:38] polotek: I want to send a chunked response
[06:38] polotek: that will be consumed by curl
[06:39] polotek: or I am sending it
[06:39] mattly: halorgium: so basically, Gzip would have functions for "req" and "writeHead" if it wanted to do callbacks on those events?
[06:39] polotek: and curl is barfing with an error about the "chunky parser"
[06:39] halorgium: mattly: no, Gzip is a library for doing gzipping
[06:39] halorgium: gzipper is the middleware
[06:39] polotek: the interwebs says this is because the chunked response is not formatted the way curl expects
[06:39] aaronblohowiak: halorgium: yea, and you are inverting the control with calling app
[06:39] mattly: ah ok
[06:39] polotek: and I'm not sure how it should be done
[06:39] polotek: anybody got ideas?
[06:39] halorgium: aaronblohowiak: app is the inner app
[06:40] mattly: and then "req" in this case isn't necessarily the node request object, but some abstraction of it?
[06:40] halorgium: mattly: yer, indeed
[06:40] halorgium: it is actually the response :)
[06:40] aaronblohowiak: halorgium: right, i would rather that things get passed their outer, not their inner
[06:40] halorgium: i lied
[06:40] mattly: heh
[06:40] halorgium: aaronblohowiak: that makes things less reuseable
[06:41] polotek: aaronblohowiak: why outer vs inner?
[06:41] aaronblohowiak: halorgium: let's set up a three step processing pipeline example 
[06:41] polotek: aaronblohowiak: nevermind, I probably wouldn't understand your response
[06:41] aaronblohowiak: halorgium: you do it your way and i will do it the other way and we will compare. for now, let's ignore writehead and just focus on write and end
[06:41] aaronblohowiak: polotek: readability
[06:42] halorgium: what are the 3 stages?
[06:42] charlesjolley_ has joined the channel
[06:42] polotek: aaronblohowiak: no idea what you're talking about ;)
[06:42] aaronblohowiak: halorgium: something like "outermost" "middle" "innermost"
[06:42] halorgium: ah, trivial case ;)
[06:42] aaronblohowiak: polotek: examples will help
[06:42] aaronblohowiak: halorgium: well, passthrough is trivial case ;)
[06:43] polotek: I'm done gents. I'm really interested in this. Will someone post to the mailing list when there's something to look at?
[06:43] polotek: I'll also pitch in once I can get an idea of the different variants being proposed
[06:43] mattly: polotek: you're assuming that this will ever proceed beyond an irc conversation
[06:44] polotek: I thought creationix was volunteering to do it this weekend :)
[06:44] mattly: oh, maybe
[06:44] mattly: dunno
[06:44] polotek: attempting a framework like this was on my list of things to do
[06:44] polotek: I'd work on it but I've committed myself to too much already
[06:45] halorgium: aaronblohowiak: ok, true ture ;)
[06:45] halorgium: https://gist.github.com/ec3e95ef0e7eea212e11
[06:45] halorgium: there is my example
[06:46] halorgium: polotek: where in the world are you?
[06:46] aconbere: maybe an odd question for this channel, but is there a good location to read about how to write make scripts?
[06:46] halorgium: aconbere: howtonode.org perhaps?
[06:46] aconbere: I'm oddly embarassed that I've been running unix machines for so long and have never written one myself
[06:46] aconbere: :P
[06:46] halorgium: aconbere: or do you mean bash?
[06:47] JimBastard has joined the channel
[06:47] polotek: halorgium: literally?  I'm in the Washington DC area
[06:47] aconbere: no I mean like a Makefile
[06:47] polotek: mentally? too far gone to be of any use
[06:48] halorgium: polotek: yer, was seeing if you were in my part of the world ;)
[06:48] aconbere: http://www.gnu.org/software/make/manual/make.html
[06:48] halorgium: polotek: although, i did determine that you probably were in DC
[06:48] aconbere: for example
[06:48] aconbere: I suppose I should just read the command documentation
[06:48] halorgium: aaronblohowiak: show me the codezzzzz
[06:49] polotek: I'm on node-users
[06:49] polotek: I'm out guys.  take it light
[06:49] halorgium: ciao
[06:49] polotek has left the channel
[06:51] cedricv has joined the channel
[06:51] aaronblohowiak: halorgium: one min
[06:52] halorgium: hmm, node compress is sync :(
[06:53] mattly: eeww
[06:53] mattly: there should be a hall of shame for that kind of stuff
[06:53] aaronblohowiak: halorgium: nothing calls your pipeline
[06:55] halorgium: aaronblohowiak: refresh, i have to spell it all out eh? ;)
[06:56] aaronblohowiak: halorgium: lols
[06:56] mattly: halorgium: oh god
[06:57] halorgium: mattly: what did you do?
[06:58] mattly: halorgium: read line 30 of the refresh
[06:58] halorgium: addTimeout?
[06:58] halorgium: oh, that
[06:58] mattly: i mean ok cool, we can nest function calling
[06:59] halorgium: mattly: haha, so it is just a style problem
[06:59] halorgium: i can deal with that
[06:59] mattly: heh
[06:59] halorgium: those would usually have other args
[06:59] halorgium: like configurations for the middleware
[06:59] halorgium: and you could make a nice dsl similar to "use Foo"
[07:00] charlesjolley has joined the channel
[07:00] halorgium: mattly: you know that rack is essentially Outer.new(Middle.new(Inner)) right? ;)
[07:01] mattly: halorgium: oh yes, i *was* just commenting on the style
[07:02] halorgium: ;)
[07:02] halorgium: ACTION is well known for his wonderfully styled code and UIs :P
[07:02] mattly: i have to admit though, I am becoming less of a fan of dsls the more i use wycats's code
[07:02] halorgium: especially js
[07:02] mattly: hah
[07:03] halorgium: cause he misuse them or doesn't use them?
[07:03] mattly: for example, rails 3's "responds_with" isn't actually explicitly defined anywhere in actionpack
[07:03] mattly: misues
[07:05] mattly: anyway i'm zonked
[07:05] charlesjolley has joined the channel
[07:07] aurynn has joined the channel
[07:10] aaronblohowiak: halorgium: https://gist.github.com/88aaaaa9af93817f979a
[07:10] aaronblohowiak: halorgium: that way middleware authors can chose which functions to override
[07:10] aaronblohowiak: halorgium: simply by redefining the functions
[07:11] aaronblohowiak: halorgium: and then i included a few functions that demonstrate how these would be composed through the application
[07:12] aaronblohowiak: halorgium: you are right that you cannot "save" a pipeline, but i think that this makes writing an implementation easier
[07:14] halorgium: so where does the flow happen?
[07:14] halorgium: can i have a single function which is my app?
[07:15] halorgium: the problem here is that you have to have an extra function call even if you don't want
[07:16] halorgium: it doesn't look inverted to me
[07:19] siculars has joined the channel
[07:22] halorgium: does this look like a reasonably compression API?
[07:22] halorgium: https://gist.github.com/095bcf3e9bef3be8b41e
[07:23] scudco has joined the channel
[07:24] aaronblohowiak: halorgium:  what do you mean where does the flow happen?
[07:24] aaronblohowiak: halorgium: sure you can. 
[07:24] halorgium: aaronblohowiak: well, it looks like the same-ish API as mine ;)
[07:24] halorgium: cept, you have a boilerplate by default
[07:25] aaronblohowiak: halorgium:  it is inverted!  new Inner( new Middle( new Outer(response)));
[07:25] aaronblohowiak: that is how mine wraps
[07:25] statim has joined the channel
[07:25] aaronblohowiak: and then you write to the thing that new Inner returns
[07:27] N` has joined the channel
[07:28] halorgium: aaronblohowiak: but doesn't this mean that you can't have a simple passthrough without an extra set of callbacks?
[07:28] aaronblohowiak: halorgium: to bypass the chain?
[07:29] admc has joined the channel
[07:29] halorgium: it seems odd that the inner would get control first
[07:29] halorgium: how can one do auth?
[07:30] aaronblohowiak: halorgium: authentication is something you do with requests, not responses
[07:30] aaronblohowiak: so you can do it however you want
[07:30] aaronblohowiak: this does let you branch your pipeline
[07:31] halorgium: aaronblohowiak: i can't auth responses?
[07:31] aaronblohowiak: which your technique does not
[07:31] halorgium: aaronblohowiak: hmm, my tech does
[07:31] _announcer: Twitter: "IntroducciÃ³n a #NodeJS http://bit.ly/bQ4xMy" -- David Anguita. http://twitter.com/danguita/status/14480792914
[07:31] aaronblohowiak: halorgium: what does it mean to auth a *response* ?
[07:31] halorgium: you can easily have a hash of apps passed to a middleware
[07:32] halorgium: aaronblohowiak: once a response is generated, determine if the user is priveleged
[07:32] aaronblohowiak: halorgium: that seems very backwards to me
[07:33] halorgium: so what happens when gzip data comes in?
[07:33] halorgium: it gets passed to the Inner
[07:34] aaronblohowiak: halorgium: as you can see, i have different pipelines for request and response (current request is not being decorated at all)
[07:34] halorgium: i guess it'd be useful to see a few more callbacks
[07:35] stagas has joined the channel
[07:35] aaronblohowiak: halorgium: i think a test suite makes sense :)
[07:35] halorgium: if you've decoupled the 2 pipelines, will that make it hard to coordinate?
[07:36] halorgium: i see a middleware as sitting in between both pipelines and optionally intercepting either
[07:36] aaronblohowiak: halorgium: why should compressing the output have anything to do with the input ?
[07:37] halorgium: aaronblohowiak: because usually it is requested in the headers ;)
[07:37] aaronblohowiak: halorgium: lol, then that is where you'd determine wether or not to decorate the response
[07:38] halorgium: aaronblohowiak: so basically, it is the same then ...
[07:38] aaronblohowiak: halorgium: well, they are both middleware afterall
[07:38] aaronblohowiak: the question is about the interface
[07:39] halorgium: you're talking about construction and not execution?
[07:39] halorgium: cause i'd hope the most outer function gets called first
[07:41] halorgium: aaronblohowiak: so really, handleConnection/route/subroute are the middlewares
[07:41] halorgium: which makes them kinda coupled to their inner middlewares
[07:41] aconbere: huh
[07:41] aconbere: well
[07:41] aconbere: that wasn't so bad
[07:41] aaronblohowiak: halorgium: no, handleConnection / route / subroute are all routing functions that optionally install middleware onto response
[07:41] halorgium: make win?
[07:41] aconbere: now I have a Makefile to build mustache.js
[07:41] aconbere: instead of a rake file
[07:41] halorgium: aaronblohowiak: i think this is where we differ in terminology
[07:42] halorgium: i call a middleware something which takes both a request and response, then passes those onto an inner endpoint
[07:42] halorgium: you call a middleware something which sits in between a request/response?
[07:42] stagas has joined the channel
[07:44] micheil has joined the channel
[07:44] aaronblohowiak: halorgium: http://en.wikipedia.org/wiki/Decorator_pattern
[07:45] halorgium: aaronblohowiak: i know that, decorating different things
[07:45] halorgium: i decorate endpoints, you decorate requests/responses
[07:46] aaronblohowiak: halorgium: what is an endpoint?
[07:46] halorgium: an app or middleware
[07:46] micheil: good morrow chaps & ladies
[07:46] aaronblohowiak: i decorate a request *or* a response
[07:46] aaronblohowiak: micheil: ttyl
[07:46] halorgium: aaronblohowiak: yer, exactly
[07:46] micheil: aaronblohowiak: ttyl?
[07:46] aaronblohowiak: good morrow -- see you tomorrow?
[07:46] aaronblohowiak: or is that good morning
[07:46] halorgium: he is still awake
[07:46] micheil: good morning
[07:46] aaronblohowiak: the internet is confusing =(
[07:46] micheil: sort of good morning today / tomorrow
[07:47] halorgium: it is same day for us now, micheil 
[07:47] aaronblohowiak: good 1:00am to you, micheil
[07:47] micheil: aaronblohowiak: A san fran flyer?
[07:47] aaronblohowiak: micheil: there are nerds elsewhere in the world?
[07:47] aaronblohowiak: ;)
[07:47] aaronblohowiak: i'm about an hour south of SF, but yea.
[07:47] micheil: aaronblohowiak: well, west coast america then :P
[07:48] cedricv has joined the channel
[07:48] aaronblohowiak: ;)
[07:48] aconbere: it's only 10:00 where I am :)
[07:48] micheil: hmm.. there's some interesting thoughts in that package manager thread
[07:48] halorgium: ACTION is a true non-US SF overstayer :P
[07:48] halorgium: aaronblohowiak: did you head to the node meetup?
[07:48] aaronblohowiak: halorgium: indeedalydoo
[07:48] halorgium: seeing as you live in that city
[07:49] halorgium: hmm, i wonder if we spoke ;)
[07:49] aaronblohowiak: halorgium: who did you sit near @ dinner ?
[07:49] halorgium: haha, you think i can remember?
[07:49] halorgium: i sat far from the sunlight
[07:49] aaronblohowiak: are you a kiwi?
[07:49] halorgium: yes
[07:50] micheil: kiwi as in package management of kiwi as in bird?
[07:50] halorgium: bird
[07:50] micheil: *or not of
[07:50] aaronblohowiak: work at ey or the other one ?
[07:50] halorgium: ey
[07:50] aaronblohowiak: cheers.  you didnt know about american vs imperial pints =)
[07:50] micheil: halorgium: ah, cool; Been to the islands off the coast of australia recently or, staying aborad?
[07:50] halorgium: hahah
[07:50] micheil: *abroad
[07:50] halorgium: aaronblohowiak: ok, you were directly across from me?
[07:51] aaronblohowiak: halorgium: indeed.
[07:51] aaronblohowiak: just like i am now!
[07:51] halorgium: damn it
[07:51] aaronblohowiak: *dramatic music*
[07:51] halorgium: micheil: i live here now, but was back for christmas
[07:51] _announcer: Twitter: "Two guys in the node.js irc channel: "Were you at that meetup?", "yeah", "oh, right, so you're the guy who was a across from me"" -- Micheil Smith. http://twitter.com/miksago/status/14481499823
[07:51] micheil: oh man.
[07:52] micheil: >_>
[07:52] micheil: I thought that only went after hashtags
[07:52] halorgium: aaronblohowiak: was thinking about getting a meetup in SF org'd
[07:52] aaronblohowiak: micheil: thanks for answering my inane question on gh earlier
[07:52] halorgium: for us non-suburban people
[07:53] micheil: aaronblohowiak: no worries
[07:53] aaronblohowiak: halorgium: do it, then we can get Jared to go =)
[07:53] halorgium: holdon
[07:53] halorgium: you aren't the medical guy?
[07:53] aaronblohowiak: :-) thats meeee
[07:53] halorgium: hah
[07:54] aaronblohowiak: hanging out with all of the java programmers is probably why i keep referencing design patterns =( sorry
[07:54] halorgium: aaronblohowiak: haha, i've done my share of java
[07:54] halorgium: not enough people have i feel :)
[07:55] aaronblohowiak: i think the advanced tooling that java has is enviable.
[07:55] halorgium: aaronblohowiak: next time there is a sushi feast, ping me
[07:55] aaronblohowiak: halorgium: i cant recall your name IRL
[07:55] halorgium: aaronblohowiak: tim
[07:56] halorgium: but my /whois says so ;)
[07:56] aaronblohowiak: ah, right-o. will do.
[07:56] halorgium: you need to stalk better :P
[07:56] aaronblohowiak:  :-) cheers.
[07:57] aaronblohowiak: if you are building a framework, i think your concept of middleware makes sense
[07:57] aaronblohowiak: but it seems like it has more of an impact on how i design my application
[07:57] aaronblohowiak: *shrug*  your design is MUCH better because you can save a pipeline and then just reuse it for new requests
[08:00] aconbere: okay
[08:00] aconbere: chances my patch to replace rake with make for mustache.js will be accepted?
[08:00] aconbere: 0% ?
[08:00] aconbere: any takers?
[08:01] Tim_Smart: I use cake
[08:01] Tim_Smart: Mmm cake
[08:01] Tim_Smart: From coffeescript
[08:02] aconbere: I'm of the deranged opinion that you should probably use tool nearly universally available as your build tools.
[08:02] micheil: aaronblohowiak: so, how's the websocketerying going?
[08:02] aconbere: or at least... offer them as an option
[08:03] aconbere: that's 4 projects that have pull requests for working package.json files I added :)
[08:04] aaronblohowiak: micheil: i got sidetracked on helping marak with his string-formatting library.  i am back to it now, though.
[08:04] micheil: ah, heh heh, okay
[08:04] micheil: aaronblohowiak: I may get a chance this weekend to implement the new connection manager (moving to a doubly linked list over a standard object for speed & memory reasons)
[08:06] icebox has joined the channel
[08:07] halorgium: aaronblohowiak: are you working on node-websocket-server ?
[08:07] halorgium: oh, that is you micheil 
[08:07] halorgium: ?
[08:07] aaronblohowiak: halorgium: i am using it, not adding changes yet =)
[08:08] micheil: halorgium: heh heh
[08:08] micheil: aaronblohowiak: I think you'll like the api, but just be wary of that pending change to the connection manager
[08:08] micheil: it'll have a few flow on effects to how server.broadcast and similar work
[08:09] halorgium: micheil: are you considering adding middlewares to that impl?
[08:09] micheil: halorgium: no
[08:09] micheil: halorgium: I'm keeping it fairly low level, while including some interesting concepts
[08:10] Tim_Smart: I;m going to working on http://github.com/biggie/biggie soon
[08:10] micheil: one of the core concepts I think is important in a websocket server is that of different channels accessible via URI's.
[08:10] aaronblohowiak: micheil: is it going to change the events at all ?
[08:11] halorgium: micheil: cool, interested in having a message -> function middleware
[08:11] micheil: currently this is possible by going through server.routes, but it will be changing a little (I thinking adding in an event emitter so you can listen for a specific route)
[08:11] aurynn has joined the channel
[08:11] micheil: aaronblohowiak: I shouldn't expect to see any major api changes
[08:11] chakrit has joined the channel
[08:12] micheil: aaronblohowiak: with the new DLL for the connection / routing list, it'll mainly affect how you'd loop over connected clients, but shouldn't matter too much
[08:13] aaronblohowiak: micheil: sweet.
[08:14] micheil: so, it'd be interesting to be able to do something like: server.addListener("route:PATH", function(){});
[08:15] micheil: then you could have your server have say, a channel for various different types, each invoking different callbacks and stuff
[08:15] aaronblohowiak: micheil: i don't think that belongs in the websockets connection itself, but should be built on-top of it
[08:15] micheil: hmm.. I know it's a bit of a higher level thing, but I'm not sure
[08:16] micheil: currently I support different channels, but the event emittance isn't there
[08:16] aaronblohowiak: micheil: yea, it would be cool if you took out the channels and left event dispatch to the higher level
[08:16] micheil: aaronblohowiak: you have no need for channels?
[08:17] aaronblohowiak: micheil: the opposite!  the channel implementation is what i am working on.
[08:17] micheil: ah
[08:17] micheil: link to the code?
[08:17] aaronblohowiak: micheil: but that is transport-agnostic.. 
[08:17] micheil: because that's part of what the DLL stuff is for
[08:18] aaronblohowiak: micheil: http://github.com/aaronblohowiak/Push-It
[08:18] micheil: currently if you start calling delete object it is said to cause a slowcase in v8, so, by using a DLL, you just de-reference the nodes
[08:18] aaronblohowiak: yea, i would love to have an easy DLL for easy removing from lists (and would add it to http://github.com/aaronblohowiak/JavaScript-datastructures 
[08:18] sechrist_ has joined the channel
[08:19] micheil: well, ideally it'll have similar interface to an array or object
[08:19] micheil: I needs me some grooveshark.
[08:20] aaronblohowiak: micheil: anyway, the channel thing is the next level above transport and is where you start worrying about handshaking, authentication and other things that are Opinionated.  personally, i dont want a transport library to be opinionated =)
[08:20] aaronblohowiak: micheil: so if you want to build all that stuff, please do it in an additional library that references n-w-s
[08:20] micheil: right, so, keep it all very low level like node's http.js and net.js?
[08:21] aaronblohowiak: that is what i would prefer.
[08:21] micheil: okay
[08:21] aaronblohowiak: ideally, _ry will just merge your stuff into core
[08:21] micheil: yeah, but we've gotta make sure we don't get core bloat
[08:21] halorgium: micheil: the thing i just want to make sure is that there are enough hooks to allow for what aaronblohowiak needs
[08:22] micheil: well, currently the routing stuff is there, just not that exposed.
[08:22] aaronblohowiak: the docs doesnt make it obvious that the "request" event is dispatched when tehre is no UPGRADE
[08:23] micheil: man.. safari is using 1.77Gb's of RAM
[08:23] micheil: aaronblohowiak: could you open an issue on the wiki, that way I can be somewhat reminded to fix that up
[08:24] micheil: (side note: I do have 500-700 tabs open in safari)
[08:24] aaronblohowiak: micheil: sure
[08:25] micheil: actually, just going to go get sidetracked looking at (fab) for a mo'
[08:30] micheil: (fab) <-> websocket interface?
[08:30] rra has joined the channel
[08:31] aaronblohowiak: i am not sure what you are asking there
[08:32] micheil: it was just an idea
[08:32] aaronblohowiak: that might be a cool project.
[08:32] micheil: (fab) currently supports node's http, what about supporting websocket-server? They are design to both have the same basic API
[08:32] aaronblohowiak: my goal with Push-It is to be Socket.IO, without the custom module and class system, but with a sidechannel REST API
[08:32] micheil: nice
[08:33] micheil: aaronblohowiak: pusherapp.com style?
[08:33] micheil: hmm.. James Squires always was a nice beer.
[08:33] aaronblohowiak: micheil: precisely!  though i prefer a different authentication scheme
[08:33] micheil: yeah, that's the only reason I haven't updated my client for it yet
[08:33] micheil: there
[08:34] micheil: 's now too many deps for me to add in right now
[08:34] micheil: aaronblohowiak: also, websocket-server could do with some more examples.
[08:34] micheil: if you'd be interested in writing a one (or a few)
[08:35] statim1 has joined the channel
[08:36] aaronblohowiak: check your inbox
[08:36] micheil: which inbox?
[08:36] aaronblohowiak: gh
[08:37] micheil: k
[08:37] micheil: aaronblohowiak: could you patch that to say: normal http connections
[08:38] micheil: (I like the clarity of say http in that)
[08:38] micheil: as some websocket servers are actually still built on net.js
[08:38] aaronblohowiak: L97 ?
[08:39] aaronblohowiak: "Use this to handle normal http connections that won't upgrade to WebSocket. "
[08:40] micheil: checkin'
[08:40] micheil: +      res.end('We can handle normal connections too!\n');
[08:40] micheil: 43	43	
[08:41] micheil: line 43
[08:41] aaronblohowiak: ah
[08:41] micheil: also do line 97 though, as what you just wrote sounds better
[08:41] aaronblohowiak: k
[08:41] micheil: and place your changes in the development branch
[08:41] micheil: (not the master)
[08:42] aaronblohowiak: my git-fu is weak =/
[08:42] micheil: just git merge master development
[08:42] micheil: i think
[08:42] aaronblohowiak: thanks!
[08:43] micheil: or rather, git checkout development && git merge master
[08:45] Ned_: micheil: actually, i found another issue
[08:45] micheil: yeah?
[08:45] micheil: Ned_: did you email me before or?
[08:45] Ned_: micheil: nah, 
[08:45] Ned_: I never got around to it
[08:45] micheil: ah, okay
[08:45] Ned_: but i just got your email :-)
[08:45] micheil: shoot the questions now
[08:45] Ned_: in a nutshell
[08:45] micheil: "Ned_: but i just got your email :-)" ?
[08:46] Ned_: you're listening for the "end" event on the socket
[08:46] Ned_: micheil: about the fork and not pulling
[08:46] Ned_: I guess it wasn't an email
[08:46] Ned_: it was a comment, then github emailed me
[08:46] micheil: ah, okay
[08:46] micheil: so you're.. marty?
[08:46] Ned_: yes
[08:46] Ned_: martyn
[08:46] micheil: *martyn rather
[08:46] Ned_: :-)
[08:46] micheil: yeah
[08:47] Ned_: anyhow ... so you're listening for "end"
[08:47] aaronblohowiak:  git checkout --track -b development origin/development 
[08:47] Ned_: but something weird is going on with my browser/server thing
[08:47] Ned_: and it's "close"ing the stream
[08:47] Ned_: but not firing an end event
[08:47] micheil: odd.
[08:47] Ned_: so I fixed it by listening fo rthe "close" event too
[08:47] Ned_: and that seemed to do it
[08:47] micheil: it should be firing the "end" event
[08:47] _announcer: Twitter: "node.js à¸à¸µà¹à¸¡à¸±à¸à¸à¸µà¸¢à¸±à¸à¹à¸" -- Wiennat. http://twitter.com/wiennat/status/14483295804
[08:47] Ned_: the problem at the moment with your stuff is that "dead" connections are hanging aroudn in the pool
[08:47] Ned_: then when you broadcast
[08:48] Ned_: all hell breaks loose, because you're trying to write to non-writable streams
[08:48] micheil: Ned_: check out the master & development branch
[08:48] aaronblohowiak: micheil: sent
[08:48] micheil: they shouldn't have dead clients in the connection poll
[08:48] Ned_: micheil: I'm using master atm
[08:48] micheil: *pool
[08:48] Ned_: err, so not master ?
[08:48] micheil: what browser is this
[08:48] micheil: ?
[08:48] Ned_: chromium
[08:49] Ned_: certainly I don't seem to have problems if I use a different websocket module
[08:49] micheil: okay.. let me see if I can grab a mac build to test this.
[08:49] Ned_: :-)
[08:49] Ned_: what browser were you using ?
[08:49] micheil: Ned_: yeah, mine is one of the few using the newer stuff we added to node to support upgrades
[08:49] micheil: chome
[08:49] micheil: but there are differences
[08:49] Ned_: right
[08:49] Ned_: what branch should I be using of your repo ?
[08:50] micheil: I'm testing in both.
[08:50] micheil: also, I'll actually _finally_ be writing tests for the library soon.
[08:50] Ned_: it looks like mnutt was having that problem too
[08:51] micheil: yeah
[08:51] micheil: but mnutt's changes as noted are now fixed.
[08:51] micheil: or should now be fixed.
[08:51] Ned_: oh ...
[08:51] Ned_: but you've done no commits since then on master ?
[08:51] Ned_: should I be using development ?
[08:51] micheil: it was an issue with node not telling me a connection got ended
[08:52] micheil: Ned_: just do a git pull
[08:52] micheil: check if there's changes
[08:52] Ned_: micheil: I'm looking on github itself though
[08:52] micheil: oh
[08:52] Ned_: there's nothing to pull either
[08:52] Ned_: :p
[08:53] Ned_: 4c0267260a8fcdf8ad7b4a1df8ab51e03561de51 is your last commit
[08:53] Ned_: from what I can tell
[08:53] micheil: yeah, I'll need to test this out in chromium then
[08:53] Ned_: and mnutt has patched stuff from that commit
[08:53] Ned_: to fix his issues :-)
[08:53] micheil: hmm
[08:53] Ned_: also, the "count" property of the server is meant to eb the number of connections ?
[08:53] micheil: eb?
[08:53] Ned_: I notice it's 0, and never gets incremented or decremented :p
[08:53] Ned_: eb == be
[08:53] Ned_: typo
[08:54] Ned_: :-)
[08:54] micheil: oooh.. looks like I forgot that when I redid the attach/detach client stuff
[08:54] Ned_: :-)
[08:54] Ned_: and the "route" stuff is nicely filled out, but there's no way to "use" that information at the moment ?
[08:54] aaronblohowiak: i thought it was a Zen reflection
[08:55] Ned_: it'd be cool to eb able to broadcast to a particular route :-0
[08:55] Ned_: :-)
[08:55] micheil: Ned_: just using server.routes["name"].broadcast()
[08:55] micheil: I think
[08:55] micheil: or not
[08:55] Ned_: heh
[08:56] micheil: Ned_ & aaronblohowiak, we need to reach a middle ground on the routing stuff
[08:56] aaronblohowiak: micheil: you can build the routing stuff on top of all of the other events that you are emitting, right?
[08:56] Ned_: micheil: well, the routing stuff I'm not that worried about :-)
[08:56] micheil: Ned_: you seem to like having them in there
[08:56] micheil: but aaronblohowiak you don't.
[08:56] Ned_: mostly I'd like the disconnection stuff solved :p
[08:57] micheil: Ned_: okay, that'll actually make the server incrementally faster too
[08:57] Ned_: so when I do broadcast it doesn't asplode :-)
[08:57] micheil: yeah
[08:57] micheil: rightfully so
[08:57] aaronblohowiak: micheil: i want to do fun regex multiplexing of channels to routes
[08:57] aaronblohowiak: having your websocket only listening to one channel is boring =)
[08:58] micheil: aww.. chromium isn't in homebrew
[08:58] micheil: aaronblohowiak: okay
[08:58] aaronblohowiak: sweeeeet!
[08:58] micheil: aaronblohowiak: I do have another project I'm working on, called websocket-filter
[08:58] micheil: which may interest you
[08:58] rra has joined the channel
[08:59] halorgium: micheil: just download nightly
[08:59] micheil: is there a nightly binary?
[08:59] aaronblohowiak: "nothing to see yet" ?
[08:59] halorgium: for mac?
[08:59] micheil: I got given svn co instructions
[08:59] micheil: yeah
[08:59] micheil: os x 10.6
[08:59] micheil: aaronblohowiak: http://github.com/miksago/node-websocket-filter
[08:59] micheil: yeah
[08:59] micheil: aaronblohowiak: the idea is that it attaches to a passed in database / hash of routes / filters
[08:59] halorgium: micheil: http://build.chromium.org/buildbot/snapshots/chromium-rel-mac/47986/ ?
[09:00] micheil: when a message is received that matches a route, X is done on it
[09:00] micheil: in my use case, this is to forward messages from a master channel to many slave channels.
[09:00] micheil: (API's over websockets FTW.)
[09:00] aaronblohowiak: :)
[09:01] Ned_: svn :-(
[09:01] Ned_: svn makes me sad
[09:01] Ned_: why does everyone use Mac ....
[09:02] aaronblohowiak:  micheil since your routes stuff isnt required to con.write, it really doesnt effect me
[09:02] micheil: aaronblohowiak: okay
[09:02] micheil: Ned_: I use it because it's better then windows.
[09:02] aaronblohowiak: Ned_: what does svn have to do with mac ?
[09:02] Ned_: aaronblohowiak: nothing, two unrelated comments
[09:03] aaronblohowiak: mac is the prettiest posix-compliant os
[09:03] Ned_: micheil: that's true ... but I find Linux better than both ;-0
[09:03] micheil: Ned_: I'm a past linux user, so, yeah, it's obvious for me to get a mac, if I want access to tools like CS4 and such
[09:03] micheil: which, for what I'm doing (some design & art stuff + software development), mac makes the most sense
[09:03] aaronblohowiak: Ned_: i have too many scars from xorg.conf =/
[09:04] Ned_: heh
[09:04] fizx has joined the channel
[09:04] Ned_: ACTION never has to touch xorg.conf
[09:04] Ned_: well, seldom
[09:04] Ned_: I use weird window managers too, I find both Mac and Windows (and Gnome/KDE too) too ... windowt
[09:04] Ned_: windowy even
[09:04] Ned_: ACTION uses a tiling WM
[09:05] micheil: aaronblohowiak: pulled the doc changes to development, next stable push and they'll be in master.
[09:05] aaronblohowiak: Ned_: i miss awesomewm, but i find Divvy is good enough  http://mizage.com/divvy/
[09:05] aurynn has joined the channel
[09:05] micheil: Ned_: I could never use a tiling WM
[09:06] micheil: their crazy crazy things.. it's be like using gnu screen all the time!
[09:06] aaronblohowiak: micheil: it is neat when you do this with GUI apps
[09:06] Ned_: heh, it's not that bad ...
[09:06] micheil: man.. flash is a pain in the arse.
[09:06] micheil: it doesn't free it's memory.
[09:07] aaronblohowiak: neither does java
[09:10] micheil: divvy looks cool, but I brought Sizeup
[09:13] micheil: odd. crhomium just fired the close event on open
[09:13] micheil: ARGH
[09:14] micheil: why doesn't chromium & chrome use the same spec version.
[09:14] Ned_: heh
[09:14] Ned_: :-)
[09:14] micheil: there's the problem.
[09:15] micheil: righteo.. so, chromium looks to be using draft76+
[09:15] micheil: and chrome to be using draft75
[09:15] Ned_: right
[09:16] micheil: so that's why chromium isn't working
[09:16] Ned_: err, 
[09:16] Ned_: so it's detecting it wrong ?
[09:16] Ned_: when mine connects it says 75
[09:17] micheil: yeah, it's lying.
[09:17] Ned_: bad websocketserver!
[09:17] Ned_: :p
[09:17] Ned_: or chromium is lying ?
[09:17] micheil: I think it's chromium.
[09:18] Ned_: ACTION gets out ngrep
[09:18] mape: micheil: Have you talked more to isaacs about the web interface of npm?
[09:18] micheil: mape: no, not really
[09:18] mape: k
[09:18] micheil: but I have some notes to respond to that current email thread with.
[09:18] Ned_: micheil: how do you determine version ?
[09:19] micheil: Ned_: with a very hacked method right now.
[09:19] mape: micheil: What thread? mind posting the url?
[09:19] Ned_: micheil: I'm looking at headers
[09:19] Ned_: and there's nothing useful in them
[09:19] micheil: mape: on the mailing list
[09:19] micheil: Ned_: there's no version given in the headers
[09:19] mape: npm or node?
[09:19] micheil: (PITA.)
[09:19] micheil: node
[09:19] Ned_: http://paste.dollyfish.net.nz/f79692.txt
[09:19] micheil: Ned_: currently the version is in the server
[09:19] Ned_: right
[09:20] micheil: which is a really bad choice, but the only option I had
[09:20] Ned_: oh, so I need to specify draft76 in my server options ?
[09:20] Ned_: and it should all start working ?
[09:20] micheil: draft76 isn't implemented yet
[09:20] Ned_: right
[09:20] micheil: because of the security stuff
[09:21] mape: micheil: the "package managers" one?
[09:21] micheil: it's going to take a fair bit of time to write
[09:21] micheil: mape: yeah
[09:21] micheil: Ned_: could you ngrep the headers from both chrome and chromium?
[09:21] micheil: ACTION can't get ngrep installed on os x for some reason
[09:22] Ned_: heh
[09:22] Ned_: well the ones I just pasted are chromium
[09:22] micheil: yeah
[09:22] Ned_: from the Ubuntu nightly builds
[09:22] Ned_: ACTION fires up chrome
[09:22] Ned_: I have 5.0.375.38 beta
[09:22] micheil: if they're exactly the same, I'll annoy hixie to get them added, because otherwise we've got a problem
[09:23] Ned_: crap ... google chrome doesn't appear to be working :-(
[09:23] micheil: this is the worst part about websockets â they involve browsers.
[09:24] Ned_: heh
[09:24] Ned_: :-(
[09:24] Ned_: whoa, there's google chrome unstable 6
[09:24] mape: micheil: What? Websockets are totally easy and only take like 10 lines of code
[09:24] mape: ... :P
[09:24] Ned_: or google chrome beta
[09:24] micheil: mape: *bang!*
[09:24] mape: hehe
[09:24] Ned_: micheil: just installing a new version of google-chrome
[09:24] micheil: grtfs.
[09:25] micheil: for those not accustom to shorting stuff: go read the f***ing spec.
[09:25] micheil: :P
[09:26] mape: micheil: Hmm not really any discussion on the web site of things in the package manager thread?
[09:26] Ned_: micheil: well, google-chrome won't do websocket at all :-(
[09:26] mape: The thing I'm really wondering about is if I should drop github integration altogether
[09:26] micheil: Ned_: I have an idea: draft75 doesn't use sec-websocket-key[1|2] headers
[09:27] micheil: so dynamic switching
[09:27] micheil: brb
[09:27] Ned_: err ,
[09:27] Ned_: micheil: well, it looks like chrome _does_ do websockets
[09:27] Ned_: they're just not working on your server ...
[09:29] Ned_: okay, something weird going  on...
[09:30] statim has joined the channel
[09:30] Ned_: micheil: okay, I'm not actually seeing any requests go to the server
[09:30] Ned_: when I do a websocket in chrome
[09:30] Ned_: perhaps I need to explicitly "open" it or something
[09:31] Ned_: ws.readyState == 0
[09:31] Ned_: :-(
[09:31] mscdex has joined the channel
[09:33] Ned_: ACTION tries installing google chrome unstable ...
[09:34] mscdex: websockets work fine in the chromium i have :P
[09:34] Ned_: me too
[09:34] Ned_: but not in chrome
[09:34] mscdex: well, at least with socket.io
[09:34] mscdex: chrome schmome
[09:34] mscdex: :P
[09:35] mscdex: Portal is such a fun game
[09:36] aho: still available for free till the 24th iirc
[09:36] mscdex: it makes me yearn for hl2 ep3 though 
[09:36] mscdex: aho: yeah, that's how i got it. i just finished it :)
[09:36] Ned_: right, chrome 6 works
[09:37] Ned_: micheil: http://paste.dollyfish.net.nz/ec7826.txt
[09:37] Ned_: that's from chrome 6
[09:37] Ned_: micheil: they look identical
[09:37] Ned_: (chromium and chrome6)
[09:41] halorgium: Ned_: have you ever been do shdhnz ?
[09:41] halorgium: your nick looks familiar
[09:42] Ned_: halorgium: yeah, once :-)
[09:42] halorgium: that is all, i should be asleep :P
[09:42] Ned_: heh
[09:42] Ned_: you're in NZ ?
[09:42] halorgium: i was, but now in SF
[09:42] halorgium: hence the sleeping part
[09:42] Ned_: right :-)
[09:42] Ned_: fair enough
[09:42] spoob has joined the channel
[10:01] screen-x has joined the channel
[10:13] MattJ has joined the channel
[10:16] mape: So, anyone around to answer some simple questions?
[10:18] voodoo1 has joined the channel
[10:18] voodoo1: how would you implement a key-value cache in node.js? items should be stale
[10:19] mape: voodoo1: use a javascript object?
[10:19] mape: var cacheStore = {};
[10:20] voodoo1: and what about the stale function? use setTimeout()?
[10:20] mape: Ie flushing it?
[10:20] voodoo1: yeah
[10:20] mape: The entire cache or item specific?
[10:20] voodoo1: i feel a little bit unsafe with that due to "concurrency"
[10:21] voodoo1: each time should have time it is valid. when it expires, it should be removed
[10:21] voodoo1: sorry each item
[10:21] mape: function addItem(key, value, ttl){cacheStore[key] = value, setTimeout(function(){cacheStore[key] = null;}, ttl || 1000)}
[10:22] mape: Might use delete instead of setting it to null but you get the idea
[10:22] mape: And what are the issues due to "concurrency" ?
[10:22] voodoo1: ok, but in order to retrieve a new version of the item i do some network stuff, thus i have async calls. 
[10:23] voodoo1: hmm i should twice about that :)
[10:23] mape: Well.. How is that different from other cache systems?
[10:23] voodoo1: I am a bit intrigued from java concurreny right now
[10:23] mape: You are caching it for a reason, if you have to wait for the cache to renew it isn't caching
[10:23] mape: Then you are just adding a layer of getting the value
[10:24] voodoo1: well i think it is still a cache
[10:24] voodoo1: a cache for items with limited time validity
[10:24] voodoo1: when i request an item, that is not in the cache, it must be pulled via network
[10:24] mape: But the get action has to wait for the item to renew?
[10:24] mape: Oh, well then just add a callback that gets passed
[10:25] voodoo1: i'm just thinking about some interleaved situations where a new fetched item could be deleted on a second request 
[10:25] mape: if (cacheStore[key]){callback(cacheStore[key])}else{doThingThatTakesAges(callback)}
[10:27] voodoo1: well, that looks simple
[10:27] voodoo1: i have to get used to the callback stuff
[10:28] mape: Just think of callback as people who want to get paid for their work.
[10:29] mape: If you don't have something for them to do, just pass them along untill they get something to do
[10:29] voodoo1: i know how it works, but i forget thinking that way when solving problems
[10:29] voodoo1: but thanks anyway for that description, very catchy
[10:29] mape: And when you have something for them to do, pass them args/work and let them work (execute them) and then you pay them ;)
[10:29] mape: Hehe
[10:30] mape: And well, execute them, I'm not saying you should execute works.. That isn't very catchy :/
[10:30] mape: *workers
[10:30] mscdex: :P
[10:33] mape: mscdex: So, if you were to look for a module in node, and went to a website to find it.. What would be the first thing you would look for?
[10:34] mape: Search/category/listing for stuff/highly rated stuff?
[10:34] delijah has joined the channel
[10:34] micheil: mape: cache("key", default)
[10:35] micheil: default is a long running or blocking action.
[10:35] mscdex: i dunno, i usually use the command line heh -- i.e. apt-cache
[10:35] mscdex: but for node i dunno
[10:36] mape: micheil: Hmm? The get operation?
[10:36] micheil: Ned_: that ngrep doesn't give full headers btw
[10:36] micheil: mape: yeah
[10:36] mscdex: i think it's easier to do from command line because you still probably end up using command line to install the package
[10:36] micheil: maybe.
[10:36] mscdex: but that's me
[10:37] mscdex: but for just browsing without looking for anything in particular, categories
[10:37] micheil: Ned_: turns out chromium sends sec-* headers, and chrome doesn't
[10:37] micheil: bbl.
[10:37] rolfb has joined the channel
[10:38] mape: mscdex: Hmm, yeah that is the difference, I'm wondering If I should focus on the browsing/discovery rather then the finding..
[10:38] mape: But that probly also differs depending on who you talk to
[10:38] mscdex: what's wrong with having categories and search?
[10:39] mape: I just can't do it
[10:39] mape: .. Well not really :P
[10:39] mscdex: why?
[10:40] mape: Just trying to find the focus
[10:40] mape: But yeah, needs to have search and browse as default
[10:42] mscdex: it would be good to have a category property in package.json that contains one of a standard set of categories, like apt packages do
[10:42] mape: Yeah we talked about that earlier
[10:42] mape: categories vs tags
[10:42] mape: Where tags are nice and open
[10:42] mape: And categories takes time and "limits" things
[10:42] mape: (nice and open == less focus and harder to find stuff)
[10:43] mape: Guess it depends if you think tags work out since people tend to follow other tags
[10:43] mape: Or if it just ends up being a huge mess with different ways of describing the same thing
[10:43] mscdex: exactly, that's the problem i've always seen
[10:44] mscdex: i've searched by tags on sites before and never found what i was looking for because someone either mis-tagged it by misspelling it or using an uncommon term or something
[10:44] mape: Yeah
[10:44] mape: But having categories..
[10:45] mape: I guess a way is having people add whatever categories and then have somekinda moderation of "new categories"
[10:45] mape: But that is more work
[10:45] voodoo1: do you guys know why fs.sendfile() is hidden in the api doc?
[10:45] mscdex: hmm
[10:46] mscdex: well if the package.json contains a non-standard category, then stick it under Uncategorized or something
[10:47] mape: Yeah, but that would be as bad as tags
[10:47] mape: unless the uncat is a slap on that wrist
[10:47] mscdex: either way, having full text search would let you have a better chance at finding what you want
[10:47] mape: That is true
[10:48] jan____ has joined the channel
[10:48] mscdex: and categories would just be there as a guide, not as a search replacement
[10:49] mape: More for the browsing rather then finding something specific
[10:49] mscdex: right
[11:02] mscdex: !so-next
[11:02] _announcer: Time left for the next fetch: 00:29:59
[11:02] mscdex: !so-last
[11:02] _announcer: I haven't yet received anything. Please try again later.
[11:02] mscdex: !so-check
[11:02] _announcer: Sorry. Nothing new to announce.
[11:03] mape: !so-whatchadoin?
[11:04] micheil: what's the easiest way to bulk rename files?
[11:04] micheil: (not in node)
[11:05] mape: gui wysiwyg? ;)
[11:05] mape: micheil: using osx right?
[11:05] micheil: I need to recurse into directories and rename files from ([0-9]+) \- (.*).(mp3|flac) -> $1. $2.$3
[11:05] micheil: yteah
[11:06] micheil: but command line's good too
[11:06] mape: Using? Finder? Trid forklift?
[11:06] micheil: trid forklift?
[11:07] mape: *tried
[11:07] mape: http://www.binarynights.com/
[11:07] micheil: k
[11:07] mape: Great alternative to finder
[11:08] mape: And has a nice rename funciton
[11:08] statim1 has joined the channel
[11:08] mape: *funciton
[11:08] mape: .. >_<
[11:08] mape: Not sure it does regex though
[11:08] mape: Hmm seems it doesn't 
[11:08] micheil: well, I just tried name mangler and that's slow as shit, and crashes badly
[11:08] mape: :/
[11:15] mscdex: well, "rename" on linux accepts a perl regex
[11:15] mscdex: then you just need something to recursively visit every file
[11:15] mscdex: :P
[11:15] cedricv has joined the channel
[11:16] mscdex: like find
[11:17] stepheneb has joined the channel
[11:18] Ned_: micheil: err, pretty sure that was full headers
[11:19] micheil: Ned_: not according to node.
[11:19] Ned_: interesting ...
[11:19] micheil: ACTION added a log of the request headers
[11:19] Ned_: perhaps your build of chromius is slightly different to mine ...
[11:19] micheil: there were two extras.. one sec
[11:19] Ned_: err, chromium
[11:20] Ned_: I've used wireshark, and never seen those headers
[11:20] Ned_: anyway, I have to sleep now :-(
[11:20] micheil: https://gist.github.com/ba72375c891234762bb0
[11:20] micheil: the second one is with chrome
[11:20] Ned_: I'll be about tomrorow evening hopefully 
[11:20] Ned_: laters
[11:22] _announcer: Twitter: "Building a new project with MongoDB; perfect excuse to also play with using Node.JS as a server" -- Ralph Lotion. http://twitter.com/stuartloxton/status/14488154312
[11:23] Tim_Smart: Does mongo have native full-text indexing?
[11:27] mscdex: http://www.mongodb.org/display/DOCS/Full+Text+Search+in+Mongo
[11:29] mertimor has joined the channel
[11:33] xla has joined the channel
[11:45] statim1 has left the channel
[11:54] _announcer: Twitter: "Been busy the last few weeks with TYPO3, Drupal and Magento stuff. Shifting focus now to Javascript/HTML5/CSS3 and NodeJS/Redis." -- Lars Smit. http://twitter.com/larssmit/status/14489291764
[12:05] keeto_ has joined the channel
[12:15] smtlaissezfaire has joined the channel
[12:16] stepheneb has joined the channel
[12:17] kriszyp has joined the channel
[12:24] _announcer: Twitter: "I think I'm finally sold - cucumber + nodejs for js testing. #nordicruby" -- modetojoy. http://twitter.com/modetojoy/status/14490459848
[12:25] _announcer: Twitter: "kiwiã¨nodeJSã¨expressã¤ã³ã¹ãã¼ã«ãããã¤ããã" -- ããã·ã. http://twitter.com/grapswiz/status/14490525559
[12:27] maushu has joined the channel
[12:50] smtlaissezfaire has joined the channel
[12:54] DracoBlue has joined the channel
[12:59] spoob has left the channel
[13:01] _announcer: Twitter: "@chrismdp What are the advantages of running Node.js over Rails?" -- Mark Nijhof. http://twitter.com/MarkNijhof/status/14492032886
[13:02] mscdex: !so-check
[13:02] _announcer: Sorry. Nothing new to announce.
[13:02] mscdex: :(
[13:02] mscdex: !so-last
[13:02] _announcer: I haven't yet received anything. Please try again later.
[13:02] mscdex: lies!
[13:05] kkaefer: hmm
[13:05] kkaefer: what is an assignment supposed to return?
[13:05] kkaefer: the value that is right of the assignment operator?
[13:06] mscdex: yeah
[13:06] kkaefer: or the value that is returned by the left part of the assignment operator (the variable that is being assigned to)
[13:06] kkaefer: ?
[13:06] kkaefer: http://pastie.textmate.org/private/5ak2hbutogjraaoiwrxsg
[13:06] kkaefer: it seems to be the first
[13:06] kkaefer: (it returns 'bar', not ['foo'])
[13:07] mscdex: yep
[13:07] mscdex: almost all languages i know of do it that way
[13:09] mscdex: that's why you can stack assignments: foo = bar = baz = 'hello world';
[13:10] DracoBlue has joined the channel
[13:10] kkaefer: that would be possible the other way around as well
[13:10] kkaefer: baz = 'hellow world';
[13:10] kkaefer: bar = baz;
[13:10] kkaefer: foo = bar;
[13:11] kkaefer: I guess both ways might make sense
[13:11] stagas: it's the same way
[13:11] stagas: or am i missing something
[13:11] kkaefer: no
[13:11] kkaefer: the actual way it's happening is:
[13:12] kkaefer: baz = 'hello world';
[13:12] kkaefer: bar = 'hello world';
[13:12] kkaefer: foo = 'hello world';
[13:12] stagas: when stacking you mean?
[13:13] mscdex: chaining i guess is a better word
[13:13] stagas: i always thought it happens the second way
[13:13] stagas: i mean the first
[13:13] stagas: bar = baz etc..
[13:13] mscdex: it's the second way
[13:14] stagas: nice information if you're programming a language :P
[13:15] micheil: kkaefer: you're wrong on what you said a few minutes ago
[13:15] mscdex: but really it probably doesn't make a whole lot of difference
[13:15] micheil: v8 just assigns a pointer to the variable's value of baz, and bar
[13:15] micheil: then only if you change foo will foo get it's own copy of the variable
[13:18] mape: Has there been any benchamrks on snap vs node?
[13:19] markwubben has joined the channel
[13:21] _announcer: Twitter: "Hey @heroku, any chance of a node.js beta invite?" -- Chris Parsons. http://twitter.com/chrismdp/status/14492962270
[13:37] _announcer: Twitter: "Ok, trying an entirely new stack: node.js, (possibly) express.js and mongodb." -- Chris Parsons. http://twitter.com/chrismdp/status/14493713023
[13:39] _announcer: Twitter: "Here's a fast #XML SAX parser I just wrote for #nodejs: http://github.com/astro/node-expat" -- Astro. http://twitter.com/astro1138/status/14493770017
[13:39] zomgbie has joined the channel
[13:43] xla has joined the channel
[13:46] olegp has joined the channel
[13:50] mfeiri has joined the channel
[13:51] MattJ: Hmm, why wouldn't node print a line number/traceback on error?
[13:52] MattJ: Ah, nm
[13:53] polotek has joined the channel
[13:54] maushu: mscdex, those are just stackoverflow stuff. New questions are pretty rare.
[13:54] kkaefer: are objects (hashes) ordered in v8?
[13:54] maushu: I need to make the twitter versions.
[13:54] mscdex: i know, but still :-(
[13:55] kkaefer: i.e. can I rely on a specific order?
[13:55] polotek: kkaefer: object properties you mean?
[13:55] kkaefer: yes
[13:55] mscdex: kkaefer: from my experience they're always appended
[13:56] polotek: in practice they seem to always be ordered
[13:56] polotek: but it's not part of the spec
[13:56] polotek: so technically no you shouldn't rely on it
[13:56] micheil: kkaefer: never ever rely on something being ordered, unless you're explicitly sorting it.
[13:56] kkaefer: polotek: yeah, that's why I'm asking whether I can rely on it in v8
[13:56] micheil: kkaefer: are you sorting it?
[13:56] voodootikigod has joined the channel
[13:56] kkaefer: it's sorted in the definition
[13:56] micheil: no it isn't.
[13:57] kkaefer: micheil: I'm aware that the spec doesn't say it's ordered
[13:57] micheil: an object just has a collection of properties, no indexes or anything
[13:57] kkaefer: yeah
[13:57] micheil: an array is like an object in many respect, though the keys are just incremental numbers
[13:57] micheil: so your array is order, but objects are not.
[13:57] polotek: yeah if you need to depend on order, use an array
[13:58] micheil: or use a doubly linked list :D
[13:59] jedschmidt has joined the channel
[13:59] kkaefer: ok, thanks for the feedback
[13:59] mscdex: hehe
[14:00] mjijackson has joined the channel
[14:00] mscdex: micheil and his js data structures :P
[14:00] micheil: mscdex: naturally.
[14:00] micheil: oh man.. yet _another_ push is coming to change websocket handshakes
[14:01] mape: making it even easier?
[14:01] _announcer: Twitter: "@MarkNijhof check out haml-js.js, sass.js and node-mongodb-native.js :)" -- Chris Parsons. http://twitter.com/chrismdp/status/14494907202
[14:02] halorgium: hrm, i just unglobal'd express
[14:05] _announcer has joined the channel
[14:05] maushu: !so-last
[14:05] _announcer: Last Question: "How do i close a socket after a timeout in node.js?" by rramsden. http://stackoverflow.com/questions/2886191
[14:06] mscdex: le gasp!
[14:07] maushu: Now it gets the last question disregarding if it is was pooled or not.
[14:09] stagas: nice
[14:10] polotek: is the code for this announcer available somewhere?
[14:11] maushu: *sigh*
[14:11] polotek: maushu: did I say something wrong?
[14:12] maushu: No, I'm just lazy.
[14:12] maushu: polotek, http://graphnode.com/stuff/ircbot.js
[14:13] micheil: mape: not sure
[14:13] mape: ?
[14:13] mape: oh
[14:13] maushu: The code is horrible.
[14:13] mape: :/
[14:14] micheil: mape: I can't find exact information, but it means there'll be then 3 loose versions
[14:14] mape: the more the merrier...
[14:14] airportyh has joined the channel
[14:15] maushu: Regarding http://stackoverflow.com/questions/2886191 won't timeout close the socket anyways?
[14:15] _announcer: Twitter: "YUI Theater - Ryan Dahl: âIntroduction to NodeJSâ (58 min.) http://bit.ly/a17eO8" -- The Frontend. http://twitter.com/thefrontend/status/14495622244
[14:17] jedschmidt: not sure i care for _announcer. it's a little noisy.
[14:17] mscdex: i still vote for InTheNode :P
[14:18] maushu: jedschmidt, it's not that noisy, the channel is just too silent. :p
[14:18] mape: jedschmidt: apparently /ignore is the option :)
[14:19] jedschmidt: maushu: maybe i should start tweeting incessantly to make the channel noisier.
[14:19] mape: :P
[14:19] maushu: Oh nice. That would give me the excuse to create a blacklist.
[14:19] mscdex: well, at least it gives us an idea of who is using node and how
[14:19] maushu: !blacklist jedschmidt
[14:20] _announcer: Twitter: "YUI Theater - Ryan Dahl: âIntroduction to NodeJSâ (58 min.) http://bit.ly/9blcxU #design #JavaScript" -- Jessyka. http://twitter.com/yummymashup/status/14495872097
[14:20] maushu: ACTION facepalms.
[14:20] jedschmidt: mape: thanks for the tip. i'll let it slide for now.
[14:20] jedschmidt: ha ha!
[14:20] maushu: IT'S NOT MY FAULT!
[14:20] jedschmidt: awesome timing, _announcer.
[14:20] mape: micheil: it ignores -rt and native retweets?
[14:20] maushu: Yes.
[14:20] maushu: People just don't use them!
[14:21] mape: micheil: use the google prediction api to make sure they are english :P
[14:21] micheil: huh?
[14:21] jedschmidt: maybe you need to do a levenshtein against all recent tweets.
[14:21] mscdex: lol @ tab completion fail
[14:21] mscdex: :P
[14:21] mape: micheil: -> mscdex -> maushu 
[14:21] polotek: maushu: people do use them
[14:21] maushu: mape, or just check the language property?
[14:21] polotek: but I don't think they show up in searches or lists
[14:21] mscdex: hehe
[14:22] mape: maushu: That doesn't do much, I am tagged as english but tweet in swedish now and then
[14:22] mape: My OS is english, my client is english and I assume my profile is english.
[14:22] maushu: jedschmidt, *all* tweets? Madness.
[14:22] mape: maushu: last 50?
[14:23] jedschmidt: all _recent_ tweets, yeah.
[14:23] jedschmidt: andrea giammarchi had a good levenshtein implementation somewhere, i think.
[14:25] _announcer: Twitter: "KITTIES! (Ignore me, just annoying jed for greater justice!) #node.js" -- Graphnode. http://twitter.com/graphnode/status/14496141216
[14:26] jedschmidt: i'm tempted to ghetto retweet that.
[14:26] maushu: GO AHEAD.
[14:26] maushu: Make my day, punk!
[14:26] mape: why do people use different names on twitter/irc :/
[14:26] mape: not ok
[14:26] maushu: Graphnode is my "company".
[14:27] maushu: I don't have a personal twitter.
[14:27] mape: @cocacola - Ignore me, just annoying random person using company twitter account? :P
[14:27] micheil: damn.. some tech reviewer is proposing that websockets shouldn't use their own handshake, but rather just SSL handshakes,
[14:27] maushu: Pretty much.
[14:27] micheil: with certificates and all
[14:28] maushu: micheil, I agree.
[14:28] mape: micheil: Perhaps you should just make your own standard? ;)
[14:28] micheil: mape: it wouldn't be supported by browsers.
[14:28] mape: sure you could just add some nice activex code to make it jump
[14:30] micheil: mape: smart-arsery not appreciated there.
[14:30] mape: Hehe sorry
[14:32] micheil: yeah, just kinda pissed that anyone would suggest using ssl for websockets, when really, we've already got an ssl varient, wss
[14:32] micheil: (like https)
[14:33] micheil: I needs a tea or something.
[14:33] micheil: bbl
[14:37] voodoo2 has joined the channel
[14:38] _announcer: Twitter: "I like the idea of phoneGap playing front-end for node.js + mongodb stack. Could be awesome. http://building-iphone-apps.labs.oreilly.com" -- levicook. http://twitter.com/levicook/status/14496842851
[14:39] voodoo2 has left the channel
[14:43] _announcer: Twitter: "@jamescarr definitely. I'm working on establishing a good BDD workflow/toolset for V8 and Node.js" -- Corey Haines. http://twitter.com/coreyhaines/status/14497134524
[14:47] maushu: jedschmidt, You were right, it is noisy, but the contents are interesting and that is what matters imho.
[14:48] micheil: maushu: it needs more links :P
[14:48] maushu: Still, I need somehow to find out what a tweet is answering for. Like this last one.
[14:48] jedschmidt: there are a lot of interesting things. i'm just not sure they all deserve to be in the channel.
[14:48] mape: filter:links ?
[14:49] jedschmidt: if i wanted this info, i would just add a saved search in twitter.
[14:49] steadicat has joined the channel
[14:49] maushu: I use irc, not twitter.
[14:49] maushu: :p
[14:49] mape: maushu: then use irssi and the perl script for using twitter ;)
[14:49] _announcer: Twitter: "@coreyhaines you should talk to @tjhallowaychuk. He uses his jspec framework for BDD'ing node.js code" -- jamescarr. http://twitter.com/jamescarr/status/14497483603
[14:49] maushu: Nein.
[14:50] maushu: Oh look, someone answered that last tweet.
[14:50] maushu: I wonder if Corey will send a message to tjhallowaychuk and it shows up here.
[14:51] mape: Gah, the cursed smell of bbq just attacked me :(
[14:51] maushu: mape, GIVE IN! GIVE IIIIIIIIIIIIIIIIIIN!
[14:52] mape: Bah I live in an apartment and I can't bbq on my balcony
[14:53] smtlaissezfaire has joined the channel
[14:54] mape: techfoolery.com
[14:54] mape: those kinda things are scary
[14:54] mape: mime types on the fly
[14:54] mape: and I wanted to watch http://techfoolery.com/mxhr :(
[14:57] wilmoore has joined the channel
[15:00] mape: Anyone happen to know Ross Harmes ?
[15:00] polotek: I was asking this question last night, so sorry if you're hearing it again
[15:01] polotek: I'm streaming a response from http
[15:01] polotek: want to consume it with curl for testing
[15:01] mertimor has joined the channel
[15:01] polotek: but curl keeps crapping out with an error about the "chunky parser"
[15:01] polotek: seems to be a problem with the formatting of my chunked response
[15:01] polotek: anybody seen this and have any insight?
[15:01] mape: So.. How do you find peoples phone numbers in the US?
[15:02] polotek: curl: (56) Received problem 2 in the chunky parser
[15:05] pgriess has joined the channel
[15:05] maushu: polotek, no idea.
[15:09] mape: That is pretty annoying, public people on the web that you have no way of contacting..
[15:10] _announcer: Twitter: "On the short list of things to experiment with when I have some time: node.js, cucumber, and fog." -- Larry Wright. http://twitter.com/larrywright/status/14498689175
[15:12] markwubben has joined the channel
[15:13] _announcer: Twitter: "leejohnson: YUI Theater Ã¢ÂÂ  Ryan Dahl: Ã¢ÂÂIntroduction to NodeJSÃ¢ÂÂ (58 min.) - http://is.gd/ciHyK: leejohnson: Y... http://bit.ly/ddtqf3" -- Guggull. http://twitter.com/Guggull/status/14498837030
[15:14] smtlaissezfaire has joined the channel
[15:14] stevendavie has joined the channel
[15:14] xn-1L1a has joined the channel
[15:24] hdhoang has joined the channel
[15:26] _announcer: Twitter: "released #expressjs 0.12.0 http://bit.ly/9PHa5p for #nodejs" -- TJ Holowaychuk. http://twitter.com/tjholowaychuk/status/14499596786
[15:27] _announcer: Twitter: "Ryan Dahl on #node.js video http://www.yuiblog.com/blog/2010/05/20/video-dahl/" -- Steve Tran. http://twitter.com/clu3/status/14499651048
[15:32] maushu: *sigh*
[15:32] markwubben has joined the channel
[15:32] maushu: If _ry didn't talk so much on videos we wouldn't have such spam.
[15:33] _announcer: Twitter: "@redsquirrel What are you using (going to use) to test the Node.js?" -- Mark Nijhof. http://twitter.com/MarkNijhof/status/14499982484
[15:34] richcollins has joined the channel
[15:36] _announcer: Twitter: "@redsquirrel [patch] resourceful.js:69 add encoding param 'utf8' for latest node.js version :)" -- Chris Parsons. http://twitter.com/chrismdp/status/14500133796
[15:38] polotek: maushu: why not filter tweets that are sharing duplicate links?
[15:38] maushu: Thinking about it.
[15:39] polotek: although I still haven't watched the yui video
[15:39] polotek: on my list for today
[15:39] alexiskander has joined the channel
[15:40] maushu: polotek, wouldn't need to parse those small urls and besides that it wouldn't work for what happened since Steve Tran linked to a tweet that linked to the video.
[15:40] maushu: *sigh* People are so desorganized.
[15:40] polotek: yeah but that wouldn't happen often
[15:40] _announcer: Twitter: "wtf... no more sys.p() #nodejs ? sys.puts(sys.inspect(obj)) sure is not user friendly" -- TJ Holowaychuk. http://twitter.com/tjholowaychuk/status/14500387979
[15:40] polotek: it would at least greatly reduce the noise
[15:42] alex-desktop_ has joined the channel
[15:43] stevendavie has joined the channel
[15:43] huntaub has joined the channel
[15:43] huntaub has left the channel
[15:43] _announcer: Twitter: "@chrismdp Careful, that's not the behavior of node.js on @heroku." -- Dave Hoover. http://twitter.com/redsquirrel/status/14500580397
[15:45] huntaub has joined the channel
[15:51] maushu: Hmmm, what behavior?
[15:52] chakrit has joined the channel
[15:53] polotek: talking about getting a Buffer instead of string
[15:53] polotek: when not specifying encoding
[15:54] _announcer: Twitter: "New video: Introduction to NodeJS by Ryan Dahl, http://is.gd/ckBRc The separation between "pure" code and IO code reminds me of Haskell" -- Joni Salonen. http://twitter.com/jonisalonen/status/14501170500
[15:54] mape: sys.p removed?
[15:55] polotek: deprecated
[15:55] mape: :/
[15:55] polotek: didn't really follow the reasoning
[15:55] polotek: simple to recreate though.  think ry is trying to remove the unnecessary stuff from the api
[15:55] vanstee has joined the channel
[15:56] mape: jup
[15:58] maushu: We only need sys.puts, NOTHING MORE.
[15:58] steez has joined the channel
[15:58] mape: WHY?
[15:59] micheil: sys.p is useful for debugging, just like sys.log
[15:59] steadicat has joined the channel
[15:59] _announcer: Twitter: "Just made a nice little node.js app to post twitter items over to IRC: http://bit.ly/bLgxrG #goruco" -- Chris Williams. http://twitter.com/voodootikigod/status/14501457302
[15:59] micheil: but both are fairly easy to do on top of sys.puts
[16:03] _announcer: Twitter: "working on a cool nodejs framework with @creationix, adding the tests back :p haha" -- TJ Holowaychuk. http://twitter.com/tjholowaychuk/status/14501669128
[16:06] charlesjolley has joined the channel
[16:08] mjr_: Would it be a bug or a feature to have the twitter gateway be two-way?
[16:09] chakrit: two way?
[16:12] icebox has joined the channel
[16:14] maushu: ...I just found out twitter-node.
[16:14] cedricv has joined the channel
[16:14] polotek: twitter-node is cool
[16:15] maushu: It's not on the modules section.
[16:16] maushu: Well, at least I learned how the twitter api works.
[16:16] aconbere: bah
[16:16] polotek: maushu: you could also do me a solid and try out my evented-twitter
[16:17] polotek: http://github.com/polotek/evented-twitter
[16:17] maushu: I don't do solids, only liquids.
[16:17] maushu: ...
[16:17] polotek: fortunately I have no idea where that phrasing comes form
[16:17] polotek: so do whatever works for you
[16:17] maushu: Why don't you put in the modules section?!
[16:17] polotek: I just made the decision to do that
[16:18] polotek: wanted to test it more first
[16:18] maushu: Not fast enough.
[16:18] maushu: :p
[16:18] polotek: but whatever
[16:18] maushu: An example that shows every capability would be welcome.
[16:18] maushu: *would also
[16:19] polotek: yet another reason why it's not released :)
[16:19] polotek: streaming is easy though
[16:19] polotek: I'll give you a gist
[16:20] aconbere: jan____: you're sure you want to keep rake deps around in js files? :)
[16:21] _announcer: Twitter: "all this node.js stuff ... sweet http://howtonode.org/" -- Antonio Terreno. http://twitter.com/javame/status/14502717559
[16:25] mattly: polotek: any progress on that framework we were all talking about last night?
[16:26] mattly: :p
[16:26] mattly: i looked at halorgium's code sketch from gist again and it all "clicked"
[16:27] mattly: i'm half tempted to spend today rewriting neutrino to make it work that way
[16:28] mattly: the only thing I see as being problematic is that there's no way for a middleware to say "here's what I want to do when we have the complete request", which makes any kind of implementation of say, a Content-Length header middleware that doesn't buffer impossible
[16:28] polotek: mattly: http://twitter.com/tjholowaychuk/status/14501669128
[16:28] mattly: oh, shit
[16:29] mattly: wait
[16:29] mattly: are they doing that now?
[16:29] polotek: looks that way
[16:29] polotek: creationix is not on here so I don't know what's actually happening
[16:29] mattly: bah
[16:30] polotek: if you need the complete request you have to buffer. what's the problem with that?
[16:30] mattly: well
[16:30] polotek: you can message creationix on github. he's usually good about responding
[16:30] mattly: it'd be nice if there were a framework-accepted way of indicating "complete" responses versus imcomplete ones
[16:31] polotek: although that's a little gauche :)
[16:31] chakrit: Hmmm.... http://bit.ly/9fjvT9
[16:31] steadicat has joined the channel
[16:31] mattly: polotek: this was my approach: http://github.com/mattly/neutrino/blob/develop/lib/core.coffee#L9
[16:32] polotek: chakrit: don't use singletons, just use anonyous functions
[16:33] polotek: man gotta get used to reading coffee script
[16:33] mattly: heh
[16:33] polotek: it's like an unholy melding of js and ruby
[16:33] mattly: to be fair
[16:33] chakrit: polotek: The thing is
[16:33] mattly: if i had ever intended on sharing it i would have just used js
[16:33] chakrit: The author of that article has wrote a whole book with the word "Profressional" in the title
[16:33] polotek: wat does next() do exactly?
[16:33] mattly: but coffeescript is rapidly approaching my ideal
[16:33] mattly: next() punts to the next function
[16:34] mattly: in the chain
[16:34] polotek: I think that's the only thing I wasn't decided on last night
[16:34] polotek: the mechanism for invoking the next layer
[16:34] aconbere: chakrit: yeah... but most books written about javascript are insane
[16:34] polotek: and I'm not sure I want it hidden behind and ambiguous "next"
[16:34] polotek: ACTION nods to aconbere 
[16:34] aconbere: in fact... I would argue that most of the things publshed associated with javascript including code is mostly insane
[16:35] mattly: halorgium's approach seems to use wrapping the function
[16:35] mattly: wait
[16:35] mattly: people need js books beyond "the good parts" ?
[16:35] polotek: mattly: that's the approach I'm most familiar with
[16:35] jedschmidt has joined the channel
[16:35] chakrit: ACTION wanna choke some random guy on the internet till he stops writing Java >:-<
[16:35] polotek: from other frameworks
[16:35] polotek: but I'm not married to it
[16:35] chakrit: aconbere: couldn't agree more
[16:35] chakrit: :(
[16:37] polotek: chakrit: dynamic languages are really good at negating the need for formal patterns
[16:37] mattly: polotek: the problem that occurred to me with calling is that with async you can't reliably know when the called function is truly "done"
[16:37] mattly: per-se
[16:37] polotek: or at least the formal patterns that were needed for more static languages
[16:37] polotek: well that's part of what creationix was saying last night
[16:38] mattly: the other thing
[16:38] polotek: the middleware has to decide if it has to deal with the full request or whether it can strea it
[16:38] polotek: stream
[16:38] ncb000gt has joined the channel
[16:38] polotek: once you pick on of those, that dictates how you interact with the downstream layer
[16:38] mattly: is that if a middleware wants to read from the already given response headers before it goes out
[16:38] mattly: it gets a lot trickier
[16:38] mattly: right
[16:38] ncb000gt: anyone have a link handy to the v8 api?
[16:39] mattly: i figured making it explicit with a callback you have to call was sane
[16:39] polotek: ncb000gt: you mean like docs? don't bother
[16:39] mattly: however it requires good testing
[16:39] ncb000gt: polotek: yes
[16:39] mattly: because if your code gets into some branch where the "next" callback is never called
[16:39] mattly: then the app "hangs"
[16:39] polotek: yeah
[16:39] mattly: and a response is never sent
[16:40] polotek: so the thing is
[16:40] polotek: every layer has to provide the same common api to the layers above
[16:40] mattly: right
[16:40] _announcer: Twitter: "node.js is nice :)" -- jinjing. http://twitter.com/jinjing/status/14503756123
[16:40] polotek: so even if some part of your code is borked and never calls the downstream app
[16:40] polotek: the upstream layer can still call end() on you to make sure you stop
[16:41] mattly: i'm of the opinion that you shouldn't protect stupid people from themselves
[16:41] polotek: at the very least the request will return
[16:41] polotek: albeit in an undefined state
[16:41] polotek: not protecting stupid people
[16:41] polotek: protecting your web server FROM stupid people :)
[16:41] mattly: ok so what, you wrap the end() call in a timeout? what happens if there's a legitimate reason for the request to take a long time?
[16:41] mattly: haahhaah
[16:41] mattly: well no
[16:41] mattly: see
[16:41] mattly: the app doesn't "hang"
[16:41] mattly: it just never responds
[16:42] polotek: not saying you have to have a timeout by default
[16:42] polotek: but it's always an option to do so
[16:42] mattly: i mean i guess you have an issue of the open request is still around
[16:42] mattly: so a skilled attacker knowledgeable about how to elicit these sorts of responses
[16:42] polotek: I get what you mean but I think it can be handled with the scheme we were discussing
[16:42] mattly: could theoretically cause a problem with too many open response objects
[16:42] polotek: would be easier to see in code though
[16:42] mattly: yeah
[16:42] chakrit: ncb00gt: You can just read through _ry's node source code... it's not a mess :)
[16:43] mattly: i'm not entirely convinced that forcing an end() is a good idea
[16:43] mattly: i mean how do you know for certain that the downstream code gave up?
[16:43] polotek: ncb000gt: http://groups.google.com/group/nodejs/browse_thread/thread/49e016231cec8545/d54e9d71be054740?lnk=gst&q=v8+resources#d54e9d71be054740
[16:44] stevendavie has joined the channel
[16:45] ncb000gt: chakrit: I'm specifically looking for how to get a frakin double out of the arguments
[16:45] ncb000gt: because i need to pass it to a function
[16:45] ncb000gt: tho in the types source there doesn't appear to be a ToDouble() method
[16:45] ncb000gt: =\
[16:46] ncb000gt: even tho there is a IsDouble method...least surprise my ass
[16:46] chakrit: ncb000gt: I'm of no use then :(
[16:46] chakrit: not a pro at C
[16:47] polotek: if(args[0]->IsNumber()) double d = args[0]->NumberValue()
[16:47] polotek: I'm trying to find the page where the guy describes how to use doxygen to generate docs for v8
[16:47] polotek: that's what I did
[16:48] polotek: in fact. everybody hang tight
[16:48] ncb000gt: hmm this is kind of a swanky visualization of the v8 api
[16:48] ncb000gt: http://bespin.cz/~ondras/html/classv8_1_1Primitive.html
[16:48] polotek: ACTION starts digging through files
[16:48] ncb000gt: polotek: thanks, i'll try er out
[16:49] unomi has joined the channel
[16:49] pkrumins: ncb000gt: that's some old shiiat.
[16:49] ncb000gt: polotek: blam, compiled and running :) ty
[16:49] pkrumins: just sayin'.
[16:50] ncb000gt: pkrumins: lol, i don't care if it's old or not, just commenting on the visualization...though I know that specific display of information has been around for a bit
[16:51] mattly: polotek: so i hit up tj / creationix on twitter asking why they weren't in here getting people excited about what they were doing
[16:51] polotek: those are the docs generated by running doxygen on the v8 source
[16:52] dridge has joined the channel
[16:52] ncb000gt: ACTION declares that he is an idiot and will shame himself to more source code.
[16:52] magcius_ has joined the channel
[16:52] Yuffster has joined the channel
[16:54] JimBastard has joined the channel
[16:55] JimBastard: chea, i got node mentioned on the ruby5 podcast http://ruby5.envylabs.com/
[16:55] JimBastard: for faker.js
[16:55] polotek: http://marcorogers.com/blog/static/v8/doxygen/index.html
[16:55] maushu: You are such a fake.
[16:55] polotek: anybody know if it's kosher to post this stuff online?
[16:55] JimBastard: they said, "hey i gotta go check out node, its good to see the library maturing!"
[16:55] mattly: ncb000gt: fwiw my morning dyslexia read your nick as "n000bcgt"
[16:55] polotek: cause it's done
[16:56] polotek: mattly: what's the work from them?
[16:56] mattly: JimBastard: rubyists should be the last people to complain about a shitty library
[16:56] JimBastard: ?
[16:56] mattly: polotek: nothing
[16:56] mattly: JimBastard: five years ago, ruby had practically *no* library
[16:56] stagas has joined the channel
[16:57] polotek: http://marcorogers.com/blog/static/v8/doxygen/hierarchy.html
[16:57] polotek: useful
[16:57] mattly: and now it's convoluted enough that rails' main sponsor has people working on a dependency management tool
[16:57] ncb000gt: polotek: sweet
[16:57] polotek: who needs dep management
[16:57] polotek: just gem install until everything works
[16:57] mattly: rubyists, for one
[16:57] polotek: :P
[16:57] mattly: hahaha
[16:58] ncb000gt: :s/(until|works)//
[16:59] stagas: noob question: how do I install a module for node.js? I want to install for example this: http://github.com/akaspin/nun 
[16:59] kriszyp has joined the channel
[16:59] JimBastard: huh
[16:59] JimBastard: i dont know wtf you talkinog about mattly 
[17:00] JimBastard: no one was complaining
[17:00] mattly: oh
[17:00] JimBastard: it was giving node props
[17:00] plutoniix has joined the channel
[17:00] ncb000gt: stagas: you can put it into your ~/.node_libraries directory
[17:00] ncb000gt: that will make it visible to require()
[17:01] stagas: should I create a folder for it I guess
[17:01] ncb000gt: for what
[17:01] ncb000gt: if you don't have ~/.node_libraries then create that
[17:01] stagas: ok
[17:02] ncb000gt: otherwise you can either `git clone` or symlink nun into that directory
[17:02] [[zz]] has joined the channel
[17:03] polotek: man we gotta get people to start structuring their packages properly
[17:03] cedricv has joined the channel
[17:03] polotek: properly is subjective I guess
[17:03] polotek: how about just "the same"
[17:04] chakrit: polotek: There should be some document for that on nodejs.org that'd help a lot
[17:05] polotek: I proposed that on the mailing list yesterday
[17:05] polotek: there is a debate going about package managers
[17:05] ncb000gt: polotek: was that in page 3 or 15 of your email?
[17:05] ncb000gt: >=D
[17:07] maushu: Yeah, let's start a package war!
[17:07] chakrit: wasn't there a CommonJS way to do that?
[17:07] JimBastard: NPN wins, flawless victory
[17:08] chakrit: they're still debating? hmm...
[17:08] JimBastard: NPM
[17:08] JimBastard: now its time to make the real hard decision, http://i.imgur.com/l8jzY.jpg
[17:08] chakrit: oh... you mean the managers :)
[17:08] polotek: commonjs has a package spec. but it hasn't actually been fully accepted
[17:09] mattly: JimBastard: hahahahahahahahaahahahahaa
[17:09] mattly: hee
[17:09] chakrit: lolz
[17:09] mattly: oh god
[17:09] mattly: that's so horrible
[17:10] JimBastard: WHY COULDNT SHE HAVE BEEN THE OTHER TYPE OF MERMAID
[17:10] JimBastard: WITH THE LADY PARTS ON THE BOTTOM AND THE FISH PART ON TOP!
[17:11] polotek: Did it just get warmer?
[17:11] JimBastard: hee hee
[17:11] JimBastard: <3 futurama
[17:14] polotek: maushu: you still around?
[17:14] polotek: http://gist.github.com/410216
[17:14] maushu: Yes.
[17:16] perdix has joined the channel
[17:18] polotek: sorry
[17:18] polotek: http://gist.github.com/410217
[17:18] mfeiri_ has joined the channel
[17:19] polotek: It also supports the rest api
[17:19] polotek: require('evented-twitter').Twitter
[17:19] hdhoang has left the channel
[17:19] polotek: check out the methods on there
[17:25] stagas: sorry I get this when running any script in nano and nun http://gist.github.com/410220 know what might be? all the tests fail is it probably incompatible with the latest node.js or have I setup anything wrong?
[17:26] maushu: stagas, Hash is undefined?
[17:26] maushu: init is undefined?
[17:26] stagas: i'm just running the tests that come with the package
[17:27] stagas: and with a script I setup it shows the same error on all
[17:27] stagas: : crypto:3638 return (new Hash).init(hash);
[17:28] _announcer: Twitter: "@redsquirrel Creator of JSpec says: personally i just use `node spec/node.js`" -- Mark Nijhof. http://twitter.com/MarkNijhof/status/14506306465
[17:28] stagas: it's the first module I try with node.js so I should probably try another one maybe its incompatible or something
[17:28] stagas: or then my setup is wrong
[17:39] pgriess has joined the channel
[17:43] tylerstalder has joined the channel
[17:44] felixge has joined the channel
[17:44] felixge has joined the channel
[17:45] felixge: who needs a freaking a freaking test framework? http://github.com/felixge/node-formidable/blob/master/test/simple/test-incoming-form.js
[17:45] felixge: JS == <3
[17:45] mape: a freaking freaking what?
[17:47] mattly: polotek: hey I'd be curious to hear your feedback on this: http://gist.github.com/410233
[17:48] maushu: I need a test framework for my test frameworks.
[17:49] mfeiri has joined the channel
[17:49] _announcer: Twitter: "Very excited. The @ajax_org graphical web based debugger I'm working on can do basic debugging on node.js.  http://twitpic.com/1q2sl3" -- Fabian Jakobs. http://twitter.com/fjakobs/status/14507386932
[17:50] felixge: maushu: lol
[17:50] _announcer: Twitter: "Who needs a test framework? #nodejs gently FTW: http://bit.ly/cNQDGQ" -- Felix GeisendÃ¶rfer. http://twitter.com/felixge/status/14507469990
[17:50] felixge: *wow*
[17:50] felixge: that was realtime
[17:51] felixge: that's insane
[17:51] felixge: we live in the future
[17:51] felixge: :)
[17:51] _announcer: Twitter: "@redsquirrel Last post "Use with node.js"" -- Mark Nijhof. http://twitter.com/MarkNijhof/status/14507510315
[17:53] polotek: maushu: example with http. http://gist.github.com/410246
[17:54] maushu: The api is goddamn confusing.
[17:54] maushu: Not user friendly at all. :p
[17:54] mattly: polotek: that gist is basically a more concrete example of halorgium's thing from last night
[17:55] felixge: would be cool if the bot also did the mailing list
[17:55] polotek: that's not about the framework though
[17:55] polotek: that's just an example of using my evented-twitter lib
[17:55] polotek: but if it helps you, go for it :)
[17:58] _announcer: Twitter: "Finally decided to "release" my twitter client for #nodejs, http://github.com/polotek/evented-twitter http://gist.github.com/410217" -- Marco Rogers. http://twitter.com/polotek/status/14507862218
[17:58] polotek: good god that was fast
[17:59] tmpvar has joined the channel
[17:59] polotek: felixge: truncated hopefully. some folks are long winded on there
[17:59] polotek: ACTION looks away and whistles
[18:00] felixge: polotek: truncated?
[18:00] polotek: mailing list posts
[18:00] felixge: ah yeah
[18:00] mattly: the more popular a project gets, the more useless its mailing list becomes
[18:00] polotek: I subscribed to the digest emails from django-users once
[18:00] polotek: it's insane
[18:01] polotek: dozens of questions every few hours
[18:01] polotek: very little answers
[18:01] polotek: hopefully node will get to those lofty heights one day
[18:01] mattly: the other measurement is how useless the irc channel is
[18:02] mattly: see also #rubyonrails
[18:02] chakrit: We could just direct people to stackoverflow.com ... :)
[18:02] mattly: haha
[18:02] aconbere: uhg
[18:02] aconbere: #rubyonrails was never worth a damn
[18:02] aconbere: just like #ubuntu
[18:02] chakrit: kidding haha
[18:02] mattly: aconbere: it was, back in 2005
[18:02] mattly: #ror that is
[18:03] mattly: and then it got really popular overnight and a bunch of us took refuge in a backchannel
[18:03] aconbere: ACTION tries to remember 5 years ago
[18:03] scudco has joined the channel
[18:04] mattly: heh
[18:04] mattly: i have an unusually good long-term memory
[18:04] aconbere: It was definitely around that time that I picked up ROR for the first time
[18:04] aconbere: but not long after that django got released and I had a much easier time figuring that out
[18:04] mattly: mid-to-late 2005 we started getting trolls in there
[18:05] mattly: one in particular went by "svedka"
[18:05] mattly: and he had a 'bot that would post nazi ascii art
[18:05] mattly: had to work with the freenode admins to get him banned
[18:05] mattly: it took several months, he was persistent
[18:06] siculars has joined the channel
[18:06] mape: hehe
[18:06] mape: he just didn't like ror?
[18:06] mattly: no clue
[18:06] mape: Seems svedka is a swedish vodka..
[18:06] mattly: yeah, we all made the connection
[18:07] mattly: a couple of times he would masquerade as other people in the channel
[18:07] mattly: who didn't have protection set on their nicks
[18:07] mattly: and a few people he even registered their nicks and caused all sorts of grief
[18:07] mattly: IMO anyone with that much time on their hands obviously isn't getting laid enough
[18:09] aconbere: haha
[18:09] mape: last logging week old irc logs is no fun 
[18:10] aconbere: okay
[18:10] aconbere: what the heck am I going to do today
[18:11] aconbere: I need a more complete git interface
[18:12] mattly: halorgium: ok I'm sold on your style of app stacking
[18:12] aconbere: but I hate writing all that shelling out stdin / stdout stuff (admittedly better in node than many other languages)
[18:12] mattly: i wish creationix/tj were here so i could see if they were doing something similar
[18:12] ashb: aconbere: port Git::PurePerl to JS then
[18:12] mattly: elsewise i think i'm going to spend this rainy saturday reworking neutrino into this
[18:14] aconbere: ashb: not a terrible idea, I was looking to see if there was a decent api I could just write a little C FFI wrapper for
[18:14] aconbere: but maybe just some rote porting wouldn't be so bad
[18:14] ashb: i'm not aware of any C api
[18:14] ashb: most of git itself is written to shell out to the various git-xyz tools iiuc
[18:15] aconbere: yeah
[18:15] aconbere: which is just a shame
[18:15] polotek: mattly: I'm trying out this gist
[18:15] mattly: ok
[18:15] polotek: it's a good start
[18:15] mattly: disclaimer: it might not actually work
[18:15] polotek: but there are a few issues
[18:15] mattly: :p
[18:15] mattly: heh
[18:15] mattly: of course
[18:15] polotek: res.write can't be async
[18:15] polotek: cause then all the writes will fall through and res.end will get called before they are finished
[18:16] mattly: hm
[18:16] mattly: that's problematic
[18:16] mattly: so there should be some sort of top-level wrapper around write that maintains a "are we writing"
[18:17] mattly: and a wrapper around end that checks that
[18:18] mattly: that was a nice thing about the approach i took with event listeners on neutrino
[18:18] mattly: hmmmm
[18:20] mattly: i think it might be easier to shoot yourself in the foot with the function overriding than with event listeners, but idk
[18:22] mattly: polotek: so maybe we have a top-level write function that takes a callback
[18:22] mattly: and instead of doing res.write(chunk)
[18:22] mattly: res.write(funciton(){ return chunk })
[18:22] mattly: eh
[18:23] richcollins has joined the channel
[18:23] polotek: mattly: hmm
[18:23] mattly: but then it could get a queue going
[18:23] polotek: yeah you'd have to insure fifo behavior
[18:23] polotek: but that's not too bad
[18:23] mattly: right
[18:24] mattly: res.write(function(write){ write(chunk) {)
[18:25] mattly: res.write(function(){ this(chunk) })
[18:25] mattly: thinking in async has got me very wary of anything that needs "return"
[18:26] mattly: ACTION reworks his gist
[18:26] _announcer: Twitter: "Beginning to believe in node.js. Now if only the documentation would match the ever-changing code..." -- Robert Newson. http://twitter.com/rsnewson/status/14509241685
[18:26] felixge has joined the channel
[18:26] felixge has joined the channel
[18:26] steadicat has joined the channel
[18:31] polotek_ has joined the channel
[18:31] polotek_: hmm, power outage
[18:32] mattly: polotek: updated the gist
[18:32] mattly: oh wait shit
[18:32] mattly: logger's write needs to be reworked
[18:35] _announcer: Twitter: "the lack of working examples of express.js, kiwi and node makes playing with them a lot more work." -- ruzz. http://twitter.com/ruzz/status/14509691696
[18:36] mattly: updated again
[18:40] mikeal has joined the channel
[18:41] _announcer: Twitter: "@andrwj ì¤ì°~ ëë¨íìë¤ì. ì¸ì  ì´ë° ë¬¸ìë¥¼... ì ë ì ëª¨ë¥´ë ë¶ë¶ë¤ì´ ë§ë¤ì. ããã ê·¼ë° ìµì í ë¬¸ìì  node.jsì¤ì¹ê° ìë¤ì. ãã" -- Outsider. http://twitter.com/Outsider__/status/14509931337
[18:41] polotek: the more I think about it, I don't think we can change the res.write api
[18:42] polotek: mattly: I'll have to look at this more in depth later
[18:42] polotek: gotta focus on something else
[18:42] mattly: heh
[18:42] mattly: well
[18:42] polotek: but the async write is definitely an issue that needs to be solved
[18:42] mattly: i'm not sure what else to do about write
[18:42] mattly: yeah
[18:42] mattly: anyway later
[18:42] hdhoang has joined the channel
[18:42] mattly: i'll think about it too
[18:42] polotek: I'm not leaving
[18:42] polotek: just can't get sidetracked looking at other stuff
[18:43] polotek: while my library is crapping out ;)
[18:43] mattly: heh
[18:43] mattly: my original approach was just to use event listeners for everything
[18:43] polotek: I don't think that's a bad idea
[18:43] mattly: that way it was very clear that things were happening async
[18:43] polotek: just need to figure out how it fits into the existing api
[18:44] polotek: because at the bottom of the layers the base app will use the basic node api
[18:44] mattly: right
[18:44] mattly: write() is problematic
[18:45] mattly: another option would be at the start of your async function have something like expectWrite()
[18:45] mattly: that gets a counter going
[18:45] mattly: but there's the possibility there of things getting out of order
[18:45] polotek: ha, I was in the middle of doing that
[18:45] mattly: ... so that wouldn't work, shit
[18:45] polotek: when I realized I needed to stay on task
[18:45] mattly: ok i'll shut up now
[18:46] polotek: basically there should be an async middleware at the top of the layer stack
[18:46] polotek: it overrites write and end
[18:46] mattly: yeah
[18:46] polotek: and when chunks come in they get written to a fifo queue
[18:46] mattly: ok so here's the problem:
[18:46] polotek: the only question is how do the subsequent layers make sure it gets popped off the queue
[18:47] mattly: i have an async function that goes and does something
[18:47] mattly: and then writes
[18:47] mattly: how does the top-level function know to expect the coming write?
[18:47] mattly: and with that i'll really shut up
[18:47] mattly: i've got errands to run today anyway
[18:47] polotek: I'll be around late tonight.  maybe we can pick it back up
[18:48] mattly: cool;
[18:50] mertimor has joined the channel
[18:51] pquerna: q: on things like setTimeout, clearTimeout; I want to be able to respond to sighup or sigterm, and cancel all pending ones -- this is kinda hard in a few ways, like do i keep track of all the IDs from setTimer....   i guess in the end i'm kinda looking at, would I be better off with a single setInterval() that managed callbacks to be called, rather than a plethora of normal setTimeouts?
[18:51] pquerna: or is there something in node to... cancel all pending timers :)
[18:52] inimino: pquerna: exit() ?
[18:52] pquerna: well, thats not exactly what I want, If I called exit directly, things can't write stuff out to disk, states, etc.
[18:52] pquerna: i guess one solution is to approach it the other way, register callbacks on a preexit hook, and then just call exit when they are done.
[18:53] inimino: so you want to cancel some but not all pending activity?
[18:53] inimino: so you need to keep track of the things you want to cancel in that case
[18:54] pquerna: right; more I want to cancle a bunch of 'background' tasks, but I still want to write some files to disk.
[18:55] ashb: a.k.a. clean shutdown
[18:55] voodootikigod has joined the channel
[18:55] ashb: finish what you are doing, but no new tasks
[18:55] pquerna: yes :)
[18:55] ajpiano has joined the channel
[19:06] pgriess has joined the channel
[19:08] _announcer: Twitter: "http://is.gd/ciHyK - Awesome YUI Theater Ã¢ÂÂ  Ryan Dahl: Ã¢ÂÂIntroduction to NodeJSÃ¢ÂÂ (58 min.)" -- HitYourMarket.com. http://twitter.com/hymseo/status/14511204590
[19:12] aconbere: anyone have much experience with using the "bin" option with npm
[19:12] aconbere: I'm getting "unexpected" behavior
[19:13] _announcer: Twitter: "Tinkering w node.js at a coffee shop when I'm supposed to be working on my mobile app.  Oh well... Back to it." -- Mario Aquino. http://twitter.com/MarioAquino/status/14511456962
[19:15] aconbere: I have my executable scripts in a directory ./bin
[19:15] aconbere: and so my bin directive looks somethin like
[19:15] aconbere: "bin": {"myapp": "./bin/myapp"}
[19:15] aconbere: but the result isn't myapp ending up in my path
[19:15] aconbere: but instead
[19:16] aconbere: a symlink to the package
[19:16] aconbere: which is a bummer
[19:16] polotek: does node-repl swallow stderr output?
[19:16] polotek: aconbere: why bummer?  I like that it doesn't go copying code everywhere
[19:19] mjijackson has joined the channel
[19:20] softdrink has joined the channel
[19:20] polotek: okay, question about persistent handles
[19:20] polotek: how do you prevent a persisten handle from getting collected *besides* having a reference to it in js space?
[19:21] polotek: in other words how can I keep it around in C space?
[19:21] aaronblohowiak has joined the channel
[19:21] aconbere: polotek: because what I'd like it to do is symlink to ./bin/myapp
[19:21] aconbere: :)
[19:22] aconbere: so that the executable is on my path
[19:22] aconbere: not just the project
[19:22] polotek: oh I see
[19:22] polotek: I didn't read your original very well
[19:23] _announcer: Twitter: "Added date, datetime, time datatypes to geddy-model -- Geddy web-dev framework for Node.js: http://github.com/mde/geddy" -- Matthew Eernisse. http://twitter.com/mde/status/14511925615
[19:25] aconbere: :)
[19:26] ncb000gt: polotek: have you looked at http://create.tpsitulsa.com/wiki/V8/Persistent_Handles about weak handles
[19:27] polotek: yeah i'm looking at it now
[19:27] polotek: I've read quite a bit about them
[19:27] polotek: but basically mine are getting collected
[19:27] polotek: when I dont' want them too
[19:31] saikat` has joined the channel
[19:31] ncb000gt: interseting
[19:31] polotek: ncb000gt: we should move our sidebar into the channel
[19:31] polotek: it could be useful for posterity
[19:32] ncb000gt: agreed
[19:32] polotek: essentially I'm wondering if I need to do reference counting for persistent handles
[19:33] ncb000gt: my counters aren't for references but more for the need to check if I have any more events to process
[19:33] ncb000gt: reference counting seems like it might make sense, but you still don't have control over whether your stuff is collected yea?
[19:33] mfeiri_ has joined the channel
[19:34] polotek: it sounds like I need to do what node_postgres does
[19:34] polotek: basically it counts references the ph
[19:34] polotek: if number of refs == 0 then make it weak
[19:34] polotek: so it can be garbage collected
[19:35] polotek: if a ref is added
[19:35] polotek: clear the weak state
[19:35] polotek: so it doesn't go away
[19:35] polotek: I think my handles are *always* weak
[19:35] ncb000gt: makes sense
[19:35] polotek: so the next time the gc comes by, they are toast
[19:35] ncb000gt: yea
[19:37] polotek: node is getting dangerously close to 2000 watchers on github
[19:40] darkrho has joined the channel
[19:41] _ry: \o/
[19:43] inimino: _ry: looked at the snap thing?
[19:43] voodootikigod has joined the channel
[19:43] inimino: http://snapframework.com/about
[19:44] _announcer: Twitter: "after a day of cleaning, getting a chance to use @github for the first time and testing out some @nodejs and @expressjs" -- Dustan Kasten. http://twitter.com/iamdustan/status/14512882488
[19:45] polotek: inimino: I think we need a "Node aims to be..." manifesto
[19:48] mape: To bad the bench didn't mention node
[19:51] rnewson has joined the channel
[19:52] rnewson: hey. I've been playing with the drain/pause/resume throttling options and they seem to make things worse. node process becomes very cpu intensive with this, and not when I remove it. anyone else trying this?
[19:52] _ry: inimino: nope - looks cool
[19:52] _ry: rnewson: between what two ojbects?
[19:52] _ry: rnewson: s/objects/streams/
[19:53] rnewson: http to fs or vice versa.
[19:53] inimino: polotek: maybe, but I think node already has meets most of its aims
[19:53] mape: Snassy design on the snap site
[19:53] _ry: the problem is that the req and res streams don't implement the API yet
[19:53] rnewson: that is, streaming GET or PUT calls where the data is from or to the filesystem.
[19:53] mape: Not a lot of initial feedback though
[19:53] _ry: rnewson: the write() always returns undefined instead of true or false
[19:54] _ry: and 'drain' never gets emitted
[19:54] rnewson: so ServerResponse is not a writeable stream?
[19:54] rnewson: yes, I noticed that drain doesn't fire for one case already.
[19:54] rnewson: the docs say it works, sadly.
[19:54] polotek: inimino: was being facetious.  sorry
[19:54] _ry: well - it should be at some point but nt yet
[19:55] rnewson: sure, but it would be nice if the docs were in line with the code. :)
[19:55] _ry: rnewson: yeah.. :)
[19:55] polotek: _ry: I'm switching from using a custom ObjectWrap to using the one provided with node
[19:55] _ry: rnewson: i think i wrote that with the idea that i'd fix it immediately
[19:55] polotek: any advice one how to best use Ref/Unref ?
[19:55] _ry: but never got to it
[19:55] _ry: polotek: good
[19:56] _ry: node's is rather bug free and heavily tested
[19:56] rnewson: _ry: understood. It looks like the api.html is generated from the source but it isn't, right? which explains why fs.fdatasync appeared in a release but is undocumented.
[19:56] polotek: actually the one in my lib was copied from an earlier version most likely
[19:56] polotek: just didn't have the ref counting
[19:56] _ry: rnewson: it's generated from doc/api.markdown
[19:56] steadicat has joined the channel
[19:57] _ry: polotek: Ref when you go to the event loop - waiting for something to happen
[19:57] _ry: so that while idling v8 doesn't GC it
[19:57] rnewson: _ry: right, that's my point. It can drift from the code because it's completely separate.
[19:57] _ry: Unref when you come back
[19:57] _ry: rnewson: yeah
[19:57] _ry: rnewson: but autogenerated code has other problems
[19:58] mattly: polotek: i came up with an idea for the write queue problem, if you've got the time to listen I'd love your feedback
[19:58] _ry: s/code/docs/
[19:58] rnewson: sure. it's just frustrating to spend hours (or days) wondering why the simplest thing fails.
[19:58] _ry: rnewson: yeah - sorry
[19:58] polotek: mattly: shoot
[19:58] admc has joined the channel
[19:59] polotek: _ry: what do you mean by "when you got to the event loop" ?
[19:59] polotek: I'm looking at node_postgres
[19:59] _ry: rnewson: frustrating is what i want to avoid :)
[19:59] polotek: Ref on Connect. Unref on Close
[19:59] polotek: makes sense
[19:59] rnewson: _ry: forgiven. what I'm able to do with node.js is pretty awesome but I do hit showstopping bugs a little too often for my comfort right now.
[19:59] mattly: polotek: so any middleware that needs to async modify the writes can either call up a queue it manages itself, or uses something like res.queueWrite()
[20:00] mikeal has joined the channel
[20:00] mattly: and if it manages its own queue it also wraps end()
[20:00] polotek: I'm dealing with DOM nodes in libxmljs
[20:00] polotek: so I'm thinking Ref when added to the document and Unref when removed
[20:00] rnewson: _ry: the intent is for fs and http to support Buffer in all combinations? and obviously the resume/pause stuff? or am I misreading the direction here?
[20:01] mattly: but calling queueWrite() on the response would modify end() to wait for the queue to empty
[20:01] felixge has joined the channel
[20:01] felixge has joined the channel
[20:01] polotek: mattly: right, basically where I was headed
[20:02] polotek: the question becomes, how does the downstream layer indicate that it's back from it's async call it has the data to be written?
[20:02] polotek: because basically what goes on the queue is a "pending write"
[20:02] CIA-77: node: 03Ryan Dahl 07master * r1369d60 10/ doc/api.markdown : Add bug notes about HTTP streams and throttling - http://bit.ly/cdZDpT
[20:02] polotek: so who's responsible for popping the job off the queue and fulfilling it?
[20:03] _ry: rnewson: that's the intent
[20:03] mattly: polotek: the queue is responsible
[20:03] mattly: i've got an idea, but, lunch
[20:03] mattly: bbiab
[20:03] rnewson: _ry: great, thanks.
[20:04] aaronblohowiak: [/join #javascript
[20:05] JimBastard_ has joined the channel
[20:05] JimBastard_: cheaa this new library is shaping up nicely
[20:05] JimBastard_: its insanely simple
[20:05] _ry: polotek: in libxml - you probably don't need to call Ref/Unref
[20:06] JimBastard_: learn javascript-fu today!
[20:06] _ry: polotek: since it doesn't perform i/o
[20:06] JimBastard_: monkey punch your variables with ninja like precision    ^_^
[20:07] polotek: _ry: I do.  Because the handles themselves aren't part of the tree.  libxml maintains the tree references.  I just wrap a handle around it before punting it into js space
[20:07] polotek: but right now, without ref counting, all of hte persistent handles are weak
[20:07] polotek: so the tree nodes are being collected
[20:07] polotek: when they shouldn't be
[20:07] arlolra has joined the channel
[20:08] aaronblohowiak: JimBastard_: you should update the Authors section of the README
[20:08] JimBastard_: im on it
[20:08] JimBastard_: :-)
[20:08] aaronblohowiak: ;)
[20:09] _ry: rnewson: should be able to pump(fileStream, httpResponse) at some point
[20:09] JimBastard_: im gonna try to release this tomorrow night
[20:09] JimBastard_: we'll see
[20:09] rnewson: _ry: not sure if it belongs in http.js but you might want to consider sending a 100-continue for http requests with an Expect header. curl waits several seconds for it, for example. it can be sent programmatically but also gets a transfer-encoding and connection header too (which probably shouldn't be sent).
[20:09] _ry: rnewson: pumping data across multiple types of things is the ultimate goal
[20:09] JimBastard_: still a bunch of work
[20:09] JimBastard_: maybe push it to next week
[20:09] rnewson: _ry: that's what I figured from the stream wiki page, would be very cool.
[20:09] _ry: rnewson: yeah, i should probably should handle that
[20:10] _ry: when does curl send expect?
[20:10] rnewson: I'm, oddly, finding that my PUT calls get slower each time (for the same input). have to restart node process.
[20:10] rnewson: _ry: by default for a PUT call with --data-binary @<filename>
[20:10] rnewson: _ry: but not for -d 'hello' style PUT's.
[20:11] arlolra: _ry: is it just me, or does the repl have a problem loading modules prefixed with './'
[20:11] rnewson: _ry: I think it should be possible for developers to control expect/continue though. that is, I don't think you should send the 100 status code unilaterally (though certainly by default)
[20:12] rnewson: ooh "process out of memory" when I was streaming. is this lack of throttling?
[20:12] polotek: arlolra: it's not just you
[20:12] arlolra: thanks
[20:13] rnewson: hm, must be my bug. the first PUT works fine, the second PUT works but also appears to buffer all the data permanently in memory...
[20:13] _announcer: Twitter: "Hitting async issues with my first proper test. Testing node.js apps is going to be interesting..." -- Chris Parsons. http://twitter.com/chrismdp/status/14514119516
[20:15] markwubben has joined the channel
[20:17] mitkok has joined the channel
[20:17] _announcer: Twitter: "fyi: I &lt;3 node.js #goruco" -- Chris Williams. http://twitter.com/voodootikigod/status/14514319120
[20:17] voodootikigod: _announcer: ?
[20:19] polotek: voodootikigod: are you new to the _announcer? 
[20:20] voodootikigod: i guess so
[20:20] polotek: streams in mentions of node on twitter
[20:20] voodootikigod: where is the code for it
[20:20] voodootikigod: i just wrote one for goruco
[20:20] voodootikigod: fixed up the html decode
[20:20] voodootikigod: was going to move it in there
[20:20] polotek: goruco?
[20:21] polotek: the link to it is in the logs for today
[20:21] _announcer: Twitter: "#yahoo YUI Theater Ã¢ÂÂ  Ryan Dahl: Ã¢ÂÂIntroduction to NodeJSÃ¢ÂÂ (58 min.) - http://bit.ly/azXgh3" -- HitYourMarket.com. http://twitter.com/hymseo/status/14514480947
[20:21] polotek: or last night.  it's pretty much a blur
[20:22] polotek: http://graphnode.com/stuff/ircbot.js
[20:24] arlolra: var \\
[20:24] arlolra: oops
[20:25] _announcer: Twitter: "node-sqlite doesn't work with latest node.js, even after applying a patch. Bugger. That'll teach me to want to "just quickly try something."" -- phil jordan. http://twitter.com/pmjordan/status/14514680985
[20:26] JimBastard: fail ^^^
[20:31] maushu has joined the channel
[20:31] rnewson: _ry: curious if you think this test should be cpu bound and consume a lot of memory: http://friendpaste.com/3UzJ0SaqvzMdUBjxnn7UMI
[20:38] maushu: voodootikigod, we know, because your tweet showed up here. lol
[20:39] voodootikigod: ok thanks
[20:39] maushu: [15:59] _announcer: Twitter: "Just made a nice little node.js app to post twitter items over to IRC: http://bit.ly/bLgxrG #goruco" -- Chris Williams. http://twitter.com/voodootikigod/status/14501457302
[20:39] maushu: So metadelicious.
[20:40] skampler: heh
[20:40] maushu: I didn't use any twitter lib because the only one in the modules section didn't support streaming. PUT YOUR LIBS IN THE MODULES SECTION. kthxbye.
[20:41] polotek: maushu: mine is there now
[20:41] polotek: thanks for shouting
[20:41] smtlaissezfaire has joined the channel
[20:42] mies has joined the channel
[20:45] maushu: no prob
[20:47] polotek: USE IT AND TELL ME IF IT WORKS FOR YOU
[20:48] maushu: No.
[20:48] maushu: I will not buy whatever you're selling!
[20:48] polotek: all I'm selling is hopes and dreams man.  hopes and dreams
[20:49] polotek: ACTION stepping out for a bit
[20:55] ctp has joined the channel
[20:56] _announcer: Twitter: "after 3 weeks of vacations ~250 new #nodejs mails... #opensource #amazing" -- Tim Eggert. http://twitter.com/elbartus/status/14515992705
[20:57] olegp has joined the channel
[20:58] ctp has left the channel
[20:58] rnewson has left the channel
[21:00] _announcer: Twitter: "In #Node.js
[21:01] aaronblohowiak: voodootikigod: hmmm, twitterbot fail
[21:01] voodootikigod: ?
[21:02] aaronblohowiak: voodootikigod: that last update barfed on [
[21:02] voodootikigod: umm
[21:02] voodootikigod: which one
[21:03] voodootikigod: the _announcer ?
[21:03] voodootikigod: thats not my impl
[21:10] screen-x has joined the channel
[21:15] voodoo1 has joined the channel
[21:16] rictic has joined the channel
[21:17] maushu has joined the channel
[21:17] maushu: What the hell happened.
[21:19] maushu: Can't find anything wrong in the bot logs.
[21:19] _announcer: Twitter: "visionmedia's express at master - GitHub - Sinatra-inspired JavaScript nodejs web development framework -- insanely... http://ow.ly/17sN74" -- Javascript News. http://twitter.com/del_javascript/status/14516962391
[21:19] _announcer: Twitter: "Testing bot in #node.js [zoot!]" -- Graphnode. http://twitter.com/graphnode/status/14516964014
[21:20] maushu: aaronblohowiak, [ worked.
[21:20] Aria has joined the channel
[21:21] aaronblohowiak: mashmashqhmmmm.   maybe it was my \n, then
[21:23] _announcer: Twitter: "Why You Should Pay Attention to Node.Js - Hacker News - Comments http://bit.ly/bndg07" -- Stanton Teters. http://twitter.com/stantont/status/14517106226
[21:24] JimBastard_: do people do a lot of UTC date stuff in javascript?
[21:24] JimBastard_: i dont think ive ever had to
[21:26] _announcer: Twitter: "Testing announcer with newline. zoot! node.js" -- Graphnode. http://twitter.com/graphnode/status/14517207656
[21:26] _announcer: Twitter: "Second test.
[21:26] maushu: ...I see it.
[21:27] maushu: I think I know what is the problem. I'll fix it really quick. Twitter *is* supposed to fix newlines on their me thinks.
[21:27] maushu: *their end
[21:30] pgriess: JimBastard_: jspack was the winner in the "how to pack C structs from javascript" sweepstakes; CommonsJS compatible package at http://github.com/pgriess/node-jspack and linked off of node modules wiki
[21:30] JimBastard_: ?
[21:30] JimBastard_: sup pgriess 
[21:31] JimBastard_: pretend i was really slow, what does this do?
[21:31] JimBastard_: in one sentence
[21:31] pgriess: translate a format string + js data into a packed byte stream
[21:31] maushu: It packs data into byte arrays.
[21:31] pgriess: used for producing/consuming binary data
[21:31] JimBastard_: why what i want to use this for?
[21:32] JimBastard_: binary file reading in JS is >.<
[21:32] maushu: Useful with Buffer or binary in general.
[21:32] maushu: Lets say that you want to read an integer but you only have a buffer? xD
[21:32] pgriess: JimBastard_: yes, not always pleasant, but sometimes necessary, e.g. when interfacing with third-party code and not wanting to writea  C++ addon
[21:32] JimBastard_: word up
[21:32] mitkok has joined the channel
[21:33] JimBastard_: so isnt node already doing this?
[21:33] maushu: I remember playing around with that when handling win32 api.
[21:33] JimBastard_: like i can read and write a binary file in node?
[21:33] pgriess: JimBastard_: you can indeed read a binary file, but all you get back is bytes. if you want to interpret the bytes as anything other than a string you're sol
[21:33] JimBastard_: that makes sense
[21:33] maushu: JimBastard_, I think it saves numbers as strings.
[21:33] maushu: Not very efficient.
[21:34] JimBastard_: so you could start write a module on top of this that did manipulation of some file format
[21:34] JimBastard_: like an image or something
[21:34] pgriess: exactly
[21:34] JimBastard_: how do the current modules that do binary file manip handle this ?
[21:34] JimBastard_: i think i saw a node png
[21:35] mape: pkrumins did png and jpg 
[21:35] JimBastard_: yeah
[21:36] _announcer has joined the channel
[21:36] pgriess: JimBastard_: no idea. i'd guess that some of them do this binary manipulation in C++
[21:36] pgriess: some i have seen (e.g. pgsql driver) sport their own byte-packing functions
[21:36] _announcer: Twitter: "Third test.node.js" -- Graphnode. http://twitter.com/graphnode/status/14517631849
[21:36] pgriess: similar, but less complete and less general, to what jspack provides
[21:36] JimBastard_: so like the C implementations are prob faster?
[21:37] JimBastard_: but require a rebuild of node?
[21:37] pgriess: yes, they're def faster
[21:37] pgriess: but require building lots of your business logic in C, which you may not want to do
[21:37] _announcer has joined the channel
[21:37] maushu: Ok, done.
[21:37] maushu: aaronblohowiak, all fixed, feel free to newline at will.
[21:37] JimBastard_: yeah, i did this thing once where we extracted the average RGB value from pixels in a bmp and pull images based on that from flickr to create a mosiac in the browser
[21:37] aaronblohowiak: yay!
[21:37] JimBastard_: that shit was slooooooooooooo
[21:37] JimBastard_: w
[21:37] pgriess: erm, i should say you have to build at least the parse/stream code in c, but the business logic can be wherever
[21:37] JimBastard_: all js
[21:38] pgriess: yeah, i believe it
[21:38] aaronblohowiak: pgriess: so we could build Thrift support for node
[21:38] JimBastard_: aaronblohowiak: im not sure how much i like these rails names
[21:38] JimBastard_: singularize
[21:38] JimBastard_: lol
[21:38] JimBastard_: im not sure if i want to change them / alias them
[21:39] pgriess: aaronblohowiak: yes, and we could do it in pure js
[21:39] JimBastard_: toSingle()
[21:39] JimBastard_: toPlural()
[21:39] JimBastard_: toCamel()
[21:39] aaronblohowiak: JimBastard_: i have no emotional attachment to that code, it was fun to write, but it is not something i really care about
[21:39] JimBastard_: :-D
[21:39] JimBastard_: fair enough
[21:39] voodootikigod has joined the channel
[21:40] JimBastard_: sup voodootikigod 
[21:40] JimBastard_: you do your talk yet?
[21:41] smtlaissezfaire has joined the channel
[21:45] voodoo1: how would you create an atom feed in node.js?
[21:46] jan____ has joined the channel
[21:46] javarants has joined the channel
[21:46] Ned_: micheil: my chromium definitely doesn't have sec-* headers ...
[21:47] Ned_: weird ...
[21:47] Ned_: perhaps I need to get a new build ...
[21:47] jan____: aconbere: what's wrong with that?
[21:48] polotek: voodoo1: use libxmljs
[21:48] polotek: has good support for namespaces, which you'll need
[21:49] polotek: that's if you need to manipulate it as a dom
[21:49] polotek: if not, just pick your favorite templating language
[21:49] voodoo1: polotek: thank you
[21:49] polotek: maushu: re: twitter, they send newlines as is. Because the streaming api uses CR to separate tweets
[21:50] polotek: chunk.split("\n") => chunk.split("\r")
[21:56] voodoo1: is in the meantime someone here who knows why fs.sendfile is hidden in the api?
[21:57] jlilly has joined the channel
[22:01] iwasbiggs has joined the channel
[22:02] ctp has joined the channel
[22:04] inimino: voodoo1: it's broken
[22:04] voodoo1: hmm ok thanks
[22:04] voodoo1: that's bad
[22:05] voodoo1: i'm trying to build a small web server that also supports fast static file delivery
[22:05] voodoo1: however i'm right now slower than an apache which uses sendfile
[22:06] mjr_: maushu: I wrote a little bit of code to unpack numbers and things from Buffers:  http://github.com/mranney/node_pcap/blob/master/pcap.js#L83-113
[22:07] inimino: voodoo1: yeah, the sendfile API just needs someone to do the work to make it nice
[22:07] maushu: ...great?
[22:08] voodoo1: inimino: hmm too bad. i don't even know C/C++ right, so i'm obviously not the one
[22:08] mjr_: I thought I read in my skim through the scrollback that you wanted that.
[22:08] aconbere: jan____: what's wrong with rake?
[22:09] aconbere: jan____: rake isn't installed on a lot of systems, and I'm of the opinion that it shouldn't be a requirement for a node module :)
[22:09] jan____: aconbere: rake, make I don't give a shake
[22:09] _announcer: Twitter: "I wonder how long until there are spambots using Node/Rhino/(other server-side JavaScript tech) - hiding stuff behind JS seems less safe now" -- Joshua Wehner. http://twitter.com/jaw6/status/14518934189
[22:09] aconbere: stop that ryhming I mean it!
[22:09] jan____: aconbere: I'm on your side actually, somebody else contributed the rake
[22:09] jan____: so I took it
[22:09] aconbere: ACTION nods
[22:10] _announcer: Twitter: "I'd definitely appreciate #sendfile support in #node.js right now! Too bad it is currently broken." -- Benjamin Erb. http://twitter.com/b_erb/status/14518955465
[22:10] maushu: ...sendfile?
[22:10] jan____: but if there were a pure make variant that 100% the same, I'd switch
[22:10] aconbere: jan____: cool
[22:10] voodoo1: lol
[22:10] maushu: ...spambots using Node?
[22:11] aconbere: jan____: is there a reason that there's so much varience between the way the targets are organized?
[22:11] voodoo1: maushu: http://linux.die.net/man/2/sendfile
[22:11] polotek: I enjoy being present when people are introduced to _announcer 
[22:11] maushu: I know what it is, I just didn't know node.js had it?
[22:11] aconbere: jan____: that is... can we just put each sub package in it's own sub directory and always name the file mustache.js.tpl.pre / post
[22:11] aconbere: ?
[22:11] jan____: aconbere: that's how it is atm
[22:11] jan____: iirc
[22:12] aconbere: I'm just wondering how much leeway I have
[22:12] jan____: of not, it's lazyness on the contributors part
[22:12] aconbere: my make foo is of lesser quality than my rake foo :)
[22:12] jan____: aconbere: baby-steps-changes
[22:12] aconbere: so the amount of tickery I can do is small
[22:12] aconbere: trickery
[22:12] jan____: yea
[22:12] aconbere: so if... for instance I updated the file names and your rake file so that things were simpler
[22:12] jan____: rake is nice because you can ruby where sh is painful
[22:12] aconbere: is that a patch you could accept?
[22:13] aconbere: that would be a good precursor to making make easier
[22:13] jan____: aconbere: yeah, if you want to fix that in the rake version first that's an easy patch for me to include, we can work from there porting it to make
[22:13] jan____: right
[22:13] aconbere: jan____: awesome
[22:13] aconbere: I'll get you some nice incremental patches this weekend :)
[22:14] sechrist has joined the channel
[22:14] aconbere: I was on a package.json kick yesterday... vision media still hasn't gotten back to me on 2 patches I sent them
[22:14] aconbere: thanks for the help
[22:15] jan____: aconbere: thanks for contributing :) I appreciate any work on mustache :)
[22:17] aconbere: it's solid!
[22:17] aconbere: I've been pretty happy with it
[22:18] aconbere: though... I haven't quite figured out how I want to do layouts / template inheritence
[22:20] jan____: you don't :)
[22:20] aconbere: haha
[22:20] jan____: maybe you do, donno, I don't
[22:20] aconbere: well I was thinking
[22:20] aconbere: take a conditional block
[22:20] stevendavie has joined the channel
[22:21] aconbere: and you can modify your context object in real time
[22:21] aconbere: so maybe if you kind of... added a function to the object
[22:21] aconbere: passed it through a conditional block
[22:21] aconbere: and the function rendered a second template
[22:21] aconbere: more work than I really want to put into that honestly :)
[22:22] mscdex: a rake is an immoral pleasure seeker
[22:22] jan____: aconbere: sounds like higher order sections can do that
[22:23] aconbere: cool, maybe I should look at it
[22:23] jan____: but maybe no
[22:23] jan____: not
[22:23] mjijackson has joined the channel
[22:23] jan____: but they can do a lot :)
[22:23] jan____: aconbere: also, have you seen mu? raycmorgan's node-mustache
[22:23] aconbere: yeah
[22:24] aconbere: but last time I looked it wasn't up todate with the latest node release
[22:24] jan____: ah
[22:24] jan____: pain
[22:24] aconbere: I'm better at node now and maybe I could fix it
[22:24] aconbere: but at the time it was daunting
[22:24] jan____: right
[22:26] jspiros has joined the channel
[22:30] voodoo1 has left the channel
[22:31] cloudhead has joined the channel
[22:32] mikeal: jan____: i was thinking about mustache a bit
[22:33] mikeal: i'm wondering if there isn't a simpler way to handle some of the iterative writes
[22:35] _announcer: Twitter: "Still jabbing away with node.js. Nice TDD two-layer stack running now. First model just went in with memory persistence." -- Chris Parsons. http://twitter.com/chrismdp/status/14519956929
[22:37] jan____: mikeal: there is. some guy on twitter is working on it :)
[22:37] alex-desktop_ has joined the channel
[22:37] mikeal: cool
[22:37] mertimor has joined the channel
[22:38] jan____: I'm pretty far with my 0.3.0-dev branch to warrant a new stable release. for 0.4 all I want to do is make it shorter by using smarter JS-fu
[22:38] jan____: for which I have to make some sort of contest because I sure don't have the smarts :)
[22:39] mikeal: hehe
[22:44] fernmicro has joined the channel
[22:48] matthew_y has joined the channel
[22:49] gtoast has joined the channel
[23:01] aconbere: ACTION runs the mustache tests to make sure he didn't break anything
[23:03] sechrist: oh snap son 0.1.96
[23:03] sechrist: i'm slow
[23:04] joshbuddy has joined the channel
[23:05] _announcer: Twitter: "I don't tweet much, but gosh I love #nodejs" -- Chase Sechrist. http://twitter.com/chasesechrist/status/14521192610
[23:05] sechrist: holy crap
[23:05] sechrist: who made announcer? 
[23:06] polotek: maushu: 
[23:06] polotek: sechrist: it was maushu 
[23:06] sechrist: thank you polotek
[23:06] maushu: IT WASN'T ME.
[23:07] sechrist: wasn't?
[23:07] polotek: maushu: ?
[23:07] maushu: I didn't steal th- oh, you mean the bot.
[23:07] maushu: Yeah, that was me.
[23:07] sechrist: how are you getting tweets that quickly
[23:07] polotek: lol
[23:07] aconbere: jan____: got a pull request for you
[23:07] sechrist: last time I made a twitter app - circa early 2008 -- I had to poll the search 
[23:07] aconbere: should be pretty minimal
[23:08] maushu: sechrist, poll is so 2008.
[23:08] aconbere: feel free to ... finangle that as you will :)
[23:08] maushu: *polling
[23:08] sechrist: obviously
[23:08] sechrist: what's the newfangled way to get tweets that instantly?
[23:08] maushu: Now we use streaming.
[23:08] polotek: streaming api is pretty sweet
[23:08] sechrist: awww snap
[23:08] maushu: Basically open a connection to their http server and keep it open. (Well, they keep it open.)
[23:08] sechrist: oh node is perfect for this
[23:09] maushu: Yeap.
[23:09] sechrist: is there a lib already made for the streaming api?
[23:09] sechrist: this is siiick
[23:09] maushu: twitter-node
[23:09] sechrist: figured
[23:09] jan____: aconbere: nice, will look at it tomorrow or monday it's just after 1am here ;)
[23:10] maushu: polotek also has one.
[23:10] aconbere: hehe
[23:10] aconbere: no worries
[23:10] aconbere: basically I just made a ./build dir
[23:10] aconbere: that everything goes into
[23:10] aconbere: and normalized the output and template names
[23:11] maushu: sechrist, evented-twitter is the other one.
[23:11] polotek: sechrist: http://github.com/polotek/evented-twitter
[23:11] sechrist: well I specifically want all tweets that have urls in them
[23:11] polotek: that's my last plug for my code for the day
[23:11] sechrist: hehe
[23:11] polotek: evented-twitter does that
[23:11] polotek: there's an api method for all tweets with links
[23:11] maushu: polotek is trying to get your soul using his twitter lib. Be careful.
[23:12] sechrist: polotek: I just came
[23:12] polotek: aaaaand with that
[23:12] polotek: I'm out gents
[23:12] maushu: ...
[23:12] jan____: aconbere: I'll check it later, thanks
[23:12] maushu: A cat is fine too.
[23:12] polotek: cheers
[23:12] polotek has left the channel
[23:13] sechrist: haha
[23:14] linusthiel has joined the channel
[23:15] jan____: gnight
[23:22] aaronblohowiak has joined the channel
[23:26] arlolra has joined the channel
[23:28] fyorl has joined the channel
[23:28] fyorl: Does the multipart module still exist in the current version of node? And if not, is there a more generalised replacement for it?
[23:30] fizx has joined the channel
[23:32] tmpvar has joined the channel
[23:33] jedschmidt has joined the channel
[23:34] javarants has left the channel
[23:37] fictorial has joined the channel
[23:43] rictic has joined the channel
[23:44] fyorl has left the channel
[23:46] fizx has joined the channel
[23:46] charlesjolley has joined the channel
[23:52] maushu has joined the channel
