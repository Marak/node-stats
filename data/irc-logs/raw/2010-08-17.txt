[00:00] davidc_ has joined the channel
[00:00] streampunk: It's harder for me to proof read though... so I'm cleaning it as I read.
[00:00] shimondoodkin: ok therese no errors
[00:00] shimondoodkin: it looks like a nodejs bug
[00:00] shimondoodkin: it works you can try ait
[00:01] shimondoodkin: it
[00:01] streampunk: I haven't run it yet. Refactoring as I go too ;-)
[00:04] technoweenie has left the channel
[00:05] mu-hannibal has joined the channel
[00:05] daleharvey has joined the channel
[00:05] shimondoodkin: is that ok? http://gist.github.com/528012
[00:07] streampunk: Looks nicer.
[00:07] streampunk: Sorry. Got side tracked.
[00:07] codemariner has joined the channel
[00:07] streampunk: Talking to a friend. I mashed up one of his songs with a gnarls barkley song last night so he was asking.
[00:07] shimondoodkin: refactoring code by hand it is comming , like washing dishes
[00:08] creationix: for the brave http://github.com/creationix/nstore/tree/rewrite
[00:08] streampunk: I mostly broke out all those case blocks into function calls.
[00:08] creationix: new experimental branch
[00:09] shimondoodkin: creationix: what is it useful for?, whay it is better then mongodb?
[00:09] creationix: it's in-process
[00:09] creationix: simple
[00:09] creationix: no external db to setup
[00:09] creationix: hardly comparable to mongo, it's a pure key/value system, no indexes or queries
[00:10] blogometer has joined the channel
[00:10] TangoIII: anyone know of program like top but, spits the output to a nice html page?
[00:10] WALoeIII has joined the channel
[00:10] blogometer: Back.
[00:11] stepheneb has joined the channel
[00:11] Draggor has joined the channel
[00:16] cardona507: creationix: nice
[00:16] cardona507: this is gonna help me out alo
[00:16] cardona507: *t
[00:17] CrabDude has joined the channel
[00:17] blogometer: Working on Windows port.
[00:17] blogometer: Suggestions for type of "ssize_t"?
[00:18] shimondoodkin: creationixhttp://msdn.microsoft.com/en-us/library/aa383751(VS.85).aspx
[00:18] shimondoodkin: blogometer:http://msdn.microsoft.com/en-us/library/aa383751(VS.85).aspx
[00:19] blogometer: Okay.
[00:19] blogometer: That's what I found too, so. Cool.
[00:21] DoNaLd` has joined the channel
[00:22] shimondoodkin: blogometer: why woild you like asigned version for a size.. strange
[00:23] shimondoodkin: s/blogometer: why would you like a signed version for a size.. strange
[00:23] blogometer: Not sure. I'm just going through the error spew of cl eio.c a line at a time.
[00:23] blogometer: And the first line is a missing ssize_t.
[00:23] shimondoodkin: ok
[00:24] jashkenas has left the channel
[00:25] stepheneb has joined the channel
[00:26] blogometer: On Darwin it is defined as "long".
[00:26] blogometer: It is for byte counts and error codes.
[00:26] blogometer: And for errors returned form open, read, write.
[00:26] blogometer: s/form/from/
[00:27] blogometer: Guess I can see how it is defined in Cygwin to get a real answer.
[00:27] blogometer: (Er, I mean, thank *you* for your answer: shimondoodkin)
[00:28] shimondoodkin: on windows it might be DWORD or long
[00:28] shimondoodkin: i guess you right
[00:34] murz has joined the channel
[00:38] shimondoodkin: ,,, found it is a bug :(  http://github.com/ry/node/issues#issue/123 
[00:38] steadicat has joined the channel
[00:40] streampunk: shimondoodkin: Yeah. http://gist.github.com/528048 I was tracing the emit calls and noticed it seems to be related to the timeout.
[00:41] shimondoodkin: oh realy thank you
[00:41] streampunk: Tracing the events is really helpful to make sure there aren't race conditions.
[00:41] shimondoodkin: how do you do it?
[00:41] streampunk: The trace?
[00:41] shimondoodkin: yes
[00:41] streampunk: It's at the bottom.
[00:42] streampunk: server.emit = ...
[00:42] streampunk: I'm just taking advantage of EventEmitter's code.
[00:42] streampunk: Since everything uses it, it makes events easy to track.
[00:42] streampunk: You could add the trace to the original prototype too though I just did it to the server in this case.
[00:43] shimondoodkin: can you post the code please
[00:43] streampunk: It's in my gist. http://gist.github.com/528048
[00:43] streampunk: Line 117.
[00:43] streampunk: var server = http.createServer ...
[00:44] streampunk: and then I use it below before I listen so I console log all of them.
[00:44] shimondoodkin: wow thats much more clear code 
[00:44] streampunk: shimondoodkin: thanks. It's not perfect code but it makes it easy to audit when you split it out into chunks.
[00:45] streampunk: Anyway... I've got to go soon. I'll possibly look at it more later.
[00:45] esigler has joined the channel
[00:45] chrischris has joined the channel
[00:47] shimondoodkin: anyway thanks. ill go to sleep it is night now in my country
[00:50] sh1mmer has joined the channel
[00:51] dannycoates has joined the channel
[00:55] tmpvar has joined the channel
[00:56] davidrussell has joined the channel
[00:58] mikeal has joined the channel
[00:58] Yuffster has joined the channel
[01:05] samsonjs has joined the channel
[01:07] jchris has joined the channel
[01:07] jchris has joined the channel
[01:09] jtoy has joined the channel
[01:09] blogometer: Well, I got the eio.h header file to compile using MSVC, which was no big deal.
[01:09] blogometer: Gets harder now, I'm sure.
[01:09] ehaas: you compiled a header :) ?
[01:12] blogometer: ehaas: Trying to build Node.js on native Windows.
[01:12] mischief has joined the channel
[01:12] ehaas: blogometer: sorry, was making a bad joke about how header files don't get compiled
[01:13] ehaas: then i remembered precompiled headers on windows
[01:13] blogometer: Ah.
[01:13] blogometer: Well, I mean to say that I compiled a nothing program that includes "eio.h".
[01:14] tmpvar: huh?
[01:14] JimBastard: sup tmpvar 
[01:14] tmpvar: what up
[01:14] JimBastard: noc
[01:14] wattz: bah
[01:14] tmpvar: noc?
[01:14] JimBastard: think cap + chef for node
[01:15] JimBastard: its actually really easy to get the basics working
[01:15] tmpvar: smooth
[01:15] tmpvar: yeah
[01:15] tmpvar: im not sure what im doing tonight
[01:15] tmpvar: maybe stare at the wall.. heh
[01:15] wattz: back into some lex/yacc
[01:15] JimBastard: node noc that shit out
[01:17] lachlanhardy has joined the channel
[01:18] alexkwolfe_ has joined the channel
[01:19] blogometer: What is this cap + chef.
[01:19] blogometer: Hey, tmpvar, I'm hacking WIndows.
[01:19] blogometer: Node.js with MSVC.
[01:19] blogometer: Actually, eio.c.
[01:20] tmpvar: blogometer, i doubt it ;)
[01:20] tmpvar: i used to have a custom select() for pipes heh
[01:20] blogometer: Yeah. How far did you get?
[01:21] tmpvar: back then i was trying to port somthing called coupling that was in the dep folder
[01:21] tmpvar: but libeio should be possible to port with a good amount of elbow grease
[01:21] blogometer: What do you doubt then?
[01:21] tmpvar: even if you have to take it off of pipes and use sockets
[01:21] ditesh|cassini has joined the channel
[01:21] blogometer: Yes.
[01:21] tmpvar: oh, that you already built against it
[01:22] blogometer: I am all for faking it.
[01:22] blogometer: No, hacking. 
[01:22] blogometer: Trying to isolate what works and what doesn't.
[01:22] tmpvar: Well, I mean to say that I compiled a nothing program that includes "eio.h"
[01:22] blogometer: Not building.
[01:22] tmpvar: :P
[01:22] tmpvar: sorry, didnt grab your name in the copy
[01:23] blogometer: Um, well, I'm trying to get started somewhere, so I'm running stuff through the compiler.
[01:24] tmpvar: good stuff
[01:24] tmpvar: yeah, my attempt was just run through the deps and get them compiling first
[01:24] tmpvar: there were more then heh
[01:25] blogometer: Well, I've read through your communications with Marc, and I've tried to read through eio.c and read up on Linux aio.
[01:25] blogometer: I understand you cannot select on pipes, so that might have to be faked with threads.
[01:26] tmpvar: i actually think there is a way
[01:26] mu-hannibal has joined the channel
[01:26] blogometer: And I'm all open to being told what to do. 
[01:26] blogometer: No personal pride here, just want to get it working.
[01:26] tmpvar: haha, i hear that
[01:27] blogometer: Am I correct in assuming that if libeio work and libev work, then everything else is downhill?
[01:27] tmpvar: i'm under that impression as well, yes
[01:29] blogometer: Okay. Well, how does one go about publishing for feedback?
[01:29] wattz: code?
[01:29] wattz: gist.github.com
[01:29] blogometer: I've forked on GitHub, but I'm wondering about an ideal project structure.
[01:29] tmpvar: umm
[01:29] blogometer: That is, should I split out the libeio code into its own little project.
[01:29] tmpvar: oh
[01:29] blogometer: And build a test suite just for it.
[01:30] tmpvar: yes, another dep folder
[01:30] tmpvar: that way we can conditionally include it
[01:30] tmpvar: ^_^
[01:30] tmpvar: dep/libeio_refactor_with_a_better_name/
[01:30] tmpvar: heh
[01:30] blogometer: Hmm...
[01:31] tmpvar: a win32 folder perhaps?
[01:31] tmpvar: dunno, thats really up to you
[01:31] blogometer: Okay, and within there, create a Makefile or whatever gets me off the ground fastest.
[01:31] tmpvar: yep
[01:31] blogometer: Because, I want to hack for a while, then come back around to learn the build tools.
[01:31] tmpvar: you are using VS?
[01:31] blogometer: Cool, I'm glad you appreciate that.
[01:32] blogometer: Huh. I supposed I could.
[01:32] blogometer: Do you think that would encourage hacking?
[01:32] JimBastard: ru guys hacking?
[01:32] blogometer: I'm afraid to open it and loose a month of my life to learning a MIcrosoft project, so I'm doing GViM and CL in CMD.
[01:32] tmpvar: dunno, possibly.. might also make it more difficult
[01:32] blogometer: Yeah.
[01:32] blogometer: Hmm...
[01:33] tmpvar: blogometer, yeah, that sounds appropriate
[01:33] cardona507 has joined the channel
[01:33] tmpvar: feel free to mail me if you want me to try stuff my nick @gmail.com
[01:33] alcuadrado has joined the channel
[01:33] blogometer: See, okay, I'm thinking that if I isolate libeio and make sure that it can still build under Linux, then I can use gcov to create a suite that will cover the library.
[01:34] feydr has joined the channel
[01:34] steadicat has joined the channel
[01:35] JimBastard: yo tmpvar whats a good word to replace "cookbooks" if we are trying to be super serious
[01:35] JimBastard: in the node operations controller
[01:35] kreyman has joined the channel
[01:35] blogometer: Marc Lehmann is a very confident fellow and has no test suite that I can see for libeio, except for his little demo.c
[01:35] JimBastard: i had "stories" but thats ehhhhh
[01:35] blogometer: Maybe that covers it.
[01:36] blogometer: JimBastard: Why be super serious?
[01:36] ickmonst_ has joined the channel
[01:36] JimBastard: its all about the NLP, we can get into that later
[01:36] JimBastard: do you haz any suggestions? 
[01:36] blogometer: Neuro Linguistic Programming?
[01:37] JimBastard: boom
[01:37] blogometer: How old are you kids?
[01:37] JimBastard: 27
[01:37] blogometer: Formulas.
[01:37] feydr: drug recipes
[01:37] blogometer: That is super serious.
[01:38] JimBastard: ill have to think on it
[01:38] JimBastard: cookbooks for now, since it will be easier to remember
[01:38] blogometer: Blueprints.
[01:38] JimBastard: thats not too bad
[01:38] jamescarr_ has joined the channel
[01:39] blogometer: Aria.
[01:40] blogometer: Super serious: Archetype.
[01:40] ehaas: etude
[01:40] ehaas: or rather, étude
[01:41] blogometer: Etude is a GREAT word. Much preferred to Kata.
[01:42] blogometer: But, it is a study or practice for sharpening skills, not a recipe to follow.
[01:43] visnup has joined the channel
[01:44] sstur has joined the channel
[01:46] JimBastard: Kata!!!!
[01:46] JimBastard: woah
[01:46] JimBastard: i know nodejitsu
[01:46] JimBastard: http://en.wikipedia.org/wiki/Kata
[01:46] JimBastard: Kata / Moves
[01:46] JimBastard: thats not very serious
[01:46] JimBastard: but funny
[01:46] JimBastard: noc you out
[01:47] JimBastard: lulz
[01:47] blogometer: Again, what is this serious?
[01:47] blogometer: Anyway, I prefer Etude to Kata and Kata does NOT mean Cookbook.
[01:47] blogometer: Or Recipe.
[01:49] blogometer: Did you boys watch too many episodes of "The Pick Up Artist?"
[01:50] blogometer: Or reading too much "Fake Steve Jobs?"
[01:53] blogometer: Offhand, I can't think of anything more Unserious than NLP.
[01:53] ehaas: haven't you read "the origin of consciousness in the breakdown of the bicameral mind"?
[01:53] ehaas: it's quite serious
[01:54] kersny has joined the channel
[01:56] hdon has joined the channel
[01:57] blogometer: http://www.google.com/search?q=nlp+pseudo
[01:57] blogometer: Taking yourself seriously doesn't count.
[01:57] ehaas: lol
[01:57] ehaas: i was only joking
[01:57] ehaas: good book though
[01:58] blogometer: Node.js, V8 + AIO = Empires in Ruins.
[01:58] ehaas: it's where neal stephenson got all his ideas for snowcrash
[01:58] blogometer: You may as well mock them while you do it.
[01:58] ehaas: how about 'compendium' instead of 'cookbook'
[01:58] blogometer: What is in this Cookbook?
[01:58] blogometer: Call it: To Serve Man!
[01:59] satori_ has joined the channel
[01:59] ehaas: patterns, templates,
[01:59] ehaas: PROTOTYPE
[01:59] blogometer: Ruby Cookbook, Perl Cookbook.
[01:59] blogometer: People know what it means.
[02:00] blogometer: Node.js Cookbook.
[02:00] ehaas: yea
[02:00] blogometer: Node.js Almanac.
[02:00] blogometer: Applied Node.js
[02:01] blogometer: Everyday Node.js
[02:01] tmpvar: nodejs for dummies
[02:01] blogometer: Applied Node.js = Very Serious
[02:01] blogometer: Sam's Learn Node.js in 21 Days
[02:02] tmpvar: hey, their sql in 10 minutes is awesome ;)
[02:02] blogometer: The Unbearable Lightness of Node.js
[02:02] ehaas: there you go
[02:11] ben_alman has joined the channel
[02:13] softdrink has joined the channel
[02:13] pquerna: so, node.js jobs.
[02:14] pquerna: can just post to the main mailing list?
[02:14] ryah: pquerna: yeah
[02:14] ryah: if you prefix them with Job:
[02:14] ryah: it gets added to that jobs site
[02:14] ryah: i've heard.
[02:16] pquerna: k
[02:21] samsonjs has joined the channel
[02:23] siculars has joined the channel
[02:25] twoism has joined the channel
[02:31] zapnap has joined the channel
[02:33] solidsnack has joined the channel
[02:33] polotek has joined the channel
[02:34] Tim_Smart: Anyone want me to make some C / C++ node.js bindings for anything? Learning C++ and I want to trying implementing something.
[02:34] Tim_Smart: s/trying/try/
[02:35] polotek: Tim_Smart: there's lots of good stuff to chose from
[02:35] Tim_Smart: s/implementing/implement/ :/
[02:35] polotek: what about something like libcloud
[02:35] polotek: control server clouds with node
[02:36] Tim_Smart: libcloud is python apparently
[02:36] dispalt: Tim_Smart: make thrift c++ bindings for node
[02:37] polotek: thrift would be cool
[02:38] pquerna: thrif would be helpful :)
[02:38] polotek: hmmm maybe I'm thinking of another libcloud
[02:38] polotek: but maybe not
[02:38] pquerna: libcloud is all python :)
[02:38] pquerna: you could rewrite it in js of course
[02:38] pquerna: its mostly just https + xml + json parsing 
[02:38] pquerna: and dealing with terrible hosting providers
[02:39] pquerna: but thrift bindings get my vote for best project idea :)
[02:39] polotek: pquerna: you guys gonna tackle the TLS thing?
[02:39] pquerna: i hope to tackle it before someone is hired, but we need TLS to not suck for our work to... work.
[02:40] polotek: it feels like node support is a good reason to spur some old libs to get updated with event support
[02:42] tjgillies1 has joined the channel
[02:47] Tim_Smart: Hmm I have never heard of thrift :/
[02:47] Tim_Smart: Looks interesting I guess.
[02:47] codemariner has joined the channel
[02:47] WALoeIII has joined the channel
[02:48] pquerna: its how you talk to Cassandra
[02:48] pquerna: and Scribe
[02:48] pquerna: and pretty much anything open sourced by Facebook
[02:48] polotek: anybody every seen this error
[02:48] polotek: http://gist.github.com/528208
[02:48] polotek: when dealing with file io?
[02:49] chilts: you trying to seek past the end of the file?
[02:49] polotek: I'm not seeking anything
[02:49] chilts: heh
[02:49] chilts: not sure then :)
[02:51] ehaas: polotek: can you share the code that is causing it...or does it happen when you start node?
[02:52] chilts: polotek: am stealing some of your ideas from http://github.com/polotek/dot-files/blob/master/.bashrc :)
[02:52] chilts: didn't know about ignoreeof ... will be usefule :)
[02:52] polotek: chilts: feel free
[02:52] polotek: most of that stuff is stolen from someone else :)
[02:53] chilts: yep, it definitely goes around on the internet :D
[02:53] icozzo has joined the channel
[02:53] polotek: http://gist.github.com/528215
[02:54] benburkert has joined the channel
[02:54] polotek: Little script reads in html and scraps it
[02:54] polotek: outputs markdown
[02:54] polotek: scrapes*
[02:54] polotek: it actually works fine
[02:55] wllm has joined the channel
[02:55] polotek: just outputs that error
[02:55] polotek: ah
[02:55] polotek: actually know I know what's going on
[02:56] polotek: actually no, I lost it
[02:56] polotek: the error is actually being output twice
[02:56] polotek: which I definitely don't understand
[02:57] twoism has joined the channel
[03:01] mr_daniel has joined the channel
[03:01] ryah: pquerna: have you got node to talk to casandra?
[03:01] robotarmy has joined the channel
[03:01] ryah: thrift .. gr
[03:01] ryah: would be nice to understand the protocol and actually write a real client
[03:02] ryah: or at least generate only a very surface level class
[03:02] polotek: ryah: is there an obvious reason for this error?
[03:02] polotek: http://gist.github.com/528208
[03:03] ryah: polotek: somehow you're writing beyond the buffer's boundary
[03:04] polotek: somehow :)
[03:04] ryah: looks like a bug in WriteStream
[03:06] stepheneb has joined the channel
[03:07] probablyCorey has joined the channel
[03:11] dnolen has joined the channel
[03:12] polotek: I see
[03:12] polotek: writing with a string instead of buffer passes undefined as the write position
[03:14] pquerna: ryah: no, only via http -> python -> cassandra
[03:16] Tim_Smart: ryah said grr to thrift, so I refuse to write bindings for it.
[03:16] Tim_Smart: ryah could start a cult hehe.
[03:17] Tim_Smart: (Also because I wouldn't know where to begin with thrift bindings)
[03:21] fizx has joined the channel
[03:25] jb55: is anyone writing thrift bindings atm?
[03:26] polotek: ryah: the problem occurs when writing an empty string to a writestream
[03:26] polotek: length === 0
[03:26] pquerna: jb55: only seen the protobufs stuff, but no thrift project afaik
[03:27] twoism has joined the channel
[03:27] blogometer: Created a VC++ 2008 project for eio.c.
[03:27] jb55: ooo new project *runs with glee*
[03:28] jb55: ACTION reads thrift docs
[03:29] zodiak has joined the channel
[03:30] Tim_Smart: jb55: Good luck with the docs :)
[03:30] Tim_Smart: There is a semi-useful pdf, but not much else.
[03:31] Tim_Smart: Oh, I missed the wiki,
[03:31] jb55: docs slow me dowm --elitist hacker
[03:32] dmcquay has joined the channel
[03:34] tmpvar: hrm, i need creationix
[03:34] tmpvar: ACTION turns on the bat-symbol
[03:35] jb55: that works?
[03:35] tmpvar: sometimes
[03:35] samsonjs has joined the channel
[03:36] Tim_Smart: sometimes it needs new light bulb.
[03:36] tmpvar: yeah, and they are expensive :/
[03:36] tmpvar: damn, I am a couple lines away from having composer designed flows running on conductor
[03:37] jb55: but what does it mean
[03:38] tmpvar: visual programming, ftw
[03:42] ryah: polotek: want to add a test?
[03:42] polotek: working on it
[03:42] Tim_Smart: OMG Github's logo goes blue when you hover over it! What does it mean?!
[03:43] ryah: polotek: simple and small is best
[03:43] ryah: blogometer: :)
[03:43] blogometer: Yes?
[03:43] ryah: blogometer: are you attempting to port to windows?
[03:43] blogometer: Hello, Ryan.
[03:43] blogometer: Baby steps, man. Baby steps.
[03:44] blogometer: Trying to get it hackable, into VC++ and compiling.
[03:44] blogometer: Creating a header will all the stuff that libeio wants but is missing.
[03:44] Viriix: i tried to install nodejs on cygwin the other day, standard ./configure && make && make install , it failed within 2 minutes so i said to hell with that and i just dev via git push's to a *nix box
[03:45] ryah: Viriix: hm
[03:45] ryah: Viriix: cygwin should be working....
[03:45] ryah: blogometer: cool
[03:46] blogometer: Actually, I'm noticing a lot of warnings, signed / unsigned mismatch.
[03:46] Viriix: it looked like it was missing a dep, but i don't think node has to many of those. i didnt have the time to look into it at the time.
[03:46] blogometer: Does these show up in a Linux build, or is MSVC being picky.
[03:46] ryah: Viriix: it might be a symlink 
[03:46] saikat has joined the channel
[03:47] Tim_Smart: Viriix: Did you give http://wiki.github.com/ry/node/building-node-on-windowscygwin a look
[03:47] ryah: yes, we have a lot of signed/unsigned warnings
[03:47] ryah: which i welcome patches to
[03:48] Viriix: ima rerun setup.exe for cygwin and give it a round 2 right now
[03:48] probablyCorey has joined the channel
[03:49] blogometer: But, they are in libeio, so it's Marc Lehmann's doing.
[03:49] blogometer: He doesn't seems like the kind of guy to let the compiler tell him what to do.
[03:49] ryah: oh
[03:50] ryah: right
[03:50] ryah: don't fix his warnings, unless you want an ear full
[03:50] ryah: i wouldn't expect libeio to be increadably difficult to port
[03:50] ryah: just noop the calls that don't exist
[03:51] ryah: will you use pthreads?
[03:51] ryah: is that built into mingw?
[03:52] blogometer: I'm using pthreads and MSVC.
[03:52] blogometer: No mingw.
[03:52] blogometer: Er, yet. If it looks like I can sort out some good fakery in an external C file, then I'd just do, otherwise, bring MinGW in.
[03:53] blogometer: I'm going to pragma away the type warnings.
[03:56] mikeal has joined the channel
[03:57] isaacs has joined the channel
[03:57] mattly has joined the channel
[03:57] isaacs: Hello, party people in the place to be!
[03:58] ehaas: sup
[03:58] isaacs: ACTION just flew back from Vegas, and boy is my wallet tired!
[03:59] ehaas: ah that sucks
[04:02] JimBastard: isaacs javascript party
[04:02] JimBastard:                          **               **         
[04:02] JimBastard:                         /**              //          
[04:02] JimBastard:   *******   ******      /**  *****        **  ****** 
[04:02] JimBastard:  //**///** **////**  ****** **///**      /** **////  
[04:02] JimBastard:   /**  /**/**   /** **///**/*******      /**//*****  
[04:02] JimBastard:   /**  /**/**   /**/**  /**/**////  ** **/** /////** 
[04:02] JimBastard:   ***  /**//****** //******//******/**//***  ******  
[04:02] JimBastard:  ///   //  //////   //////  ////// //  ///  //////
[04:03] JimBastard: party on
[04:03] isaacs: ehaas: well, actually, the gambling went quite well.  up $85
[04:03] jesusabdullah: laggernets :(
[04:03] jesusabdullah: isaacs: Ale and whores?
[04:03] isaacs: jesusabdullah: ale, no whores.  i prefer not to pay for std's
[04:03] JimBastard: gambling is only fun with opm
[04:03] jesusabdullah: Good call
[04:03] jesusabdullah: opm?
[04:04] JimBastard: other peoples money
[04:04] jesusabdullah: isaacs totally blew his money on the shows
[04:04] jesusabdullah: ZUMANITY
[04:04] ehaas: isaacs: ah cool what games
[04:04] isaacs: nah, jsut spent money on hotel and food
[04:04] isaacs: ehaas: roulette and poker
[04:05] JimBastard: well whatever, im gonna start my own node.js project, with blackjack and hookers
[04:05] JimBastard: you know what, nevermind the node.js part
[04:06] isaacs: JimBastard: we need a way to build a robot that runs on booze and put your brain in it
[04:06] JimBastard: i like my brain
[04:06] JimBastard: ill take robot hands
[04:06] isaacs: JimBastard: but do you like your meatbag as much as you'd love your shiny metal ass?  i *HIGHLY* doubt it
[04:06] JimBastard: but only if they are clamps
[04:07] JimBastard: oofa!
[04:07] JimBastard: ACTION got clamped
[04:07] JimBastard: okay
[04:07] mu-hannibal has joined the channel
[04:07] JimBastard: i gotta go ssh into servers and pipe stuff over std
[04:07] dnolen has joined the channel
[04:07] JimBastard: thats the new project
[04:07] JimBastard: connect to the server, pwn it
[04:07] JimBastard: its like a reverse npm
[04:08] JimBastard: manager add package to you!
[04:09] steadicat_ has joined the channel
[04:11] JimBastard: !@#(*&@!#(*&
[04:11] JimBastard: im gonna punch indexzero in the face
[04:11] JimBastard: http://gist.github.com/528205#comments
[04:11] polotek: ryah: http://github.com/polotek/node/commit/5787113a00534adfd8c0260cab2ba7e7fe12c978
[04:12] polotek: JimBastard: what's wrong with that?  not supposed to be public?
[04:12] EyePulp has joined the channel
[04:12] tmpvar: lol
[04:12] tmpvar: what is wrong with that?
[04:13] tmpvar: hah.
[04:13] JimBastard: NOTHING NOW THAT I DELETED THE SERVER INSTANCE
[04:13] tmpvar: you've been clamped
[04:13] JimBastard: charlliiiieeeeee
[04:13] tmpvar: by charlie and candy mountain
[04:13] JimBastard: whhhhhhyyyy
[04:13] saikat: oh no wonder i couldn't connect
[04:13] JimBastard: AHAHAHA
[04:13] chilts: oopsie ... nice naming scheme
[04:13] JimBastard: please comment on the gist
[04:13] JimBastard: for real
[04:15] JimBastard: bad charlie
[04:15] JimBastard: no more server creds for you, for one whole week
[04:15] JimBastard: i dont care how many rackspace instances you spawn up
[04:15] ryah: polotek: can you email me that?
[04:15] ryah: gtg
[04:15] polotek: ryah: I'll drop it on the mailing list
[04:16] tekky: JimBastard: just be sure to update the comments after 1 week so he knows his new creds :P lmao
[04:16] blogometer: Wow. Now she's trying to link.
[04:16] blogometer: Ambitious.
[04:16] JimBastard: tekky: its my instance >.<
[04:17] JimBastard: polotek: yeah, not public password
[04:17] mjr_ has joined the channel
[04:18] tekky: JimBastard: twas a joke har har :P
[04:18] JimBastard: rdrr
[04:18] JimBastard: sorry
[04:20] sh1mmer has joined the channel
[04:20] cardona507 has joined the channel
[04:22] sveimac has joined the channel
[04:23] tekky: tmpvar: sounds like we're gonna be trying out that new UglierJS module to replace rhino/JVM dependency on the Dojo build system :) -- even better if we can get it working on windows easily w/o too many (if any) additional demands on the users)
[04:25] mape: If only he could add UglifyJS to npm 
[04:25] isaacs: mape: +1
[04:26] mtodd has joined the channel
[04:27] blogometer: I have eio.c compiling on Windows against a header file of methods that do not exist.
[04:28] blogometer: So, probably enough of this misery for one night.
[04:28] mape: isaacs: Oh btw, ever had issues uninstalling links? I can't seem to do it
[04:28] isaacs: mape: yeah, that's a little buggy atm
[04:30] jakehow has joined the channel
[04:31] mde has joined the channel
[04:35] isaacs: mape: if you want, you can always delete the folder manually
[04:35] isaacs: mape: cd $(npm config get root)/.npm/<package-name>
[04:35] isaacs: mape: and then rm -r the LINK folder.
[04:35] mape: Yeah that is what I've been doing, just figured I'm touch base and make sure you knew
[04:36] mtodd has joined the channel
[04:37] bronson has joined the channel
[04:40] blogometer: ryah: I've got the to do list.
[04:51] zodiak has joined the channel
[04:53] justin___ has joined the channel
[04:54] bpot has joined the channel
[04:56] isaacs: mape: i feel that bug every time i bump the version on npm itself
[04:56] isaacs: mape: the way it works is to 1) remove it, 2) bump the version 3) relink
[05:02] wilmoore_ has joined the channel
[05:08] inimino: isaacs ⋱ You're here!
[05:08] isaacs: inimino: so are you!
[05:08] isaacs: what's up?
[05:08] inimino: I couldn't get npm publish to work earlier.
[05:08] inimino: I'll try it again...
[05:08] isaacs: inimino: does it work now?  my couchdb went down yesterday
[05:09] inimino: Oh, that could do it.
[05:10] tisba has joined the channel
[05:10] inimino: hm, it seems to hang at the same place
[05:10] inimino: "npm upload Not done yet! If it hangs/quits now, it didn't work."
[05:10] inimino: and then it hangs/quits :(
[05:10] isaacs: inimino: what version of npm?  is it using an https url for the registry config?  (npm config get registry)
[05:11] isaacs: inimino: node's ssl client is a bit borked
[05:11] inimino: yes, https
[05:11] inimino: should I set that to http?
[05:11] inimino: version 0.1.20
[05:11] isaacs: inimino: sure, or just delete it, and when the default changes, you'll get the default.
[05:11] isaacs: inimino: also, that's a very old version of npm
[05:12] isaacs: inimino: curl http://npmjs.org/install.sh | sh
[05:12] isaacs: or download and run yourself, of course
[05:12] inimino: ok
[05:14] inimino: isaacs ⋱ Ok, so it gets much further now, but it says "Error: Cannot insert data into the registry without authorization"
[05:14] isaacs: inimino: npm adduser
[05:14] inimino: I'm pretty sure I already did that...
[05:14] isaacs: inimino: sure.  just enter the info again, then
[05:14] mape: using the same user?
[05:15] isaacs: inimino: i think somewhere around 0.1.23, it changed how it stores that
[05:15] isaacs: mape: yeah
[05:15] inimino: Oh, ok.
[05:15] isaacs: inimino: using the same user account info
[05:15] mape: isaacs: nah meant perhaps he was doing su && npm publish that wouldn't find his user right?
[05:15] inimino: There's some warnings about auth and keys, but it said "ok" at the end.
[05:16] isaacs: inimino: ok
[05:16] isaacs: inimino: does it let you publish now?
[05:16] inimino: I think it worked
[05:17] inimino: It worked!
[05:17] inimino: Yay!
[05:17] mape: PanPG? :)
[05:17] inimino: thanks :)
[05:17] inimino: Yep.
[05:17] isaacs: inimino: w00t!
[05:18] isaacs: inimino: and now you can do "npm update" to update stuff, or "npm update npm" to update npm itself.
[05:18] inimino: cool
[05:21] tisba_ has joined the channel
[05:25] sveimac has joined the channel
[05:25] wilmoore_ has joined the channel
[05:26] sveimac has joined the channel
[05:27] mtodd has joined the channel
[05:29] wilmoore_ has joined the channel
[05:30] tmpvar has joined the channel
[05:31] siedrix has joined the channel
[05:34] tilgovi has joined the channel
[05:35] polotek has left the channel
[05:37] dnolen has joined the channel
[05:38] amerine has joined the channel
[05:42] Tim_Smart has joined the channel
[05:43] icozzo- has joined the channel
[05:44] ickmonst_ has left the channel
[05:45] saikat has joined the channel
[05:45] jochen has joined the channel
[05:49] astrolin has joined the channel
[05:50] sh1mmer: yo
[05:52] shreekavi has joined the channel
[05:53] SamuraiJack has joined the channel
[05:55] sudoer has joined the channel
[05:56] Tim_Smart has joined the channel
[05:59] javajunky has joined the channel
[06:08] mu-hannibal has joined the channel
[06:09] B1scuitsLap has joined the channel
[06:11] sr_ has joined the channel
[06:11] blowery_ has joined the channel
[06:11] cataska_ has joined the channel
[06:11] tilgovi_ has joined the channel
[06:11] syco-free has joined the channel
[06:12] russell_1 has joined the channel
[06:12] joshthecoder_ has joined the channel
[06:12] Blink7_ has joined the channel
[06:12] _alex has joined the channel
[06:13] SvenDowideit_ has joined the channel
[06:13] BryanWB has joined the channel
[06:15] sonnym has joined the channel
[06:16] brainproxy_ has joined the channel
[06:20] russell_1 has joined the channel
[06:25] Egbert9e9 has joined the channel
[06:30] crohr has joined the channel
[06:31] Throlkim has joined the channel
[06:36] ph^ has joined the channel
[06:40] mtodd has joined the channel
[06:48] zomgbie has joined the channel
[06:56] stagas has joined the channel
[07:00] angel333 has joined the channel
[07:02] CIA-77: node: 03Herbert Vojčík 07master * r4db608d 10/ src/node_net.cc : Get away uint/int comparision warning. - http://bit.ly/9lPxsI
[07:02] CIA-77: node: 03Marco Rogers 07master * r6744e59 10/ (3 files in 2 dirs): detect 0 length fs writes with tests - http://bit.ly/aFOpwO
[07:02] confoocious has joined the channel
[07:02] mbleigh has joined the channel
[07:03] aubergine has joined the channel
[07:04] Tim_Smart: brainproxy: Are you "brainfucker" on github?
[07:06] murz has joined the channel
[07:11] BryanWB has joined the channel
[07:12] aubergine_ has joined the channel
[07:14] lachlanhardy has joined the channel
[07:15] rnewson has joined the channel
[07:15] rnewson has joined the channel
[07:17] brainproxy: Tim_Smart: I am not
[07:17] mattly has joined the channel
[07:18] Tim_Smart: OK.
[07:18] brainproxy: I am michaelsbradleyjr on github
[07:18] brainproxy: (no public projects just yet)
[07:20] pdelgallego has joined the channel
[07:20] justin___ has joined the channel
[07:23] herbySk has joined the channel
[07:24] terinjokes: what do we think, is an epresso machine a subclass of a coffepot?
[07:28] SubStack: who cares?
[07:28] SubStack: object oriented programming is rather cultish about that kind of stuff
[07:29] SubStack: closures make for better objects anyways
[07:36] javajunky has joined the channel
[07:37] satori_ has joined the channel
[07:38] luddep_ has joined the channel
[07:44] virtuo has joined the channel
[07:52] teemow has joined the channel
[07:52] stride has joined the channel
[07:55] margle has joined the channel
[08:01] herbySk: terinjokes: subclass or subtype (implementation or principle)? In single-inheritance systems, the two is not always the same.
[08:02] terinjokes: implementation
[08:10] fliebel has joined the channel
[08:11] zomgbie has joined the channel
[08:12] ntelford has joined the channel
[08:13] StanAngeloff has joined the channel
[08:13] polyrhythmic has joined the channel
[08:13] StanAngeloff has left the channel
[08:16] fliebel: Hey, Im very, very new to Node.js. This morning I had some thoughts about blurring the line between server and client, by using Javascript and stuff on the server. This remembered me of Node.js and Rhino. I know there is env.js for Rhino, to run jQuery and the likes, is there something like that for Node? Does Node support AJAX-style requests, like in the browser, or only its own mechanism? I'd prefer a hip event based network lib over some old n
[08:20] mscdex: fliebel: you could probably write up wrapper around node's http module that provides the same interface as the browser (xmlhttprequest), but most people don't afaik
[08:20] micheil: fliebel: look up "running YUI3 on node.js"
[08:21] micheil: and you should find some infos
[08:21] N` has joined the channel
[08:21] lachlanhardy has joined the channel
[08:21] fliebel: micheil: I'm browsing his repo now ;)
[08:21] elliottcable: hey, what’s the appropriate approach to profile some Node code?
[08:22] elliottcable: I have a function that’s taking 4 seconds to run, which is unbelievable; I need to drill down into what’s causing that.
[08:22] elliottcable: unfortunately, node-inspector doesn’t seem to support the profiling tab yet, so…
[08:22] mscdex: elliottcable: the best way to benchmark node is to count how many rainbows per second it can handle
[08:23] lachlanhardy has joined the channel
[08:23] elliottcable: is there an automated testing service for that?
[08:23] elliottcable: something that can throw rainbows at a Node server, and benchmark how many rainbows it is handling in real-time?
[08:24] mscdex: i'm not sure offhand, but i do know that if you get at least 2 rainbows, that's considered good performance
[08:24] elliottcable: mape 3↼ does node-profile work with more recent versions of Node? :x
[08:24] elliottcable: mscdex 3↼ damn, rainbows must be ridiculously system-intensive!
[08:25] mape: elliottcable: should, doesnt?
[08:25] elliottcable: mscdex 3↼ is that what we should be advertising for Node? 8,000 HTTP requests and 2 rainbows per second?
[08:25] mscdex: heck yes
[08:25] elliottcable: mape 3↼ no idea, just found the page. About to try it.
[08:25] elliottcable: mape 3↼ I’ve never used npm; what do I need to get to use that? or can I use node-profile without npm?
[08:25] mape: Ah k, should work if you have linux
[08:25] mscdex: evented double rainbows
[08:25] rnewson has joined the channel
[08:25] rnewson has joined the channel
[08:25] mape: should be able to
[08:25] elliottcable: mape 3↼ ack, I’m on OS X :x
[08:26] mscdex: osx = ex-os
[08:26] mape: hmm it should work there as well
[08:26] robotarmy has joined the channel
[08:26] elliottcable: ah, it’s just one script/file. I didn’t notice that. Yeah, mape, about to try it…
[08:26] mape: as long as you can find the ticker script with locate
[08:27] elliottcable: erm. How much time should this add to the execution, percentage-wise?
[08:27] mape: not sure really, using dtrace would be better ;)
[08:27] elliottcable: hah
[08:27] mape: but all it really does is run node with -prof
[08:28] ewdafa has joined the channel
[08:28] Tim_Smart: Node can handle these http://www.youtube.com/watch?v=OQSNhk5ICTI
[08:28] mape: and handles file creation/coloring of results and whatnot
[08:28] elliottcable: well, it’s doing *something* http://drp.ly/1ydhad
[08:29] Tim_Smart: python is stealing stuff.
[08:29] elliottcable: woaaaaah
[08:29] elliottcable: okay, most of this information is … not helpful. :x
[08:30] elliottcable: not your fault though. At the least, I suppose, it would appear that nothing in *my code* seems to be eating up much time
[08:30] elliottcable: the most pertinent line I can find is 5825   52.6%    0.0%  /usr/local/bin/node
[08:30] fliebel: Tim_Smart: what is Python stealing?
[08:30] Tim_Smart: fliebel: elliottcable's CPU
[08:30] elliottcable: which I suppose would imply, since the actual function-call list shows nothing over 0.4%, that most of the time it’s sitting in Node’s internals?
[08:30] elliottcable: Tim_Smart 3↼ don’t worry, it’s locked down.
[08:31] elliottcable: Tim_Smart 3↼ I double-padlocked it after that incident with Ruby and the boltcutters >,>
[08:32] fliebel: What is Node written in? C? Python? JavaScript?
[08:32] luddep has joined the channel
[08:32] elliottcable: fliebel 3↼ mostly  C++ and JavaScript (C++, because that’s what V8 is written in)
[08:33] elliottcable: fliebel 3↼ with a bit of ISO C where it interfaces with the ISO C libraries (eio, etc)
[08:33] elliottcable: fliebel 3↼ http://github.com/ry/node/graphs/languages :D
[08:34] fliebel: elliottcable: Good one, hadn't thought of that :)
[08:36] icy: the 7% python is misleading, that's just waf
[08:36] mscdex: elliottcable: you've using a unicode box :S
[08:36] mscdex: what did normal punctuation ever do to you?!
[08:36] mscdex: :p
[08:36] fliebel: mscdex: Meh, he's just using a nice arrow
[08:37] elliottcable: mscdex 3↼ :ↁ nothin’, I just ♥ me sum Unicode¡!
[08:37] elliottcable: harpoon. not arrow. D:
[08:37] elliottcable: ACTION harpoons you in the face
[08:37] fliebel: elliottcable: Ouch! What kind of keyboard do you have? or do you have a character pallet open all the time?
[08:37] necrodearia has joined the channel
[08:38] elliottcable: ACTION shrugs
[08:38] elliottcable: keep most of it in my head
[08:38] mscdex: fliebel: it's automatic when you do tab completion
[08:38] mscdex: on a lot of clients anyway
[08:38] elliottcable: ⌥NNNN ⇒ ♥
[08:38] mscdex: :S
[08:38] elliottcable: cf. ⌥2325 ⇒ ⌥
[08:38] fliebel: mscdex: Not on Adium ;)
[08:39] mscdex: elliottcable is a unicode hacker!
[08:39] elliottcable: Unicode Hex Entry on OS X
[08:39] elliottcable: and I use irssi <3
[08:39] mscdex: fliebel: xchat :-D
[08:39] mape: elliottcable: Got it working?
[08:39] mscdex: irssi sounds like an interface name
[08:39] mscdex: infrared synchronous serial interface
[08:40] fliebel: Ca I write irssi servers with node?
[08:40] mscdex: no, but you can write irc servers with node
[08:40] mscdex: and it's been done
[08:40] elliottcable: yep
[08:40] elliottcable: I remember that :D
[08:40] elliottcable: ryah wrote one right before his presentation
[08:40] elliottcable: and we were all screwing with the channel
[08:40] fliebel: How about email servers? I'm currently writing one using Twisted ;)
[08:40] elliottcable: and then some smart dude, I forget who (JimBastard?) crashed his server in the middle of the presentation by being tricky D:
[08:41] mscdex: i think someone had started on an smtp server awhile back, but not sure the status of it though
[08:41] mscdex: i've kinda started on an imap module
[08:42] fliebel: mscdex: I like that… js isn't as much of an advantage with mail as it is with web though…
[08:42] stride: fliebel: why's that?
[08:42] mscdex: fliebel: that's mostly because a lot of the web stuff is in core
[08:42] mscdex: and is done well already
[08:43] mscdex: http is a first class citizen in node
[08:43] fliebel: mscdex: It's everywhere… All network libs I found ecept Twisted include only bare sockets and http :(
[08:43] xla has joined the channel
[08:44] ingemar has joined the channel
[08:45] elliottcable: ahhahahaha oh dear god
[08:45] stride: aren't those seperate modules in twisted as well? only by a central group of maintainers
[08:45] elliottcable: I found out what was slowing down my script so ridiculously much
[08:46] elliottcable: I’d left a `debugger` call in the middle of a tight loop :x
[08:46] stride: elliottcable: stuck rainbows?
[08:46] stride: :)
[08:46] mscdex: fliebel: there's a reason for that
[08:46] fliebel: Anyway, I have to take a shower and clean some goat shit… or maybe in the reverse order… anyway, see you later :) *feels like a geek-farmer combi now*
[08:46] fliebel: mscdex: being?
[08:47] mscdex: fliebel: it's good to do a small set of things really good and have good support for them and let people build on that
[08:47] fliebel: mscdex: true, but it gets a bit tiresome to look for a good email lib, and only find http.
[08:48] stride: http://www.google.com/#hl=en&source=hp&q=node.js+smtp ?
[08:49] caolanm has joined the channel
[08:52] proppy has joined the channel
[08:53] FransWillem has joined the channel
[08:53] jetienne has joined the channel
[08:53] zemanel has joined the channel
[08:55] TomY has joined the channel
[08:56] ntoll has joined the channel
[08:59] tisba has joined the channel
[09:01] markwubben has joined the channel
[09:03] wllm has joined the channel
[09:06] zomgbie has joined the channel
[09:10] terinjokes has joined the channel
[09:11] terinjokes has joined the channel
[09:17] dnyy has joined the channel
[09:18] elliottcable: dnyy 3↼ :O
[09:18] mAritz has joined the channel
[09:21] stagas has joined the channel
[09:22] mtodd has joined the channel
[09:23] maushu has joined the channel
[09:25] shreekavi has left the channel
[09:26] sideshowcoder has joined the channel
[09:27] mtodd has joined the channel
[09:33] FransWillem: Does anyone know what the equivalent of f(a,b,c) is with f.call ?
[09:33] FransWillem: is it f.call(null,a,b,c) ?
[09:35] proppy: f.call(window, a, b c) ?
[09:35] proppy: in the browser :)
[09:35] MattJ has joined the channel
[09:35] micheil: f.call(undefined, a,b,c)
[09:35] FransWillem: Hmm, mdc says it can be either null or undefined
[09:35] FransWillem: https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Function/call
[09:36] micheil: it's better if it's undefined
[09:36] micheil: as that's what ECMA262 defaults to
[09:36] FransWillem: ah, k
[09:36] FransWillem: thanks :)
[09:37] proppy: micheil: what is the global object in node.js context ?
[09:37] micheil: there is none
[09:37] FransWillem: Actually
[09:37] proppy: the current module context ?
[09:37] FransWillem: isn't it GLOBAL ?
[09:37] micheil: every module is evaluated in the context of a closure
[09:37] proppy: if you print this in node repl you get {}
[09:37] FransWillem: err
[09:38] FransWillem: no sorry, global
[09:38] micheil: there is GLOBAL, but don't use it. you could cause kittens to die.
[09:38] FransWillem: http://www.nodejs.org/api.html#global-objects-44
[09:39] proppy: :)
[09:42] chapel has joined the channel
[09:46] micheil: actually, rephrase that; kittens will die.
[09:51] shimondoodkin has joined the channel
[09:51] shimondoodkin: mongodb.gridfs to use or not to use?
[10:02] maushu: shimondoodkin: NEIN.
[10:04] maushu: On another news why the hell am I working on the production.
[10:04] shimondoodkin: what do you mean? "On another news why the hell am I working on the production."
[10:05] shimondoodkin: (it is out of contect for me)
[10:05] shimondoodkin: context
[10:05] stride: to send out garbled e-mails to > 10.000 customers maushu, that rocks
[10:05] omarkj has joined the channel
[10:05] maushu: At work instead of working in a proper development zone, I'm working directly on the production.
[10:06] maushu: Why? I have no idea.
[10:06] maushu: Maybe the project manager is a moron.
[10:06] maushu: If something goes wrong the one who suffers is the fool (me).
[10:07] shimondoodkin: maushu: proably thats fine if you have small uncritical client base
[10:07] bsstoner has joined the channel
[10:07] maushu: I have no idea if the client is critical or not.
[10:08] maushu: Besides, would it be too much work to have another database?
[10:08] shimondoodkin: what kind of database?
[10:09] shimondoodkin: actualy i do clones in vmware
[10:09] maushu: A sql server one.
[10:09] maushu: One that doesn't fit *at all* with this project.
[10:09] mscdex: maushu.com
[10:09] maushu: A nosql would fit so much better.
[10:09] shimondoodkin: it is just backup and restore
[10:10] maushu: mscdex: wat.
[10:10] mscdex: just sayin'
[10:10] shimondoodkin: maushu.com is not workin'
[10:10] mscdex: exactly
[10:11] maushu: ACTION facepalms.
[10:11] mscdex: ACTION palmsface
[10:12] maushu: mscdex: There. Happy?
[10:12] astrolin_ has joined the channel
[10:14] mscdex: happy with what?
[10:15] maushu: http://whois.domaintools.com/maushu.com
[10:16] mscdex: https://ws.arin.net/whois/?queryinput=maushu.com
[10:16] mscdex: FAILURE
[10:16] maushu: "ARIN WHOIS database, last updated 2010-08-16 20:00"
[10:17] maushu: I just registered it. Like 5 minutes ago.
[10:17] mscdex: ;(
[10:17] maushu: ARIN just sucks.
[10:17] mscdex: nowai
[10:17] mscdex: it's the American Registry for Internet Numbers.
[10:17] maushu: Exactly.
[10:18] mscdex: it's the group that dishes out IP addresses!
[10:18] maushu: Exactly.
[10:18] mscdex: they're RESTful too.
[10:19] maushu: Usability: < 0.8% Bureaucracy: > 99.2% 
[10:19] mscdex: psh
[10:24] zum has joined the channel
[10:26] maushu: mscdex: Hmm, pretty fast. I can already access graphnode with this domain.
[10:27] ntoll: hi... newbie question here... can anyone suggest an introductory article/howto for node.js addon development... I've read the doc on the node.js website and played with the postgres example referenced therein.... just wondering if there was anything else I could look at before ploughing through code and libs...?
[10:28] ntoll: or perhaps a "template" example addon I could..?
[10:28] maushu: ntoll: None that I know of. Besides the postgres one.
[10:28] ntoll: maushu: oh well, there's an opportunity :-)
[10:29] Tim_Smart has joined the channel
[10:29] ntoll: is there a list of node addons anywhere... just so I get to look at more source code..?
[10:29] jblanche has joined the channel
[10:32] stride: ntoll: http://wiki.github.com/ry/node/modules lists a few
[10:32] ntoll: stride: thanks!
[10:33] stride: ntoll: otherwise npm contains a list feature as well
[10:33] stride: np
[10:33] ntoll: npm..?
[10:33] ntoll: ACTION = node noob
[10:33] ntoll: nobe..?
[10:33] stride: ntoll: http://github.com/isaacs/npm a package manager for node modules
[10:34] ntoll: stride: of course... doh!
[10:34] BryanWB has joined the channel
[10:34] ntoll: thanks
[10:34] stride: ntoll: also, http://www.commonjs.org/ is recommended
[10:34] Tim_Smart: npm.mape.me
[10:35] stride: Tim_Smart: oh, sweet, didn't know about that
[10:37] hellp has joined the channel
[10:44] ntoll: Tim_Smart: I see your name against a uuid module... upon which uuid implementation is that based ...? OSSP..?
[10:44] Tim_Smart: http://bitbucket.org/nikhilm/uuidjs
[10:44] Tim_Smart: I just turned it into a package
[10:45] tisba_ has joined the channel
[10:45] jetienne: hmm my package is no more in npm dir
[10:45] Tim_Smart: Unfortunately it takes the package maintainer name instead of the name specified in package.json
[10:46] tpryme has joined the channel
[10:46] ntoll: Tim_Smart: ok
[10:46] Tim_Smart: ntoll: http://bitbucket.org/nikhilm/uuidjs/src/tip/src/uuid.cc#cl-3 whatever header it finds I guess.
[10:46] jetienne: npm still needs its own username+password ?
[10:47] ntoll: Tim_Smart: that's the conclusion I just reached :-)
[10:47] fermion has joined the channel
[10:48] jetienne: where can i find the doc on how to build/upload a npm pacakge ?
[10:48] ntoll: Tim_Smart: well, it built :-)
[10:50] Tim_Smart: ntoll: Mac supplies the devel libraries with xcode I think, on Ubuntu I had to apt-get uuid-dev
[10:50] ntoll: Tim_Smart: I just downloaded the source
[10:52] ph^_ has joined the channel
[10:54] jetienne: i think a little tools to publish a github repo in npm would be nice... does this exist already ?
[10:55] ph^ has joined the channel
[10:57] gwoo has joined the channel
[10:57] mtodd has joined the channel
[10:59] AAA_awright_ has joined the channel
[11:00] BryanWB has joined the channel
[11:01] mape: Don't think it does
[11:01] mape: but I agreen I would prefer if I could hook so that a npm publish does a git push origin master as well
[11:01] mape: *-
[11:01] mape: and a n
[11:04] ph^_ has joined the channel
[11:16] mtodd has joined the channel
[11:23] c4milo has joined the channel
[11:29] ph^ has joined the channel
[11:30] phil- has joined the channel
[11:49] SamuraiJack_ has joined the channel
[11:51] BryanWB has joined the channel
[11:54] omarkj has joined the channel
[12:05] d0k has joined the channel
[12:09] markwubben has joined the channel
[12:14] daleharvey has joined the channel
[12:16] Akufen has joined the channel
[12:16] Akufen has joined the channel
[12:19] blogometer has joined the channel
[12:23] zomgbie has joined the channel
[12:23] szaboat has joined the channel
[12:31] esigler_ has joined the channel
[12:33] BryanWB has joined the channel
[12:34] blogometer: I installed node with homebrew.
[12:34] blogometer: But NPM doesn't seem to be working.
[12:34] sveimac: what os?
[12:34] jherdman has joined the channel
[12:34] blogometer: OS X.
[12:34] blogometer: Homebrew.
[12:35] sveimac: errormesg :)?
[12:35] blogometer: var _ = require('underscore');
[12:35] blogometer: throw new Error("Cannot find module '" + request + "'");
[12:35] blogometer: Cannot find module 'underscore'
[12:35] shimondoodkin: var _ = require('./underscore');
[12:35] sveimac: did you sudo when installing npm, or else im not sure it will update paths
[12:36] blogometer: That would mean to look for it in the current directory.
[12:36] Tim_Smart: blogometer: I have seen that error before.
[12:36] blogometer: sveimac: Homebrew. No sudo necessary.
[12:36] sveimac: with npn
[12:36] sveimac: npm*
[12:36] blogometer: sveimac: See above.
[12:36] blogometer: I have write access to the installation directory. I do not need to sudo.
[12:37] Tim_Smart: homebrew modifies the node lib path to some random place in the Cellar
[12:37] Tim_Smart: instead of /usr/local/lib/node
[12:37] Tim_Smart: (Where npm so happens to install_
[12:37] blogometer: Tim_Smart: Okay.
[12:37] blogometer: npm is installing into my Homebrew directory.
[12:38] Tim_Smart: OK. Just make sure it is installing somewhere into require.path
[12:38] Tim_Smart: s/.path/.paths
[12:39] sveimac: blogometer: I tried underscore as well, getting same thing
[12:39] sveimac: via npm
[12:39] sideshowcoder has joined the channel
[12:39] mscdex: are you over underscore yet? :p
[12:39] Tim_Smart: npm install underscore works fine for me
[12:39] blogometer: mscdex: What is not to love about Underscore?
[12:40] mscdex: i was making a pun ;-)
[12:40] Tim_Smart: npm -v is 0.1.25
[12:40] mscdex: it's early
[12:40] blogometer: Tim_Smart: require.paths?
[12:40] blogometer: mscdex: Fine, but is there something not to like about underscore.js?
[12:40] Tim_Smart: blogometer: Mine are [ '/home/tim/.node_libraries', '/usr/local/lib/node' ]
[12:40] mscdex: blogometer: open up a repl and type require.paths
[12:40] sveimac: blogometer: working here now, just didnt work inside my textmate script
[12:41] blogometer: Not being defensive. Wondering if you have opinions, what they might be, regarding Underscore.js. 
[12:41] mscdex: i don't have a strong opinion on it either way really
[12:41] blogometer: [ '/Users/alan/.node_libraries' , '/opt/Cellar/node/0.1.103/lib/node' ]
[12:41] mscdex: a lot of the stuff is already in v8 though
[12:42] Tim_Smart: blogometer: Is npm installing to either of those?
[12:42] stagas has joined the channel
[12:42] blogometer: Really? _.extend? _.each?
[12:42] mscdex: yes
[12:42] blogometer: Given those two, oh, right. This is ECMA 5.
[12:42] blogometer: Ouch.
[12:42] mscdex: heh
[12:42] phiggins: blogometer: I dislike the use of the char _ ... In the browser I already have those methods, mostly. in v8, most of those are on natives
[12:43] phiggins: very little use for _ in node, imo
[12:43] christophsturm has joined the channel
[12:43] blogometer: Thank you, one and all, for sparing me the _.
[12:43] phiggins: also _.anything looks horrible to me.
[12:43] mscdex: :p
[12:43] mscdex: it looks like a fill in the blank
[12:43] phiggins: our _private convention makes it hard for me to read :)
[12:43] phiggins: _.private _private look the same
[12:44] mscdex: _private is better than private_ imho
[12:44] phiggins: mine too
[12:44] blogometer: Well, I guess I can put off getting my require paths fixed for a while then.
[12:44] mscdex: dun dun dunnnn
[12:44] blogometer: Tim_Smart: How do you specify your require paths?
[12:45] Tim_Smart: Yeah this is why I install node from source; so I know package managers aren't messing with my shi
[12:45] blogometer: The libraries are installed to /opt/lib/node.
[12:45] mscdex: i had a dream i was discussing node.js with some talk show host over the phone while they were broadcasting live on tv
[12:45] mscdex: huhu
[12:45] blogometer: I love me some Homebew.
[12:45] drudge: it is too easy to install node
[12:46] blogometer: mscdex: Yes. It is *that* important.
[12:46] mscdex: Tim_Smart: my packages install node to /usr/local/bin
[12:46] blogometer: We're just the only ones who know.
[12:47] mscdex: or is it /usr/local/lib
[12:47] mscdex: whichever one it defaults to on ubuntu :p
[12:47] chrischris has joined the channel
[12:47] Tim_Smart: mscdex: /usr/local/lib for the libraries.
[12:48] Tim_Smart: ../bin for the cli tool
[12:48] mscdex: yeah
[12:48] blogometer: Yes. No, but how to you set require.paths, there must be a way to do so form the shell.
[12:48] blogometer: An argument for env for "node".
[12:48] mscdex: you can unshift onto it
[12:48] mscdex: require.paths.unshift('/some/path');
[12:48] mscdex: or change an environment variable
[12:48] Tim_Smart: $NODE_PATH I think, otherwise modify on runtime
[12:49] blogometer: NODE_PATH=/opt/lib/node node foo.js 
[12:49] blogometer: That worked. 
[12:49] blogometer: Thank you tech support!
[12:49] mscdex: :-D
[12:49] mscdex: go ninja go ninja go!
[12:49] blogometer: Heh.
[12:50] blogometer: mscdex: Where is a good method reference for ECMA 5?
[12:50] mscdex: blogometer: http://wiki.github.com/ry/node/ecma-5mozilla-features-implemented-in-v8
[12:50] mscdex: blogometer: that's what v8 has implemented from es5
[12:51] mscdex: http://www.youtube.com/watch?v=GFLGRidfFo4
[12:51] blogometer: Where is _.extend ?
[12:51] blogometer: Or its equivelent?
[12:52] blogometer: Retry:
[12:52] blogometer: Where is the equiv of _.extend?
[12:52] sveimac: mscdex: lol, i love tmnt
[12:53] mscdex: blogometer: core uses sys.inherits a lot, as do many other people
[12:53] Tim_Smart: I thought sys.inherits was disappearing.
[12:54] mscdex: people want it to, but i haven't heard ryah say that
[12:54] mscdex: i personally would like to keep it
[12:54] mscdex: it's handy
[12:55] blogometer: My brain esplode:
[12:55] blogometer: http://groups.google.com/group/nodejs/browse_thread/thread/1bea235c53df8289
[12:56] blogometer: mscdex: Can you give me a one liner invocation of sys.inherits?
[12:56] blogometer: is it:
[12:56] blogometer: sys.inerits({ a: 'a' }, { b: 'b' })
[12:56] blogometer: returning a merged "Object"?
[12:56] blogometer: Okay. REPL.
[12:57] mscdex: blogometer: no, it modifies the first argument
[12:57] mscdex: blogometer: http://github.com/ry/node/blob/master/lib/sys.js#L328-L337
[12:57] chris_ has joined the channel
[13:03] aheckmann has joined the channel
[13:04] behmann has joined the channel
[13:04] blogometer: Thanks for the help everybody.
[13:04] kodisha has joined the channel
[13:05] blogometer: You're just like the voices in my head, except you actually know what you're talking about.
[13:07] tekky has joined the channel
[13:08] pufuwozu has joined the channel
[13:09] dnolen has joined the channel
[13:10] aubergine has joined the channel
[13:13] stepheneb has joined the channel
[13:16] dnolen has joined the channel
[13:17] kriszyp has joined the channel
[13:18] mbleigh has joined the channel
[13:18] jherdman has joined the channel
[13:19] herbySk: A quick check: Is
[13:19] herbySk: env NODE_MODULE_CONTEXT=1 tools/test.py
[13:19] herbySk: the right way to run test with context loading on?
[13:19] herbySk: s/test/tests/
[13:20] emmanueloga has joined the channel
[13:21] coobr has joined the channel
[13:22] fliebel has joined the channel
[13:23] fliebel: hey
[13:27] fliebel: I found there are quite a few web frameworks for node.js. Are there ones which are exceptionally good or have a new concept that is very much unlike Djnago or Rails?
[13:27] bcg has joined the channel
[13:29] wattz: Good morning
[13:29] fliebel: good morning wattz
[13:29] wattz: now goes it
[13:29] wattz: fliebel: you should try geddy
[13:29] wattz: for a node framework
[13:30] wattz: what db are you going to use?
[13:30] fliebel: wattz: what makes it new or good?
[13:30] wattz: it follows a lot of the same things as rails/django
[13:30] fliebel: I'm not yet looking at databases, but I like CoucDB, or anything with a REST api.
[13:31] wattz: nice
[13:31] wattz: couch is cool
[13:31] fliebel: wattz: I said UNlike django and rails. I'd like something that is either very good, or has a new way of thinking.
[13:31] wattz: fliebel: ahh
[13:31] wattz: RYO
[13:32] wattz: Roll Your Own
[13:32] wattz: node is really easy to work with for writing and setting up apps the way you want them
[13:33] fliebel: watts: I had indeed some non-standard ideas for a web framework, but I thought I'd look some others up.
[13:33] wattz: ahh
[13:33] wattz: as do i
[13:33] fliebel: (ah, I was googling for "node.js RYO")
[13:33] wattz: but i halted dev on my framework to build all the C++ pieces i wanted
[13:34] fliebel: wattz: What do you have in mind?
[13:34] sveisvei has joined the channel
[13:34] wattz: im writing an application server
[13:35] wattz: almost finished my custom build system (based of make/configure and waf)
[13:35] javajunky: fliebel: the most unusual one to look at would be fab
[13:35] fliebel: javajunky: Thanks, I'll have a look
[13:36] javajunky: fliebel: the most sinatra like one is express, which sits as a v. thin layer atop connect, and the most rails like one is geddy
[13:36] mscdex: wattz going on?
[13:36] javajunky: express is probably the most mature, but geddy is pretty damn close I'd say
[13:36] wattz: sup mscdex 
[13:36] mscdex: dude... geddy is flippin' awesome
[13:36] micheil: mscdex: author irony?
[13:36] micheil: erm
[13:37] micheil: author sarcasm, rather.
[13:37] mscdex: geddy is pretty old, but he can still sing a good tune
[13:37] wattz: ur.
[13:37] fliebel: mscdex: I believe you, I'm only looking for some new stuff, not sinatra, django, rail or whatever redone in javascript :)
[13:38] javajunky: fliebel: yeah then fab is what you want to look at
[13:38] javajunky: good luck ;)
[13:38] wattz: mscdex: write some C++
[13:38] Blink7_ has joined the channel
[13:38] mscdex: wattz: been there, done that.
[13:38] wattz: ur.
[13:38] mscdex: if only we could write addons in javascript!
[13:38] mscdex: :-D
[13:38] wattz: ._.
[13:39] mscdex: .-.
[13:39] wattz: learning lex/yacc has been/is interesting
[13:39] wattz: ';..;'
[13:39] wattz: dragon ^
[13:39] mscdex: no, that's a smiley crying
[13:39] wattz: ofxo
[13:39] wattz: motorcycle
[13:39] mscdex: c(_8(|)
[13:39] mscdex: homer simpson
[13:40] wattz: ACTION waits for someone to do the penis ascii..
[13:40] mscdex: wattz: JimBastard isn't here to do that
[13:40] wattz: mscdex: ahh
[13:40] wattz: :(
[13:40] wattz: (_))=D
[13:40] fliebel: How much node hacking can one do without knowing C++?
[13:40] wattz: there, i filled in for him
[13:40] wattz: fliebel: you can write modules in js too
[13:41] mscdex: that looks like someone's ass backed up to one of those hand dryers
[13:41] wattz: "press button, get bacon"
[13:41] wattz: http://blog.cartelagency.com/wp-content/uploads/2008/08/push-button-receive-bacon.png
[13:42] mscdex: fliebel: typically the verbage goes: modules are written in js and use the exports object, and addons/bindings are written in c++ land
[13:42] wattz: it's a happy little land!
[13:43] fliebel: mscdex: I don't possess enough node vocabulary to understand what that means. I just droped in here this morning after I had a new idea :)
[13:43] wattz: ACTION dances like a member of the lollipop guild, drops it like it's hawt
[13:43] backthatzachup has joined the channel
[13:45] brapse has joined the channel
[13:45] fliebel: Is this even valid js? I dont' understand the fab thing. http://github.com/jed/fab/blob/master/examples/hello.js
[13:49] mu-hannibal has joined the channel
[13:50] fliebel has left the channel
[13:50] ben_alman has joined the channel
[13:50] wattz: i wish there was away to put node in a C++ program
[13:50] wattz: lol
[13:50] robotarmy has joined the channel
[13:53] zapnap has joined the channel
[13:54] loincloth has joined the channel
[13:54] mscdex: i wish there was a way for me to write node.js stuff all day and get paid for it
[13:54] mscdex: lol
[13:54] wattz: mscdex: :D
[13:54] mscdex: i do get it sometimes though
[13:54] mscdex: s/it/to
[13:54] wattz: once i finish Bob's Run method to build the app, im going to build a task method to let users setup their own versions of Bob using just js
[13:55] wattz: so it's not just strapped to being another Make/Configure
[13:55] mscdex: bob schieffer?
[13:56] pkrumins: ryah: can you take a look at this when you're back? http://gist.github.com/530018  Line 27. I can't figure out how to return the Buffer from function there.
[13:56] pkrumins: ryah: that's a small test case that I wrote just to understand how to return Buffers
[13:57] mtodd has joined the channel
[13:57] mscdex: pkrumins: return scope.Close(b);
[13:58] mscdex: i'm guessing
[13:58] pkrumins: mscdex, that can't possibly work.
[13:58] pkrumins: because b needs to be a Handle<xxx> object for it to be Close'd
[13:58] pkrumins: somehow have to warp b into Handle
[13:59] margle has joined the channel
[13:59] wattz: and i would guess that casting would make it 'less precise'
[13:59] jtsnow has joined the channel
[14:00] mscdex: maybe wrap it?
[14:00] pkrumins: mscdex: that's the tricky part, i don't know how
[14:00] pkrumins: nothing that I tried worked
[14:00] pkrumins: cause Wrap is a void method
[14:00] pkrumins: doesn't return anything, only sets some mystical properties on an object
[14:01] pkrumins: for sure ryah is the only person who knows the answer
[14:01] davidwalsh has joined the channel
[14:01] zemanel has joined the channel
[14:01] kreyman: mscdex: wondering... will you be adding more examples to ncurses?
[14:02] pkrumins: mscdex: but thanks for suggestions
[14:02] pkrumins: wattz: ps. there are no casts.
[14:02] mscdex: kreyman: probably when i get enough free time next
[14:02] dylang has joined the channel
[14:02] kreyman: mscdex: ok, thanks. 
[14:02] wattz: pkrumins: ok
[14:03] wattz: mscdex: i want to make an 'irssi' with your ncurses and /ban all over your face :D
[14:03] mscdex: ?
[14:03] mscdex: i already have a simple irc client as an example
[14:03] wattz: yup
[14:04] mscdex: i ought to switch out the irc library though
[14:04] mscdex: node-irc is much better
[14:04] demmonoid has joined the channel
[14:04] wattz: nice
[14:04] demmonoid has left the channel
[14:04] wattz: meeting brb
[14:10] daniellindsley has joined the channel
[14:10] feroz_ has joined the channel
[14:11] cferris has joined the channel
[14:15] steadicat has joined the channel
[14:22] sonnym has joined the channel
[14:24] nerdEd has joined the channel
[14:25] zaach has joined the channel
[14:26] icozzo has joined the channel
[14:28] astrolin has joined the channel
[14:29] bcg has joined the channel
[14:30] mw_ has joined the channel
[14:30] virtuo has joined the channel
[14:30] bcg: Are there any docs or blogs on best practices setting up a new node app? Wondering how best to pull in modules I would like to require in the same repo (similar to bundler in ruby)
[14:31] aho has joined the channel
[14:32] SubStack: you could use git submodules
[14:33] mscdex: yuck, submodules
[14:33] mscdex: :p
[14:33] caolanm: why does everyone hate submodules so much?
[14:33] mscdex: because github doesn't automatically include them in tarballs
[14:34] caolanm: hmm, that is kind of annoying
[14:34] mscdex: very
[14:34] caolanm: but they are still quite convenient for just fetching a bunch of dependencies
[14:34] charlieyan has joined the channel
[14:34] charlieyan: does anyone use visionmedia's haml.js?
[14:34] mscdex: if you have git installed and everything, sure
[14:34] charlieyan: i've having a tough time loading local js and css files
[14:35] charlieyan: there isn't documentation around github for it
[14:37] softdrink has joined the channel
[14:39] javajunky: charlieyan: I don't think* it really supports that, you can dump in a block of it, but you'll have to handle the file loading yourself I think
[14:40] charlieyan: javajunky: what do you use?
[14:40] ajpiano has joined the channel
[14:41] javajunky: charlieyan: well I am currently using that haml library , and my js and css is just brought in by standard includes rather than embedded.. but tj's suggesting people move off it and onto 'jade' fyi
[14:41] pgriess has joined the channel
[14:41] charlieyan: hmm
[14:42] ph^ has joined the channel
[14:42] charlieyan: javajunky: do you mean just <script></script> and <link...>?
[14:42] femtoo has joined the channel
[14:44] charlieyan: i've tried     %script{ src: 'jquery.js' }
[14:44] charlieyan: in haml but it doesn't load the file
[14:44] javajunky: well you'll need to make sure the path to the .js file is valid to the client
[14:44] javajunky: is this with connet/express ?
[14:44] charlieyan: yes
[14:45] charlieyan: i have my haml files
[14:45] charlieyan: in a directory called view
[14:45] javajunky: so you'll need to make sure your static Provider middleware is setup ?
[14:45] charlieyan: for instance view >> index.haml, layout.haml
[14:45] charlieyan: hmm do i configure it through
[14:45] charlieyan: app.js?
[14:46] javajunky: http://senchalabs.github.com/connect/staticProvider.html
[14:46] javajunky: by default any file stuck in the '/public' folder will be served statically 
[14:46] charlieyan: ahh
[14:47] charlieyan: lemme try that
[14:47] charlieyan: and move over to jade
[14:47] charlieyan: thanks for your help javajunky
[14:49] javajunky: np.
[14:49] wllm has joined the channel
[14:50] charlieyan: yay it works.
[14:51] kodisha has joined the channel
[14:56] jherdman has joined the channel
[15:00] omarkj: Anyone lurking here from e-resistible?
[15:00] rwaldron has joined the channel
[15:03] b_erb has joined the channel
[15:04] b_erb: habe there been any changes to path.dirname() between 1.97 and 1.104? I can't find anything in the changelog, but there is a reproducable changed behaviour
[15:04] b_erb: s/habe/has/
[15:06] javajunky: charlieyan: one would hope so ;)
[15:07] saikat has joined the channel
[15:08] b_erb: in 1.97 path.dirname('/a/b/c/d/') returns /a/b/c/d/
[15:08] b_erb: in 1.104 path.dirname('/a/b/c/d/') returns /a/b/c/
[15:08] stride: b_erb: http://github.com/ry/node/blob/v0.1.97/lib/path.js (0.1.97) http://github.com/ry/node/blob/master/lib/path.js (current)
[15:09] cardona507 has joined the channel
[15:10] dmcquay has joined the channel
[15:11] b_erb: stride: thanks
[15:11] stride: np
[15:12] bpot has joined the channel
[15:15] isaacs has joined the channel
[15:15] mscdex: you also do a github compare
[15:15] mscdex: :-)
[15:18] b_erb: i know this is just a minor change, but why is something like that not in the changelog? is this too insignificant? 
[15:21] ryah: good morning
[15:21] stride: morning ryah 
[15:21] c4milo: morning 
[15:22] CIA-77: node: 03Herbert Vojčík 07master * r32e3094 10/ (3 files in 2 dirs): Fix of 'sys.common.debug' calls in tests. - http://bit.ly/9oRU0W
[15:22] CIA-77: node: 03Ryan Dahl 07master * r03dda31 10/ src/node.js : Simplify loading events.js - http://bit.ly/cIrUOS
[15:22] CIA-77: node: 03Ryan Dahl 07master * rd4f4380 10/ TODO : Add TODO - http://bit.ly/c27Y3k
[15:23] isaacs: b_erb: it actually returns /a/b/c (no trailing slash)
[15:23] matt_c has joined the channel
[15:23] tmpvar has joined the channel
[15:23] wattz: im back :D
[15:23] isaacs: b_erb: this is to match the system "dirname" commnad
[15:23] mscdex: wattz up?
[15:24] wattz: not much
[15:24] b_erb: isaacs: yes i know, the trailing slash was wrong here. just copied it wrong
[15:24] wattz: heading to lunch
[15:25] sudoer has joined the channel
[15:25] mscdex: i need coffee yet
[15:26] zemanel has joined the channel
[15:26] bradleymeck has joined the channel
[15:26] b_erb: isaacs: ok, system's dirname is a valid reason. perhaps it's just me being frustrated searching for a bug all that long and ending up with this tiny little slash at the wrong place when upgrading to a newer version of node
[15:27] isaacs: b_erb: i think it was in the changelog, iirc
[15:27] b_erb: isaacs: nope, i searched there twice
[15:27] isaacs: oh, ok
[15:30] zemanel has joined the channel
[15:32] dnolen has joined the channel
[15:32] danielzilla has joined the channel
[15:32] marshall_law has joined the channel
[15:33] amerine has joined the channel
[15:33] isaacs: b_erb: it was discussed on the mailing list.  i mean, that's bound to happen if you fix any bug though, right?  with 0.x software, you have to be more concerned with getting it right, even at the expense of breaking backwards compatibility
[15:34] b_erb: isaacs: no offense, i know. i'm just angry at myself that i spent to much time on that ;)
[15:34] isaacs: heh
[15:34] isaacs: test coverage helps a lot
[15:34] isaacs: and reading over the git log whenever you update node
[15:35] b_erb: isaacs: i wasn't able to do much in the last weeks and jumped from 0.1.97 to 0.1.104. that was kind of to much. i thought i could fix the changes only be a brief look on the changelog and occuring problems in my app after the upgrade.
[15:36] isaacs: ykes
[15:36] rauchg_ has joined the channel
[15:36] b_erb: isaacs: thanks that you adapt to my typing ;)
[15:36] isaacs: hehe
[15:39] jherdman has joined the channel
[15:44] CIA-77: node: 03Ryan Dahl 07master * r91757fa 10/ (150 files in 17 dirs): Upgrade V8 to 2.3.8 - http://bit.ly/cOJwbX
[15:44] CIA-77: node: 03Herbert Vojčík 07master * r1872719 10/ src/node.js : Typo in comment. - http://bit.ly/bHSs4a
[15:44] CIA-77: node: 03Herbert Vojčík 07master * rcf2b206 10/ (25 files in 7 dirs): 
[15:44] CIA-77: node: More changes to tests so they really work under context module loader.
[15:44] CIA-77: node: Plus, getting rid of test/common.js defining things in global. - http://bit.ly/bDoez7
[15:44] bradleymeck: mmm would there be a way to inject a local variable into a function's calling scope w/ v8?
[15:45] FransWillem: Hmmm
[15:45] FransWillem: note to self
[15:45] FransWillem: Node is useless as a usenet indexer
[15:45] bradleymeck: haha
[15:46] bradleymeck: i tend to think, if it requires buffering, prolly not the job for node
[15:46] tj has joined the channel
[15:46] CIA-77: node: 03Ryan Dahl 07master * r41ad339 10/ (benchmark/io.c benchmark/io.js): Add Paul Querna's io benchmarks - http://bit.ly/badRH4
[15:46] FransWillem: I mean, together with Redis on a decent machine (1GB, 2Ghzish)
[15:46] FransWillem: takes up 100% CPU (30% for redis, 70% for node)
[15:47] FransWillem: And still takes half a minute to process 10.000 posts (just headers)
[15:47] bradleymeck: run a profiler on it?
[15:47] FransWillem: Hmmm, tbh, forgot how I did that before :/
[15:49] FransWillem: ffs, redis is now using 500m of memory :/
[15:49] FransWillem: This is insane
[15:50] FransWillem: Does explain why most newsgroup indexers charge money, though
[15:51] FransWillem: wtf... even node is using 600+mb memory now :S
[15:52] FransWillem: ah
[15:52] FransWillem: there we are
[15:52] FransWillem: FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory
[15:52] wink_: oh my :>
[15:52] maushu: FATAL!
[15:52] maushu: ACTION kills FransWillem.
[15:52] bradleymeck: mmm, wonder why its using that much
[15:52] wink_: it seems as though you're doing something awesome
[15:52] Clooth has joined the channel
[15:53] christophsturm has joined the channel
[15:53] sveimac: [a,w,e,s,o,m,e]
[15:54] maushu: FransWillem: Try using VM with redis.
[15:54] maushu: No idea about node.
[15:55] FransWillem: maushu: Already doing that :p
[15:55] maushu: Hmm, then you have a memory leak the size of the moon.
[15:55] FransWillem: Misread redis memory usage earlier
[15:55] FransWillem: Redis is using approx 160mb now
[15:55] FransWillem: seems pretty stable
[15:55] FransWillem: Node is using 574mb atm
[15:56] FransWillem: which seems absurd
[15:56] maushu: GC is probably not collecting the resources... hmm, closures? 
[15:56] FransWillem: Loads of em :p
[15:56] mu-hannibal has joined the channel
[15:56] FransWillem: Anyone up for a challenge :p?
[15:56] EyePulp has joined the channel
[15:56] mjr_ has joined the channel
[15:57] maushu: FransWillem: Yeah, it's probably closures.
[15:57] [[zz]] has joined the channel
[15:57] FransWillem: Any idea how to find out which are killing memory usage the most ?
[15:58] benburkert has joined the channel
[15:58] bradleymeck: i can take a look
[15:59] bradleymeck: nested functions = bad news bears closure time
[16:00] mjr_: There was a patch in for a while that exposed the V8 debugger object, which I thought gave heap stats.
[16:00] FransWillem: Lemme just move my usenet passwords out
[16:00] bradleymeck: or it could be dreaded array as a dictionary leak
[16:00] mjr_: The heap stats could be a big win for this.
[16:00] wink_: this is relevant to my interests
[16:00] FransWillem: Aaah, wait
[16:00] bradleymeck: --log-all 
[16:00] FransWillem: It might be related to something else
[16:01] wink_: is there any clear documentation as to when/why closures wont get collected?
[16:01] bradleymeck: wink_ they wont get collected as long as they are referenced by something that cant be collected
[16:01] bradleymeck: cause they might be referenced from that reference
[16:01] maushu: http://www.ibm.com/developerworks/web/library/wa-memleak/
[16:01] FransWillem: Heh
[16:02] FransWillem: Got it
[16:02] FransWillem: Still slow
[16:02] FransWillem: but got the massive memory leak
[16:02] wink_: yeah i deserve that, i suppose a better way to phrase it is, 'is there a way to detect/correct it'
[16:02] FransWillem: Although tbh I doubt all this is worth it
[16:02] bradleymeck: nope, thats the programmer's job, its kinda like tackling the halting problem, there is a theoretical solution, calculating it takes forever though
[16:03] bradleymeck: frans you using all streaming/chunked parsing?
[16:03] wink_: sure, but if i have a ton of closures, surely there is some combination of methodology/tools that can point me towards the offender
[16:03] FransWillem: with only 1% of the usenet posts in the database, redis is already using 200mb of memory :(
[16:04] maushu: FransWillem: Are you sure you are using the VM?
[16:04] bradleymeck: wink_ if you dont nest unless you need a local variable up the stack its a good way to prevent it
[16:04] FransWillem: bradleymeck: The earlier problem was that instead of requesting 1000 posts at a time, I was requesting all (did Math.max(start+100,maxPost) instead of Math.min), so the NNTP server kept pushing new posts, while Node was still putting everything in the DB
[16:04] FransWillem: maushu: Not really, I've never used redis before
[16:05] maushu: http://code.google.com/p/redis/wiki/VirtualMemoryUserGuide
[16:05] maushu: It will slow down but it will use less memory.
[16:06] FransWillem: How many of you guys have usenet accounts ?
[16:06] bradleymeck: basically all closures should be avoided unless you are using variables that should not be / cannot be passed around
[16:06] maushu: Had one, like years ago.
[16:06] maushu: And by years I mean "when the dinosaurs walked".
[16:07] bradleymeck: ACTION acts like a t-rex
[16:07] FransWillem: Btw, by fixing that earlier bug, Node.js is now only using about 70mb of memory, which seems ok
[16:07] maushu: But bradleymeck, you are extinct.
[16:08] bradleymeck: i came back just for u <3
[16:08] bpot has joined the channel
[16:09] maushu: Awww <3
[16:09] FransWillem: Hmmm, I guess I should be doing this different
[16:10] daleharvey has joined the channel
[16:10] maushu: FransWillem: Nothing thinking in async enough?
[16:10] FransWillem: Probably
[16:10] charlesjolley- has joined the channel
[16:10] FransWillem: Now it's basically a loop, request a range (e.g. 0-100), parse the range, push it all to the database, then repeat for the next range
[16:10] FransWillem: I figure it's probably better to have some kind of Queue object
[16:11] FransWillem: of which I can asynchronously pop a post
[16:11] FransWillem: and the queue will automatically attempt to re-fill once it gets too empty
[16:11] jakehow has joined the channel
[16:11] FransWillem: Then at the start pop like 50 posts, and each time one is pushed to the DB, pop another.
[16:12] FransWillem: that way only 50+queue-size posts will be kept in memory
[16:12] robotarmy has joined the channel
[16:12] FransWillem: and the Queue can request new posts while the database is working
[16:12] FransWillem: Sounds good ?
[16:13] bradleymeck: sounds fair if you can keep the source of the post's connection open, reconnect costs could get ugly
[16:13] FransWillem: Yeah, the Queue could take care of that
[16:14] bradleymeck: do we have access to a v8-debug.h wrapper somewhere
[16:14] siculars has joined the channel
[16:15] wink_: bradleymeck: i see one in the node src
[16:16] bradleymeck: where?
[16:16] wink_: deps/v8/include
[16:17] bradleymeck: thats the original, was wondering about a JS wrapper should been specific to the JS land bit
[16:17] wink_: ah
[16:17] wink_: i'd love to get access to allocation information 
[16:17] huyhong has joined the channel
[16:18] mjr_: Does that debug object patch from a week ago expose the heap information?
[16:18] wink_: im sure my js is leaky as hell too, being able to identify which closures are going to eat me would be awesome
[16:18] ryah: mjr_: not sure
[16:19] wink_: http://gist.github.com/503852 ??
[16:19] huyhong has left the channel
[16:19] angel333 has joined the channel
[16:20] maushu: mjr_: What debug object patch?
[16:20] ryah: mjr_: there is a gc object
[16:20] mjr_: I think that's the one that wink_ just posted.
[16:20] mjr_: The one that was in for a few days and then got backed out.
[16:20] ben_alman has joined the channel
[16:20] wink_: mjr_: i think it is, it was from aug 1
[16:20] ryah: mjr_: --expose_gc
[16:20] mjr_: yeah
[16:21] mjr_: er, wait, not expose gc, I thought there was a thing to get the heap stats.
[16:21] mjr_: Maybe I'm confused.
[16:22] wink_: ryah: where can i find docs on this gc object?
[16:23] mjr_: wink_: if you run node witih --expose_gc, it'll make a global function called gc().
[16:23] mjr_: If you invoke it, presumably some magic will happen.
[16:23] mape: ryah: Side note, have you ever been able to find a good source of information how to decode the profile data generated from v8 running --prof?
[16:23] wink_: does it force a collection cycle or will it print stats? :p
[16:24] bradleymeck: any way to detect when an event loop iteration is ending? or register a callback for that time?
[16:24] mjr_: wink_: I assume it forces a run of the garbage collector.  I don't get any stats.
[16:24] mjr_: You can just try it in the REPL
[16:24] aubergine_ has joined the channel
[16:25] wink_: yeah, it looks like you're right
[16:25] ryah: wink_: look through v8 source
[16:26] ryah: mape: yeah you use deps/v8/tools/linux-tick-processor with it
[16:26] charlesjolley- has joined the channel
[16:26] mape: ryah: yeah mean the output you get from that
[16:26] ryah: mape: *shrug* typical profile output
[16:27] ryah: nticks inside function, nticks somewhere above that function
[16:27] ryah: something like that 
[16:27] zemanel has joined the channel
[16:27] wink_: so worst case then, i can force v8 to log heap allocations during node's execution and then just parse that output?
[16:27] jpld has joined the channel
[16:28] angel333 has left the channel
[16:28] mjr_: wink_: that indeed sounds like the worst case
[16:29] wink_: eh thats not too terrible i suppose
[16:29] mjr_: If I were trying to track this down, I'd figure out how to get those heap stats.
[16:29] mjr_: I'm pretty sure those are part of V8.
[16:30] mjr_: And then you could help out everybody else who is struggling with this issue.
[16:30] wink_: v8.h:  static void GetHeapStatistics(HeapStatistics* heap_statistics);
[16:30] mjr_: Do it for the team, wink_ 
[16:30] wink_: ?
[16:30] wink_: :p
[16:30] mjr_: That sounds promising.  How do you run that?
[16:31] mjr_: I will feel bad though if you figure out how to expose V8 heap stats in node and it doesn't fix your problem.
[16:31] mjr_: But hey, it probably will fix your problem, right?
[16:31] wink_: well i dont necessarily have a problem just yet
[16:31] joshbuddy has joined the channel
[16:31] proppy: is there some test case for console.log ?
[16:31] proppy: (node console.log implementation)
[16:31] proppy: I found it behave differently from chromium, firefox
[16:31] mjr_: proppy: is your console.log broken?
[16:31] wink_: but if i run into a case where i see memory usage climbing a staircase im going to want to shoot myself in the face
[16:32] proppy: mjr_: console.log("foo", "bar") should print "foo bar"
[16:32] proppy: currently it only print "foo"
[16:32] proppy: but "%s %s", "foo", "bar" does print "foo bar" thought
[16:32] mjr_: wink_: and even if you don't get that pattern, it'll gnaw at you that you COULD know your memory stats, but yet you don't!
[16:32] wink_: exactly!
[16:32] proppy: "%s %s", "foo", "bar", "hop", should print "foo bar hop" :)
[16:33] mjr_: proppy: console.log is a lot more sophisticated than I thought it was.
[16:33] mjr_: I always just send it one string.
[16:33] proppy: mjr_: :)
[16:34] twoism has joined the channel
[16:34] wink_: it looks like its the profiler where the goodies are, getheapstatistics just returns aggregate statistics
[16:35] sudoer has joined the channel
[16:35] c4milo has joined the channel
[16:37] qFox has joined the channel
[16:37] wink_: mjr_: the profiler stuff is actually really clean, i'll probably flail around at binding it up
[16:37] mjr_: awesome
[16:37] micheil has joined the channel
[16:38] voxpelli has joined the channel
[16:41] FransWillem: ffs, 7% of usenet posts redis using 425mb of memory
[16:42] FransWillem: Should require about 6GB for an entire index :/
[16:43] FransWillem: Maybe I'm using too long keys or something :/
[16:44] stepheneb has joined the channel
[16:47] nerdEd has joined the channel
[16:48] aurynn: Can I assume that listeners on an event will be run sequentially based on time when they were added as listeners?
[16:50] dmcquay has joined the channel
[16:53] mu-hannibal has joined the channel
[16:54] creationix has joined the channel
[16:55] hansek has joined the channel
[16:55] ntoll has joined the channel
[16:56] ntoll: hi I seem to remember that addons are statically compiled..? right..? (or wrong)
[16:57] EyePulp: so I have a function answering a request, and it's supposed to return two things as json - one of the two things is the contents of an text file.  how do I read those contents into a string to be returned in the response? {foo:some_var,bar : some_file_contents} 
[16:57] WALoeIII has joined the channel
[17:00] proppy: ah the console.log issue is fixed in node trunk
[17:02] jimmybaker has joined the channel
[17:02] ingemar has joined the channel
[17:04] mu-hannibal has joined the channel
[17:05] bronson has joined the channel
[17:05] proppy: ryah: are you insterested by some test for console.log args appending ?
[17:06] proppy: I wrote some before realising it was already implemented in trunk
[17:06] brianmario has joined the channel
[17:06] samsonjs has joined the channel
[17:07] rubydiamond: guys anybody have ideas for node knockout
[17:07] rubydiamond: if possible can you share those
[17:07] samsonjs has joined the channel
[17:08] tyfighter has joined the channel
[17:09] claudiu__ has joined the channel
[17:12] charlenopires has joined the channel
[17:12] charlieyan: wondering if its possible to do a node.js implementation for sphinx + redis
[17:12] charlieyan: that'd be a killer trifecta
[17:14] creationix: EyePulp: what do you mean?
[17:15] jetienne has joined the channel
[17:17] CrabDude has joined the channel
[17:17] proppy: tjholowaychuk: thanks for the new console.log code :)
[17:18] proppy: I had similar code, but using return [result].concat(Array.prototype.slice.call(args, i)).join(' '); instead of the for loop :)
[17:19] twoism has joined the channel
[17:19] wattz: and im back...
[17:21] V1 has joined the channel
[17:25] terinjokes: considering that it like installing in /usr/local/
[17:26] drudge: say what now
[17:26] terinjokes: hola drudge... i meant to post that in #homebrew
[17:26] drudge: hey terin :)
[17:27] EyePulp: creationix: sorry for the delay - I was trying to learn the basics or file IO and wondering whether I can do a simple read of a text file into a string or if it has to be turned into an async call of some sort
[17:27] creationix: EyePulp: you can do both
[17:27] creationix: if it's part of a server loop you want to do the async version
[17:27] creationix: fs.readFile(filename, 'utf8', callback)
[17:28] creationix: var contents = fs.readFileSync(filename, 'utf8')
[17:28] EyePulp: fs.readFileSync(filename, [encoding])
[17:28] EyePulp: ah - just found that in the api docs
[17:28] EyePulp: creationix: I know it's a dumb question - don't worry, I will get better. =)
[17:28] EyePulp: thanks for the help
[17:29] creationix: EyePulp: it's not a dumb question, you're welcome
[17:29] creationix: EyePulp: just make sure to never use anything sync during a running server
[17:29] drudge: you should be careful using sync methods, most of the time you'll want the async ones
[17:29] creationix: it will block 100% of the server and halt all other requests
[17:30] EyePulp: ah- that's a bit of critical wisdom
[17:30] EyePulp: so I would definitely not want to use this method while handling a request/response 
[17:30] drudge: no
[17:31] jakehow has joined the channel
[17:31] quirkey has joined the channel
[17:32] aubergine has joined the channel
[17:35] Vekz has joined the channel
[17:37] jtoy has joined the channel
[17:37] ingemar has joined the channel
[17:40] mAritz: tjholowaychuk: does spark work with express? or is there another way to use multiple cpus with express?
[17:41] drudge: spark works just fine with express
[17:43] MikhX has joined the channel
[17:44] mAritz: drudge: thanks :)
[17:45] mattly has joined the channel
[17:45] grahamalot has joined the channel
[17:46] mAritz: also (question to creationix as well): the benchmark of connect says that hello-world is the same for pure-node and connect, but for static: 2251 req/s connect and 6050 req/s. so connects static provider seems really slow. is that known/intentional/non-problematic?
[17:46] deepthawtz has joined the channel
[17:46] bpot has joined the channel
[17:47] creationix: mAritz: ? I thought the connect benchmark was faster than pure-node
[17:47] atmos has joined the channel
[17:47] sh1mmer has joined the channel
[17:47] creationix: since connect does smart caching and other optimizations not done in a "raw" node server
[17:47] topfunky has joined the channel
[17:48] mAritz: according to the benchmark run i just does it's just as i wrote there :/
[17:49] mAritz: creationix: http://gist.github.com/531091
[17:49] mAritz: or am i missing something? :/
[17:49] topfunky: When testing with vows, is there a preferred way to start and stop the server you're testing against? My tests pass but I have to ctrl-c at the end to kill the server. http://dpaste.de/uT2y/
[17:50] creationix: mAritz: what version of node?  I know tjholowaychuk said that for some reason connect is slower on v0.1.104
[17:50] creationix: something about a V8 regressions
[17:51] jetienne_ has joined the channel
[17:51] mAritz: creationix: v.0.1.103
[17:52] creationix: hmm, strange
[17:52] creationix: mAritz: and what connect?
[17:52] mAritz: creationix: 0.2.3 (npm install)
[17:52] creationix: mAritz: Oh, I'm looking at the benchmark code, it's completely unfair
[17:53] mAritz: :D
[17:53] creationix: the node version reads the file once and serves it from ram
[17:53] creationix: and the connect version has no caching and loads from disk every time
[17:53] creationix: I wonder why tjholowaychuk did it that way?
[17:53] mAritz: that explains it. :D
[17:53] creationix: add a line "Connect.cache(100000)" to the connect stack, that will speed it up a bit
[17:54] creationix: the node version in the benchmark is the fastest possible way to do it in node
[17:54] drudge: creationix: you seen this? http://github.com/github/gollum
[17:54] creationix: drudge: yeah
[17:55] creationix: drudge: wheat is kinda based on that idea
[17:55] drudge: yeah that's my thought
[17:55] creationix: though much simpler, gollum has a LOT of features
[17:58] Throlkim has joined the channel
[17:59] bradleymeck: ntoll addons are not statically compiled native modules are
[17:59] zomgbie has joined the channel
[17:59] femtoo has joined the channel
[18:00] bradleymeck: aurynn i would not assume that listeners will be fired in sequence of adding
[18:00] aurynn: bradleymeck, hm. Can I assume they'll fire in the order of .listeners() array?
[18:01] bradleymeck: for now, but possibly not in the future
[18:01] aurynn: So don't rely on it :)
[18:02] bradleymeck: ya
[18:02] polyrhythmic has joined the channel
[18:03] bradleymeck: if you need to rely on it i would suggest a custom listener which fires off an array in order, kinda like you have to do if you need sequential behavior in the browser
[18:04] derferman has joined the channel
[18:06] aurynn: that sounds reasonable.
[18:06] aurynn: I'm planning out a simple lib to handle executing a set of automata, so each would run on a "tick" event
[18:07] Tobsn has joined the channel
[18:08] admc has joined the channel
[18:09] MikhX has joined the channel
[18:10] MikhX has joined the channel
[18:14] programble has joined the channel
[18:15] mAritz: creationix: ok, i added the cache and updated to node v0.1.104. now it is 4200 vs 5200. does that sound correct?
[18:15] creationix: yeah, that's more like it
[18:15] creationix: it's impossible to beat that particular node version since it's the fastest possible
[18:16] creationix: connect does have a little processing overhead
[18:16] stepheneb has joined the channel
[18:16] mAritz: yep
[18:17] mAritz: creationix: why is there no documentation for .cache? :(
[18:17] creationix: mAritz: there should be, hmmm
[18:17] mAritz: not in the online docs
[18:17] mAritz: only one short mention that it exists
[18:18] creationix: hmm, looks like tjholowaychuk didn't write docs for all my middleware modules, I guess that's fair enough
[18:18] mAritz: creationix: NEVERMIND; I SUCK COCKS!
[18:18] jochen1 has joined the channel
[18:18] creationix: mAritz: I'm sorry to hear that 
[18:18] ink83 has joined the channel
[18:18] mAritz: :P
[18:18] creationix: mAritz: yeah, it looks like the auto-generated docs picked up my comments
[18:19] mAritz: it's in the extended api docs... second item
[18:19] maushu has joined the channel
[18:19] creationix: http://senchalabs.github.com/connect/api.html
[18:19] creationix: yeah
[18:19] isaacs: wow, i just cmd-tab'ed back to this room at the exact right time
[18:19] creationix: isaacs: lol
[18:20] creationix: mAritz: you are right though, it seems some of my modules are missing from the hand-written docs
[18:20] mAritz: the extended api doesn't tell me much (except if i look at the source code, but i'm too lazy for that right now :D )
[18:21] benburkert has joined the channel
[18:23] justin___ has joined the channel
[18:24] zemanel has joined the channel
[18:27] creationix: mAritz: basically cache buffers the response and optionally caches it in ram for a number of ms
[18:28] mAritz: and how do i choose whether the response should be cached or not?
[18:28] xla has joined the channel
[18:28] creationix: it treats all get requests the same
[18:28] creationix: the default is not to cache
[18:29] creationix: just buffer and merge concurrent requests for the same resource
[18:29] creationix: (which still does wonders for things like ab)
[18:30] ph^ has joined the channel
[18:30] CIA-77: node: 03Ryan Dahl 07master * r39b432e 10/ src/node.cc : Add process.versions - http://bit.ly/9sERFD
[18:32] fliebel has joined the channel
[18:32] bradleymeck: ACTION flops about for a v8-debug.h wrapper
[18:32] fliebel: hey
[18:32] bradleymeck: yello~
[18:36] Tobsn: so whos using couchdb? ;)
[18:37] fliebel: Tobsn: I am, but only in Python so far.
[18:38] topfunky: ACTION but mostly in ruby
[18:38] Tobsn: well
[18:38] Tobsn: http://damienkatz.net/2010/08/warning_couchdb_10_data_loss_b.html
[18:38] topfunky: actually, I did a Cappuccino app against couch, too
[18:38] topfunky: yeah, rough
[18:38] topfunky: embarrassing to have that on 1.0
[18:38] drudge: mongodb ftw
[18:38] charlieyan: what are you guys thoughts about couchDB vs redis?
[18:38] topfunky: well...
[18:39] charlieyan: there are node clients for both
[18:39] creationix: nStore ftw
[18:39] drudge: you would say that creationix :P
[18:39] Tobsn: couchdb vs. redis?
[18:39] Tobsn: how would you even compare that?
[18:39] topfunky: drudge: But mongo doesn't guarantee data unless you're running multiple replicated servers
[18:39] creationix: couch, mongo, and redis aren't the same thing
[18:39] fliebel: I chose CouchDB for the REST api and the name :)
[18:39] topfunky: rough for small sites
[18:39] Tobsn: first of all couchdb is now completely out of the race for the first 1.0 db that actually loses your data
[18:40] Tobsn: so its mongodb vs. redis which makes no sense either
[18:40] creationix: Tobsn: to be fair, the data isn't lost, it's still in the data file till you compact
[18:40] creationix: append-only data formats rock
[18:40] Tobsn: cause redis is a persistent key value storage with queue and no way to search stuff in it
[18:40] charlieyan: hmm
[18:41] icy: creationix: which for all that matters equals lost
[18:41] topfunky: and redis requires extra programming to guarantee data safety
[18:41] Tobsn: creationix, well if i wouldve used that thing i would right now dont give a shit if the data is gone or just "lost" somewhere in the b-tree hehe...
[18:41] drudge: they have a recovery tool, no?
[18:41] creationix: I'm actually quite suprized given how much the couch guys care about data integrity
[18:41] Tobsn: topfunky?
[18:41] drudge: icy: http://wiki.couchone.com/page/repair-tool#/
[18:41] Tobsn: creationix, yeah that scares me
[18:41] icy: drudge: yea, if you notice in time..
[18:42] creationix: also mongo clearly (well maybe not clear enough) says it will loose data in single server mode
[18:42] topfunky: Tobsn: redis syncs to disk only infrequently, afaik
[18:42] topfunky: default used to be every 15 minutes
[18:42] creationix: and couch is super easy to replicate
[18:42] Tobsn: well
[18:42] Tobsn: no
[18:42] Tobsn: its based on gets/sets
[18:42] siculars has joined the channel
[18:43] Tobsn: and again its a key/value storage and not a database
[18:43] fliebel: I still need to find out why couch has a stupid _rev for every update… also something with replication and persitence I think.
[18:43] icy: you can configure redis to sync whenever you want
[18:43] creationix: couch has the _rev to keep from overwriting data
[18:43] topfunky: depends on what you mean by "storage" ;-()
[18:43] topfunky: ;-)
[18:43] icy: but honestly, important data belongs into none of those
[18:43] icy: not at this point in time
[18:44] Tobsn: important data always gets written into static text files
[18:44] Tobsn: !
[18:44] Tobsn: :P
[18:44] fliebel: creationix: The theory is cool, but I don't like having to keep track of the rev.
[18:44] creationix: nStore doesn't have any replication, but if you want simple persistence of key/value, it's nice
[18:44] topfunky: creationix: I downloaded it. Need to try it
[18:44] TobiasFar has joined the channel
[18:44] creationix: topfunky: I just re-write nStore this weekend
[18:44] Tobsn: well i can write you an example within 5 minutes how to replicate/redundant save data with my flexihash algo ;)
[18:45] topfunky: creationix: cool
[18:45] creationix: I'm about to send an email to the mailing list about the changes
[18:45] JimBastard has joined the channel
[18:45] JimBastard: fuck meetings blow
[18:45] creationix: the first version of nStore would lose data if you had single documents larger than 1mb
[18:45] JimBastard: why cant we just code
[18:45] JimBastard: weeks of coding can save you from hours of planning
[18:45] creationix: I thought that was a valid constraint, but mape used nStore in a way where his documents were huge
[18:46] mape: Hey! If it is possible, why not? :P
[18:46] creationix: also the new nStore has a very different query interface
[18:46] creationix: it's much easier to use I think
[18:46] jscheel has joined the channel
[18:46] fliebel: nStore?
[18:46] kodisha_ has joined the channel
[18:46] creationix: http://github.com/creationix/nstore/tree/rewrite
[18:47] ehaas has joined the channel
[18:48] wink_: anyone familiar with v8's profiler?  im trying to figure out how the shit im supposed to walk this tree they use to store heap data without running into cycles everywhere
[18:48] ehaas: morning guys, i'm on a plane!
[18:48] hellp has joined the channel
[18:49] Tobsn: ehaas, well i hope you crash
[18:49] Tobsn: (?)
[18:49] topfunky: creationix: sent you some code to review if you're interested and have time
[18:49] TangoIII has joined the channel
[18:50] creationix: topfunky: sure, I'll look it over
[18:51] topfunky: cool
[18:51] tjholowaychuk: topfunky: http://code.google.com/p/redis/wiki/AppendOnlyFileHowto
[18:51] tjholowaychuk: conf for that stuff you guys were talking about
[18:52] topfunky: thx
[18:52] teemow has joined the channel
[18:59] fliebel: Can I use any js database lib in node?
[19:01] creationix: fliebel: what do you mean?
[19:01] creationix: anything I/O related probably needs to use node specific APIs
[19:01] creationix: and I can't think of many databases that don't involve I/O
[19:01] fliebel: creationix: That is what I mean… I'd like to use the same api on both client and server.
[19:02] creationix: fliebel: that can be done, especially if the api is 100% async
[19:02] creationix: but the implementation for the both ends will be quite different
[19:02] daleharvey has joined the channel
[19:03] creationix: fliebel: I could make server that serves an nStore database over http
[19:03] creationix: and then write a wrapper in the browser that uses the http interface
[19:03] creationix: and it can have the same api as nstore locally on the server, just be slower
[19:03] mde: That's actually something we've got working with geddy-model. We have a dbAdapter for our client-side usage that maps the calls to Ajax calls.
[19:03] wink_: creationix: work out a way to synchronize and you've got a winner :>
[19:03] fliebel: creationix: I was thinking about jsdom and a jQuary based DB api, possibly using CouchDB over xmlhttprequest.
[19:04] mde: The client-side stuff is very specific to our use with the Yammer third-party platform stuff, but the adapter is designed to be pluggable that way.
[19:04] creationix: fliebel: how does dom fit into a DB system?
[19:05] creationix: mde: yeah, the RPC pattern is pretty simple, it's when you want the data local in the browser and sync when online
[19:05] creationix: that's when it gets tricky
[19:05] fliebel: creationix: I don't know… I read jsdom can run jQuery, and jQuery includes AJAX magic.
[19:06] mde: creationix: Right, it becomes a problem with large datasets especially. We invented this idea of 'virtual properties' where the client never has access to all of it to deal with that.
[19:06] mde: Dataset size, and concurrent access.
[19:06] fliebel: creationix: But maybe I'll have to write my own xmlhttp stuff around node.
[19:07] creationix: fliebel: node has an http client built-in, I don't think jsdom implements enough of that for jquery to use
[19:07] creationix: fliebel: though I doubt you want an http client in the server, probably just the http server
[19:07] creationix: which jquery doesn't even have an api for
[19:07] fliebel: creationix: I'll have to do some decent hacking of course, but it's going to be nice if it works.
[19:08] creationix: if you just want rpc, then maybe dnode is a good fit
[19:08] creationix: http://substack.net/posts/85e1bd/DNode-Asynchronous-Remote-Method-Invocation-for-Node-js-and-the-Browser
[19:08] astrolin_ has joined the channel
[19:09] fliebel: creationix: meh, I just want to hack as much of jQuery into node as I can and get couch running on both ends via jQuery.
[19:10] fliebel: creationix: I think I'll have to proxy couch somehow, because of xmlhttp restrictions.
[19:10] creationix: fliebel: sure, whatever floats your boat, but I think jQuery is only worth much in the browser, or possible for dom based server-side templating
[19:10] ehaas: fliebel: i've done some work getting jquery working with node
[19:10] ehaas: i can run jquery selectors against html
[19:11] fliebel: ehaas: Nice, is it online somewhere?
[19:11] ehaas: yea
[19:11] ehaas: one sec
[19:11] ehaas: http://github.com/fictivekin/webshell
[19:12] fliebel: ehaas: jsdom has a jqueryfy method somewhere.
[19:12] ehaas: i'm not using jsdom...thinking about porting to that
[19:12] ehaas: right now i'm using envjs + libxmljs
[19:12] ehaas: env.js
[19:13] fliebel: ehaas: isn't env.js for whino?
[19:13] fliebel: *rhino
[19:13] ehaas: yea i started porting it
[19:13] ehaas: some ofthe xmlhttprequest stuff isn't ported yet but the basic dom manipulation stuff is
[19:13] fliebel: ehaas: awesome!
[19:14] ehaas: after you clone, checkout the envjs branch and then run 'git submodule update --init'
[19:14] ehaas: followed by make
[19:15] fliebel: ehaas: what does that git command do?
[19:15] ehaas: that will clone libxmljs into your lib subdirectory
[19:15] ehaas: it's maintained in a separate repository
[19:16] fliebel: why do you need it?
[19:16] ehaas: parsing the html
[19:17] aliem has joined the channel
[19:18] mertimor has joined the channel
[19:19] voodootikigod_ has joined the channel
[19:19] wattz: wow, tha adobe presentation was painful
[19:19] bradleymeck: libxml always seemed a bit picky to me
[19:20] bradleymeck: adobe?
[19:20] wattz: and wtf, the didn't bring any free schwag this time.
[19:20] wattz: yeah, they come to my company and try to get us to use shit like flash, dreamweaver and fireworks
[19:21] JimBastard: wattz: i wouldnt smoke schwag even if it was free
[19:21] wattz: hahaha
[19:21] rauchg_ has joined the channel
[19:21] wattz: pure HA-SHESH
[19:21] JimBastard: or use adobe again
[19:21] wattz: photshop is it for me
[19:21] JimBastard: k
[19:21] wattz: until i get around to really learning pixelmator
[19:21] JimBastard: there you go
[19:21] JimBastard: http://github.com/marak/node_hash
[19:21] JimBastard: photoshopped hash
[19:23] Throlkim has joined the channel
[19:25] wllm has joined the channel
[19:26] wattz: lol
[19:26] wattz: they kept trying to push flash on us
[19:26] wattz: i was like "we have an iphone app"
[19:26] EyePulp: heh
[19:26] skampler: lol
[19:26] EyePulp: were you greeted with silence or tears?
[19:27] wattz: yeah, i got a chuckle from our group
[19:27] wattz: and the adobe exec wanted to kill me
[19:28] bradleymeck: well you could convert it to haxe and use both!
[19:29] EyePulp: tell them you like the whitenoise generator that's activated in Macbooks when using flash for anything.
[19:29] wattz: and we had an IBM 'consultant' here to eval our js code (our new js code). and he was suppose to be a js guru and looked at my code and was like "Why do you write your code in that weird function?"
[19:29] bradleymeck: ehehe
[19:29] wattz: meaing:
[19:29] wattz: ;(function() {})();
[19:29] sechrist: aw snap sun
[19:29] bradleymeck: globals are for love!
[19:29] wattz: haha
[19:30] wattz: it's so funny how people try to rape large companies for money
[19:30] EyePulp: wattz: did you tell him the code was an idiot-trap, and he just activated it?
[19:30] bradleymeck: oh no, bears be coming! run away?
[19:30] wattz: EyePulp: i should of showed him all node.js server side and played it off as client side
[19:30] wattz: lol
[19:30] wattz: BLOW HIS MIND
[19:30] EyePulp: wattz: nice
[19:31] wattz: i need to make this little node server hot reload when a file changes
[19:31] wattz: suggestions?
[19:31] EyePulp: d.js used to work, but now it hangs for me
[19:31] drudge: node-supervisor
[19:31] EyePulp: ah, you mean in production?
[19:31] wattz: naa
[19:32] drudge: i use node supervisor for dev'ing
[19:32] wattz: im building a little framework for all our company site needs
[19:32] wattz: and wanted to build a little node server in it just for dev
[19:32] wattz: for our other devs too
[19:32] wattz: Node just got approved to be installed on company dev computers
[19:32] mAritz: DJs works fine for me. (not tested with 104 though)
[19:32] EyePulp: wattz: look up d.js - but under current node builds on my macbook it's not working
[19:32] jherdman has joined the channel
[19:32] drudge: wattz: http://github.com/isaacs/node-supervisor
[19:33] EyePulp: mAritz: I'd like to get it working again.
[19:33] EyePulp: =(
[19:33] wattz: ahh cool
[19:33] wattz: thanx
[19:33] blogometer has joined the channel
[19:33] blogometer: Hee-Low.
[19:33] wattz: should of known isaac would have some shit for it
[19:33] blogometer: Any plans to move the Node.js wiki to the new wiki system?
[19:34] Aikar: wattz: heh you gotta ask permission lol? <3 having admin on my work PC we do w/e we want. can even wipe the OS and run our own
[19:34] ryah: i think i did
[19:34] Aikar: and got a private DSL line off of corp network at that too
[19:34] JimBastard: i got a brand new mac book pro with 8 gigs of ram and SSD
[19:34] wattz: Aikar: I worke for Lowe's
[19:34] JimBastard: and i get to do whatever the fuck i want with it
[19:34] wattz: fortune 40 company.
[19:34] JimBastard: :-)
[19:34] mape: JimBastard: you usually get computers you can't usee?
[19:35] mape: *-e
[19:35] JimBastard: lulz.com
[19:35] JimBastard: mape: company gave it to me for work
[19:36] mAritz: EyePulp: yep, hangs on 104...
[19:36] mAritz: gotta go. gn8
[19:36] creationix: JimBastard: heh, I think I got the same laptop for work
[19:36] EyePulp: l8r
[19:36] mattly has joined the channel
[19:37] EyePulp: ACTION is crawling along @ 4gb 
[19:37] EyePulp: my fan spins up at the drop of a hat
[19:37] JimBastard: wooop wooop
[19:37] JimBastard: creationix: did you get the no glare screen ?
[19:37] creationix: JimBastard: no, I like the lower resolution
[19:38] JimBastard: i love it, i dont have to see myself in the reflection
[19:38] creationix: ACTION is blind
[19:38] wattz: i have a new macbook pro with a sweet iron man sticker i put on all by meself
[19:38] atmos: anyone done async testing with vows ?
[19:38] EyePulp: heh
[19:39] atmos: basically i have something that sits inside of a mongo connect block and i want to test the models that require a db connection
[19:39] atmos: when i run them in vows it just sorta waits forever :(
[19:41] loincloth has joined the channel
[19:41] JimBastard: atmos: yeah
[19:41] JimBastard: atmos: i have some examples
[19:41] atmos: hook it up!
[19:41] JimBastard: ill send you a few, indexzero is the vows pro
[19:41] atmos: is it the nextTick promiser stuff in the vows examples ?
[19:41] MikhX has joined the channel
[19:41] JimBastard: but i hang out with him sometimes
[19:41] JimBastard: http://github.com/nodejitsu/node-http-proxy/blob/master/test/node-http-proxy-test.js
[19:41] JimBastard: and
[19:41] atmos: ty
[19:42] JimBastard: http://github.com/cloudhead/cradle/blob/master/test/cradle-test.js
[19:42] JimBastard: that one should be easy to grok
[19:42] MikhX_ has joined the channel
[19:42] voodootikigod has joined the channel
[19:42] JimBastard: http://github.com/indexzero/resourcer/blob/master/test/database-test.js
[19:43] JimBastard: atmos: we are working on some complimentary tools to vows as well, look for something around node knockout time....
[19:50] tpryme has joined the channel
[19:50] pdelgallego has joined the channel
[19:52] tjholowaychuk: cool, didnt know you could pass a whitelist of props to JSON.stringify()
[19:52] inimino: what is obj/release/mksnapshot ?
[19:54] twoism_ has joined the channel
[19:55] atmos: JimBastard: ok i think i got that handled
[19:55] atmos: shit doesn't seem to exit now :)
[19:55] atmos: any ideas ?
[19:55] JimBastard: atmos: can you copy your code?
[19:55] JimBastard: you prob not running it right
[19:56] JimBastard: are you exporting your tests?
[19:56] atmos: yup
[19:56] atmos: one sec
[19:56] JimBastard: }).export(module);
[19:56] atmos: https://gist.github.com/ebb4b7f1219c642c0317
[19:56] atmos: not sure wtf to do about the variable outside
[19:57] JimBastard: atmos: i think you need to read the vows docs again
[19:57] atmos: k
[19:57] JimBastard:   var promise = new(events.EventEmitter)
[19:57] JimBastard: im about 95% sure you don thave to do any of that
[19:57] JimBastard: alexis explains it pretty clearly @ http://vowsjs.org
[19:58] JimBastard: im not 100% certain on how to do the async testing yet, but im confident that it works, and works somewhat well
[19:58] JimBastard: sorry i cant give you the exact solution :-\
[19:58] atmos: that's cool, i figured i'd play around with it since i still can't seem to figure out how to do it
[19:58] atmos: even though there's like 5 bdd frameworks :)
[19:59] JimBastard: i can tell you that we have a vested stake in vows
[19:59] JimBastard: and will be continuing to support it
[19:59] JimBastard: (nodejitsu)
[19:59] Throlkim has joined the channel
[20:00] JimBastard: atmos: you get this magic "this.callback" object
[20:00] jbaron has joined the channel
[20:00] tilgovi has joined the channel
[20:00] JimBastard: http://gist.github.com/531737
[20:01] inimino: obj/release/mksnapshot obj/release/snapshot.cc --logfile "/home/inimino/node/build/default/obj/release/snapshot.log" --log-snapshot-positions
[20:01] inimino: node build is just sitting there using 100% CPU.
[20:01] atmos: JimBastard: thanks, i'll play with it some more
[20:01] JimBastard: kk, let me know if anything
[20:02] JimBastard: i can get you real support later today when indexzero appears
[20:02] JimBastard: standup time, bbl
[20:02] Throlkim_ has joined the channel
[20:02] inimino: anybody seen that?
[20:02] atmos: inimino: nope :(
[20:02] atmos: inimino: stable or from github ?
[20:02] inimino: atmos ⋱ from git
[20:03] atmos: do you need that version for anything specific ?
[20:03] atmos: i just stick to the stable releases and it's usually smooth sailing
[20:03] inimino: that depends whether the HEAD fix is in the latest stable release
[20:03] inimino: ACTION checks
[20:04] inimino: looks like it is.
[20:04] inimino: I'll try 0.1.104
[20:04] ngw has joined the channel
[20:05] satori_ has joined the channel
[20:05] inimino: looks like this one builds too :-)
[20:07] WALoeIII has joined the channel
[20:07] kodisha_ has joined the channel
[20:07] stepheneb has joined the channel
[20:08] inimino: ...and it runs :-)
[20:09] bradleymeck: sweet a 2nd Ecma Harmony Proxy implementation
[20:10] nerdEd has joined the channel
[20:10] tjholowaychuk: bradleymeck ?
[20:10] blogometer: ryah: The old wiki is still in place, under the Wiki tab until you move to the new wiki, which deletes the old one.
[20:11] blogometer: I see that the page I added about windows has not been copied over to the new wiki, so do not delete it yet.
[20:11] ryah: blogometer: is that dangerous?
[20:11] ryah: ok
[20:11] bradleymeck: tj, another person made a Proxy implementation, his is closer to the spec but you lose some of the Object ecma5 stuff w/ it
[20:11] ryah: tell me when
[20:11] blogometer: ryah: It would be worth while to just have myself and one other person to a quick inventory.
[20:11] tjholowaychuk: bradleymeck do you have a link?
[20:11] blogometer: I assume you pressed the convert button in the last two days.
[20:12] bradleymeck: http://github.com/brickysam26/node-proxy <- mine is in node-overload
[20:12] blogometer: And the only real new content is the windows stuff, but if you know of anything else.
[20:12] tjholowaychuk: bradleymeck cool thanks :D
[20:12] bradleymeck: he overrides the Object stuff which works, but i didnt do it in overload since you might be losing something
[20:14] bradleymeck: still upset though, the ecma ppl dont want keys to be in the WeakMap api
[20:15] javajunky has joined the channel
[20:17] angel333 has joined the channel
[20:17] ben_alman has joined the channel
[20:18] tjholowaychuk: bradleymeck: not sure I even really like magic like that in js though :s that sort of thing lead to apis that I hated in ruby
[20:18] tjholowaychuk: I have mixed feelings about that stuff. It's cool and helpful at times but over complicates things as well
[20:19] bradleymeck: i only use proxies for 2 things, making crap have a readonly reference, and making me have multiple inheritence
[20:19] bradleymeck: other than that, avoid like plague pls
[20:19] bradleymeck: as for weakmaps, we kinda need em
[20:19] creationix: bradleymeck: are getters and setters not powerful enough?
[20:19] creationix: well except for the weakmaps
[20:20] bradleymeck: i cant lock ALL get/sets on a reference object and ensure that the original wont be messed w/ w/o a proxy
[20:22] bradleymeck: so if i have a={}; i cant give out a readonly copy that updates itself while making sure that a doesn't get a random property
[20:24] rwaldron has joined the channel
[20:25] creationix: bradleymeck: can't you iterate over the keys of a and generate getters on the proxy object?
[20:25] tjholowaychuk: oOoOo dont need to writeHead(n, {}) anymore
[20:25] creationix: bradleymeck: yeah, even if it's possible, it's likely a lot of code
[20:26] creationix: tjholowaychuk: ?
[20:26] tjholowaychuk: creationix you used to have to supply a blank obj but the latest version seems to be fine without
[20:26] tjholowaychuk: or maybe that changed a few versions back
[20:26] tjholowaychuk:  thats why all my tests have {} {} {} {} {} {} haha
[20:26] tjholowaychuk: so annoying
[20:26] creationix: oh, so writeHead(200)
[20:26] tjholowaychuk: ya works now
[20:27] blogometer: ryah: Okay. I found that the hosting page was updated and copied the updates.
[20:28] blogometer: But, I'd say, make the switch now.
[20:28] blogometer: Double check yourself, but the longer it is up, the more out of sync it will be.
[20:34] ryah: blogometer: done
[20:34] blogometer: ryah: Huzzah.
[20:35] creationix: what did we update? the github wiki?
[20:36] bradleymeck: creationix, yes, but what if i add a property to a after the faux proxy is created and the faux proxy is sealed?
[20:36] creationix: hmm good point
[20:37] creationix: so for some cases it can be done today, but real proxies are needed for other cases
[20:39] bradleymeck: yea, like nodelist / etc. in DOM implementations
[20:40] Aria has joined the channel
[20:40] creationix: bradleymeck: so why were weak references rejected?
[20:41] creationix: I saw the email on the list, but didn't understand it
[20:41] bradleymeck: i made a point that they lead to likely leaks to mark and it kinda escalated, basically a weakmap can emulate it and it is an anti-pattern to need a weakreference in the presence of a weakmap
[20:42] bradleymeck: though for sanity sake i want my goddarn weakmap.keys()!
[20:43] bradleymeck: cause when would you want a weakreference instead of a weakmap?
[20:43] creationix: what's the difference between a weakmap and a weakreference
[20:44] creationix: just a map of references right?
[20:44] bradleymeck: weakreference refers to a single object reference, weakmap is a container of mappings from one collectable reference to a value
[20:44] mjr_ has joined the channel
[20:45] bradleymeck: so in essence, you are correct
[20:45] tjholowaychuk: "weakmap" == ephemeron ?
[20:45] mscdex: node.js rules!
[20:46] EyePulp: when doing an fs.readfile, what's the proper syntax for the encoding argument, and is it case sensitive?  I want UTF-8 instead of a Buffer returned, but every variation of 'utf8' for encoding fails
[20:46] creationix: EyePulp: 'utf-8'
[20:46] bradleymeck: tj weakmap is like ephemeron's cousin missing bits
[20:46] JimBastard has joined the channel
[20:46] mjr_: creationix: with a hyphen?
[20:46] JimBastard: atmos: did you figure out vows?
[20:47] mjr_: when did that happen
[20:47] creationix: mjr_: maybe not
[20:47] tjholowaychuk: i think utf8 / utf-8 are supported
[20:47] tjholowaychuk: cant remember
[20:47] tjholowaychuk: but i think there is a check for both
[20:47] creationix: EyePulp: the docs say 'utf8' - Unicode characters. Many web pages and other document formats use UTF-8.
[20:47] creationix: no hyphen
[20:48] EyePulp: creationix: heh... you know, it helps to have actual content in the file being read in order to see the results one expects... 
[20:48] creationix: I think I've used 'utf-8' and it's worked, maybe that's why I'm confused
[20:48] fliebel has left the channel
[20:48] EyePulp: but utf-8 works great now.
[20:48] tjholowaychuk:   if (strcasecmp(*encoding, "utf8") == 0) {
[20:48] EyePulp: danke
[20:48] tjholowaychuk:     return UTF8;
[20:48] tjholowaychuk:   } else if (strcasecmp(*encoding, "utf-8") == 0) {
[20:48] tjholowaychuk:     return UTF8;
[20:48] tjholowaychuk: yup
[20:49] tjholowaychuk: hehe "strcasecmp(*encoding, "raws") == 0"
[20:50] creationix: strcasecmp, the things we take for granted in JS land
[20:50] JimBastard: did someone say utf-8?
[20:51] creationix: my first node patch involved a switch statement and strings in C
[20:51] EyePulp: heh
[20:51] JimBastard: obey ͭ̃̅͒̽ͦͤ̎ͯ̆́͋̂͌̀͐ͦ̿̊̀ͮͦͦ̎̀͗͆̓̊̔ͣͥ̈́̏̀̏͌ͦ̈ͥ̋ͯͭͫ͋̄̾ͭ̓̈̇ͮͥ̔ͯ̔̎͂̑ͨͪ̄͒ͣ͗̿͌̐ͫͯͬ̍̄̅̂̓̄̄͂͒̈͑̓ͧͫͩͮ̔ͭͮ̔ͤͦ̉̒͗̿͂́ͬ̊ͧ̐ͯ͐ͣͩ̔͗ͯ͒͛ͫͭͧ̏̄͒ͨͧͭ̿̉ͮ͂̂ͨ͑̓ͥ̓̓ 
[20:51] JimBastard: zalgo ͈͚̦̫͔̥͙̝͔͙̼͙͓̲͔͔̳͚̜͈̰͖̗̮̩̪͈̖̰̞͍͚̘̙̤̗̬̤̣͔͎̫̺̘̠̮͙̲͇̠̗͔͇̳̤̣͚͓̝̰̼̠̩͚̫̗̦̻͔͍͈̤̰̟͔͇̜̖̞͍̭͕̱̹̲̤̙̰̙̼͎̖͎̲̪̳̻̯̝̤̺̻͍͚̻͍̰̦̗̯̱͖̖̗̻̲̺̺̻͉̪̼̳̭͉͈̹̻̫̤̙̮̝
[20:51] creationix: JimBastard: fail
[20:51] JimBastard: looks good on my end >.<
[20:51] creationix: JimBastard: it's just a long line of dots for me
[20:51] mjr_: I don't get zalgo.  Is it supposed to form some sort of picture out of the unicode chars?
[20:51] EyePulp: wow - JimBastard that makes fun stuff in colloquy
[20:51] JimBastard: creationix: yeah...
[20:51] JimBastard: ill take a ss right now
[20:52] tjholowaychuk: mjr_ i think its just meant to annoy everyone lol
[20:52] creationix: JimBastard: can you find the regexp + html article
[20:52] tjholowaychuk: creationix: just thought "raws" was a weird alias for binary
[20:52] JimBastard: http://imgur.com/Y4ybZ.png
[20:52] JimBastard: sup creationix ?
[20:52] JimBastard: work time sorry
[20:53] mjr_: JimBastard: it for sure does the vertical baseline trick:  http://skitch.com/mranney/d1pak/node.js-irc.freenode.net
[20:53] mjr_: but I'm guessing that on your end the effect is more pronounced.
[20:53] mjr_: oh, missed him
[20:54] creationix: mjr_: http://www.ghostwoods.com/2009/11/stack-overflow-zalgo-he-comes-807/
[20:54] MrNibbles: lo noders
[20:54] bradleymeck: lo nibbles
[20:55] samsonjs has joined the channel
[20:57] stepheneb has joined the channel
[20:57] mscdex: (���)
[20:57] admc has joined the channel
[20:58] EyePulp: what's the diff between console.log() and sys.puts()  -- I see the sys.puts() breaks args with \n in the output, but console lets me string things together the "normal" way
[20:58] jackish has joined the channel
[20:58] EyePulp: is there any significant reason to use one over the other?
[20:58] mjr_: EyePulp: console.log is the future
[20:59] blogometer: Wait! Wait! Weak Map? Where?
[20:59] pdelgallego has joined the channel
[20:59] mjr_: Also, console is always global, whereas you have to require sys.
[20:59] blogometer: bradleymeck: Weak map? Where? In V8 or in JS?
[20:59] EyePulp: mjr_: I noticed that, good to hear console is the way to go
[21:00] pquerna: jb55: how do you like libcage?
[21:00] bradleymeck: blogometer we got em in JS via an addon, and the spec is on ES Harmony
[21:01] mu-hannibal_ has joined the channel
[21:02] blogometer: bradleymeck: http://wiki.ecmascript.org/doku.php?id=strawman:weak_references
[21:02] blogometer: ?
[21:02] bradleymeck: no weak references, havent found a good case for em w/ weakmap around
[21:03] creationix: so weakmap is already in Harmony?
[21:03] blogometer: WTF? const?
[21:03] bradleymeck: ya
[21:03] zum: EyePulp: there's a functional difference as well - console.log formats its arguments
[21:04] bradleymeck: idk harmony ppl love const, f const
[21:04] zum: so you can say console.log('foo %s', 'bar'); and it behaves like printf
[21:04] EyePulp: zum: ah - nice
[21:05] EyePulp: is there a pprint equivalent?
[21:05] blogometer: The immubable fetishists. *spits*
[21:05] bradleymeck: sys.inspect?
[21:05] Aria: Bah. const is the wrong place to put immutability.
[21:05] EyePulp: ACTION just got done yanking a bunch of require('sys'); commands
[21:06] mjr_: I just noticed this for the first time:  http://wiki.ecmascript.org/doku.php?id=harmony:proposals
[21:06] nerdEd has joined the channel
[21:06] blogometer: So, now weak map yet in V8? I wanted to write a buffered, paged file thingy.
[21:06] mjr_: Kind of interesting to see the general consensus of harmony people so far.
[21:06] bradleymeck: i just use require('sys').inspect() rather than making a require up top
[21:06] bradleymeck: blogometer, got one in node-overload
[21:07] joshbuddy has joined the channel
[21:07] blogometer: Of course. If it is cool and useful then it is extant.
[21:07] blogometer: I'm getting used to this.
[21:08] bradleymeck: yea, ive been complaining at the v8 ppl
[21:08] blogometer: Does anyone worry that V8 + Node.js will someday be larger than 5.1 MB?
[21:09] blogometer: Or is it more like, we've got 283 MB to go before we catch up with Java!
[21:09] blogometer: Let's bloat!
[21:09] stride: disk space? srsly?
[21:09] blogometer: Yeah. Srsly.
[21:10] blogometer: Or, I forgot, resources are now, infinate, right?
[21:10] mjr_: Once it gets too large, I think ryah will just throw a bunch of stuff out.
[21:10] mjr_: And then people build up a distro of node with the extra goodness inside.
[21:10] sudoer has joined the channel
[21:10] blogometer: mjr_: That sounds good to me. 
[21:11] mjr_: Sometimes he says things like, "maybe we just shouldn't have a module system"
[21:11] stride: hmm, tomcat 7 zipped is only 7.2mb
[21:11] blogometer: Like the Linux world, CD.
[21:11] blogometer: stride: Great. Then unzip it and run it on a fresh install of Windows 7.
[21:11] blogometer: Oh, wait, I'm forgetting something.
[21:12] creationix: ohh, node without a module system +1
[21:12] creationix: ;)
[21:12] stride: blogometer: yeah yeah, thought it was bigger anyhow
[21:12] bradleymeck: ryah is pretty vicious about throwing stuff outta core as it is
[21:12] blogometer: Man, that is great to hear.
[21:12] stride: blogometer: besides that, no windows in this room :p
[21:12] blogometer: I'm loving how small it is. 
[21:12] bradleymeck: hence all the addons lol
[21:12] blogometer: stride: Not, yet.
[21:13] pquerna: jb55: wondering if you have seen http://code.google.com/p/maidsafe-dht/
[21:13] bradleymeck: we just need to get it easier to static compile in extra stuff if you want
[21:13] blogometer: stride: Still, Node.js compared to Ruby, it is incredibly small and easy to tuck into a redistribution.
[21:14] stride: bradleymeck: easier than "throw stuff in ./lib/ and recompile"?
[21:14] blogometer: You start with something tiny and include what you need, rather than having to have a platform install preceede you.
[21:14] mjr_: pquerna: are you doing DHT in node?
[21:14] bradleymeck: well stride, thats not how it is right now
[21:14] stride: blogometer: yep, didn't want to contradict :)
[21:14] stride: bradleymeck: oh, okay
[21:15] stride: only changed stuff in the pre-packaged code so far
[21:15] bradleymeck: plus the way it is, the lib folder cant compile in subfolders, node-ziptie can bundle things but its still painful to add em
[21:16] pquerna: mjr_: something closer to zookeeper than a true DHT
[21:17] fod has joined the channel
[21:18] jb55: pquera: I stumbled upon that first and have a very strong reaction against using it, mainly because of the trunkload of dependencies it brought along with it
[21:18] jb55: pquerna
[21:18] creationix: mjr_: what did you think of my node startup hook idea
[21:19] mjr_: creationix: I missed it, where was it?
[21:19] creationix: ryah's concern was it would affect startup time because of the extra stat
[21:19] pquerna: jb55: well, they both pull in Boost, so .. yeah :)
[21:19] mjr_: argh, boost.
[21:19] creationix: basically at startup, right before loading argv[1] or starting the repl, check for a script at $PREFIX/lib/node.js and run that instead
[21:20] creationix: then you can bundle node in a standalone directory but have a custom startup
[21:20] bradleymeck: creationix wouldnt an env variable be a bit faster / more configurable
[21:20] creationix: all without ever recompiling node
[21:20] jb55: pquerna: maidsafe also pulls into protcol buffers, rpc stuff, and like 4 others
[21:20] creationix: and env variable means you need a wrapper script
[21:20] herbySk has joined the channel
[21:20] creationix: in which case you might as well just pass your script to argv[1]
[21:20] MikhX has joined the channel
[21:20] bradleymeck: thats what export is for
[21:20] mjr_: creationix: what don't you want to recompile?
[21:20] pquerna: jb55: yes, but libcage also lacks any authentication mech right?
[21:21] creationix: I don't want to have to recompile node every time I change my script
[21:21] mjr_: creationix: my initial reaction is also to use an env var, but I guess that doesn't work for you?
[21:21] creationix: for making node powered apps that embed node
[21:21] creationix: I rename "node" to "foo" and have the core logic all in js relative to "foo"
[21:21] creationix: then I just symlink "foo" to somewhere in my $PATH and it's installed
[21:22] mjr_: creationix: wouldn't it be easier and more reliable to just get a bundler that compiled everything together?
[21:22] creationix: if all systems supported relative shebang lines that would work too
[21:22] pquerna: jb55: thought some of libcage is refreshingly simple, just browsing parts of it.
[21:22] creationix: mjr_: sure, but I don't want the compile step when developing
[21:23] creationix: I would love for a bundler to combine it all into a single binary before deployment
[21:23] bradleymeck: the one thing im apprehensive about is people will come to rely on those startup scripts for non-standalone actions, loading in other junk etc
[21:23] javajunky has joined the channel
[21:23] mjr_: creationix: I agree that the compile step is annoying while developing, but while developing, surely you can afford to set an env var to get special developer behavior.
[21:23] ehaas: there's no way to step through a js program with node, is there?
[21:23] ehaas: something like gdb
[21:23] bradleymeck: node-inspector
[21:24] creationix: mjr_: I want to encourage others to develop apps with node, and the less steps the better
[21:24] ehaas: ACTION science
[21:24] mjr_: I keep meaning to try node-inspector
[21:24] creationix: many js developers don't even have a compiler on their system, but are still very talented developers
[21:24] bradleymeck: works great on my box
[21:24] mattikus has joined the channel
[21:25] mjr_: creationix: I really like the goal of getting JS programmers writing for node, but what's wrong with just having them do "node program.js" ?
[21:26] creationix: mjr_: another side goal is to allow people to customize their local environment, maybe it works like node's normal startup, but preloads some libraries
[21:27] mjr_: emacs, here we come.
[21:27] jb55: pquerna: also libcage is evented internally and maidsafe uses boost threads, ick :). libcage seemed like the way to go.
[21:27] herbySk: creationix: :-). Well, if linking is not affordable (though I think it could work, have linker link precompiled piece of node with its data, but if they don't have linker), one can develop something like .zip file with all the rest, easily locatable (same ditr as node or ~)... btw what's the argument about?
[21:27] mjr_: creationix: I think you should try this stuff out in a specialized distribution on the target audience and see if people like it.
[21:28] creationix: mjr_: that's the plan, but I wanted some feedback from node core people before I start shipping my patched node
[21:28] stride: creationix: a developer without a c++ compiler?
[21:28] MikhX_ has joined the channel
[21:29] creationix: stride: yes, they exist, you don't need a compiler to make web pages
[21:29] herbySk: stride: on non unix, definitely
[21:29] drudge: i know a lot of web developers who don't have compilers
[21:29] drudge: even on mac ;)
[21:29] bradleymeck: creationix if you are running the startup script to import things it worries me that people will get into python's dependency bloat without knowing it
[21:29] creationix: bradleymeck: what do you mean?
[21:30] stride: okay I may sound picky here and maybe I just know the wrong kind of people but do you really want to seperate server side development from understanding what they are doing there?
[21:30] mshadle has joined the channel
[21:30] creationix: stride: was that question for me?
[21:30] stride: yep
[21:31] sh1mmer: has anyone used Felix's mysql library much yet?
[21:31] creationix: I'm not saying people shouldn't understand what's going on, just wanting to provide a simple distribution of node that people can unzip, customize a js file, and have an instant node powered app without having to download xCode
[21:31] bradleymeck: say you auto import connect,websocket-server,etc. and person B downloads your package, he thinks those things are just always in node, then he rebundles the package with something that acts the same as websocket-server, then another person bundles yet another socket-server, all of them thinking that the 'default' is just not what they wanted
[21:31] bradleymeck: urllib all over again aaaaah
[21:32] creationix: bradleymeck: hmm, good point, maybe I shouldn't encourage that behavior
[21:32] herbySk: creationix: but, doesn't default startyup script name (~/main.js) suffice for this?
[21:32] creationix: herbySk: that's what I'm wanting
[21:33] pquerna: jb55: true, and its relatively easy to add signed/encrypted packets later.
[21:33] creationix: $PREFIX/lib/node/main.js (or node.js, or something)
[21:33] creationix: where $PREFIX is the runtime calculated prefix relative to the binary's actual location
[21:34] saikat has joined the channel
[21:34] stride: mhm, understood. I'm just occasionally a bit over-worried about a bunch of kids writing one big sql injection with a webfrontend :)
[21:35] MikhX has joined the channel
[21:35] creationix: stride: just because someone doesn't have a compiler on their system doesn't mean they are a script kiddie
[21:36] creationix: The only reason I have a compiler is for compiling node
[21:36] creationix: and since it's there I compile git from source instead of using a pre-built binary
[21:36] drudge: if you don't use it, you don't need it
[21:36] herbySk: creationix: yes, why not? though, I remember that when I ran some applications based on appjet, I did not name the main script main.js (the default), but gave it another name and started it with the script... (setting port, working dirs etc.). So, a question is, is it such a pain to write a startup script... but it can't hurt.
[21:37] stride: creationix: yeah, I know
[21:38] creationix: herbySk: I really don't want a subshell if at all possible. I want the node process to be the only thing running
[21:39] sveisvei has joined the channel
[21:39] huyhong has joined the channel
[21:39] huyhong has left the channel
[21:39] herbySk: creationix: I see. Then the default script is definitely a good thing.
[21:39] creationix: and I don't trust relative shebang lines so I can't go that route
[21:40] herbySk: #!env node
[21:40] Blackguard has joined the channel
[21:41] creationix: herbySk: that won't work at all
[21:41] creationix: it's not the global node I want
[21:41] creationix: it's the local one
[21:41] herbySk: aha... ok
[21:41] creationix: and there might not even be a global node
[21:41] creationix: I think node's default startup should be moved into a module
[21:42] creationix: and then the code checks for main.js if no file is given
[21:42] creationix: hmm, actually if I only look for main.js when there is no argv[1] then there is no performance cost for normal scripts
[21:42] stride: nice idea :)
[21:42] creationix: just for people starting the repl
[21:42] creationix: and humans don't mind waiting an extra 0.3ms to start their repl
[21:43] herbySk: creationix: that's what I meant: only use it if it is not already specified (repl can be done through node -repl, if desired)
[21:43] creationix: though then my custom scripts can't use argv[1], so maybe that's not going to work
[21:43] Throlkim_ has joined the channel
[21:43] creationix: it's bad enough that V8 hijacks the argv array
[21:44] EyePulp: sooo... what is the "repl"  I've seen it referenced a lot, but have no clue
[21:44] creationix: EyePulp: Real-Eval-Print-Loop
[21:45] creationix: it's then you type just "node" on the command prompt
[21:45] ryah: almost time to get rid of the node-repl script, eh?
[21:45] herbySk: creationix: it is no problem to put your own args into node, I tried it while trying to do bare node core... it's just a little playing in node.cc, where you shoudl specify it's yours
[21:45] creationix: ryah: I'd say so
[21:45] EyePulp: ahh
[21:45] ryah: maybe we can wait another month
[21:46] herbySk: ryah: after --repl / -i option is implemented in node itself, I'd say
[21:46] EyePulp: ryah: I'm just now learning node, and haven't felt this dumb in years, but programming is fun again, so thanks for that.  =)
[21:46] creationix: ryah: did you have any comments on my startup script hook?
[21:47] ryah: EyePulp: :)
[21:47] ryah: herbySk: --repl?
[21:47] creationix: herbySk: what's wrong with repl by default when there are no arguments?
[21:47] herbySk: creationix: didn't you want to launch default script, if nothign was specified?
[21:47] hober: speaking of the repl, ryah: any interest in accepting or rejecting my patch from last week? ( http://bit.ly/b2b0Vq )
[21:47] creationix: herbySk: no, that would be good enough
[21:48] creationix: I really need to hijack all node's argv logic in my startup script
[21:48] ryah: hober: it broke my solaris repl
[21:48] ryah: i didn't have time to look into much more
[21:48] creationix: herbySk: something I would like to see in node is the ability to pipe js into it
[21:48] creationix: node < myscript.js
[21:48] hober: oh, interesting.
[21:48] herbySk: creationix: then I probably did not understand what you want to perform into details...
[21:48] ryah: creationix: nah - i don't think i'll do that
[21:48] herbySk: creationix: a...haa...
[21:49] creationix: ryah: why not, performance costs?
[21:49] ryah: hober: no time today either - but ping me again about it, and we'll figure out what's wrong
[21:49] hober: I don't think I have a solaris machine to test things on anymore, but I'll endevour to check that
[21:49] hober: cool, sounds good
[21:49] ryah: hober: or i can give you an account to test
[21:50] creationix: ryah: maybe a configure flag to enable the hook, since I'm distributing binaries that's not an issue
[21:50] creationix: I just don't want to have to maintain a patched version of node
[21:50] ryah: creationix: i don't know - reading a script from stdin
[21:51] ryah: i just don't see the purpose
[21:51] creationix: ryah: oh, that's a different question
[21:51] creationix: but I have plenty of use cases for reading a script from stdin
[21:51] ryah: i mean, i can see it's kind of cool - but eh
[21:51] creationix: one is integration with text editors, run the code in the buffer, but not have to first save it to a temp file
[21:51] rauchg_: ryah: how do you like solaris ? 
[21:52] ryah: it's lovely
[21:52] creationix: or curl http://foo.com/script.js | node
[21:52] felixge has joined the channel
[21:52] felixge has joined the channel
[21:52] rauchg_: i used joyent years ago, it gave me many headaches :P
[21:52] creationix: ryah: ok, stdin question aside, what did you think about my startup hook?
[21:53] ryah: creationix: uh, i need to think about it more
[21:53] wink_: anyone know of a more efficient way in a depth first search to avoid cycles other than tracking every node you've visited?
[21:53] creationix: ryah: ok, I think I'll maintain a patch for now then, I think it will be more useful once we have a bundler too
[21:53] wink_: or if there is
[21:53] wink_: :p
[21:54] ryah: creationix: i'd rather it be compiled in
[21:54] felixge: I could need some help from somebody C savy
[21:54] felixge: I'm trying to port this to node: https://gist.github.com/9101ec96fae0a205586b
[21:54] maqr has joined the channel
[21:54] creationix: ryah: sure, but I don't want to force developers to have a compiler
[21:54] wink_: felixge: any reason to not use the builtin hashing?
[21:54] creationix: or at least not force me to compile after every save
[21:54] digitalspaghetti: felixge: sorry for my crappy bug report that was my fault btw :)
[21:54] felixge: By help I mean fork of this gist that adds a few more comments on what each of these lines does : )
[21:55] felixge: wink_: yeah, I can't upgrade all mysql installations in the world :)
[21:55] ryah: creationix: i think the bundler will require that
[21:55] ryah: if there ever is one
[21:55] herbySk: wink_: if you know the size of search space, limit on that; otherwise I cannot imagine it now
[21:55] wink_: felixge: this is mysqls hashing algo?
[21:55] creationix: yes, the bundler will, but I don't want to rebundle every save
[21:55] felixge: wink_: for < 4.1, yes
[21:56] wink_: herbySk: yeah i didnt think there was a way, but was gonna see if someone smarter than i knew of one :p
[21:56] wink_: felixge: oh my :p
[21:56] felixge: wink_: a lot of people who are using 5.x still have mysql user accounts with pre 4.1 passwords :|
[21:56] wink_: are you looking to port it into js or bind that algo?
[21:56] felixge: wink_: if you think this is scary, you should read the rest of the source :)
[21:56] felixge: wink_: port it to pure JS
[21:56] stride: felixge: god, is that related to my issue? :)
[21:56] felixge: that is node.js with buffers
[21:57] aheckmann has left the channel
[21:57] felixge: stride: that is your issue, yes
[21:57] stride: that makes me want to kill that db :))
[21:57] digitalspaghetti: felixge clearly enjoys pain :)
[21:57] mscdex: ACTION shakes a fist at mysql 4.x
[21:57] digitalspaghetti: but at the same time, thank god because MySQL drivers for other stuff are a mess
[21:58] wink_: felixge: i'd think that should port almost straightover?
[21:58] digitalspaghetti: i remember the mysql-python/mod_python sigfault days :/
[21:58] wink_: minus the pointers, all the bitwise stuff should just come right into node
[21:58] stride: creationix: with a startup script you could simulate all the piping stuff you want with process.openStdin and the runInThisContext stuff, that would actually be pretty neat somehow
[21:58] felixge: I don't understand line 20
[21:58] herbySk: felixge: it looks like it can be copied into js verbatim, except for pointers, where you put for through chars in the string...
[21:59] felixge: 21, 25 and 256
[21:59] felixge: * 26
[21:59] creationix: stride: yeah, another use case for my hook is to play with new node features before proposing them
[21:59] felixge: wink_: the pointers are the problem, I don't know C well enough :)
[21:59] herbySk: felixge: 20 is "tmp = password.charCodeAt(i);"
[21:59] felixge: I mean I understand it a little, but off-by -1 errors will be hard to debug here :)
[22:00] wink_: yeah its just assigning the currently iterated character to tmp
[22:00] felixge: herbySk: that helps
[22:00] wink_: so rewrite the for loop to loop through your string char by char
[22:00] creationix: felixge: though don't use strings, convert the password to a buffer first
[22:00] felixge: I wish I had a test vector ...
[22:00] creationix: then it's buffer[i]
[22:00] wink_: creationix: cant you do the same thing with a string?
[22:00] sh1mmer: felixge: ! just the person
[22:01] creationix: strings get wonky when multi-byte characters are involved
[22:01] felixge: strings are for the weak :)
[22:01] creationix: buffers are plain and simple
[22:01] felixge: sh1mmer: sup?
[22:01] stride: felixge: test vector? your access to our db is still open
[22:01] wink_: creationix: ah yeah, unicode hates me :>
[22:01] felixge: stride: yeah, that is the final test : ). But I wish I had an input/output example for just the hashing function
[22:01] wink_: felixge: im sure you'll get it hammered out tonight, but if you dont by morning hit me up
[22:02] felixge: I can't really do TDD with an algorithm I don't understand ;)
[22:02] felixge: But my desire to understand it is fairly limited since it looks like bad cryptography ;0
[22:02] felixge: :)
[22:02] herbySk: felixge: 25 is "result[0] = nr & ((1<<31)-1);" analogically for 26
[22:03] felixge: herbySk: so the result is just 2 bytes?
[22:03] herbySk: felixge: two 32bit numbers, that is 8 bytes
[22:03] felixge: the protocol says I'm supposed to send an 8 byte hash
[22:03] felixge: ahh
[22:03] felixge: I forgot this isn't a node buffer
[22:03] felixge: :)
[22:04] felixge: herbySk: Thanks a ton, this really helps. Let me give it a go
[22:04] sonnym has joined the channel
[22:04] ryah: felixge: 1 << 31 = 0x40000000
[22:04] overra_ has joined the channel
[22:05] herbySk: felixege: for 21, 22 and 23, it is important to see that this is arithmetic module 2**32, otherwise operators are same as in js
[22:05] jackish has joined the channel
[22:06] ryah: 1<<31 -1 = 0x3fffffff i think
[22:06] ryah: when you & with that - it's like - zero out the first two bits
[22:06] herbySk: ryah: 0x7fffffff
[22:07] herbySk: it only zeroes sign bit (it says it in comment as well)
[22:07] ryah: oh
[22:07] ryah: okay
[22:07] ryah: felixge: so in your code just do  & 0x7fffffff
[22:08] creationix: js: 1<<31
[22:08] gbot2: creationix: -2147483648
[22:08] creationix: doh, stupid signed integers
[22:08] mscdex: :-D
[22:09] felixge: ryah: ok, thanks!
[22:09] creationix: js: (1<<30)*2
[22:09] gbot2: creationix: 2147483648
[22:09] creationix: js: ((1<<30) * 2 - 1).toString(16)
[22:09] gbot2: creationix: "7fffffff"
[22:09] creationix: yep, that's it
[22:09] mscdex: what happens when someone with the name of "js" enters this channel?
[22:09] mscdex: :p
[22:10] Dmitry1 has joined the channel
[22:10] ryah: universe explodes
[22:10] bradleymeck: nothing, diff part of the irc msg
[22:10] mscdex: gbot2 will freak out
[22:10] herbySk: felixge: I see a problem with line 21, how to replicate multiplying two 32bit numbers modulo 2**32 in js without losing precision....
[22:10] mscdex: eh?
[22:10] sh1mmer: felixge: sorry got distracted by a work conversation
[22:11] felixge: herbySk: do I need some sort of big number thingy?
[22:11] sh1mmer: felixge: the mysql driver is throwing an error
[22:11] felixge: sh1mmer: which one?
[22:11] creationix: herbySk: loop over the bits of the second number and do the multiply by hand?
[22:12] creationix: herbySk: though that seems really slow, there should be something faster
[22:12] felixge: slow would not be a problem
[22:12] sh1mmer: felixge: http://gist.github.com/532336
[22:12] mjr_: bit math in JS is often awkward.
[22:12] mu-hannibal has joined the channel
[22:12] sh1mmer: mjr_: too right.
[22:12] herbySk: herbySk: the (nr&63)+add and tmp are both unsigned 32bit numbers, and they are multiplied module 2**32.... this is something you can't do in plain js number... its' integer arithmetic is limited to 53 bits....
[22:12] ryah: yes
[22:13] creationix: so js numbers are 32 bit signed ints when doing bitwise operations?
[22:13] ryah: tip: use explicit numbers
[22:13] sh1mmer: creationix: that get co-erced into 32-bit signed ints by bitwise
[22:13] felixge: sh1mmer: add a 'error' listener to client and console.log() the paramater, sorry I still need to convert error stuff in Error() objects
[22:13] herbySk: felixge: but you _can_ factor it to two 16bit parts and this way you could get the result.... interestede in details?
[22:14] ryah: big endian ints
[22:14] mjr_: I wonder why signed ints for bit math?  How does that help anybody?
[22:14] felixge: herbySk: I could really need some hands-on kind of help with this, yes. I'm a few theory lessons away from grasping some of the more subtle issues with this
[22:14] sh1mmer: mjr_: not sure. I asked Doug that and he didn't have an answer
[22:15] jackish has joined the channel
[22:15] creationix: mjr_: I'm guessing someone thought it would make it easier to implement
[22:16] creationix: or that's how it was implemented by accident and it became part of the spec
[22:16] TangoIII has joined the channel
[22:16] ryah: ACTION away
[22:16] hellp has joined the channel
[22:18] herbySk: felixge: In a moment I send you a hist link...
[22:19] felixge: herbySk: thanks a ton for your help
[22:19] jackish has joined the channel
[22:20] creationix: herbySk: I'm interested in the solution too
[22:20] creationix: the sign bit is what's getting me
[22:20] creationix: js: [0xffff0000, 0xffff0000 & 0xffffffff]
[22:20] gbot2: creationix: [4294901760,-65536]
[22:20] mjr_: felixge: When you get all of this sorted, I'd like to add a pcap decoder for mysql.
[22:20] stride: creationix: what's bothering you about it?
[22:20] creationix: I would expect both numbers to be the same
[22:21] felixge: mjr_: are you mranney ?
[22:21] mjr_: felixge: that's me
[22:21] creationix: but js treats 0xffffff as a positive number unless it's used with the & operator
[22:21] felixge: mjr_: thanks again for pcap : )
[22:21] mjr_: different gh and irc names.
[22:21] felixge: mjr_: How could I help you with that adapter?
[22:22] creationix: mjr_: interested in a postgres decoder
[22:22] creationix: ?
[22:22] felixge: mjr_: the parser is 100% decoupled, you just create a new instance of it, and pump buffers to it via parser.write()
[22:22] mjr_: Well, some way to determine if a connection was a mysql type, I guess probably just a port number.  And then some sort of parser that I can feed payload bytes into that will emit events.
[22:22] mjr_: felixge: oh great
[22:22] felixge: mjr_: parser.on('packet, ...) -> done
[22:22] stride: creationix: oh, right, that's really weird
[22:22] felixge: mjr_: port is 3306
[22:23] mjr_: Can't it run on other ports though?
[22:23] felixge: mjr_: sure, but that's the default
[22:23] felixge: mjr_: afaik most people use that
[22:23] felixge: mjr_: there are other ways to sniff potential mysql packets
[22:23] mjr_: I guess that's probably fine for a first step.  I'd like to just auto-detect the protocol from the first few bytes.
[22:23] creationix: mjr_: I'm sure there is some signature to auto-detect mysql protocol
[22:24] mikeal has joined the channel
[22:24] mjr_: creationix: yeah, I'd like to be able to decode postgres as well, although it is less useful for me personally since I don't actually use it.  :)
[22:24] bradleymeck: wait what are we trying to do w/ bitmath?
[22:24] c4milo: felixge: are there any discussion regarding to have a common database interface like DBI in perl ? 
[22:24] felixge: mjr_: the greeting packet has a fairly distinct signature
[22:24] creationix: mjr_: good point, I plan to rewrite my postgres driver after felixge is done with the mysql one
[22:24] creationix: currently it's not as decoupled as I would like
[22:24] felixge: c4milo: that can be done on top of my driver
[22:25] mjr_: felixge: if you already have a parser that you feed bytes into and it emits events, that's perfect for writing a sniffer.
[22:25] creationix: c4milo: I tried something like that a while back http://github.com/creationix/node-persistence
[22:25] mjr_: felixge: that's what I do for HTTP already: feed it to node's HTTP parser.
[22:25] felixge: mjr_: http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol#Handshake_Initialization_Packet , scroll down to: Example Handshake Initialization Packet
[22:25] stride: creationix: oh, wait, I guess it fills up 0s so the most significant bit is a 0 there, while it fills up 1s in the & case to stay in two's complement for both numbers or something
[22:26] felixge: mjr_: that's awesome
[22:26] creationix: stride: exactely, it changes the meaning of the number when doing bitwise math
[22:26] felixge: mjr_: I mean your pcap binding is awesome
[22:26] felixge: :)
[22:26] fod has joined the channel
[22:26] mjr_: felixge: it's cool to have bits off the wire in JavaScript, isn't it?
[22:26] mjr_: You can just, do stuff with them, however you like.
[22:26] felixge: mjr_: I can see it become a regular friend of mine :)
[22:27] felixge: mjr_: it's insanely nice
[22:27] brianleroux has joined the channel
[22:27] felixge: mjr_: what was the use case you developed it for?
[22:27] bradleymeck: js: [(0xfff000000 & 0xffffffff).toString(16),(0xfff000000 >> 32).toString(16)]
[22:27] gbot2: bradleymeck: Error: SyntaxError: illegal character:  [(0xfff000000 & 0xffffffff).toString(16),(0xfff000000 >> 32).toString(16)]  ............^ 
[22:27] stride: what bit-size do Numbers have?
[22:27] bradleymeck: pfff
[22:27] mjr_: felixge: At my real job we are building a voice over HTTP system, and I use it to measure latency and jitter.
[22:27] bradleymeck: they are 64-bit float unless coerced to 32bit int
[22:27] felixge: mjr_: voice over http? That sounds crazy :)
[22:27] stride: js: 0x0ffff0000 & 0x0ffffffff
[22:27] gbot2: stride: -65536
[22:28] stride: oh, meh :)
[22:28] felixge: mjr_: I mean I guess you just do some websocket-y "UPGRADE" of the connection, right?
[22:28] mjr_: felixge: we use chunked HTTP, which ends up being fine.
[22:29] mjr_: But we did need to "upgrade" some of the usual semantics of HTTP.  :)
[22:29] felixge: mjr_: why http?
[22:29] c4milo: mjr_: what is the problem with udp ? 
[22:29] mjr_: Because HTTP is everywhere already.  There are hardware load balancers for it and client + server implementations abound.
[22:29] christophsturm has joined the channel
[22:30] herbySk: felixge: http://gist.github.com/532401
[22:30] mjr_: And not UDP because our system is more of a messaging system, so we need to make an exact copy.
[22:30] felixge: herbySk: checking it out
[22:31] mjr_: VoIP over mobile data is notoriously unreliable, etc.
[22:32] bradleymeck: i remember i got a test back saying that you dont need to use tcp to track bullets in a fps, udp was good enough. the prof did not play enough counter-strike
[22:32] creationix: felixge, herbySk: It sems using && instead of & doesn't do the funky cohersion
[22:32] bradleymeck: you can also divide by 0x10..0 to bit shift w/o coersion
[22:34] bradleymeck: be sure to | 0 though...
[22:34] herbySk: creationix: && with numbers? Isn't && logical and (that is a&&b === ToBoolean(a) ? b : null)?
[22:35] creationix: nope, && doesn't convert to boolean in JS land
[22:35] herbySk: sorry, s/null/false
[22:35] stride: creationix: isn't that simply returning the first argument?
[22:35] herbySk: creationix: I'd believe it does. It's what it's about (along with ||)
[22:36] bradleymeck: last argument needing evaluation is what logical ops return
[22:36] creationix: nevermind, it's the last arg unless the first is 0
[22:36] creationix: you're right
[22:36] creationix: I was doing 0xffffffff && 0xffff0000 and it was working, but not really
[22:37] bradleymeck: oh we need a couple bitwise op wrappers for large  numbers?
[22:37] bradleymeck: sec...
[22:37] stride: wasn't there a bigint module posted last week or something, maybe that implements them already
[22:38] mjr_: This bitwise stuff would be a lot easier to understand if the int -> float conversion was done from an unsigned int.  What a paiin.
[22:39] creationix: mjr_: no kidding
[22:39] herbySk: stride: no need for it for this case, 32bit*32bit can be done merely by some bit manipulation...
[22:39] creationix: herbySk: so what do we need, 32bit*32bit with full precision as a 64 bit unsigned int?
[22:39] creationix: or is it truncated to 32 bit
[22:40] creationix: ACTION can't read the C code either
[22:40] stride: herbySk: I was just curious :)
[22:40] felixge: herbySk: ok, let me try this
[22:40] daleharvey has joined the channel
[22:41] jblanche has joined the channel
[22:41] herbySk: creationix: replicate multiplying of two C unsigned 32bit ints... that is. only last 32bits of the result
[22:41] herbySk: I posted a gist which shows the solution by only manipulating 16biut halves which can be done in js happily
[22:41] creationix: ok, so (a * b) & 0xffffffff, but without overflowing?
[22:42] herbySk: creationx: exactly
[22:42] herbySk: in js, (a*b) loses precision if the result is more than 53bits, as js's Number is in fact, IEEE float, which holds numbers ads int up to 53 bits, but then goes to mantissa/exponent
[22:43] herbySk: s/ads/ad/
[22:43] herbySk: s/ad/as/
[22:43] creationix: herbySk: right, I missed the gist, was still waiting on it
[22:43] creationix: (and I actually remember learning all this modulus math in school, too bad I didn't remember enough to use it)
[22:44] creationix: herbySk: ahh, the part I was missing was x >> 16
[22:44] herbySk: creationix: You only need to know it is somehow possible, then you derive it if needed (at least in my case, as now, for example)
[22:44] creationix: I was trying x & 0xffff0000
[22:45] stride: heh, I tutored a course on this stuff for 1 1/2 years and yet I had to look it up creationix :)
[22:45] herbySk: creationix: :-)
[22:47] creationix: herbySk: I see you never gave the actual solution, just explained how to get it ;)
[22:48] herbySk: well, if I gave only the swolution, you wouldn't understand it to work with it properly... when I explained it, I was really too lazy to actually implement it... it is the boring part :-)
[22:48] felixge: herbySk: I'm still on that boring part ;)
[22:48] herbySk: (no offense meant by 'wouldn't understand', of course)
[22:48] pquerna: tjholowaychuk: ping, question about setup functions in expresso
[22:49] creationix: btw, x >> 16 is the same as (x >>16) & 0xFFFF if you know x is < 0x100000000
[22:49] tjholowaychuk: pquerna: aight shoot
[22:49] creationix: but maybe that's not a good assumption
[22:49] ryan_gahl has joined the channel
[22:49] herbySk: well, multiply(x,y) {
[22:49] herbySk: var lowx = x & 0xffff,
[22:49] mscdex: BIT TWIDDLERS UNITE
[22:50] herbySk: var highx = (x>>16) & 0xffff,
[22:50] herbySk: lowy = y & 0xffff,
[22:50] herbySk: highy = (y>>16) & 0xffff;
[22:50] pquerna: tjholowaychuk: https://gist.github.com/7d89e159355d57a0663a
[22:50] pquerna: tjholowaychuk: basically, I kinda expected setup() to be... blocking even for async tests.
[22:51] ryan_gahl: mscdex: node.js rules!
[22:51] mscdex: ryan_gahl: too late, already said it earlier
[22:51] ryan_gahl: :)
[22:51] herbySk: var result = 0x10000*((highx*lowy+lowx*highy) & 0xffff)+lowy*lowx;
[22:51] herbySk: result = result & 0xffffffff;
[22:51] herbySk: return result;
[22:51] herbySk: }
[22:51] herbySk: fix me if I did something wrong :-)
[22:52] ajpiano has joined the channel
[22:52] bradleymeck: http://gist.github.com/532479 << the evil begins (size_t and op on 32bit chunks)
[22:52] mscdex: man, i wouldn't want to be fixed, whether or not i was wrong
[22:52] mscdex: that's permanent
[22:52] tjholowaychuk: pquerna: ah no i think its only implemented for --serial right now
[22:53] mscdex: alright, back to work i go
[22:53] bradleymeck: herbySk you cant >>32 on numbers since they are limited to 32 bits on bit ops T_T
[22:53] pquerna: tjholowaychuk: so, patch somewhat makes sense then?
[22:53] creationix: herbySk: felixge: https://gist.github.com/96e9498a46f9767bb570 is this right?
[22:54] herbySk: bradleymeck: i don't do, I only >> 16
[22:54] pquerna: tjholowaychuk: also, was kinda thinking it might be nice to be able to flip serial bit on a per-testcase basis
[22:54] tjholowaychuk: pquerna: i dont think so, maybe setup is not the right name. I have it executing before each test function when --serial
[22:54] bradleymeck: i must be talking about something diff, im getting confused
[22:54] tjholowaychuk: pquerna: i agree
[22:54] tjholowaychuk: pquerna: it was just something i needed in quickly
[22:54] creationix: you can do x % 0xffffffff right?
[22:54] pquerna: tjholowaychuk: like 90% of my tests are async fine... evne just exports.force_serial = true
[22:54] pquerna: for a few suites that aren't
[22:55] tjholowaychuk: im down. mind posting an issue?
[22:55] bradleymeck: creationix the one issue is what if x is 0xffffffff
[22:55] drudge: anyone know of a project using vows for testing?
[22:55] tjholowaychuk: maybe I should change "setup" to "before" or something
[22:55] creationix: bradleymeck: oh right %0x100000000
[22:56] felixge: herbySk: https://gist.github.com/9101ec96fae0a205586b think this looks good?
[22:56] Throlkim_ has joined the channel
[22:56] bradleymeck: % = & of x-1
[22:56] herbySk: creationix: no, here the modulus is 0x100000000 (or 0x10000 for halves) and since we're in binary arithmetic, these moduli are produced by &0xffffffff or & 0xffff, respectively
[22:56] bradleymeck: so just tested, nogo
[22:57] kodisha has joined the channel
[22:57] pquerna: tjholowaychuk: sure.  twisted/trial just call em setUp and tearDown for each on the side of a suite.
[22:57] creationix: herbySk: right, updated the gist
[22:59] mtodd_ has joined the channel
[22:59] herbySk: creationix: ((0x10000 * a1 * b2) % 0x100000000) is in fact ((a1 * b2) % 0x10000)
[22:59] creationix: herbySk: is x & 0xffff better or x % 0x10000
[22:59] creationix: herbySk: really?
[22:59] lachlanhardy has joined the channel
[23:00] creationix: herbySk: don't you need to multiply it by 0x10000 afterwards for your version?
[23:00] herbySk: creationix: of course, you're right...
[23:00] creationix: but yeah, that keeps it away from more overflow issues
[23:00] herbySk: only, you manipulate in safer range this way
[23:01] creationix: herbySk: so 0x10000 * (((a1 * b2) % 0x10000) + ((b1 * a2) % 0x10000)) + (a2 * b2)
[23:02] bradleymeck has left the channel
[23:02] herbySk: 0x10000 * ( ((a1 * b2)+(b1 * a2)) % 0x10000 ) + (a2 * b2)
[23:03] herbySk: and finally, it can still overflow into 33bit, so:
[23:03] herbySk: (0x10000 * ( ((a1 * b2)+(b1 * a2)) % 0x10000 ) + (a2 * b2)) & 0xffffffff
[23:04] herbySk: (or %0x100000000, but I'd believe & 0xffffffff more... not to mention that any bit operation automatically converts to 32bit number, so "| 0"
[23:04] lachlanhardy has joined the channel
[23:04] herbySk: would be maybe enough, too
[23:05] herbySk: (but & 0xffffffff is more readable)
[23:05] felixge: herbySk: did you have a chance to gloss over my gist?
[23:05] creationix: yeah, & 0xfffffff will make it turn negative on you
[23:06] herbySk: what's gloss?
[23:07] sh1mmer: you can do & ~(0xffffff)
[23:07] sh1mmer: that flips the first bit
[23:07] sh1mmer: the sign bit
[23:07] creationix: herbySk: https://gist.github.com/96e9498a46f9767bb570
[23:08] herbySk: creationix: what does it mean "to gloss over"?
[23:08] stride: js: [0xffff000f.toString(16), ((((0xffff000f & 0xffffffff) >>> 1) * 2 + (0xffff000f & 1)).toString(16))]
[23:08] gbot2: stride: ["ffff000f","ffff000f"]
[23:08] felixge: herbySk: I meant read
[23:08] felixge: herbySk: I don't know how to translate the word I was thinking of
[23:08] creationix: herbySk: quick glance/ look over
[23:08] creationix: felixge: I knew what you meant
[23:08] felixge: creationix: oh, so I wasn't wrong : )
[23:09] stride: great, I forgot the original problem on my search for a solution..
[23:09] creationix: I think my final version works
[23:09] creationix: the % operator doesn't seem to do the funky 32-bit signed int conversion
[23:10] felixge: creationix: oh, so you are saying I should use your multiply instead of mine?
[23:10] stride: according to the intarnets the conversion is only applied with the bitwise operations, except >>> which is unsigned right shift
[23:10] felixge: ( https://gist.github.com/9101ec96fae0a205586b )
[23:10] creationix: felixge: not sure, still looking at yours, github is slow
[23:10] herbySk: creationix: I'd change
[23:10] felixge: creationix: mine is just what herbySk suggested
[23:10] herbySk: ((a1 * b2) % 0x10000) + ((b1 * a2) % 0x10000)
[23:10] herbySk: for
[23:10] herbySk: ((a1 * b2 + b1 * a2) % 0x10000))
[23:10] creationix: felixge: yeah, I can't load yours
[23:11] herbySk: otherwise, ok
[23:11] stride: meh, I get a crying github monkey, too
[23:11] creationix: herbySk: good point
[23:11] Throlkim has joined the channel
[23:11] felixge: creationix: weird, github works fine here
[23:11] tmpvar: creationix, I got composer flows running in conductor last night
[23:11] tmpvar: ^_^
[23:11] creationix: tmpvar: neat
[23:12] stride: is that working? I guess the conversion issues arise as well when using ^= on line 18
[23:12] felixge: creationix: http://pastebin.com/AmKVsDW2
[23:12] felixge: as a port of: http://pastebin.com/wQCY8FKb
[23:13] felixge: still have to split the two result numbers into individual bytes
[23:13] creationix: felixge: good, except for line 39
[23:13] felixge: but I'm wondering if I'm doing it right so far
[23:13] creationix: you need % 0x100000000 instead of & 0xffffffff
[23:13] creationix: felixge: I'm only looking at the multiple function
[23:13] jackish has joined the channel
[23:13] creationix: *multiply
[23:13] jakehow has joined the channel
[23:13] felixge: creationix: ok ... well, that's just one of my problems :)
[23:14] creationix: felixge: your todo on line 28 is easy though
[23:14] Tim_Smart has joined the channel
[23:14] creationix: http://github.com/creationix/postgres-js/blob/master/lib/buffer_extras.js#L33-44
[23:15] creationix: there is probably a better way to implement it, but that's the general idea
[23:15] ben_alman has joined the channel
[23:15] Tobsn has joined the channel
[23:16] sechrist: sup guyz
[23:17] mtodd has joined the channel
[23:18] herbySk: felixge: on line 18, didn't you mistakenly written 68 in your code where 63 is in original?
[23:18] felixge: creationix: thanks, that helps
[23:19] felixge: herbySk: yes, damn, how did that happen
[23:19] felixge: herbySk: http://pastebin.com/0U4N55pF updated
[23:19] creationix: felixge: you should compile the c version into a standalone program to generate test vectors
[23:19] creationix: feed it the possible range of inputs (or at least a lot of them)
[23:20] felixge: creationix: that's a good idea
[23:20] creationix: I personally wouldn't trust myself to get this right without good test vectors
[23:22] huyhong1 has joined the channel
[23:22] felixge: I really hate mysql now :)
[23:23] felixge: why the fuck would you implement your own hashing algorithm? : )
[23:23] sh1mmer: felixge: aren't they smarter than everyone else, oh wait...
[23:24] creationix: yeah, postgres uses md5 for part of it's hash
[23:25] felixge: creationix: well, mysql has been using sha1 for the last 5 years as well ...
[23:25] stride: felixge: actually there seem to be three variations of PASSWORD vs. OLD_PASSWORD according to the note box on http://dev.mysql.com/doc/refman/5.1/en/password-hashing.html
[23:25] felixge: creationix: but legacy support is a bitch : |
[23:25] cdata has joined the channel
[23:26] felixge: stride: I don't think I need to support 4.1.0
[23:26] felixge: stride: the function I'm porting says: "Used for Pre-4.1 password handling", so I'm pretty sure it's the right one
[23:26] sechrist: I don't think I've ever used hashing algos built into the database
[23:26] felixge: stride: if not, somebody please kill me : )
[23:26] sechrist: I've always generated them pre-query
[23:26] felixge: sechrist: this is for authenticating with the database
[23:26] sechrist: oh oh
[23:26] sechrist: nevermind
[23:27] stride: felixge: yeah, just saying to feed your hatred :)
[23:28] cdata has left the channel
[23:29] cdata has joined the channel
[23:30] jchris has joined the channel
[23:30] sechrist: wtf happened to joaquin phoenix
[23:30] sechrist: he looks like the bearded guy from the hangover now
[23:30] cdata: basically he went nuts
[23:30] felixge: herbySk: thank you so much for your help
[23:30] felixge: I'll have to wrap up for tonight
[23:30] sechrist: cdata: dat weed 
[23:31] cdata: sechrist: maybe some other things too
[23:31] sechrist: "A documentary on Joaquin Phoenix's transition from the acting world to a career as an aspiring rapper"
[23:32] sechrist: what the fuck
[23:32] sechrist: he's an aspiring rapper?
[23:32] sechrist: LOL
[23:32] behmann has joined the channel
[23:32] cdata: sechrist: the summary of what happened is that he didn't make it as a rapper
[23:33] cdata: sechrist: http://www.youtube.com/watch?v=AuO75_hJgCQ
[23:33] herbySk: felixge, creationix: ha, i found a trick how to make unsigned 32bit integer, no need to % 0x100000000, it suffices to >>> 0
[23:34] stride: herbySk: huh? I've tried several combinations with the & operator and >>> 0. how did you get it to work? :)
[23:34] herbySk: (not >> 0, >>> 0, the three gt operator does shift left _without_sign_ )
[23:34] digitalspaghetti has joined the channel
[23:34] stride: only solution I've found was to >>> 1, * 2 and restore the bit
[23:35] creationix has joined the channel
[23:35] inimino: sure, >>>0 works
[23:35] herbySk: I only tried it in node-repl, but -1 >>> 0 gives 4294967295 as expected
[23:35] inimino: doesn't ~~ work also?
[23:35] stride: herbySk: did you try it including a bitwise operation?
[23:36] inimino: oh, right, ~~ doesn't change the sign
[23:37] herbySk: yes, but it yields signed number (which is strange, I believed in specification there is only ToUint32 operation). both & 0xffffffff and | 0 yield signed.
[23:37] herbySk: But >>> (also a bitwise operation) yields unsigned
[23:37] inimino: I think there's a ToInt32 somewhere.
[23:38] herbySk: I should check, but now I'm lazy. Gonna sleep, bye.
[23:38] inimino: ACTION checks
[23:38] sechrist: are you guys talking about specifically within v8?
[23:38] sechrist: I haven't really had to mess around with bitops but I had assumed it only had signed numbers
[23:39] sechrist: http://execjosh.blogspot.com/2008/08/unsigned-numbers.html hm I guess so
[23:39] stride: except of >>>, yeah
[23:40] inimino: >>> uses ToUInt32, ~ uses ToInt32
[23:40] herbySk has left the channel
[23:42] Yuffster has joined the channel
[23:43] [[zz]] has joined the channel
[23:43] joshbuddy has joined the channel
[23:44] ngw has joined the channel
[23:45] sudoer has joined the channel
[23:46] creationix has joined the channel
[23:47] stride: mhm, it's in node/deps/v8/src/parser.cc:2935 if anybody cares
[23:48] aliudalius has joined the channel
[23:50] huyhong1 has left the channel
[23:50] creationix: inimino: what is >>> ?
[23:50] murz has joined the channel
[23:50] creationix: a unsigned version of >>
[23:50] inimino: creationix ⋱ yes, zero-fill right shift
[23:51] inimino: js> -1 >>> 0
[23:51] gbot2: inimino: 4294967295
[23:51] inimino: js> [(-1).toString(2) , (-1 >>> 0).toString(2)]
[23:51] gbot2: inimino: ["-1","11111111111111111111111111111111"]
[23:52] creationix: js> 0xffffffff >> 0
[23:52] gbot2: creationix: -1
[23:52] creationix: crazy
[23:53] inimino: eh, I wanted to see the string of ones in the -1, but that's probably impossible.
[23:53] jashkenas has joined the channel
[23:53] creationix: nothing like implicit type coercions and bitwise operations to make your head spin
[23:53] inimino: ^_^
[23:54] inimino: type coercion certainly makes things interesting
[23:54] creationix: inimino: anything I can do to improve this code http://github.com/creationix/postgres-js/blob/master/lib/buffer_extras.js#L33-44
[23:54] creationix: I don't like resorting to Math.floor
[23:54] stride: I don't get why they didn't add unsigned versions for the other bitwise operations
[23:54] pgriess has joined the channel
[23:55] creationix: ohh, I think >>> can really help me here
[23:56] inimino: hm... yes
[23:56] inimino: I would just...
[23:56] creationix: I'm trying to remember why I needed the signed to unsigned conversion
[23:56] blogometer has joined the channel
[23:56] creationix: js allows for full 32 bits of integer in normal numbers
[23:57] inimino: 52 bits in fact
[23:57] creationix: I guess my input somewhere was getting converted to signed numbers
[23:57] creationix: yay for IEEE floats
[23:58] inimino: I think you should be able to do something like write( ( input & 0xff0000 ) >>> 16 ), write((input & 0xff00) >>> 8, write(input & 0xff)
[23:59] creationix: unsigned >> 24 is the same as Math.floor(unsigned / 0xffffff)?
[23:59] inimino: that would probably be noticably faster
[23:59] inimino: hm...
[23:59] creationix: no, my divide should be 0x1000000, not 0xffffff
[23:59] inimino: yes, was about to say...
