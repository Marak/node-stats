[00:00] Tim_Smart: Then we could go: MyStream.prototype = Object.create(process.Stream.prototype) or something.
[00:00] halfhalo: Node needs a retard friendly file transfer thing over tcp and or udp
[00:02] mjr_: Why does everything use sys.inherits() when there is Object.create()?
[00:03] polotek: mjr_: sys.inherit uses Object.create, plus a few other nice things
[00:03] polotek: http://github.com/ry/node/blob/master/lib/sys.js#L386
[00:04] c4milo has joined the channel
[00:04] mjr_: polotek: what are the other nice things?
[00:04] zk has joined the channel
[00:04] polotek: super_ which gives you local access to the inherited constructor methods. not usually necessary, but sometimes it is
[00:05] polotek: plus it adds the constructor property to the inherited property type and sets it as nonenumerable
[00:05] dilvie: polotek: That's a neat feature.
[00:05] boaz_ has joined the channel
[00:05] jakehow has joined the channel
[00:07] techwraith: Anyone know of a cool function (with a dictionary already built in) that can replace special characters? Some of our routes use user generated input and we need to "slugify" them - any suggestions? 
[00:07] tjholowaychuk: techwraith: just str.replace() em
[00:08] tjholowaychuk: with whatever you consider valid
[00:08] EyePulp has joined the channel
[00:08] tjholowaychuk: which I guess depends what it is
[00:08] mikeal: Tim_Smart: did you see the filter API?
[00:08] bpot has joined the channel
[00:08] Tim_Smart: mikeal: I have not.
[00:08] mikeal: var f = createFilter(function (chunk, write) { } )
[00:08] mikeal: write is a funciton
[00:08] mikeal: chunk is null for the end event
[00:09] techwraith: tjholowaychuk: That part is easy, I guess i was asking more if anyone knows of a good dictionary to use for the replacements
[00:09] mikeal: createFilter returns a valid stream
[00:09] techwraith: We just got a few russian users and their entire alphabet needs to be replaced...
[00:09] tjholowaychuk: techwraith: whitelist instead
[00:10] tjholowaychuk: techwraith: str.replace(/[^\d\w]/g, '')
[00:10] dnolen has joined the channel
[00:10] tjholowaychuk: that kind of idea
[00:10] techwraith: tjholowaychuk: Whitelist won't work if the input is ONLY special characters
[00:10] tjholowaychuk: techwraith: you could still check string length after
[00:12] techwraith: tjholowaychuk: I suppose that would work, not the most user friendly solution. But probably the easiest to implement
[00:12] polotek: mikeal: have you used createFilter for anything significant?
[00:12] mikeal: has the term websocket been totally co-opted now as socket.io ?
[00:13] mikeal: if so, that's kinda awesome
[00:13] ehaas has joined the channel
[00:13] halfhalo: Store it as binary
[00:13] halfhalo: :p
[00:13] mikeal: polotek: no cause it's not in yet :)
[00:14] mikeal: it's actually suppose to be used for simple things
[00:14] dpritchett: mikeal, are you here to answer my goofy socket.io question?
[00:14] polotek: mikeal: yeah but I figured you had it in your utils
[00:14] mikeal: more complex stuff will want to do a full Stream
[00:14] mikeal: it actually might be
[00:14] polotek: I would use it in a few places in my twitter lib
[00:14] mikeal: dpritchett: nope, haven't used it before :)
[00:14] dpritchett: dang
[00:14] dpritchett: i want to write a socket.io client app using node
[00:14] aconbere has joined the channel
[00:14] dpritchett: rather than a browser
[00:15] mikeal: but, this does remind me
[00:15] dpritchett: cant find a good resource yet 
[00:15] charlenopires_ has joined the channel
[00:15] mikeal: i have a hilarious picture of Guillermo 
[00:15] mikeal: i spelled that wrong
[00:15] mikeal: but it's funny
[00:15] mikeal: it was in Berlin
[00:15] polotek: dpritchett: what are you having trouble with?
[00:15] mikeal: he fell asleep while we were eating dinner with his hands under his chin at the table
[00:15] dpritchett: polotek: just don't know where to get started
[00:16] dpritchett: i have a dead simple chatroom set up using socket.io and json transports back and forth from clients to the server which just rebroadcasts the json
[00:16] xla has joined the channel
[00:16] dpritchett: i want to build a chatbot that connects as a client to the server
[00:16] dpritchett: rather than running as a component module of the chat server
[00:16] dpritchett: can't really figure out where to get started with that using the socket.io libs i have on hand]
[00:17] polotek: dpritchett: so use http.Client to send requests to your other running server
[00:17] polotek: oh you're saying you want to get the socket.io client running from within node?
[00:17] dpritchett: yeah
[00:17] polotek: that I don't know about
[00:17] dpritchett: a headless browser that receives chat output line by line from the client just like a browser would
[00:17] polotek: I'm sure the client is attached to the browser environment (like most things)
[00:18] dpritchett: and then parses it and responds just like a human could
[00:18] polotek: you could try shivving it into jsdom running in node
[00:18] dpritchett: yeah im trawling the jsdom docs now
[00:18] dpritchett: not feeling super optimistic yet though ;)
[00:22] dpritchett: varbbl
[00:23] softdrink has joined the channel
[00:26] mikeal: here we go
[00:26] mikeal: http://picasaweb.google.com/mikeal.rogers/20100920#5524351667958476050
[00:26] voodootikigod has joined the channel
[00:36] gf3 has joined the channel
[00:39] c4milo has joined the channel
[00:42] nroot7 has joined the channel
[00:45] evanpro has joined the channel
[00:47] sprout has joined the channel
[00:48] deepthawtz has joined the channel
[00:49] steadicat has joined the channel
[00:49] rcy has joined the channel
[00:52] nroot7_ has joined the channel
[00:53] nroot7_ has left the channel
[00:55] nroot7 has joined the channel
[00:55] nornagon has left the channel
[00:56] jchris has joined the channel
[00:57] threeve has joined the channel
[00:58] sonnym: dpritchett:  just looking at what you were talking about earlier. . . look into node-websocket-client.  socket.io uses it to test stuff, and I've been using it for the same purpose (making test clients). http://github.com/pgriess/node-websocket-client
[00:59] osteele has joined the channel
[01:00] scnd has joined the channel
[01:00] Yuffster has joined the channel
[01:01] dpritchett: thanks sonnym
[01:03] sonnym: no problem.
[01:07] bpot has joined the channel
[01:09] c4milo has joined the channel
[01:10] kriskowal_ has joined the channel
[01:10] polotek has left the channel
[01:10] steadicat has joined the channel
[01:10] hzin has joined the channel
[01:11] kriskowal__ has joined the channel
[01:11] danielzilla has joined the channel
[01:12] MikhX has joined the channel
[01:15] JimBastard_ has joined the channel
[01:17] matt_c_ has joined the channel
[01:18] gerred has joined the channel
[01:20] hsuh has joined the channel
[01:26] bradleymeck has joined the channel
[01:26] bradleymeck: isaacs did that kill it today?
[01:26] isaacs: bradleymeck: no, but it made it trickier to prune out some invalid data that could have perhaps been contributing to it
[01:26] bpot has joined the channel
[01:27] isaacs: bradleymeck: so, somehow, the jsregistry database managed to work itself into a situation where it was creating a lot of extra work on the server, and lightening happened in the cloud
[01:27] bradleymeck: O-o, ouch, wasnt thinking i guess when i published that, you going to slugify from now on?
[01:27] isaacs: bradleymeck: i just renamed the package to JS-Entities, and put some stricter checking on the server for that and some other issues i found, and did a replicate-cleanup thing
[01:28] isaacs: bradleymeck: well, i'm just gonna have npm complain about it
[01:28] isaacs: slugifying is too magical
[01:28] bradleymeck: i would expect a reject first, but yea
[01:28] isaacs: i used to do that, and it led to a failure in my first ever npm demo :)
[01:28] isaacs: because it was slugifying mjsunit.runner to mjsunit-runner
[01:28] bradleymeck: hehe
[01:29] bradleymeck: so just plain reject now?
[01:29] banjiewen has joined the channel
[01:31] isaacs: yeah
[01:31] bradleymeck: as a side note, seems i am looking for work if anyone knows of a place hiring
[01:31] isaacs: ohnoes?
[01:32] bruse: if you want to move to sweden and work on a crappy web app for fitness tracking created on top of drupal i've got a job for you
[01:32] bradleymeck: yea, one all nighter too many led to bleh
[01:32] osteele has joined the channel
[01:32] bradleymeck: lol i was hoping it to be node related being in here
[01:33] bruse: i figured :)
[01:33] isaacs: hm... seems like i broke the JS-Entities tarball.
[01:33] bradleymeck: :D
[01:33] isaacs: while you're here, care to republish?
[01:33] bradleymeck: sure one sec
[01:34] bradleymeck: overwrite or new version?
[01:34] isaacs: go ahead and unpublish and then re-publish (after changing the name to JS-Entities, of course)
[01:35] bradleymeck: sure thing
[01:35] isaacs: npm unpublish JS-Entities ; npm publish 
[01:35] isaacs: that'll blow it all away and then publish the new version
[01:35] creationix: JimBastard: synth fun http://creationix.com/synth/
[01:35] creationix: hook it to some real-time node server for acoustic fun
[01:37] voodootikigod_ has joined the channel
[01:38] bpot_ has joined the channel
[01:38] isaacs: bradleymeck: it's train time, but i'll be on later, probably.  if you have any issues, lmk then, or tell ircretary to tell me.
[01:39] bradleymeck: isaacs http://gist.github.com/610810
[01:39] bradleymeck: sure
[01:39] isaacs: bradleymeck: ha, you created it as yourself,not as the service
[01:40] isaacs: just a sec...
[01:40] bradleymeck: woah now im confused
[01:40] isaacs: yeah... um... hm.
[01:40] isaacs: also, i can't add you, becasue it keys off the email as well as the name.
[01:40] isaacs: lolz
[01:40] bradleymeck: XD
[01:40] bradleymeck: nice thats interesting
[01:40] bradleymeck: i can swap out to the other comp
[01:40] bradleymeck: ill fix it in a sec
[01:40] isaacs: i'd cp your .npmrc to .npmrc.service or something,a nd then npm adduser to auth as you
[01:41] isaacs: i should let multiple users share an email address, though.
[01:41] isaacs: that's a bug
[01:41] dipser: can i broadcast to a list of clients with socket.io?
[01:42] dipser: the list would be a clientID
[01:42] a_meteorite has joined the channel
[01:43] bradleymeck: an array of clients? arr.forEach(function(client){client.send(x)})
[01:44] dipser: will try that, could work
[01:46] voodootikigod_ has joined the channel
[01:47] ryah: so. i was thinking.
[01:47] ryah: what if we dust off this patch: http://codereview.chromium.org/391068
[01:48] ryah: it's kind of ideal.
[01:48] voodootikigod_ has left the channel
[01:48] bradleymeck: generic blobs instead of buffers?
[01:48] dguttman has joined the channel
[01:48] ryah: that is: allocate buffers in the damn v8 heap
[01:48] osteele has joined the channel
[01:48] creationix: think that might help with buffer performance?
[01:49] ryah: i know v8 doesn't want to expose use to the raw memory in there - but - fuck them
[01:49] ryah: we can float it
[01:49] bradleymeck: i think its legit as long as they are subject to gc and length checking
[01:49] ryah: i think it will be pretty fast
[01:49] bradleymeck: i mean ppl do crazy crap with strings already to emulate binary data
[01:50] creationix: as long as v8 doesn't move it on you mid access or fragment it right?
[01:50] langworthy has joined the channel
[01:50] ryah: v8 is single threaded, so it won't
[01:51] ryah: but you can't assume that object to be in the same place next time you ref it
[01:51] pquerna: right
[01:51] bradleymeck: well with handles we cant assume that right now anywho
[01:51] creationix: right, so you can't fs.write a huge buffer unless it's all sendable at once
[01:51] pquerna: and if you are doing out of main-thread IO
[01:51] pquerna: you need to memcpy()
[01:52] ryah: yeah...
[01:53] ryah: which is annoying
[01:53] Tim_Smart: Right, done my routine vim cleanup.
[01:53] ryah: could get a lock on the vm
[01:53] ryah: perhaps
[01:53] creationix: so question, what does happen if I try to fs.write a 1mb buffer?  Obviously the program isn't going to block.  The event will continue running while the background thread flushes the buffer to disk?
[01:54] gf3 has joined the channel
[01:54] ryah: a lock on the gc that is
[01:54] ryah: or just the compact phase
[01:54] creationix: hmm, but when would you release it?
[01:54] creationix: in an I/O heavy program
[01:55] ryah: yeah - obviously it leads a bit to be desired...
[01:55] dannycoates has joined the channel
[01:55] Tim_Smart: sendfile <3
[01:56] creationix: is there something like sendfile for uploading files?
[01:56] Tim_Smart: Not sure, don't think so.
[01:56] Tim_Smart: Thought you were talking about sending to socket.
[01:56] ryah: uploading files?
[01:56] creationix: network to disk
[01:56] creationix: reverse sendfile
[01:56] ryah: no
[01:56] creationix: still, sendfile is a nice shortcut
[01:57] creationix: I think I'll start using that in connect as soon as I figure out how
[01:57] Tim_Smart: Yeah, problem is, currently you can't send headers + small file in one packet.
[01:58] creationix: so cache small files in in-memory buffers and stream large files via sendfile
[01:58] Tim_Smart: And I think node hold's out on sending file headers straight away.
[01:58] creationix: can sendfile send part of a file? (for range requests)
[01:58] Tim_Smart: s/file/http
[01:58] ryah: creationix: yes
[01:59] Tim_Smart: creationix: Sure. I have some code you can look at (I implemented some middleware for biggie-router, should work with connect)
[01:59] creationix: yeah, I really need to add sendfile support
[01:59] creationix: Tim_Smart: can you link it again
[01:59] Tim_Smart: I got benchmarks too :p
[01:59] Tim_Smart: http://github.com/biggie/biggie-router/blob/master/lib/biggie-router/modules/sendfile.js
[01:59] Tim_Smart: The interesting stuff is at the bottom.
[02:00] creationix: wow, fs.sendfile is nice.  How come it's not documented?
[02:00] benv has joined the channel
[02:01] ajpiano has joined the channel
[02:01] Tim_Smart: creationix: To get headers before the file content, I had to: http://github.com/biggie/biggie-router/blob/master/lib/biggie-router/modules/sendfile.js#L68-69
[02:01] mjr_ has joined the channel
[02:01] Tim_Smart: Which feels a bit hacky, I think pquerna was talking about CORK or something.
[02:02] Tim_Smart: Maybe someone else.
[02:02] Tim_Smart: But that is what apache does.
[02:02] pydroid has joined the channel
[02:02] creationix: what happens if you don't send the empty string?
[02:02] Tim_Smart: Headers come after the file.
[02:02] creationix: oh, is that to force node to flush the headers?
[02:03] Tim_Smart: I think so.
[02:03] creationix: I guess it's not a terrible hack then
[02:03] creationix: maybe a flag on writeHead to flush from there would be better?
[02:03] Tim_Smart: creationix: For some reason it make html5 players work weird though.
[02:04] Tim_Smart: *makes
[02:04] tmpvar has joined the channel
[02:04] creationix: how so?
[02:04] sstephenson has joined the channel
[02:04] Tim_Smart: It just seems to choke a little before playing, which is eliminated when you use write stream.
[02:05] ryah: we'll make this better soon, tim
[02:06] Tim_Smart: Maybe I need to over-ride the chunked encoding or something, I'm all that familiar with the complexities of HTTP
[02:06] Tim_Smart: *not all that
[02:07] Tim_Smart: ryah: Yeah maybe we could do something similar to apache, whatever that CORK stuff is about...
[02:07] voodootikigod_ has joined the channel
[02:07] creationix: maybe sendfile doesn't stream?
[02:08] Tim_Smart: creationix: It is all handled by the kernel...
[02:08] creationix: right, so maybe it's not http chuncked encoding
[02:08] creationix: since node can't see the data
[02:08] Tim_Smart: I'll try that...
[02:08] creationix: I guess stream isn't what I meant, I meant chunked
[02:08] ryah: Tim_Smart: it seems sendfile needs to be handled in the stream and not be a separate thing
[02:09] creationix: it would be neat if there was a way to detect that the source is a fd and the end is a socket
[02:09] ryah: i heard you can even do non-blocking sendfile on freebsd
[02:09] ryah: i wonder if that's true...
[02:09] creationix: ohh, that would be nice
[02:10] ryah: i think we're on the verge of rewriting lib/net.js back into c++ :)
[02:10] creationix: ryah: Tim_Smart: either of you ever worked with gstreamer
[02:10] Tim_Smart: creationix: Well the main thing is checking for EAGAIN http://github.com/biggie/biggie-router/blob/master/lib/biggie-router/modules/sendfile.js#L128-137
[02:10] Tim_Smart: creationix: A little.
[02:10] creationix: it's basically just a series conected streams
[02:10] codelotu1 has joined the channel
[02:11] Tim_Smart: I have used it once or twice with rtmpdump to download ustream streams.
[02:11] codelotu1 has left the channel
[02:11] creationix: Tim_Smart: oh, so it does only accept so much at a time
[02:11] creationix: interesting
[02:11] Tim_Smart: creationix: Just like write()
[02:12] codelotu1 has joined the channel
[02:12] creationix: yeah, node just needs to be aware so it can inject chunked delimiters?
[02:12] creationix: seems fs.sendfile bypasses all the .write stuff completely
[02:13] Tim_Smart: Yes, that is correct.
[02:13] jashkenas has joined the channel
[02:13] creationix: interesting
[02:13] Tim_Smart: maybe HttpServerResponse#sendfile?
[02:13] creationix: ACTION will have to think some more
[02:13] creationix: yeah, that would be nice
[02:13] Tim_Smart: That would be cool.
[02:13] Yuffster_work has joined the channel
[02:13] ryah: Tim_Smart: nah, we should stick it on the actual tcp stream
[02:13] nerdEd has joined the channel
[02:13] Tim_Smart: ryah: Yeah true.
[02:14] creationix: oh HttpServerResponse isn't the actual stream is it?
[02:14] creationix: ryah: but the tcp stream doesn
[02:14] Tim_Smart: ryah: So what is the spec for chunked encoding?
[02:14] creationix: doesn't know about http chunked encoding
[02:14] creationix: I'm no expert, but doesn't it need to insert delimiters
[02:15] derferman has joined the channel
[02:16] Tim_Smart: creationix: I think I showed you a simple benchmark using sendfile, but it is pretty awesome.
[02:16] creationix: I'll bet
[02:17] Tim_Smart: Ah, here it is. http://gist.github.com/570420
[02:17] voodootikigod_: ™™£
[02:20] stephenjudkins has joined the channel
[02:20] creationix: voodootikigod: 
[02:20] sh1mmer has joined the channel
[02:20] creationix: Tim_Smart: yeah 300mb/s isn't bad for streaming
[02:21] creationix: but nginx and apache can both do about 800 on my machine
[02:21] q_no has joined the channel
[02:21] creationix: I should run your bench on my machine too
[02:21] voodootikigod_: creationix: what up
[02:21] ryah: Tim_Smart: spec for chunked enocding?
[02:21] ryah: Tim_Smart: rfc 2616
[02:21] creationix: voodootikigod_: you back in the US yet?
[02:21] Tim_Smart: creationix: The first one is fs.readFile(), then sending the buffer with one write.
[02:21] voodootikigod_: creationix: yea got home last week wednesday
[02:22] voodootikigod_: creationix: you?
[02:22] creationix: Tim_Smart: much better
[02:22] Tim_Smart: creationix: streaming ones are the last two.
[02:22] creationix: voodootikigod_: I got back last monday
[02:22] voodootikigod_: creationix: did you have a good time?
[02:22] ryah: Tim_Smart: here's the quick guide "LENGTH\r\nBODY\r\nLENGTH\r\nBODY\r\n...LENGTH\r\nBODY\r\n0\r\n\r\n"
[02:22] creationix: creationix.com is a simple connect app with just static file serving
[02:22] creationix: voodootikigod_: yep
[02:22] ryah: where length is ascii hex encoded
[02:23] creationix: ryah: so if I knew the length sendfile was about to send, I could do that externally?
[02:23] Tim_Smart: ryah: How do I know how many bytes the kernel will write ahead of time?
[02:23] ryah: Tim_Smart: you don't
[02:23] creationix: I guess you can pick a size and keep sending till that many have sent
[02:23] voodootikigod_: creationix: awesome, dude it was a blast - you dance like a crazy man
[02:23] ryah: sendfile is only going to be useful for identity encoding
[02:23] ryah: creationix: or that
[02:24] ryah: usually if you're sending a file you'll know how much you want to send
[02:24] ryah: so only doing identity isn't really a problem
[02:24] jakehow has joined the channel
[02:25] itissid: creationix: Hey this is another thing the relative links from the page at http://itissid.com:3000/ are not working... The routing seems a bit screwed up... 
[02:25] itissid: I dint notice before...
[02:25] creationix: voodootikigod_: I did see this on the flight over to Europe http://en.wikipedia.org/wiki/StreetDance_3D 
[02:26] creationix: itissid: yeah, I saw that, not sure what's going on there
[02:26] voodootikigod_: creationix: ahh so thats where you learned the moves
[02:27] creationix: voodootikigod_: no, just got in the mood.  I took dance classes my freshman year (10 years ago)
[02:27] boaz_ has joined the channel
[02:27] creationix: ryah: so if I pick a resonable chunk size then the clients can handle it better?
[02:28] creationix: I'll just have to manually resend if my chunk size was too big
[02:28] ryah: creationix: you shouldn't use chunked encoding unless you don't know the lenght
[02:28] Tim_Smart: ryah: creationix: http://github.com/apache/httpd/blob/trunk/server/core_filters.c#L604
[02:28] bentruyman has joined the channel
[02:28] Tim_Smart: That is what apache does.
[02:28] creationix: does chunked encoding break if I saw "10" and then send two 5 length packets?
[02:29] derferman has joined the channel
[02:29] sh1mmer has joined the channel
[02:29] voodootikigod_: creationix: nice
[02:30] voodootikigod_: ok crashing, tag!
[02:30] ryah: creationix: 10 = 16
[02:30] derferman has joined the channel
[02:31] creationix: ryah: fine, assuming I send the length in the proper encoding, but then send the body as two more packets?  is that bad
[02:31] ryah: no - http is over tcp
[02:31] Tim_Smart: So Apache sets NO_PUSH, which uses cork apparently, writes the headers, starts the sendfile, then unsets NO_PUSH, which un-CORKs
[02:32] Tim_Smart: So you get the headers and file in one packet.
[02:32] ryah: Tim_Smart: i think we can do that
[02:33] creationix: nice, so super fast sendfile for small files
[02:33] Tim_Smart: ryah: pquerna said he would give it a shot, but I haven't heard from him for some time.
[02:33] ryah: Tim_Smart: i think it will be done as a larger effort of refactoring net.js
[02:33] Tim_Smart: bravo!
[02:33] Tim_Smart: :)
[02:34] creationix: Tim_Smart: still, I wonder why the html5 players hate your code
[02:34] creationix: are you saying chunked-encoding, but then sending identify and it's confused?
[02:34] Tim_Smart: Well more 'dis-like' than 'hate'
[02:34] codelotu1 has left the channel
[02:35] creationix: or do they really need chunked encoding
[02:35] Tim_Smart: It still works sorta
[02:35] creationix: Tim_Smart: I assume you're not sending the Content-Length?
[02:35] Tim_Smart: creationix: Well, I'm not using chunked at all, but I am sending content-length
[02:35] creationix: hmm, so you're doing it right then
[02:35] Tim_Smart: So I thought node picks that up?
[02:35] creationix: and you support range and head?
[02:35] Tim_Smart: Yeah.
[02:36] creationix: need a better html5 player
[02:36] creationix: ;)
[02:36] Tim_Smart: creationix: Then why does write stream work properly?
[02:37] Tim_Smart: creationix: http://github.com/biggie/biggie-router/blob/master/lib/biggie-router/utils.js#L18-37
[02:37] Tim_Smart: I think that is right...
[02:38] creationix: hmm, so you're setting Content-Length and using node streams?
[02:38] kgf: your README.md has a typo. "Sinitra"
[02:39] Tim_Smart: Thanks.
[02:39] Tim_Smart: creationix: http://github.com/biggie/biggie-router/blob/master/lib/biggie-router/modules/sendfile.js#L60-66
[02:39] MikhX_ has joined the channel
[02:40] noahcampbell has joined the channel
[02:41] ajpiano has joined the channel
[02:41] SvenDowideit has joined the channel
[02:42] mr_daniel has joined the channel
[02:43] WALoeIII has joined the channel
[02:43] dnolen has joined the channel
[02:43] deepthawtz has joined the channel
[02:49] stephenjudkins has joined the channel
[02:54] nerdEd has joined the channel
[02:55] ezmobius has joined the channel
[03:01] dipser_ has joined the channel
[03:02] ginader has joined the channel
[03:04] eisd has joined the channel
[03:13] auser has joined the channel
[03:13] auser: hola
[03:14] steadicat has joined the channel
[03:17] ezmobius_ has joined the channel
[03:21] bpot has joined the channel
[03:23] zpoley has joined the channel
[03:35] mikelsi_ has joined the channel
[03:37] smtlaissezfaire_ has joined the channel
[03:38] tmpvar has joined the channel
[03:38] ezmobius has joined the channel
[03:40] ezmobius has joined the channel
[03:45] ginader1 has joined the channel
[03:46] ezmobius has joined the channel
[03:47] ezmobius has joined the channel
[03:48] ncb000gt has joined the channel
[03:48] jedschmidt has joined the channel
[03:50] jedschmidt: is anyone here getting this error trying to install node on OS X?
[03:50] jedschmidt: http://gist.github.com/610956 /cc ryah
[03:51] WALoeIII has joined the channel
[03:54] creationix: jedschmidt: I compiles v0.2.3 and HEAD earlier today without issue
[03:54] creationix: *compiled
[03:55] jedschmidt: creationix: odd... maybe it's a 10.5 thing?
[03:55] creationix: possibly, did you make distclean
[03:56] jedschmidt: i did 'make clean'
[03:56] charly1 has joined the channel
[03:57] creationix: for ultimate clean, rm -rf the folder and re-clone ;)
[03:58] jedschmidt: creationix: heh, sounds like a feminine hygiene commercial.
[03:58] jedschmidt: i'll head somewhere to plug in and try again.
[03:58] jedschmidt: thanks!
[03:58] creationix: sure thing
[03:59] cloudhead has joined the channel
[03:59] ctp_ has joined the channel
[04:00] mape has joined the channel
[04:05] ezmobius has joined the channel
[04:07] sh1mmer has joined the channel
[04:08] ezmobius has joined the channel
[04:10] unomi: kriszyp: you in?
[04:11] kriszyp: yes
[04:11] unomi: sorted it out
[04:11] kriszyp: ok
[04:11] unomi: just a bit of momentary confusion re how to install http://github.com/kriszyp/persevere-example-wiki
[04:12] benburkert has joined the channel
[04:12] ginader has joined the channel
[04:12] unomi: nodules is happily downloading away
[04:16] Me1000 has joined the channel
[04:20] tpryme has joined the channel
[04:20] stephenjudkins has joined the channel
[04:23] pufuwozu has joined the channel
[04:24] ryah: dang, jed left...
[04:27] softdrink: hrm. previous employer got acquired.
[04:28] softdrink: not sure how i feel about that
[04:28] JimBastard_: did you quit or get fired
[04:28] softdrink: a bunch of us got laid off a few months ago
[04:28] JimBastard_: lol
[04:28] JimBastard_: im sure you did a great job
[04:29] charly1: ibm? :-P
[04:29] JimBastard_: thats why they fired everyone and got aquired
[04:29] softdrink: http://www.marketwatch.com/story/neutron-interactive-acquires-enticelabs-2010-10-04?reflink=MW_news_stmp
[04:29] JimBastard_: you arent a stock holder i take it
[04:29] charly1: huh
[04:29] softdrink: was :P
[04:30] softdrink: oh well. new employer pays my bills and has good benefits *shrug*
[04:30] JimBastard_: im self unemployeed
[04:30] siculars has joined the channel
[04:30] softdrink: now to create a parallel universe in which i have the time to sit down and write the app(s) i want, then merge with this universe and make gobs of dollars.
[04:33] jashkenas: JimBastard: what happened to your last job?
[04:33] JimBastard_: jashkenas: im full time at nodejitsu now
[04:34] JimBastard_: also, the general scheme of things changed over there. i wasnt exactly trying to pair program ruby everyday
[04:34] JimBastard_: still was a great job though
[04:34] ginader1 has joined the channel
[04:35] stephenjudkins has joined the channel
[04:36] hober has joined the channel
[04:39] AAA_awright has joined the channel
[04:43] temp01 has joined the channel
[04:43] crodas has joined the channel
[04:44] tpryme: Anyone here using any of the postgres clients in production with node?
[04:47] dilvie: tpryme: I'm no help, sorry. I recently decided to go with CouchDB for my current project. =)
[04:47] dilvie: thinking of trying Redis for my game project. =)
[04:48] overra has joined the channel
[04:50] mattly has joined the channel
[04:54] jedschmidt has joined the channel
[04:57] jedschmidt: ryah: downloaded libeio from CVS, ./configure'd again, and sent you the config.h. let me know if you need anything else, jah?
[05:02] bratish has joined the channel
[05:04] bratish: Hey, how can I read last line or last few lines from a large file in node.js programmatically? 
[05:04] bratish: any ideas other than using tail command
[05:05] crodas: hi there
[05:05] crodas: I'm having a little issue
[05:05] crodas: fs.writeFile('/tmp/foo', '', function() {});
[05:05] crodas: the function is never called back because I'm trying to create an empty file
[05:06] crodas: is there anyway to fix it? (or another way to create an empty file?)
[05:16] mikeal has joined the channel
[05:25] jchris has joined the channel
[05:30] sonnym: crodas:  if you're sure it's because the file does not exist, you could always require("child_process").spawn("touch", ["/tmp/foo"]);
[05:31] nroot7 has joined the channel
[05:31] crodas: sonnym: thanks :-)
[05:31] crodas: sonnym: I'm pretty sure it is falling because I want to put an empty content (if I put something, even ' ' it works fine)
[05:32] benv has joined the channel
[05:33] sonnym: crodas:  makes sense then.  could be a bug. . . I really don't have a clue what the expected behavior is ;)
[05:33] ph^ has joined the channel
[05:34] crodas: sonnym: me neither, that's why I'm asking
[05:34] crodas: sonnym: thanks for the help
[05:34] nbollom has joined the channel
[05:35] sonnym: crodas:  no problem.  happy noding
[05:36] crodas: sonnym: nodejs rules btw! :-)
[05:37] devkorcvince has joined the channel
[05:39] tav has joined the channel
[05:42] unomi has joined the channel
[05:43] tav has joined the channel
[05:44] JimBastard_: thats odd i just created a couch and nothing happened
[05:44] bratish: any idea for my question guys?
[05:45] techwraith has joined the channel
[05:45] techwraith: Anyone want to help out with a quick haml-js issue?
[05:47] mape: techwraith: Probly better off if you just ask
[05:47] techwraith: Mape: k
[05:48] techwraith: How do I unescape text? Basically need this: "<![CDATA[><script type='text/javascript' src='"+story.permalink+"'.js'></script>]]>" output exactly as is
[05:48] sonnym: bratish:  from the 0.2.0 docs:  An example to read the last 10 bytes of a file which is 100 bytes long: fs.createReadStream('sample.txt', {start: 90, end: 99}); 
[05:48] benburkert has joined the channel
[05:49] sonnym: bratish: so you could us fs.stat to grab the size, then grab the last n bytes pretty simply
[05:50] sonnym: techwraith: if it's the same syntax as rails haml you need !=
[05:50] techwraith: sonnym: Thanks!
[05:50] JimBastard_: where did maushu go
[05:50] JimBastard_: wth
[05:50] path[l] has joined the channel
[05:51] sonnym: techwraith:  http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html#unescaping_html but I think the last time I checked the haml-js syntax was incomplete.  dunno.
[05:51] techwraith: sonnym: Yeah, that's why I thought I'd as (really wish I could switch over to a better template lang)
[05:52] jchris has joined the channel
[05:52] JimBastard_: hey creationix , is there a LIC for http://github.com/creationix/wheat ?
[05:53] creationix: License?
[05:53] JimBastard_: aye
[05:53] creationix: should be MIT
[05:53] creationix: does it not say
[05:53] JimBastard_: i dont think there is one in the repo
[05:53] JimBastard_: wheat has been working out really well over here, id like to re use it i think 
[05:54] creationix: done
[05:54] creationix: http://github.com/creationix/wheat/commit/cb36f6fdf98c140afe848bb68fd0e1f081fdad23
[05:55] JimBastard_: awesome thanks creationix 
[05:55] sonnym: techwraith:  I haven't really looked at the options for templating.  the project I'm working on only has one html file and does everything else with js :)
[05:56] hannesw_ has joined the channel
[05:56] techwraith: sonnym: I like ejs for it's simplicity, but it lacks a lot of helpers, mustache is looking pretty good though
[05:58] nbollom has left the channel
[06:01] ryah: jedschmidt: i don't know what's happening - configure shouldn't give you config.h related to WAF
[06:01] jedschmidt: ryah: yeah, i dunno what's up. rm -rf and git clone for me now, will keep you posted.
[06:01] micheil has joined the channel
[06:02] jedschmidt: ryah: i must be doing something wrong, don't want to bother you too much.
[06:04] ryah: okay
[06:04] ryah: let me know what happens...
[06:05] dannycoates has left the channel
[06:05] bratish: sonnym: thanks... i'll give it a try
[06:07] sonnym: bratish: no problem
[06:08] jedschmidt: ryah: perhaps i was sending you the wrong config.h... which one do you need?
[06:09] jedschmidt: is it /build/debug or /build/default?
[06:13] kojul has joined the channel
[06:14] sonnym: anyone have any experience with node-websocket-client and socket.io?  seems like the client interface times out after ~18 seconds consistently, but when I try in chromium, websockets persist just fine. . .
[06:15] ryah: jedschmidt: i need the one that libeio generates..
[06:16] jedschmidt: ryah: http://gist.github.com/611104
[06:18] micheil: sonnym: hmm..
[06:18] gf3 has joined the channel
[06:18] micheil: sonnym: are you sure it's timing out and not being closed?
[06:18] ryah: jedschmidt: thanks
[06:18] qFox has joined the channel
[06:18] jedschmidt: ryah: np, sorry for misunderstanding.
[06:19] ryah: jedschmidt: old macintosh?
[06:19] sonnym: micheil: I'm getting a "Client n disconnected" message in my logs which is being generated by socket.io
[06:19] micheil: hm..
[06:19] jedschmidt: ryah: OS 10.5.8
[06:19] sonnym: I'm assuming it's a problem on the client side since chromium keeps the sockets open, but that may not be entirely sound
[06:19] antares_ has joined the channel
[06:19] ryah: i guess they added fdatasync in 10.6
[06:20] jedschmidt: d'oh. i guess i should finally upgrade?
[06:20] ryah: nah, we should just not break on missing fdatasync :)
[06:21] micheil: sonnym: do a log of what is being recv'd by node-websocket-client
[06:21] micheil: sonnym: my bet is that your not replying to the heartbeart messages, which in turn tells socket.io the connection is dead, closing it 8000 milliseconds after the first heartbeart is sent
[06:22] micheil: (the first heartbeat is sent at 10,000 milliseconds)
[06:22] sonnym: bingo.  thanks.
[06:22] micheil: sonnym: may I ask why this combination?
[06:22] sonnym: to fix it or to sleep, that is the question :)
[06:22] micheil: sonnym: it's not terrible hard to fix:
[06:22] sonnym: I'm trying to write a game that will scale pretty large. . . need test clients
[06:23] micheil: onmessage = function(evt){ if(evt.data.substr(0,3) == "~h~") ...
[06:23] ryah: jedschmidt: check that you can compile with this fix:
[06:23] ryah: curl http://gist.github.com/raw/611110/a1a2e283528d45edbd4373d0ef51242f4cd7455d/gistfile1.txt | git am
[06:23] ryah: then:
[06:23] ryah: make
[06:23] ryah: in the node folder
[06:23] micheil: sonnym: the best way to get your test clients may be by having two or more servers talking
[06:24] jedschmidt: ryah: "Patch does not have a valid e-mail address."
[06:24] micheil: sonnym: you'll hit a file limit on just one system
[06:24] micheil: (or that's what I've seen, it also becomes really hard to test.)
[06:24] EyePulp has joined the channel
[06:25] sonnym: yeah, I've seen the file limit get hit, but I really just need ~10 clients to see what's going on and make sure things are sane
[06:25] micheil: ryah: do you think it'd be wise to implement websocket message parsing as a readable / writable stream?
[06:25] ryah: jedschmidt: sorry.
[06:25] micheil: sonnym: I can tell you that socket.io should be sane at ~10 clients.
[06:25] ryah: curl http://gist.github.com/raw/611112/168a067e366ca4785df9bf44581e4a2a99db154c/0001-define-HAVE_FDATASYNC-0-for-darwin-10.5-is-missing-i.patch | git am
[06:26] micheil: sonnym: as for your code, I couldn't know.
[06:26] ryah: micheil: how do you mean?
[06:26] ryah: oh, like have the same methods?
[06:26] ryah: *shrug*
[06:26] micheil: well currently the biggest bottleneck in node-websocket-server is the message parsing
[06:26] ryah: it's not really a stream oriented protocol...
[06:26] ryah: or the parsing
[06:27] ryah: hm
[06:27] ryah: that's your biggest bottleneck?
[06:27] micheil: say I start sending messages that are either really large or just really fast in sequence, then the server gets clogged up
[06:27] ryah: that sounds wrong
[06:27] stephank has joined the channel
[06:27] micheil: (it's my guessed bottleneck)
[06:29] micheil: unless it's the writing to the logs that's bottlenecking.
[06:29] micheil: but I'm just outputting messages to stdout
[06:29] sonnym: micheil: thanks for the help.  I'll hopefully have something up and running within a week :)
[06:29] micheil: sonnym: cool.
[06:31] donnex has joined the channel
[06:32] jedschmidt has joined the channel
[06:32] aubergine has joined the channel
[06:33] mattly has joined the channel
[06:34] jedschmidt: ryah: that did the trick. works fine now.
[06:34] matjas has joined the channel
[06:35] ryah: jedschmidt: okay - cool
[06:35] jedschmidt: ryah: many thanks.
[06:35] ph^ has joined the channel
[06:39] ezmobius has joined the channel
[06:39] creationix has joined the channel
[06:41] itissid has joined the channel
[06:44] devkorcvince has joined the channel
[06:45] mikeal has joined the channel
[06:45] devkorcvince: Hello I'm looking for a vim-syntax for jade can anyone help me?
[06:46] hansek_ has joined the channel
[06:46] hannesw_ has joined the channel
[06:47] devkorcvince: hahaha I Love #github it will always show me the path hehehe 
[06:48] micheil: ryah: actually.. I just hit something kinda odd
[06:49] micheil: 249 connections to node-websocket-server
[06:49] micheil: 10 msg / connection.
[06:49] micheil: as soon as I hate that 249 connections, the cpu for the nws process hits 100%
[06:49] hansek_ has joined the channel
[06:49] micheil: memory stays constant at about 48Mb
[06:50] micheil: if I kill the benchmark tool (closing all 249 connections), then the cpu drops back to 0, and memory back to 14Mb.
[06:53] ezmobius has joined the channel
[06:54] bratish: sonnym: just to inform that your suggestion worked :) thanksalot
[06:56] sonnym: that's good to hear :)
[06:57] hassox has joined the channel
[06:57] SamuraiJack has joined the channel
[06:57] spetrea has joined the channel
[06:58] crohr has joined the channel
[07:00] hassox has joined the channel
[07:01] sonnym: micheil: I am quite happily watching two clients play chess against each other in my log file.  thanks a lot :)
[07:01] micheil: sonnym: no worries
[07:01] micheil: I've found an issue I'm stumped on.
[07:02] ngw has joined the channel
[07:02] aubergine has joined the channel
[07:03] sonnym: yeah?
[07:03] micheil: yeah
[07:03] micheil: my server maxes out at 250 connections.
[07:03] sonnym: hmm.  that doesn't sounds right at all
[07:04] micheil: at 250 connections, it just refuses to accept any more connections
[07:04] micheil: I think I'm hitting a limit somewhere.
[07:06] ezmobius has joined the channel
[07:06] micheil: O.,o
[07:06] micheil: ulimit -n 0
[07:06] ngw has joined the channel
[07:08] micheil: ah.
[07:08] micheil: easily doing many more connections then 250 now.
[07:10] daleharvey has joined the channel
[07:10] tsung_ has joined the channel
[07:10] sonnym: from running that ulimit command?
[07:10] konobi: yar
[07:10] stephenjudkins has joined the channel
[07:11] micheil: yeah
[07:11] micheil: oh
[07:11] micheil: shit
[07:11] micheil: don't run ulimit -n 0
[07:11] micheil: that's not what I thought it did.
[07:11] micheil: that says set max file descriptors open to 0
[07:11] micheil: kills stuff.
[07:11] micheil: ulimit -n 1024 is nice
[07:12] micheil: ulimit -n 10000 works
[07:12] ioNull has joined the channel
[07:12] sonnym: haha.  I at first thought 0 would be unlimited.
[07:12] micheil: yeah, same.
[07:12] liesen has joined the channel
[07:12] sonnym: funny that the bash man pages says most systems don't allow you to set it
[07:12] micheil: konobi: any idea how to be notified in node that you've hit the ulimit?
[07:13] ioNull: :)
[07:14] ioNull: Hi, all
[07:14] felixge has joined the channel
[07:14] delapouite has joined the channel
[07:16] DoNaLd`: working anyone here on OrientDB module for NodeJS ?
[07:16] boboroshi_ has joined the channel
[07:16] adambeynon has joined the channel
[07:17] sonnym: I better try to catch some shut eye.  past 3 already. . . happy noding
[07:17] q_no has joined the channel
[07:18] ryah: micheil: the benchmark process hits 100% cpu or the server?
[07:18] micheil: the server
[07:19] micheil: and the server never drops down from 100% until the benchmark process is killed
[07:19] ryah: micheil: you get EMFILE errors when you hit the fd limit
[07:19] micheil: I'm not getting those.
[07:19] ryah: micheil: strange
[07:19] ryah: micheil: that sounds like a bug...
[07:19] micheil: or I only get one, after all the connections have closed
[07:20] derferman has joined the channel
[07:20] ryah: micheil: can you output server.maxConnections and server.connections
[07:20] micheil: hmm..
[07:21] micheil: ryah: they're on http / net servers?
[07:21] ryah: both
[07:21] ryah: yes
[07:21] micheil: k
[07:22] vejs_ has joined the channel
[07:23] micheil: undefined , 249
[07:23] micheil: although.. it's really odd.
[07:24] micheil: http://gist.github.com/611166
[07:24] micheil: the numbers are out of sync.
[07:24] rvanrooy has joined the channel
[07:24] viktors has joined the channel
[07:26] V1 has joined the channel
[07:26] micheil: V1: found one of the problems. ulimit -n
[07:27] ryah: micheil: hm
[07:27] micheil: I'd expect the number to be changing gradually, but it just spikes
[07:28] martin-g has joined the channel
[07:28] V1: That is interesting
[07:28] micheil: the other number Manager: Attached: 62822, 16
[07:28] micheil: the 16 is number of clients the connection manager has connected
[07:28] micheil: bbiam, coffee.
[07:30] vejs_ has left the channel
[07:30] ryah: micheil: i guess it's because it has accepted all the connections
[07:30] ryah: but the handshake hasn't been done yet
[07:31] ryah: server.connections increases after accept()
[07:31] ryah: but you're not printing it until after the handshake (i bet)
[07:31] V1: Shouldn't handshaking take place in the node core btw?
[07:32] ryah: no
[07:33] V1: It would certainly make it easier for users to create applications around sockets without having to re-invent the wheel each time.
[07:34] pquerna: what do you mean by 'handshaking'?
[07:34] virtuo has joined the channel
[07:36] hannesw has joined the channel
[07:39] Tim_Smart: dipser: Hey. What was that issue you had about a number being 0? (with biggie-orm)
[07:39] ryah: he means socket-io upgrade headers
[07:40] ryah: s/socket-io/websocket/
[07:40] V1: pquerna: http upgrade headers for websocket connections
[07:41] pquerna: oh. that doesn't belong in the low level http client or server.
[07:41] micheil: ryah: yeah
[07:41] pquerna: higher level interface is meh, cus really upgrade is only used for like 2-3 things, websocket being the main one people care about today.
[07:41] micheil: that'd be right that.
[07:42] V1: depends, it just another request "type"
[07:42] pquerna: s/meh, maybe it could go in, but not the low level api/
[07:42] felixge: pquerna: proxying ssl connections also uses 'upgrade'
[07:42] cnu has joined the channel
[07:42] micheil: websockets are fine in a library.
[07:42] pquerna: felixge: huh? you mean ssl upgrade inside http? which is only used by printers pretty much?
[07:42] micheil: we do have the low-level http upgrade api, which does as much as it should
[07:42] micheil: but things like websockets should stay out of core.
[07:43] micheil: they are too unstable still.
[07:43] felixge: pquerna: no, if you're writing a http proxy server
[07:43] micheil: well, not unstable, just not stable in specification
[07:43] pquerna: oh, you mean CONNECT?
[07:43] felixge: pquerna: yeah
[07:44] martin-g has left the channel
[07:44] felixge: pquerna: anyway, I think it is fine as it is
[07:44] Tim_Smart: felixge: How is the mysql client going? I have been playing with protocol parsing performance lately...
[07:44] pquerna: connect: doesn't use upgrade headers does it?  I thought you just gave connect, proxy server then gave you a raw-ish tcp proxy
[07:46] ryah: has the same function as upgrade, he means
[07:46] felixge: Tim_Smart: going very well
[07:47] felixge: pquerna: yeah, I don't think it sends an upgrade header, but I think node exposes it through the same event in the API
[07:47] felixge: pquerna: because it is basically the same thing
[07:47] felixge: Tim_Smart: any findings yet?
[07:47] Tim_Smart: felixge: Nice, I learnt quite a bit while making a client for redis, which is a lot simpler than mysql though.
[07:47] ryah: is httpbis doing anything to simplify that mess?
[07:48] matjas has joined the channel
[07:48] felixge: Tim_Smart: I thought the reddis protocol was recursive? That would make it more difficult I think?
[07:48] ryah: i think a sane http subset would be a good spec
[07:48] Tim_Smart: felixge: Yeah, but only recursive to one level.
[07:49] pquerna: ryah: http://tools.ietf.org/html/rfc2817#section-5.2
[07:49] Tim_Smart: So you can hard code that in.
[07:49] felixge: Tim_Smart: oh, I see.
[07:49] felixge: Tim_Smart: the mysql protocol is very simple as well I think
[07:49] Tim_Smart: OK, I haven't looked.
[07:49] felixge: Tim_Smart: it's just a lot of work, and some stuff is very poorly documented
[07:49] pquerna: http://trac.tools.ietf.org/wg/httpbis/trac/wiki
[07:49] felixge: Tim_Smart: http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol
[07:49] pquerna: i dunno, its better than it was.
[07:50] felixge: Tim_Smart: the main thing is decoding multiple bytes using little endian
[07:50] felixge: Tim_Smart: everything else is kind of repetitive
[07:50] felixge: Tim_Smart: I do however lay it out with very little abstractions in my parser to keep performance high
[07:51] Tim_Smart: Cool cool.
[07:52] micheil: felixge, Tim_Smart: these are both being developed in the open, right?
[07:52] Tim_Smart: micheil: http://github.com/Tim-Smart/node-redis/blob/master/parser.js
[07:52] felixge: micheil: http://github.com/felixge/node-mysql/blob/master/lib/mysql/parser.js
[07:53] micheil: I'm just thinking of rewriting the parse in node-websocket-server, so it's a bit nicer.
[07:53] Tim_Smart: felixge: Just things like optimizing for the common use case, using user-land buffer methods where appropiate.
[07:53] Tim_Smart: The mains things I came across anyway.
[07:54] micheil: Tim_Smart, felixge: both these are both read/write parsers, yes?
[07:54] felixge: micheil: what is a write parser?
[07:54] micheil: in the sense that it parsers data being written to a socket
[07:54] aliem has joined the channel
[07:54] micheil: or are these just on data coming in?
[07:54] ioNull has joined the channel
[07:54] Tim_Smart: micheil: Just data coming in.
[07:54] micheil: okay
[07:55] felixge: micheil: yeah
[07:55] Tim_Smart: felixge: I guess this is where all the traffic is: http://github.com/Tim-Smart/node-redis/blob/master/parser.js#L145-206
[07:57] Faustie has joined the channel
[07:57] Tim_Smart: felixge: And I switched state identifiers to strings, and got some more performance. Lots of little things :p
[07:57] micheil: how are you two handling utf8 stuff?
[07:58] micheil: or, rather ascii
[07:58] Tim_Smart: micheil: All the data is kept as buffers.
[07:58] micheil: okay
[07:58] micheil: Tim_Smart: also, http://github.com/Tim-Smart/node-redis/blob/master/index.js#L8
[07:58] jetienne has joined the channel
[07:58] micheil: double semi-colon
[07:59] Tim_Smart: Haha, nice.
[07:59] Tim_Smart: Doesn't break anything, but is ugly.
[07:59] digitalspaghetti: DOUBLE SEMI-COLON ALL THE WAY
[07:59] digitalspaghetti: WHAT DOES IT MEAN?
[07:59] jesusabdullah: IT'S SO BEAUTIFUL
[08:00] micheil: heh
[08:00] felixge: Tim_Smart: strings are faster than INT constants?
[08:00] Tim_Smart: felixge: Yeah, something weird about switch statements, and having property lookups in them.
[08:00] micheil: that's for this.flag, right?
[08:01] V1 has left the channel
[08:01] Tim_Smart: micheil: Yes.
[08:01] micheil: iirc, switch statements do a toString first, then toValue
[08:01] micheil: or something
[08:01] felixge: Tim_Smart: seriously?
[08:01] felixge: That's very interesting
[08:01] felixge: and stupid
[08:01] felixge: :)
[08:01] Tim_Smart: felixge: Yeah, I did some crazy benchmarking.
[08:01] felixge: I'll have to benchmark that
[08:01] micheil: I forget where I heard about that one from.
[08:02] Faustie: Hey people, javascript newb here
[08:02] Faustie: Just been doing it since yesterday
[08:02] Faustie: Anyway, I was wondering
[08:02] micheil: Faustie: hi
[08:02] felixge: I'll file a bug report with v8, that's just too stupid if it is true
[08:02] felixge: :)
[08:02] micheil: felixge: haha
[08:02] micheil: felixge: probably wise. I think it's in most JS engines.
[08:02] felixge: micheil: which makes it even more wrong
[08:02] felixge: :)
[08:02] Faustie: Is it possible to use nodejs to get info from a table in a website, that I can use in my own javascript/html page in my own table?
[08:02] micheil: I think the first I heard of something like that was back when I was doing stuff on the mozilla platform.
[08:03] Faustie: Basically I want to copy over and display a table from an external website
[08:03] ryah: Tim_Smart: interesting
[08:03] micheil: Faustie: look up YUI 3, Dav Glass and the YUI Cinema
[08:03] felixge: Faustie: look at apricot
[08:03] felixge: Faustie: http://github.com/silentrob/Apricot
[08:03] micheil: Faustie: also, JSDom
[08:03] ryah: we should check out the code that generates the switch
[08:03] Tim_Smart: felixge: It couldn't have been that bad though.
[08:03] felixge: ryah: sounds like quite a journey into v8 land
[08:03] ryah: probably does a nice jump table for symbols
[08:04] Tim_Smart: It was just me being stupidly insane,
[08:04] Tim_Smart: probably*
[08:04] ryah: Tim_Smart: were your integers widely spaced?
[08:04] markwubben has joined the channel
[08:04] Faustie: thanks guys, i'll take a look :)
[08:04] Tim_Smart: ryah: I declared them with a i++, so only by 1.
[08:05] micheil: I have always heard of if/else statements being faster then switch/case
[08:05] cheeaun has joined the channel
[08:05] Tim_Smart: micheil: Only in some cases, I tried.
[08:05] micheil: I've never benchmarked it though
[08:06] ryah: Tim_Smart: http://github.com/ry/node/blob/d59512f6f406ceae4940fd9c83e8255f0c03173b/deps/v8/src/ia32/full-codegen-ia32.cc#L619-692
[08:06] felixge: I mean it all depends on how fast of a difference we're talking about here
[08:06] felixge: but anything making a Mhz difference would be exciting
[08:06] felixge: because otherwise it's not going to be the bottleneck for parsing
[08:07] Tim_Smart: felixge: Well I'm talking around 50k ops a second.
[08:07] Tim_Smart: Which you wouldn't do in real life.
[08:07] felixge: Tim_Smart: that's hardly noticeable
[08:08] felixge: Tim_Smart: what do you mean you wouldn't do 50k ops / second?
[08:08] Tim_Smart: felixge: 50k sets a second to a database?
[08:08] pquerna: i do that.
[08:08] Tim_Smart: 100k on a better machine.
[08:08] pquerna: in production.
[08:08] pquerna: against cassandra.
[08:08] felixge: Tim_Smart: You have to compare it to the speed of V8's primitives, not your db
[08:08] Tim_Smart: 50k on my crappy laptop.
[08:08] pquerna: not from a single client, thatd be silly.
[08:09] felixge: Tim_Smart: The main challenge is parsing result sets fast enough
[08:09] ryah: pquerna: against one node?
[08:09] pquerna: no, a decent cluster.
[08:09] pquerna: all these damn monitoring metrics
[08:09] Tim_Smart: felixge: Yes, so it is a pretty stupid optimization, I would admit that.
[08:09] Tim_Smart: The main time sink is with buffers.
[08:10] pquerna: you can do upwards of 5k on a single node i guess, main limit is how you configure the commit logs
[08:10] micheil: hmm.. would it be possible to have buffers work like the V8 objects
[08:10] pquerna: (if you are willing to settle for once a secon fsync, it goes up quickly)
[08:10] micheil: ACTION doesn't know a whole lot about this area, but anyway
[08:11] micheil: in the sense that copy'ing just moves the point and changes / updates memory when the original buffer changes?
[08:11] tjgillies has joined the channel
[08:12] Nacho_ has joined the channel
[08:16] tobeytailor has joined the channel
[08:16] micheil: Tim_Smart: is this right.. http://github.com/Tim-Smart/node-redis/blob/master/parser.js#L170 ?
[08:16] rnewson has joined the channel
[08:16] micheil: the comment on utils.copyBuffer is  Fast copyBuffer method for small buffers.
[08:16] Tim_Smart: micheil: Yeah.
[08:17] jetienne: q. with socket io node, how to disable the console log on the server ?
[08:17] micheil: it looks wrong
[08:17] Tim_Smart: Why does it look wrong?
[08:17] micheil: jetienne: not sure. I'll check.
[08:17] jetienne: thx
[08:17] micheil: because the buffer on L167 is 13 <
[08:18] micheil: that would be a small buffer
[08:18] micheil: then > 13 would be a large buffer
[08:18] micheil:  no?
[08:18] Tim_Smart: micheil: 13 LESS_THAN buffer.length
[08:18] hoodoos: Tim_Smart, can u give link on your redis client please?
[08:18] Tim_Smart: so buffer.length would be larger than 15.
[08:18] Tim_Smart: 13*
[08:18] Tim_Smart: Sorry, remaining.
[08:19] hoodoos: Tim_Smart, lol i see it =)
[08:19] Tim_Smart: Cool.
[08:19] micheil: Tim_Smart: oh. that just looks confusing
[08:19] micheil: Tim_Smart: but yeah, you're right, my bad
[08:19] micheil: :)
[08:20] jetienne: micheil: got it. adding log in options does it. var io = io.listen(server, {log : function(msg){}});
[08:20] micheil: jetienne: I think there's a better way
[08:21] jetienne: http://github.com/LearnBoost/Socket.IO-node/blob/master/lib/socket.io/listener.js#L36 <- micheil i got it from here
[08:21] micheil: actually, yeah, there isn't.
[08:21] micheil: I was more thinking if it did this.options.log && this.options.log(...)
[08:21] micheil: because then you could set it to false and never invoke a noop.
[08:22] jetienne: indeed it would be nicer
[08:22] aubergine has joined the channel
[08:26] derferman_ has joined the channel
[08:27] abiraja has joined the channel
[08:35] necrodearia has joined the channel
[08:36] micheil: Tim_Smart: so, in the end, was using ints or strings in switch/case statements faster?
[08:36] Tim_Smart: micheil: I think it was more the property lookups.
[08:37] micheil: okay
[08:37] Tim_Smart: micheil: I bet using plain ints would be very similar.
[08:37] micheil: instead of doing like case Paser.ON_STATE
[08:37] Tim_Smart: Before I had declared them as contants. E.g. RedisParser.MULTI_BULK
[08:38] micheil: where as now you're doing it all inline, right?
[08:38] Tim_Smart: Yes.
[08:38] micheil: k
[08:38] Tim_Smart: That is where I got a small speed increase.
[08:38] micheil: k
[08:38] Tim_Smart: Only around 20ms per 10k requests though.
[08:38] TomY_ has joined the channel
[08:39] micheil: I'm just trying to work out the best way to clean up node-websocket-server's parser
[08:39] Tim_Smart: or 10, somewhere around there.
[08:39] Tim_Smart: micheil: I can take a look sometime.
[08:39] micheil: because the data received is best received as binary, i think
[08:39] micheil: but then the data that reaches the end developer should be utf8
[08:39] Tim_Smart: micheil: What is the protocol like?
[08:40] micheil: it's got two types of packets that are currently implemented
[08:40] micheil: three in total (draft 76)
[08:40] Tim_Smart: So nothing that complex...
[08:40] micheil: no
[08:40] Tim_Smart: Where is the current parser?
[08:40] caolanm has joined the channel
[08:41] micheil: http://github.com/miksago/node-websocket-server/blob/development/lib/ws/connection.js#L400-435
[08:42] micheil: it's fairly basic.
[08:43] micheil: data's like: 0x00data0xFF
[08:43] ioNull has joined the channel
[08:44] Tim_Smart: micheil: Hmm, are you going through that data byte per byte?
[08:44] micheil: yeah.
[08:44] Tim_Smart: Ouch.
[08:44] micheil: it's the only way to parse it it seems.
[08:44] micheil: because of the start/end packet delimeters
[08:45] micheil: and using things like indexOf(.. ) and such on a buffer would probably not be a good solution
[08:45] Tim_Smart: What are they delimiting? It it possible to have overlapping packets or something?
[08:45] micheil: no idea
[08:45] micheil: the protocol is rather stupid in design
[08:46] micheil: like, there are other solutions, such as: http://github.com/LearnBoost/Socket.IO-node/blob/master/lib/socket.io/transports/websocket.js#L91-106
[08:46] micheil: but that doesn't handle for a broken packet
[08:46] micheil: the current implementation I have seems most robust, if quite slow
[08:46] viktors has joined the channel
[08:46] stagas has joined the channel
[08:47] Tim_Smart: micheil: Well what happens if the data you want to send is larger than a TCP packet?
[08:47] micheil: I have no idea.
[08:47] Tim_Smart: Hmm.
[08:47] micheil: how large can a tcp packet be?
[08:47] javajunky has joined the channel
[08:48] Tim_Smart: It varies, but a few kb
[08:48] micheil: okay..
[08:48] Tim_Smart: I think 40kb was the normal size I encounter when parsing the redis protocol.
[08:48] Tim_Smart: encountered*
[08:49] micheil: what's that in bytes..
[08:49] micheil: 40960?
[08:49] micheil: yeah
[08:49] Tim_Smart: Then when parser gets another incoming buffer, it winds back a step and continues parsing, joining data where it has to.
[08:50] micheil: yeah. I'm using array buffers.
[08:50] cefn has joined the channel
[08:50] micheil: which is probably really slow.
[08:50] Tim_Smart: I'll take a look at the WS spec...
[08:52] micheil: Tim_Smart: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76#section-5.3
[08:52] micheil: should be what you want
[08:52] Tim_Smart: If the spec requires reading byte for byte, then that is really poor design...
[08:52] micheil: it does.
[08:52] spetrea: I'd like to have Firebug in node.js
[08:53] spetrea: and an awesome ide
[08:53] spetrea: although it's not needed :)
[08:53] Tim_Smart: spetrea: node-inspector is pretty decent.
[08:53] liesen has joined the channel
[08:53] micheil: there was talk of using a new packet format, where you do: begin; frame-length; bunch-of-other-stuff; data
[08:53] micheil: Tim_Smart: the spec in the mailing list is being designed to include all kind of crazies.
[08:54] pquerna: you mean it could include binary data.
[08:55] micheil: pquerna: that's been there from the start. 
[08:55] micheil: I'm meaning things like extension mechanisms
[08:55] micheil: compress
[08:55] micheil: erm
[08:55] xla has joined the channel
[08:55] micheil: compression, extensions, etc.
[08:55] mbrochh has joined the channel
[08:55] mbrochh has joined the channel
[08:56] pquerna: ew
[08:56] micheil: like, people what to stream videos to the browser via websockets.
[08:56] micheil: like. 4Gb binary files.
[08:56] pquerna: god
[08:56] micheil: so they claim that websockets should implement compression like gzip
[08:56] Tim_Smart: Hmm.
[08:56] pquerna: why, it should be opaque
[08:56] pquerna: write it in js if you want compression
[08:56] micheil: yeah
[08:56] micheil: but no. not the IETF's crowd.
[08:56] Tim_Smart: It should just be a TCP socket >.>
[08:57] micheil: TCP socket with basic framing.
[08:57] Tim_Smart: With some security.
[08:57] micheil: and that.
[08:57] micheil: basic framing because it makes it slightly nicer.
[08:57] Tim_Smart: micheil: Naw, leave framing up to the server / client.
[08:57] micheil: nup.
[08:57] micheil: because then you'd have to implement a heap more stuff at end-user level
[08:58] Tim_Smart: How you delimit your data is up to you...
[08:58] pquerna: well, i guess this is how the ietf ends up ow it is, no one can agree :)
[08:58] Tim_Smart: Just send the raw packets in.
[08:58] Tim_Smart: :p
[08:58] micheil: it's a basket case, really.
[08:59] pquerna: doesn't matter ,spdy is gonna win anyways.
[08:59] micheil: it's been this steady stream of emails where everythings' like what-if.
[08:59] micheil: hixie actually stepped down from the IETF side of the spec.
[08:59] micheil: he just does the W3C web idl stuff for it now.
[08:59] pquerna: yeah, i heard about that
[09:00] pquerna: who is running it now?
[09:00] micheil: no idea.
[09:00] micheil: I've pretty much given up trying to keep up.
[09:00] micheil: like, the things with protocol-level ping/pong, that's pretty nice. I can agree with that.
[09:01] micheil: but protocol-level compression, frame meta-data, etc. no thanks.
[09:01] Tim_Smart: micheil: So basically the fastest way to finding the delimiter, is to run a for loop over the incoming buffer, until you find the corresponding char code.
[09:01] Tim_Smart: Urgh.
[09:01] teemow has joined the channel
[09:02] micheil: Tim_Smart: are you going to be about in, say, 1 hours time?
[09:02] Tim_Smart: Yeah.
[09:02] micheil: wait. which timezone are you?
[09:02] Tim_Smart: NZ, +12GMT
[09:02] micheil: oh. yeah./ we had this conversation yesterday :P
[09:02] micheil: bbl, dinner.
[09:03] saikat has joined the channel
[09:03] stagas has joined the channel
[09:03] pquerna: http://trac.tools.ietf.org/wg/hybi/trac/ticket/23
[09:03] pquerna: :-/
[09:04] Tim_Smart: Ooo. vim 7.3 got a new Javascript syntax definition.
[09:05] Tim_Smart: Took a few tweaks to make it nice... but I'm happy.
[09:05] Tim_Smart: Hmm fail.
[09:05] Tim_Smart: (That ticket)
[09:10] murphy has joined the channel
[09:14] xla has joined the channel
[09:18] jetienne: spdy is getting traction ? i find it surprising that such thing got more and less forgotten... the efficiency is great according to google
[09:22] MikhX has joined the channel
[09:29] stagas: jetienne: so who's gonna make a spdy server? :P
[09:30] jetienne: not me :)
[09:30] jesusabdullah: What's spdy?
[09:30] stagas: jesusabdullah: http://www.chromium.org/spdy/spdy-whitepaper
[09:31] jesusabdullah: huh
[09:31] stagas: :P
[09:33] stagas: it needs client code
[09:33] jetienne: it has very good result vs packet loss. so should be much faster on mobile
[09:35] pquerna: jetienne: goog is iterating on the spec
[09:35] ooooPsss has joined the channel
[09:35] pquerna: draft 3 should be out 'soon'
[09:36] pquerna: chrome implements it
[09:36] pquerna: and then someday goog will just turn it on for their webervers to make gmail and search faster :P
[09:36] saimon_: Hi all...Does npm have a concept similar to bundler's Gemfile. i.e. a file where a project can list it's dependencies form npm to install in one command?
[09:36] hellp has joined the channel
[09:37] jetienne: pquerna: nice :p
[09:37] stagas: pquerna: is it all or nothing? can you serve in both simple http and spdy and have the client decide?
[09:37] stagas: or the server
[09:38] pquerna: client decides;  
[09:38] pquerna: spdy is all wrapped in ssl anyways
[09:38] micheil: isn't it all wrapped in tls?
[09:38] micheil: not ssl.
[09:38] micheil: I thought one was more updated then the other or something.
[09:39] pquerna: sorry, i use the word interchangably
[09:39] micheil: ah, okay
[09:39] pquerna: ssl 3.0 is very very near what tls 1.0 is
[09:39] micheil: Tim_Smart: ping.
[09:40] Tim_Smart: pong.
[09:40] pquerna: tls 1.1 is beyond what ssl does for sure, but meh, most people are still using tls 1.0
[09:40] Tim_Smart: micheil: So http://github.com/LearnBoost/Socket.IO-node/blob/master/lib/socket.io/transports/websocket.js#L91-106 assumes the data isn't malformed?
[09:40] micheil: yeah
[09:40] micheil: assumes that the data is one complete packet.
[09:41] Tim_Smart: Oh right.
[09:41] micheil: or multiple packets in one tcp frame
[09:41] micheil: where as the nws one is closer to a stream
[09:41] Tim_Smart: micheil: So that is possible, multiple packets in one frame?
[09:41] micheil: I guess it could
[09:41] Tim_Smart: Well, multiple frames in one packet.
[09:41] MikhX has joined the channel
[09:41] micheil: depends if a client buffers the messages before sending
[09:42] Tim_Smart: OK.
[09:42] micheil: like, it could very well be possible to have this as a TCP packet:
[09:42] micheil: 0xF0test0x000xF0test20x00
[09:43] micheil: just as you could get | 0xF0test... | ...0x00 0xF0 test 0x00 |
[09:43] micheil: (where pipe represents tcp frame boundary)
[09:43] Tim_Smart: Yeah, seems like a native memory scanning function would be a help here.
[09:43] Tim_Smart: But calling into c++ isn't cheap.
[09:43] micheil: Tim_Smart: lame-mans terms there?
[09:44] micheil: what do you mean by native memory scanning function?
[09:44] Tim_Smart: micheil: There are mem* functions in C that lets you find the index of a certain byte in memory.
[09:44] micheil: uh, okay, sounds nice
[09:45] Tim_Smart: So you would just scan the allocated section of memory for that particular buffer. But again, C++ calls aren't cheap :)
[09:45] Tim_Smart: And reading 3 bytes etc would be faster with a ecma for loop.
[09:46] micheil: hmm..
[09:46] micheil: "And reading 3 bytes etc would be faster with a ecma for loop" ?
[09:46] Tim_Smart: And because there is no way to tell if the upcoming data is 3 bytes or 100k bytes is stupid.
[09:46] Tim_Smart: *the spec is stupid.
[09:47] micheil: so, what, instead of looping over every byte in the buffer, loop over every three.
[09:48] Tim_Smart: Well 3 bytes was just an example, reading three bytes one at a time with a for loop would be faster than the C call.
[09:48] micheil: oh, right
[09:48] hassox has joined the channel
[09:49] Tim_Smart: And considering *most* websocket apps send lots of small data packets, you might as well stick with the for loop.
[09:49] micheil: yeah
[09:50] micheil: I think average packet size would be about < 1 Kilobyte
[09:50] Tim_Smart: :/. 1kb just to send an OK message?
[09:50] micheil: I mean, 1 kilobyte is 1022 chars of data.
[09:51] micheil: so that's massive.
[09:51] Tim_Smart: OK.
[09:51] Tim_Smart: That is pretty big for simple status updates.
[09:51] micheil: use say, socket.io as an example.
[09:52] micheil: ~j~{"evt":"mouseMove","data":[546,642]}
[09:53] micheil: or something.
[09:53] Tim_Smart: micheil: It seems socket.io uses strings, and a simple .split call
[09:53] micheil: yeah
[09:54] Tim_Smart: Converting the buffer to a string cost quite a bit, so you could gain something there...
[09:54] micheil: and with messages being less than .5 kilobytes in size, there could easily be say 60-80 messages per tcp frame.
[09:54] micheil: well, the data at the end-developer has to be utf8 anyway.
[09:54] micheil: socket.io makes all data received a utf8 string
[09:54] Tim_Smart: micheil: But surely, if a client only want to send a message every 100ms, then it won't buffer them.
[09:54] micheil: yeah
[09:54] Tim_Smart: *wants
[09:54] micheil: it'd flush immediately
[09:55] dgathright_ has joined the channel
[09:56] Throlkim has joined the channel
[09:56] Tim_Smart: micheil: Well, I guess this means you will have to experiment... Send message as fast as you can to the server from chrome or something, and see if it squashes the requests together.
[09:56] Tim_Smart: messages*
[09:56] micheil: hmm..
[10:04] bratish has left the channel
[10:04] matjas has joined the channel
[10:04] stalled has joined the channel
[10:06] omarkj has joined the channel
[10:11] brainfck` has joined the channel
[10:19] MikhX has joined the channel
[10:19] ivanfi has joined the channel
[10:37] liesen has joined the channel
[10:40] cefn has left the channel
[10:41] path[l] has joined the channel
[10:42] agnat has joined the channel
[10:43] V1 has joined the channel
[10:44] mape: saimon_: yes, the package.json file
[10:44] saimon_: mape: ok cool..I'll investigate further..thanks
[10:45] mape: np
[10:45] ollie has joined the channel
[10:47] V1: @_@ soap parsing in node SUCKS
[10:47] stride: soap parsing sucks everywhere?
[10:47] V1: Who ever invented SOAP should be stabbed with 10 blunt knives >_<
[10:48] V1: stride: At least there are people who created a SOAP parsing library before so we can share the joy of there tears, there isn't any SOAP library in node.. 
[10:49] stride: :)
[10:49] codelotus has joined the channel
[10:50] V1: Atleast once I got soap parsing done, we can deploy our app
[10:52] stride: last time I had to deal with soap included some of this weird XML Encryption and signatures stuff. somehow I doubt I'd like to implement that myself
[10:53] stride: I think that was the only time I really liked those configuration-heavy Java monsters
[10:53] V1: and handshakes dear gawd
[10:54] V1: So much points to consider and not forget. Atleast I got big ass SOAP manual on my desk -_-"
[10:54] rnewson has joined the channel
[10:54] rnewson has joined the channel
[10:54] caolanm: ugh, SOAP
[10:54] SvenDowideit has joined the channel
[10:54] caolanm: hard luck V1...
[10:54] MattJ has joined the channel
[10:55] V1: Thanks.. I guess.... 
[10:55] fermion has joined the channel
[10:55] ekidd has joined the channel
[10:58] V1: I might just my co-worker a poke and have him do it instead. It will be "great" opportunity to learn node.js ;D
[10:58] caolanm: cunning ;)
[10:59] path[l] has joined the channel
[11:00] gregerolsson has joined the channel
[11:01] ekidd has joined the channel
[11:03] path[l] has joined the channel
[11:06] Tim_Smart: micheil: I came up with a little something that keeps everything as buffers.
[11:06] micheil: hmm?
[11:07] Tim_Smart: Just a rough draft: https://gist.github.com/b574e7a0455b996d6b12
[11:07] Tim_Smart: Expect errors and stuff.
[11:08] Tim_Smart: Heh found a syntax error already, my bad.
[11:09] micheil: Tim_Smart: could you walk me through that a little bit?
[11:09] Tim_Smart: OK. When it first enters, state is at HEAD
[11:10] micheil: okay
[11:10] micheil: then it works out if it's a high / low bit packet
[11:10] Tim_Smart: It store the first byte into c_byte, the checks if the most significant bit is set (which I stole from you)
[11:10] micheil: it's the buffer copy stuff I don't get.
[11:10] Tim_Smart: "If /type/ is not a 0x00 byte, then the server may abort" etc.
[11:11] Tim_Smart: It then sets state to SIMPLE
[11:11] sschuermann has joined the channel
[11:11] micheil: if the original buffer length is 10, and I do like: buffer.copy() will that expand the original buffer?
[11:11] Tim_Smart: OK, so you want case SIMPLE explained?
[11:11] micheil: yeah
[11:12] Tim_Smart: Basically if it isn't 0x00, then we can increment the data length by one.
[11:12] agnat has joined the channel
[11:12] Tim_Smart: We do that until we either: a) Run out of data, then we know it continues in the next TCP packet. b) slice out the amount of bytes we need.
[11:13] path[l] has joined the channel
[11:13] Tim_Smart: b) happens when we reach 0x00
[11:14] Tim_Smart: If a) happens, we push the buffer to an array, as it will need to be used later.
[11:14] micheil: this makes a bit more sense when you realise it's slightly recursive
[11:15] micheil: so, should using buffer.copy and keeping stuff as buffers be faster then pushing data into an array and then creating a buffer from that?
[11:15] Tim_Smart: If you have a large amount of bytes yes.
[11:16] Tim_Smart: I think it would break even.
[11:16] Tim_Smart: (For smaller stuff)
[11:16] Tim_Smart: Creating a buffer from an array still goes through a for loop from memory.
[11:16] micheil: keep in mind that the data at the end should be a single utf8 string
[11:16] kjy112 has joined the channel
[11:18] Tim_Smart: micheil: How often do you run into the case where it isn't a utf8 string?
[11:19] micheil: huh?
[11:19] Tim_Smart: I.e. the msb isn't is set.
[11:19] micheil: msb?
[11:19] Tim_Smart: most-significant-bit
[11:19] micheil: oh, right
[11:19] micheil: never.
[11:19] Tim_Smart: Hmm, that seems like a useful part of the spec...
[11:19] micheil: because the msb is always set until browsers implement binary types in js
[11:20] Tim_Smart: OK.
[11:21] herbySk has joined the channel
[11:21] Tim_Smart: Well it would be nice to keep it future proof.
[11:21] micheil: theoretically, node-websocket-server could talk with node-websocket-client using msb off.
[11:21] micheil: so, in binary
[11:22] osteele has joined the channel
[11:22] Tim_Smart: Yeah, otherwise doing everything in strings would be *maybe/most likely* option.
[11:22] Tim_Smart: faster option*
[11:22] Tim_Smart: be the*
[11:22] Tim_Smart: spelling is failing.
[11:23] micheil: hmm..
[11:23] micheil: well, either way, I need to transcode data across to UTF8 at some stage
[11:24] Tim_Smart: Well you can't just go String.fromCharCode(), as that would only work for ascii
[11:24] micheil: and being the framing bytes aren't in UTF8 range, it's better to keep it all as a buffer until I need to emit a full message
[11:24] micheil: exactly
[11:24] micheil: I need to use either the string_decoder or buffers
[11:24] Tim_Smart: So you either start with a string, or you decode a buffer.
[11:25] micheil: but if I start with a string, that would mean setting: stream.setEncoding("utf8")
[11:25] Tim_Smart: 2nd option is the only way for full spec support.
[11:25] Tim_Smart: Yes, it would.
[11:25] micheil: in which case the data my packet parser is getting will.. yeah
[11:25] micheil: which wouldn't work with the spec
[11:27] agnat has left the channel
[11:28] micheil: what about if I created a string decoder?
[11:28] micheil: so as I read the char, I translated it to utf8?
[11:30] micheil: or would that be slower?
[11:31] micheil: yeah. that'd be slower. I'm thinking.
[11:32] agnat has joined the channel
[11:32] dmcquay has joined the channel
[11:37] Tim_Smart: micheil: Yeah, doing it in one big go would be easier.
[11:37] Tim_Smart: + faster most likely.
[11:37] micheil: because that'd be alloc'ing less buffers
[11:38] Tim_Smart: Well, actually for lots of small stuff, decoding yourself could make sense.
[11:38] Tim_Smart: c++ aren't cheap.
[11:38] Tim_Smart: c++ calls*
[11:38] mbrochh has joined the channel
[11:38] mbrochh has joined the channel
[11:39] smtlaissezfaire_ has joined the channel
[11:40] micheil: yeah
[11:40] micheil: didn't felix write a utf8 streaming parser?
[11:43] agnat has joined the channel
[11:43] pandark_ has joined the channel
[11:48] boaz_ has joined the channel
[11:49] pandark_ has joined the channel
[11:54] agnat has left the channel
[11:55] mikew3c has joined the channel
[12:02] overra has joined the channel
[12:03] ysynopsis has joined the channel
[12:04] ysynopsis1 has joined the channel
[12:05] ysynopsis1 has left the channel
[12:10] smtlaissezfaire_ has joined the channel
[12:11] dnolen has joined the channel
[12:11] adambeynon has joined the channel
[12:15] daleharvey has left the channel
[12:16] ysynopsis has joined the channel
[12:18] Tim_Smart: micheil: You can actually beat using string in the simplest use case.
[12:18] Tim_Smart: strings*
[12:18] micheil: hmm?
[12:19] Tim_Smart: With no error checking etc.
[12:19] Tim_Smart: I'll do a gist benchmark.
[12:19] micheil: k
[12:21] mAritz has joined the channel
[12:22] bradleymeck has joined the channel
[12:23] Tim_Smart: micheil: Only if the data stays as buffers though ;)
[12:23] Tim_Smart: https://gist.github.com/fe6d03ae32b5594b2606
[12:25] xla_ has joined the channel
[12:27] hjjaa has joined the channel
[12:29] micheil: Tim_Smart: at any rate, the ideas you've put forward are far better then the current implementation.
[12:30] Tim_Smart: micheil: :) Updated the gist - had a couple errors.
[12:32] mAritz: so, what do you guys think about the use of global? every other language i know (including browser js) tries to abolish this, but it seems to be the best way for some things in node.js. (like sharing models in mvc environments)
[12:33] bradleymeck: mAritz i think global causes many gc problems and should be avoided like plague
[12:34] mAritz: even when used for objects that shouldn't even be gc'ed because they are virtually always in use?
[12:34] bradleymeck: instead of using global why not have a listing of all the models in a require module
[12:35] mAritz: and then require that file again in every file that wants to use one of the models? seems a little not DRY to me
[12:35] bradleymeck: mAritz no they would act as if always in use. but even then it exposes a behavior that could allow name collision, and after name collision you still get possible lookup collision
[12:35] bradleymeck: DRY applies to individual sections not a global system generally
[12:36] bradleymeck: ie. CSS is not dry because you repeat yourself many times in a file
[12:36] bradleymeck: but if you have 2 files that repeat eachother while being independant. it is dry
[12:36] Tim_Smart: mAritz: I share models on my orm, by registering them with a function.
[12:36] Tim_Smart: It then stores them on a hash for association lookups etc.
[12:37] bradleymeck: thats an idea, a registry function
[12:37] Tim_Smart: s/on/in
[12:38] mAritz: okay, what's the upside then of having a lookup function over just putting the models in exports.models[modelname] in a models.js file?
[12:40] Tim_Smart: Nothing really.
[12:40] bradleymeck: you could share the registry at runtime and change the modules loaded at runtime is about it
[12:40] micheil: hmm..
[12:40] Tim_Smart: For an ORM, you kinda need it, to add the helpers.
[12:41] micheil: heh.. Object Relation Manager.. 
[12:41] micheil: Tim_Smart: any ideas how the original would benchmark?
[12:41] Tim_Smart: micheil: It isn't far off :)
[12:42] Tim_Smart: Couple 100 ms
[12:42] Tim_Smart: But you have error checking etc.
[12:42] micheil: Tim_Smart: yeah. I'm just saying' you have a manager that gets shared around
[12:42] micheil: like node-websocket-server
[12:42] Tim_Smart: My for loop with a switch statement was pretty slow, so ignore that one.
[12:43] Tim_Smart: Mainly the protocol isn't complex enough for that.
[12:44] ysynopsis has left the channel
[12:45] micheil: Tim_Smart: uhh..
[12:45] micheil: node-websocket-server node benchmarks/parsers.js                                                                                                   development*
[12:45] micheil: buffers 939
[12:45] micheil: original 386
[12:45] micheil: string 771
[12:45] Tim_Smart: Heh, different machine, different results...
[12:46] micheil: Tim_Smart: you try it. https://gist.github.com/43addbd673abbdb5422d
[12:46] micheil: because if that's so, my original implementation is far faster..
[12:46] aliem has joined the channel
[12:46] micheil: (If I'm reading that right.)
[12:47] hjjaa has joined the channel
[12:48] micheil: smallest number is fatest, right?
[12:49] Tim_Smart: micheil: How come you parser function returns undefined?
[12:49] micheil: :/
[12:50] micheil: they all return undefined.
[12:51] micheil: node-websocket-server node benchmarks/parsers.js                                                                                                   development*
[12:51] micheil: original 395
[12:51] micheil: undefined
[12:51] micheil: buffers 986
[12:51] micheil: <Buffer 74 65 73 74>
[12:51] micheil: string 801
[12:51] micheil: test
[12:51] micheil: wtf.
[12:52] Tim_Smart: :p
[12:52] Tim_Smart: That is the right buffer for 'test'
[12:52] saimon_ has joined the channel
[12:53] micheil: yeah
[12:53] micheil: but mine should certainly be working
[12:54] industrial has joined the channel
[12:54] industrial: Is there an easy way of looking at a file and re-running node if the modification time changes on *nix?
[12:55] Akufen has joined the channel
[12:55] Akufen has joined the channel
[12:57] Tim_Smart: For anyone who want to try a super fast redis ORM http://github.com/biggie/biggie-orm/commit/9804e0ebcb9120d4b02baecc65d7608e14096ba4
[12:57] Tim_Smart: Hmm http://github.com/biggie/biggie-orm
[12:58] kriszyp has joined the channel
[12:58] Tim_Smart: I need to sleep I think.
[12:58] Anti-X has joined the channel
[12:58] Tim_Smart: I can't paste - and spell - right.
[13:00] murphy has joined the channel
[13:02] Tim_Smart: micheil: You might want to init order as 0...
[13:02] spetrea: can I write like  a server and test it with nodify at http://del-fuegos.no.de
[13:02] spetrea: ?
[13:02] micheil: Tim_Smart: I am.
[13:02] Tim_Smart: You weren't in the gist.
[13:02] spetrea: or do I need to install it locally ?
[13:02] micheil: now I am.
[13:04] micheil: Tim_Smart: that should be wroking. I'm confused.
[13:04] Tim_Smart: buffers 1241
[13:04] Tim_Smart: original 9902
[13:04] Tim_Smart: string 1318
[13:04] Tim_Smart: That is what I get.
[13:05] micheil: yeah. that's not working.
[13:05] Tim_Smart: https://gist.github.com/633ee9901677824b0afc
[13:06] micheil: is Buffer always loaded?
[13:06] Tim_Smart: It's global.
[13:06] micheil: ffuuu.
[13:06] Tim_Smart: Well, I'm on 0.3.x
[13:06] micheil: I've been doing: Buffer = require("buffer").Buffer
[13:07] Tim_Smart: It hasn't always been global though.
[13:07] micheil: node-websocket-server node benchmarks/parsers.js                                                                                                   development*
[13:07] micheil: buffers 852 test
[13:07] micheil: original 8750 tes
[13:07] micheil: erm
[13:07] micheil: yeah
[13:07] Tim_Smart: string?
[13:07] micheil: yeah
[13:07] davidsklar has joined the channel
[13:07] micheil: it was the almost same as buffers
[13:07] Tim_Smart: OK.
[13:08] Tim_Smart: What happens if you return pkt directly?
[13:08] micheil: not sure.
[13:08] micheil: wtf. did you chance anything in origParser?
[13:08] micheil: *change?
[13:09] micheil: node-websocket-server node benchmarks/parsers.js                                                                                                   development*
[13:09] Tim_Smart: Yeah, the msb check.
[13:09] micheil: buffers 873 test
[13:09] micheil: original 1048 test
[13:09] micheil: string 687 test
[13:09] micheil: returning a buffer
[13:09] Tim_Smart: What node version are you on?
[13:11] mAritz: Seriously guys? 4 months ago I was looking for a redis orm. Didn't find one. So I wrote my own and now everyone else writes one too? Are you mocking me? :(
[13:11] bradleymeck: XD
[13:12] bradleymeck: nope, just getting time
[13:12] micheil: haha. Just managed to beat buffers.
[13:12] Tim_Smart: mAritz: I never say your one.
[13:12] bradleymeck: did nodejobs just stop?
[13:12] Tim_Smart: say/saw
[13:12] micheil: 0.3.0-pre
[13:12] mAritz: it's in the modules wiki page :(
[13:12] mAritz: i'm sure yours is better though, that's the sad thing.
[13:13] ekidd has joined the channel
[13:13] mAritz: http://github.com/maritz/nohm
[13:13] Tim_Smart: Ah I think I did look at that briefly.
[13:13] Tim_Smart: And I didn't like the DSL or something.
[13:14] mAritz: hrmph
[13:15] Tim_Smart: mAritz: This sort give you an idea of biggie: http://github.com/biggie/biggie-orm/blob/master/test/associations.test.js
[13:15] mAritz: good thing i didn't start using it on big projects yet so i can at least still switch to yours.
[13:15] Tim_Smart: sort of gives*
[13:16] Tim_Smart: I benched mine against rapid, but not against yours...
[13:16] Tim_Smart: That will have to come later ;)
[13:17] mAritz: i don't think you have to try that. performance was the least of my worries :D
[13:17] Tim_Smart: Haha, you might have bumped into it by accident :p
[13:17] mAritz: ?
[13:18] Tim_Smart: Well, you weren't concerned about speed, but you might have got it fast anyway.
[13:18] nerdEd has joined the channel
[13:19] mAritz: i don't think so, but we might try a benchmark some time... why not? maybe mine isn't that bad after all. ^^
[13:19] micheil: Tim_Smart: the slow part of original was the conversion of an array of data to a buffer to a utf8 string.
[13:19] Tim_Smart: micheil: Yup.
[13:19] micheil: that said, I think one loop is better then two.
[13:20] stagas has joined the channel
[13:20] Tim_Smart: micheil: Not if multiple element in one packet is commonplace.
[13:20] Tim_Smart: Which is why I did it.
[13:20] micheil: hm, well, yeah, I don't know about that case.
[13:20] siculars has joined the channel
[13:21] Tim_Smart: I'm not either.
[13:21] Tim_Smart: (Not sure about that case)
[13:21] micheil: I might ask the pusherapp guys.
[13:21] Tim_Smart: OK.
[13:21] agnat has joined the channel
[13:21] Tim_Smart: Anyway, I'm losing my head. Bed time.
[13:21] mif86 has joined the channel
[13:21] mbrochh has joined the channel
[13:21] mbrochh has joined the channel
[13:22] tobiassjosten has joined the channel
[13:23] micheil: k, good night Tim_Smart, thanks for the help :)
[13:25] fermion has joined the channel
[13:26] micheil: Tim_Smart: do you have any benchmarks with that sliceBuffer function?
[13:26] Tim_Smart: I don't, mjr_ did. Actually, we didn't try slice.
[13:27] shimondoodkin has joined the channel
[13:27] Tim_Smart: But setting the indexed properties on a object to a memory buffer is expensive.
[13:27] Tim_Smart: But new Buffer suffers that as well, so I dunno.
[13:27] micheil: hmm..
[13:28] micheil: just thinking, if I can manage to make use of the "fast slice" in 75% of all requests, say, on messages that are < 250 chars, then that should be good, right?
[13:28] jherdman has joined the channel
[13:28] cferris has joined the channel
[13:29] ben_alman has joined the channel
[13:31] Tim_Smart: micheil: The threshold where native slice is faster is about 20 bytes from memory.
[13:31] micheil: okay
[13:31] Tim_Smart: But I will have to bench that tomorrow.
[13:32] ironfroggy_: anyone have tips on cross-compiling Node?
[13:33] Tim_Smart: mAritz: Does nohm have a way of saving many models at once?
[13:35] mAritz: Tim_Smart: it does save children of objects you're saving if the children were added but not saved yet. :D
[13:35] mAritz: but otherwise, no.
[13:35] Tim_Smart: OK.
[13:35] mAritz: why would you want that though?
[13:35] mAritz: should be a simple wrapper around your normal save operation?!
[13:36] micheil: Tim_Smart: btw. slice buffer totally doesn't work.
[13:36] Tim_Smart: The one I made?
[13:36] trotter has joined the channel
[13:36] Tim_Smart: micheil: I made an error on line 17 on the gist btw
[13:36] micheil: yeah
[13:37] Tim_Smart: remove the target argument.
[13:37] micheil: yeah
[13:38] viktors has joined the channel
[13:39] matt_c has joined the channel
[13:43] hpoydar has joined the channel
[13:46] sonnym has joined the channel
[13:46] Tim_Smart: mAritz: TypeError: Cannot call method 'fn' of undefined. at dispatch (/home/tim/Projects/nohm/lib/conductor/lib/conductor.js:147:27)
[13:46] Tim_Smart: mAritz: So you have save lots of models at once.
[13:47] mAritz: frag me, i hate conductor sometimes :D
[13:47] jtsnow has joined the channel
[13:47] mAritz: what did you try to get that error?
[13:49] Tim_Smart: Try save a model on latest node.
[13:49] davidwalsh has joined the channel
[13:50] Tim_Smart: http://pastie.org/1200717
[13:50] mAritz: hm, haven't tested with 0.2.3 yet
[13:50] Tim_Smart: 0.3.x-pre
[13:51] smtlaissezfaire_ has joined the channel
[13:51] mAritz: oh, okay... haven't tested with any 0.3.x yet either ;D
[13:52] micheil: Tim_Smart:  https://gist.github.com/95e4e929a7ec247bb001#file_results
[13:52] micheil: :D
[13:52] micheil: the new parsers smash the old parser out of the water
[13:52] mAritz: 0.2.3 works
[13:52] rauchg_ has joined the channel
[13:52] micheil: rauchg_: https://gist.github.com/95e4e929a7ec247bb001#file_results
[13:53] Evet has joined the channel
[13:53] micheil: new parser work for node-websocket-server
[13:53] poolshark has joined the channel
[13:53] poolshark: hi all. Is there any tutorial online somewhere that would show me how to write to a file using node.js?
[13:53] micheil: poolshark: hmm..
[13:53] micheil: poolshark: I don't know of a tutorial, but I could tell you where to find the information?
[13:54] mAritz: Tim_Smart: just pushed 0.1.4 of nohm, but it probably won't work with 0.3.x yet as well.
[13:54] Tim_Smart: require('fs').writeFile(path, buffer, callback)
[13:54] micheil: Tim_Smart: or you could just do that. >_>
[13:54] micheil: I was going to direct them to the documentation.
[13:54] Tim_Smart: That is a better idea,
[13:54] poolshark: micheil: that would help a lot
[13:54] micheil: http://nodejs.org/api.html
[13:54] micheil: then the section called fs
[13:54] poolshark: Tim_Smart: your thing sounds cool, but what is buffer and is callback optional?
[13:55] micheil: erm, file system
[13:55] mAritz: Tim_Smart: btw: your paste wouldn't do much since you specified the name to be unique, so every save but the first would have "invalid" in the err var.
[13:55] micheil: poolshark: a buffer is a special data type in node.js
[13:55] Tim_Smart: poolshark: If you don't care about what happens, callback is optional.
[13:55] poolshark: alright, great start
[13:55] poolshark: thanks Tim_Smart, micheil 
[13:55] peteatolia has joined the channel
[13:56] Tim_Smart: mAritz: Yeah I was supposed to omit that.
[13:58] aliem has joined the channel
[13:59] jchris has joined the channel
[14:00] paul__ has joined the channel
[14:00] mAritz: gotta go buy some food. Tim_Smart: you should go to bed so you can continue making biggie better tomorrow! ;D
[14:02] matt_c has joined the channel
[14:09] Evet: hey Tim_Smart, nice to see you here
[14:10] dipser: .
[14:11] saimon_ has joined the channel
[14:12] saimon_ has joined the channel
[14:12] jetienne: in js, when defining a method in a class, do you use .prototype ? or more closure with a return { all public method } ? not sure to be clear
[14:12] voodootikigod: depends on your use case
[14:12] voodootikigod: if you want to keep variables private
[14:12] voodootikigod: the better way to do it is with a closure
[14:13] voodootikigod: but dynamically appending to a class after the closure has closed is not as straight forward
[14:13] voodootikigod: easier way if you dont care about private methods/values
[14:13] jetienne: voodootikigod: why is it better ? currently im using closure... but im wonder as i read that google insiste on using .prototype
[14:13] voodootikigod: is like this
[14:13] voodootikigod: var = {}
[14:13] voodootikigod: var a = {}
[14:13] voodootikigod: a.prototype.run = function () { }
[14:14] voodootikigod: they solve two different things
[14:14] voodootikigod: closures lock the scope
[14:14] joncurra has joined the channel
[14:14] voodootikigod: where prototype does not
[14:14] voodootikigod: there is not right or wrong way
[14:14] voodootikigod: there is only if the target fits
[14:14] jetienne: voodootikigod: currently i always used closure typeofobject... do you know why google insist on using .prototype ?
[14:15] caolanm: using prototype is faster if you're going to be creating a lot of objects
[14:15] voodootikigod: do you have a link for "insists"
[14:15] charlenopires has joined the channel
[14:15] voodootikigod: if you can sacrafice private variables and locked scope
[14:15] voodootikigod: prototype is the way
[14:15] caolanm: but personally I'll use a closure if I can
[14:15] jetienne: voodootikigod: not from memory, but i read it like in 3 != sources... so i believe it
[14:15] voodootikigod: in exchange you get a lot of flexibility to mutate the object at will
[14:16] voodootikigod: jetienne: they probably recommend it because it is (as mentioned) faster in multiplicity
[14:16] voodootikigod: jetienne: and allows for easy extension
[14:16] peteatolia: Google likes the oo syntax is why ( invested in java a lot) ?
[14:16] voodootikigod: via function clobbering
[14:17] jetienne: ok thanks all
[14:18] Me1000 has joined the channel
[14:18] mikew3c has joined the channel
[14:19] Evet: node.js or nginx+node.js for production?
[14:20] industrial: Is there an easy way of looking at a file and re-running node if the modification time changes on *nix? I don't want to constantly restart node when I change my app
[14:21] aubergine has joined the channel
[14:21] jetienne: industrial: i got something for that
[14:21] phiggins: nodemon?
[14:21] phiggins: (question came up yesterday on twitter)
[14:21] jetienne: http://github.com/jeromeetienne/www.jetienne.com/blob/master/Makefile#L11 <- industrial 
[14:22] peteatolia: Nodejs-autorestart
[14:22] jetienne: all in the inotifywait
[14:22] industrial: thanks
[14:22] ivanfi has left the channel
[14:25] ezmobius has joined the channel
[14:26] ajpiano has joined the channel
[14:26] mif86 has joined the channel
[14:32] christophsturm has joined the channel
[14:33] dylang has joined the channel
[14:40] bradleymeck has joined the channel
[14:41] deedubs has joined the channel
[14:42] deedubs: anyone know of a avahi binding for node yet?
[14:42] deedubs: ^(zeroconf networking)
[14:42] ehaas has joined the channel
[14:42] kevwil has joined the channel
[14:43] tj has joined the channel
[14:43] ioNull has joined the channel
[14:44] bradleymeck: deedubs nope
[14:44] dmcquay has joined the channel
[14:45] deedubs: intersting
[14:46] hannesw_ has joined the channel
[14:46] bradleymeck: as always, would love to be employed just writing bindings, but thats never gonna happen
[14:47] deedubs: yeah really
[14:47] deedubs: I think a zeroconf binding would be pretty sweet
[14:48] ph^ has joined the channel
[14:49] bradleymeck: yea :/ i wanna get lua + java + python bindings done but i got work, mainly use em for nice math, and if i had enough time provide both sync and async
[14:49] softdrink has joined the channel
[14:49] creationix has joined the channel
[14:49] Vladimir1 has joined the channel
[14:49] hsuh has joined the channel
[14:49] bradleymeck: tjholowaychuk did you ever get that indexed property working?
[14:49] rauchg_ has joined the channel
[14:50] tjholowaychuk: bradleymeck: nope, had to work on some other unrelated stuff
[14:50] tjholowaychuk: will probably get back to that today
[14:50] bradleymeck: gist it to me sometime
[14:50] tjholowaychuk: will do
[14:50] Vladimir1: Hi! How do I get the domain name of the current host running node?
[14:50] Vladimir1: or the primary IP at least
[14:50] rnewson has joined the channel
[14:50] rnewson has joined the channel
[14:52] bradleymeck: you dont generally. im sure you could do something funky to get it
[14:52] mAritz has joined the channel
[14:53] bradleymeck: thats kinda like asking how do i know what book i checked out from the library when you may have lent it to a friend or checked out like 10, you can do dns on a hostname but thats about it
[14:54] tmpvar has joined the channel
[14:55] Vladimir1: i see. thought i could dns.reverse('127.0.0.1') or such. think an external call to `ip link` or `ifconfig` is needed...
[14:55] Vladimir1: or, better, analyse `route` default gw
[14:57] bradleymeck: yea, need to get the external ip first
[14:59] Yuffster has joined the channel
[14:59] Vladimir1: heh. even better to directly pass an envvar, so to avoid child processes. thanks
[15:00] fcoury has joined the channel
[15:01] Vladimir1 has left the channel
[15:02] langworthy has joined the channel
[15:03] agnat: deedubs: not exactly avahi bindings, but there is http://github.com/agnat/node_mdns
[15:03] sonnym has joined the channel
[15:04] agnat: deedubs: I'm currently thinking about avahi bindings ... but I think I'll do DBus bindings and just use them to talk to avahi
[15:05] deedubs: agnat: Hmm that's awesome
[15:05] deedubs: there goes my reason for learning howto make node extensions haha
[15:05] peritus- has joined the channel
[15:05] peritus-: wink_: ping
[15:06] dnolen has joined the channel
[15:06] cadorn has joined the channel
[15:11] agnat: deedubs: learn it anyway! there is still lots of stuff to bind :-D
[15:11] peritus__ has joined the channel
[15:12] Me1000 has joined the channel
[15:13] charlenopires has joined the channel
[15:13] peritus- has joined the channel
[15:13] wink_: peritus-: pong
[15:14] peritus-: wink_: tracked yesterdays error down to http://pastebin.com/ZVBgXjus
[15:14] peritus-: wink_: source is here http://github.com/ry/node/blob/master/src/node.cc#L843
[15:15] wink_: peritus-: i have one change to make that may help
[15:16] wink_: i think the hmac_ctx isn't being initialized properly, at least according to the ssl docs
[15:17] ezmobius has joined the channel
[15:17] benoitc has joined the channel
[15:17] aubergine_ has joined the channel
[15:18] wink_: open up node_crypto.cc, find the call to HMAC_Init, replace with: HMAC_Init_ex(&ctx, key, key_len, md, NULL);
[15:18] wink_: in 0.2.0 its line 1591
[15:18] peritus-: wink_: k
[15:18] steadicat has joined the channel
[15:18] wink_: then rebuild and retry :>
[15:19] damselem has joined the channel
[15:19] nikolaiwarner has joined the channel
[15:19] peritus-: wink_: still crashes (with master)
[15:19] peritus-: wink_: i'll get a backtrace
[15:20] nikolaiwarner has joined the channel
[15:20] nikolaiwarner has left the channel
[15:20] wink_: peritus-: damn, :P
[15:21] damselem: quick question: How do you fire or emit an event, apart from those that are already defined ('connect', 'message', ....) from the client to the server when using Node.js and Socket.io ?
[15:21] boaz_ has joined the channel
[15:21] peritus-: wink_: (in gdb) i had 1 "Program exited normally" run, and three crashes.
[15:21] wink_: lol yeah, thats not too shocking
[15:21] peritus-: wink_: now it's not only crashing but also no longer deterministic. hurray!
[15:21] wink_: ok so revert that one ;)
[15:22] boaz_ has joined the channel
[15:22] wink_: get a breakpoint in HmacDigest on the call to encode, i'd like to see what the 3 params look like that are being passed in
[15:22] wink_: specifically md_value, md_len
[15:22] beawesomeinstead has joined the channel
[15:22] beawesomeinstead has joined the channel
[15:22] wink_: the encode function probably isnt the real cause, it's used in lots of places
[15:23] wink_: i think the init/cleanup functions are likely stomping all over the place
[15:23] wink_: once you get the break, just p md_len, p md_value
[15:23] wink_: see what those look like
[15:24] evl has left the channel
[15:24] hsuh has joined the channel
[15:24] peritus-: wink_: 1 sec
[15:25] aubergine_ has joined the channel
[15:25] peritus-: (gdb) p md_value
[15:25] peritus-: $1 = (unsigned char *) 0x100d25940 "????B? :?\f?v_j])\016?&\""
[15:25] peritus-: (gdb) p md_len
[15:25] peritus-: $2 = 20
[15:27] wink_: also, p ctx
[15:29] peritus-: wink_: ctx is not a local variable :/ some gdb-newb help would be awesome!
[15:29] wink_: ah crap do hmac->ctx
[15:30] wink_: you're broken in the static member function, gotta use the pointer to the instance of the object
[15:31] kevwil has joined the channel
[15:31] peritus-: wink_: http://dpaste.de/4hOz/
[15:31] EyePulp has joined the channel
[15:32] peritus-: wink_: i try to match http://stackoverflow.com/questions/242665/understanding-engine-initialization-in-openssl against node_crypto.cc ..
[15:32] wink_: yeah i just saw that, the engine calls look a little suspicious
[15:32] wink_: however im not sure if that structure is initialized (it's all 0x0) or broken :P
[15:33] wink_: peritus-: do this, change the init back to init_ex with null as the last param, add the 2 engine calls right before it
[15:35] benv has joined the channel
[15:35] wink_: peritus-: http://pastebin.com/MfcCHgmw
[15:37] ph^ has joined the channel
[15:38] peritus-: wink_: wow
[15:38] wink_: ?
[15:39] peritus-: wink_: crash is gone
[15:39] wink_: <3
[15:39] peritus-: wink_: that's the patch: http://dpaste.de/YDRs/
[15:39] peritus-: wink_: *hugs*
[15:39] wink_: perfect, what is the hash you're getting out of it
[15:39] peritus-: wink_: that would've been my next question..
[15:39] wink_: haha, i can compare it to mine :p
[15:40] sprout has joined the channel
[15:40] wink_: http://pastebin.com/hV24kN2j
[15:41] omarkj has joined the channel
[15:41] peritus-: a5f7d48a8cad73d955fc447535f8db3f522b579b
[15:41] mattc has joined the channel
[15:41] peritus-: wink_: looks about right
[15:41] wink_: close enough ;D
[15:42] wink_: let me apply the patch and check it against my ssl
[15:42] peritus-: wink_: still, simple/test-crypto CRASHes (as it did before)
[15:43] wink_: where is that at?
[15:44] wink_: nm
[15:44] jakehow has joined the channel
[15:44] wink_: peritus-: its crashing in the other hashes in the same way i bet
[15:45] ehaas has joined the channel
[15:45] peritus-: wink_: yapp, crypto is not only hmacs :/
[15:45] wink_: check HashInit (l1762), add the engine calls there too
[15:48] wink_: actually, go to the very end of the file, try placing the engine calls in the init...it looks like there is an attempt being made to do something similar
[15:48] wink_: i wonder why it doesnt work
[15:48] stagas has joined the channel
[15:49] wink_: actually, yeah just add the 2 engine* calls in the init at the end
[15:49] wink_: that has a good shot at fixing all of them in one go
[15:50] wink_: and by good shot, i mean should :p
[15:50] wink_: although who knows
[15:50] wink_: openssl is written by monkeys ;)
[15:50] hoodoos: guys, if i do serverResponse.end([5MB data here]) is it considered bad practice? or node will handle it fine? :)
[15:51] ceej_ has joined the channel
[15:51] hoodoos: it's not 5mbs actually it's like 50-200kbs
[15:52] hoodoos: or i should consider writing it in small portions with serverResponse.write?
[15:53] caolanm: hoodoos: perhaps look into streams
[15:53] peritus-: wink_: just using http://dpaste.de/oNDK/ brings back my initial error
[15:53] hoodoos: caolanm, the data i'm giving away is result of JSON.stringify method, i should place result in stream and then write it, that way?
[15:54] wink_: peritus-: k, it looks like that call needs to take place locally to the inits
[15:54] caolanm: hoodoos: if its already held in memory I'd just write it
[15:54] wink_: create a test using one of the hashs from the crypto test
[15:54] wink_: just create an md5 hash
[15:54] wink_: see if that crashes alone, if so, add those calls into the HashInit the same way
[15:55] hoodoos: caolanm, yes, I guess there's no way not to keeping it in memory, it's some database response which I need whole to process
[15:55] peritus-: wink_: with the test setup, is there a way to see where it crashed ?
[15:55] micheil: hoodoos: if you're JSON.stringify'ing 5mb of data at once, I think you'll have a different problem to writing data to a network socket.
[15:55] caolanm: ^ seconded
[15:55] caolanm: ;)
[15:55] peritus-: wink_: never mind
[15:55] wink_: peritus-: well, you could just instrument it up with prints :)
[15:55] wink_: brb
[15:56] hoodoos: micheil, btw, maybe there's some streaming JSON stringifier? :)
[15:56] micheil: hoodoos: not yet.
[15:56] micheil: I was going to work on one, but didn't.
[15:56] micheil: theoretically it's possible.
[15:56] d0k has joined the channel
[15:56] micheil: but it has a few other issues
[15:58] tjholowaychuk: isnt there one? yajl?
[15:58] hoodoos: my question actually was is there any difference (if i'm already have my 50-200 kb object in memory and then JSON.stringify it) between serverResponse.end() and serverResponse.write it in small portions in some way?
[15:58] micheil: not sure on yajl.
[15:58] micheil: anyway.. headphones on time. I need to finish this parser.
[15:58] tjholowaychuk: :D
[15:59] hoodoos: serverResponse is stream itself so writing it to socket is handled somewhere else anyways
[15:59] micheil: tjholowaychuk: it speeds up websocket message decoding by about 8 times.
[15:59] micheil: tjholowaychuk: early data: https://gist.github.com/95e4e929a7ec247bb001#file_results
[15:59] tjholowaychuk: micheil: very nice :)
[15:59] micheil: it's only possible due to tim_smart & felixge
[15:59] micheil: tim for the most part.
[16:00] micheil: tjholowaychuk: also, I need to catch up with you at some stage about friday.
[16:00] tjholowaychuk: micheil: this week has been brutal sleep-wise so im a bit behind, but I was thinking it might be good to touch base on that after my most recent project is ready to go
[16:01] bradleymeck: micheil / hoodoos i have one in pure js but its slower than native :(
[16:01] micheil: okay, when would that possibly be?
[16:01] micheil: tjholowaychuk: ^
[16:01] micheil: bradleymeck: hmm, okay, cool
[16:02] ajsie has joined the channel
[16:02] bradleymeck: plus sending chunk size is a problem cause you dont want to constantly write ~1 char
[16:03] ceej has joined the channel
[16:03] wink_: peritus-: back
[16:03] peritus-: wink_: fails at 'var a0 = crypto.createHash("sha1").update("Test123").digest("hex")'
[16:03] hoodoos: bradleymeck, is it on github somewhere?
[16:04] peritus-: wink_: adding the ENGINE_* calls doesn't fix it, so I'll figure out what's different.
[16:04] micheil: tjholowaychuk: are we talking next week or in a few weeks after that?
[16:04] wink_: peritus-: well the hashing stuff may need a different set of initializations
[16:04] wink_: openssl really is a trainwreck :P
[16:05] tjholowaychuk: micheil: time-wise probably a few weeks
[16:05] bradleymeck: hoodoos, the serialize isnt, but that is an enormous speed loss unless you need to be changing the object while you are streaming
[16:05] micheil: hm... okay
[16:05] wink_: i'll be back in a bit, i'll hit you up then
[16:05] wink_: off to a meeting :|
[16:05] micheil: tjholowaychuk: any more tips?
[16:05] bradleymeck: enough that i scrapped it
[16:05] hoodoos: bradleymeck, yeah, it's not my case, then i would need to parse it that way first :)
[16:05] bradleymeck: http://github.com/bmeck/node-jsonparser <- the parse is still useful
[16:06] tjholowaychuk: micheil: tips for what?
[16:06] hoodoos: bradleymeck, json parseR?
[16:06] micheil: tjholowaychuk: as to what said project is.
[16:06] tjholowaychuk: micheil: ohh, not yet :p
[16:06] micheil: tjholowaychuk: I've come to learn if you're involved then it must be kinda awesome.
[16:06] hoodoos: bradleymeck, wow, nice, it's kind of SAX xml, right?
[16:06] tjholowaychuk: micheil: ahahaha pff not really but thanks man lol
[16:06] micheil: tjholowaychuk: I'm guessing something todo with realtime stuff.
[16:07] bradleymeck: yea, its like ghetto yajl basically
[16:07] micheil: tjholowaychuk: considering the company.
[16:10] technoweenie has joined the channel
[16:11] ginader has joined the channel
[16:14] pgriess has joined the channel
[16:15] sh1mmer has joined the channel
[16:16] qFox has joined the channel
[16:19] siculars has joined the channel
[16:24] threeve_ has joined the channel
[16:24] stagas has joined the channel
[16:25] brianmario has joined the channel
[16:26] Akufen has joined the channel
[16:26] Akufen has joined the channel
[16:26] siculars_ has joined the channel
[16:26] bpot has joined the channel
[16:28] banjiewen has joined the channel
[16:29] osteele has left the channel
[16:30] dstevens has joined the channel
[16:31] nroot7 has joined the channel
[16:31] agnat has left the channel
[16:32] micheil: man.. converting a buffer to utf8 is massively slow.
[16:33] jchris has joined the channel
[16:34] hpoydar has joined the channel
[16:35] nichdiekuh has joined the channel
[16:35] mjr_ has joined the channel
[16:35] sprout has joined the channel
[16:37] CrypticSwarm has joined the channel
[16:38] agnat has joined the channel
[16:38] benburkert has joined the channel
[16:39] dahankzter has joined the channel
[16:41] peritus-: wink_: out of curiosity, which openssl version do you use ?
[16:42] slashxr has joined the channel
[16:44] DrunkDwarf has joined the channel
[16:45] coffeecup: has anyone used node-couchdb to successfully retrieve attachments from the db? 
[16:47] mjr_: I've not put attachments in couchdb yet.
[16:47] mjr_: What does node-couchdb do that's bad?
[16:47] coffeecup: its workin fine so far but iam not able to retrieve attachments
[16:48] auser has joined the channel
[16:49] mAritz: hm, does anyone here know at what state cloud9 is supposed to be? right now nothing seems to work properly and I'm unsure whether it has something to do with my firefox version (thus I should open bugs) or if it's just that early in development.
[16:49] hdon has joined the channel
[16:49] sudoer has joined the channel
[16:51] robotarmy has joined the channel
[16:51] dohtem has joined the channel
[16:51] dohtem has joined the channel
[16:53] evanpro has joined the channel
[16:54] dohtem has left the channel
[16:54] micheil has joined the channel
[16:54] auser has left the channel
[16:54] zemanel has joined the channel
[16:55] matt_c__ has joined the channel
[16:55] MikhX has joined the channel
[16:56] MikhX has joined the channel
[16:56] shimondoodkin: how to know why my application is working super slow? and also writing super slow, very strange http://github.com/shimondoodkin/node-wurfl/blob/master/persist.js
[16:57] shimondoodkin: it is executed thru here :http://github.com/shimondoodkin/node-wurfl/blob/master/index.js
[16:58] threeve has joined the channel
[16:58] cardona507 has joined the channel
[16:58] mikew3c has joined the channel
[16:59] shimondoodkin: v8 had some preformace stats of javascript how to do them?
[17:00] shimondoodkin: maybe its the utf8 stream filter, it written the data to stream, the file did not written just created , when i ended the stream it started writing, node js CPU is at 100% and it is writing like 10K /s
[17:00] noahcampbell has joined the channel
[17:00] stephenjudkins has joined the channel
[17:00] nsm has joined the channel
[17:01] jstemmer has joined the channel
[17:01] stephenjudkins has joined the channel
[17:01] dgathright has joined the channel
[17:03] sveimac has joined the channel
[17:03] isaacs has joined the channel
[17:05] benreesman has joined the channel
[17:06] franksvalli has joined the channel
[17:06] micheil: isaacs: would you have say five minutes to talk about a buffer / stream / parser thing?
[17:06] isaacs: micheil: i saw your tweet, was thinking the same thing
[17:06] micheil: heh
[17:06] ircretary has joined the channel
[17:06] micheil: well, it turns out most servers will flush the socket on write
[17:06] isaacs: ok
[17:07] micheil: so you'll actually never get a 0x00test0xFF0x00test...
[17:07] micheil: packet
[17:07] micheil: you'll only ever get: 0x00test0xFF
[17:07] micheil: so would it make sense to still cater for the joint packet case?
[17:07] micheil: (you're more likely to exceed the tcp packet size then to join packets)
[17:09] deepthawtz has joined the channel
[17:10] dpritchett has joined the channel
[17:10] _numbers has joined the channel
[17:10] aliem has joined the channel
[17:10] saimon_ has joined the channel
[17:10] micheil: I'm not sure if I should just write of the joint packets as a "never going to happen" case and just cater for parsing individual packets really fast
[17:11] micheil: it's obviously getting too late. I'm making mistakes.
[17:13] matt_c_ has joined the channel
[17:13] isaacs: well, "never going to happen" usually means "never going to happen until it's a royal bitch to fix"
[17:14] isaacs: so you may as well build your stuff to be flexible to that situation
[17:14] _numbers: the non-blocking concept is kind of boggling my mind right now.
[17:14] _numbers: does everything have to be written with callbacks? i miss being able to write blocking code
[17:15] _numbers: like: step_1(); step_2(); step_3();
[17:15] dpritchett: there are special sync functions
[17:15] _numbers: now its step_1(step_2(step_3()));
[17:15] SubStack: it's a little different
[17:15] cnu has joined the channel
[17:15] _numbers: becomes really difficult to write   if(step_1() && step_2()) { step_3(); }
[17:15] dpritchett: shouldn't it have been step1(step2(step3))) all along?
[17:16] SubStack: _numbers: the problem is that when your program is blocking you can't do anything else
[17:16] dpritchett: maybe that's the FP enthusiast in me ;)
[17:16] SubStack: yeah side-effects in conditionals are bad news anyways
[17:16] saikat has joined the channel
[17:16] mjr_: _numbers: it can take a while to get your head around purely evented systems if you've not written them before.
[17:16] _numbers: what is the non-blocking equivalent of the last example w/ the if statement
[17:16] SubStack: because then you rely on short-circuiting behavior and order of execution
[17:16] _numbers: i need to wait for two conditions to finish executing before doing the third
[17:17] SubStack: _numbers: you don't just translate synchronous code into asynchronous form, you approach problems differently
[17:17] dpritchett: try the lispy way? (step-3 (step-2 (step-1))) 
[17:17] franksvalli has joined the channel
[17:18] micheil: isaacs: I suppose.
[17:18] isaacs: _numbers: check out some of the flow control libs out there
[17:18] isaacs: _numbers: creationix's Step is pretty popular
[17:18] micheil: isaacs: I think I've finally found a chance to properly write tested code.
[17:18] isaacs: _numbers: i wrote an article on howtonode.org that you might find helpful
[17:18] mjr_: _numbers: most people start with the nested callbacks method, which sorta looks like code you are used to, just indented more.
[17:18] isaacs: _numbers: it's not as hard as it seems at first.
[17:18] _numbers: ah ok i'll check that out
[17:19] _numbers: the problem im trying to solve now is like:    if (i_haz_download(file) && i_haz_resultset(sql)) { /* display user name from sql resultset beside user's picture from downloaded file */ }
[17:19] _numbers: this is a picard web app
[17:19] _numbers: i'll google node.js flow control libs
[17:20] SubStack: _numbers: looks like you're needlessly polling
[17:22] mjr_: _numbers: depending on the API you are using, you can probably do something like: download(url, function dl_callback() { db_query(file, function db_callback() { // done })});
[17:23] mjr_: Most libraries that need to do something that would block provide a way to pass in a callback to be invoked when the blocking thing is done
[17:23] cferris has joined the channel
[17:23] kgf: well I guess one potential question would be, why can't you do those two async ops simultaneously if they're completely independent?
[17:23] jameshome_ has joined the channel
[17:24] DrunkDwarf- has joined the channel
[17:24] peritus- has joined the channel
[17:24] jameshome_ has left the channel
[17:24] kgf: funny thing is I'm pretty sure there's something in kriszyp's promise module in promised-io (and possibly others) that'd do exactly what you want
[17:24] mjr_: Oh sure, you can do that
[17:24] kgf: but that's only if promises are your cup of tea, obviously
[17:25] mjr_: It's important to understand if you really do want them to run concurrently, or if you want serial execution.
[17:25] kevwil has joined the channel
[17:25] mjr_: It sounds like _numbers wants sequential, but ended up with concurrent by accident.
[17:25] shimondoodkin: http://github.com/shimondoodkin/node-inflow - here is one of mine
[17:25] kgf: oh. I was assuming he knew he wanted concurrent. I suppose either is possible.
[17:26] tilgovi has joined the channel
[17:27] vnguyen has joined the channel
[17:27] micheil: mjr_: with buffers, can I copy past the end of a given buffer?
[17:28] paulr_ has joined the channel
[17:28] mjr_: past the end?
[17:28] micheil: like, buf1 = new Buffer(26), buf2 = new Buffer(26)
[17:28] micheil: can I do:
[17:28] mjr_: The logic in buffer.copy() should do bounds checking.
[17:28] bartt has joined the channel
[17:28] Anti-X: why would you ever want to do that?
[17:28] _numbers: it could be concurrent or sequential. i think they are independent and could be concurrent. the problem is actually that with Picard you have to return something to the browser. and i have to wait for both operations to finish before doing that
[17:28] micheil: buf1.copy(buf2, 26, 0)
[17:29] _numbers: it doesnt matter which one finishes first. but both have to be finished
[17:29] micheil: so the resulting buffer == buf1 + buf2
[17:29] micheil: Anti-X: when you don't know how big to alloc buffers.
[17:29] mjr_: micheil: It'll trim the copy to the length of the dest buffer
[17:29] micheil: okay
[17:29] davidascher has joined the channel
[17:29] mjr_: which may be surprising. 
[17:29] Evet: which all-in-one framework you suggest to build a complete website?
[17:30] isaacs: mjr_: hey, you've got some experience with streams that are flaky..
[17:30] micheil: mjr_: and buffer's can't be joint easily, can they?
[17:30] aurynn: I recommend using a bunch of parts that all do what they do the best.
[17:30] mjr_: isaacs: I flake streams on a daily basis.
[17:30] mikew3c_ has joined the channel
[17:30] isaacs: mjr_: what would be your first target ot start debugging something where the write() returns false, but drain never happens?
[17:31] micheil: that's another thing node-websocket-server doesn't catch. drainage.
[17:31] Anti-X: Evet, that's an invalid question
[17:31] Anti-X: try again
[17:31] mjr_: micheil: you'd need to make that join function yourself, I think.
[17:31] jpld has joined the channel
[17:31] mjr_: isaacs: what kind of writable stream?
[17:31] isaacs: mjr_: http client
[17:31] isaacs: your favorite :)
[17:31] mjr_: ha
[17:31] isaacs: apparently a new-ish problem publishing packages.
[17:32] isaacs: afaict, only coincidentally related to yesterday's upset.
[17:32] davidascher: i'm puzzled that require.paths is undefined, even if I define NODE_PATH.  what did i do wrong?
[17:32] mjr_: isaacs: Here's what I do whenever I debug streams.  Go into events.js and add something that logs whenever any event is emitted.
[17:33] isaacs: yikes.
[17:33] mjr_: We really need some kind of general mechanism for like "event tracing"
[17:33] isaacs: yeah
[17:33] isaacs: Etrace
[17:33] Anti-X: davidascher, did you sacrifice the mandatory badger?
[17:33] davidascher: Anti-X: i substituted a beaver, was that a problem?
[17:33] isaacs: mjr_: i actually built that into a system i built at yahoo once.  you could listen to the "event" event
[17:33] Anti-X: obviously
[17:33] isaacs: (and cancel it)
[17:33] mjr_: it's not that bad actually.  You put in a line, you see a lot of emit this and that, and then you pretty quickly see what's going on.
[17:34] mjr_: oh yeah, I guess we could have an event event, but I want it across all eventemitters
[17:34] isaacs: yeah, you'd have to do emitter.on("event", function (whichEventWasIt) { ... })
[17:35] mjr_: isaacs: if I were to guess, I'd say that the stream just goes away, which is why you don't get teh drain event.
[17:35] Anti-X: davidascher http://nodejs.org/api.html#require-paths-48
[17:35] nerdEd has joined the channel
[17:36] mjr_: There are some strange interactions with close/end on the socket and end on the request that get confusing sometimes.
[17:36] isaacs: mjr_: but this happens while i'm uploading somethign
[17:36] mjr_: are you sure the connection is still up and happy?
[17:36] davidascher: Anti-X: I saw that, but for me, require.paths is undefined, which seems to me means something is quite wrong.
[17:36] isaacs: like, i upload 3 chunks, and then it says false, and drain doesn't show up.
[17:36] Anti-X: well it doesn't say anything about NODE_PATH
[17:36] davidascher: Anti-X: reconfiguring/building/installing node just in case.
[17:36] mjr_: isaacs: well, shit
[17:36] mjr_: isaacs: 3?
[17:36] isaacs: oddly, what used to *never* work, is that if i just try to write ALL the bytes of the whole tarball, all at once, then that works.
[17:37] davidascher: Anti-X: ah, but node --help does
[17:37] mjr_: isaacs: that should work really well, BTW, as long as you have enough memory.
[17:37] isaacs: suresure
[17:37] isaacs: well, really, in this case, i should just sendfile that fucker anyhow.
[17:37] mjr_: isaacs: but I'm lead to believe from massive socket queues in my redis lib that there are issues in there.
[17:38] isaacs: since it's a file on disk, and i'm writing it unchanged to a socket.
[17:38] mjr_: isaacs: in my redis lib, things are really solid if the node socket queue is small-ish, but intermittently get corrupted when the queue is large.
[17:38] isaacs: i see
[17:38] boaz has joined the channel
[17:38] mjr_: isaacs: so I've been doing a lot of pause/resume action on streams lately.  I haven't seen your upload thing after 3 chunks though.  
[17:38] dguttman has joined the channel
[17:40] rauchg_ has joined the channel
[17:41] davidascher: Anti-X: rebuilding & reinstalling node fixed it.  weird.
[17:41] Anti-X: no YOU're weird! er...
[17:41] halfhalo: lol
[17:42] _numbers has left the channel
[17:42] isaacs: mjr_: it doesn't seem like 3 chunks is magic
[17:42] isaacs: mjr_: sometimes it's 4 
[17:42] Anti-X: no such thing as magic
[17:43] saimon_ has joined the channel
[17:43] Astro: hi
[17:43] Astro: how do you like my new webapp? http://noatta.ch/r107392482
[17:44] Anti-X: Sorry, your browser lacks some important features to share files. We recommend upgrading to Firefox 3.6 or 4.0 & Chromium 6 or 7.
[17:44] Anti-X: bad boy
[17:44] Astro: what are you using?
[17:44] halfhalo: Butbutbut... I use ie6!
[17:44] Anti-X: opera
[17:44] Astro: lol
[17:44] deedubs has joined the channel
[17:44] csullivan has joined the channel
[17:45] Anti-X: you should use socket.io, may cause a little bit of extra traffic but at least you'll support almost any browser
[17:45] Astro: I do
[17:45] Anti-X: then: wtf?
[17:45] Astro: it's just the File API opera doesn't implement
[17:45] Astro: http://www.w3.org/TR/FileAPI/
[17:45] Anti-X: oh is that another new thing now
[17:46] Anti-X: i think the w3c are bored out of their tits
[17:46] Astro: http://caniuse.com/#feat=fileapi
[17:46] Astro: bored? I used it at noatta.ch!
[17:46] Astro: somebody is downloading from me already :)
[17:47] Anti-X: can't you implement the file api using js?
[17:47] Astro: how?
[17:47] Astro: with hidden forms? ugh...
[17:47] Anti-X: i mean, i assume the transfer takes place over websocket
[17:47] sechrist: is there a driver for drizzle in nodejs yet?
[17:47] Astro: no, it doesn't
[17:47] Anti-X: oh
[17:48] Anti-X: Note: Support is planned for Chrome 6, but not yet implemented
[17:48] Anti-X: is what it says on that site
[17:48] adambeynon has joined the channel
[17:48] sechrist: socket.io is probably the most robust thing you're going to find in terms of browser compatibility
[17:48] sechrist: (if you can get all of the transports working)
[17:49] Anti-X: yup, it even worked on my samsung touchwiz's native browser
[17:49] Anti-X: which is shit
[17:49] sechrist: if you need cross domain though I wouldn't bother with socket.io
[17:49] dgathright has joined the channel
[17:49] Anti-X: i think they have fallbacks for that too
[17:49] sechrist: they blow
[17:50] sechrist: because you can really only do jsonp or similar 
[17:50] Anti-X: well what would you use instead?
[17:50] sechrist: for crossdomain?
[17:50] Anti-X: yeah
[17:50] sechrist: a simple jsonp longpolling thing hand made
[17:50] rauchg_: sechrist: 
[17:50] Anti-X: well they do jsonp long polling...
[17:50] Anti-X: afaik
[17:51] sechrist: yep
[17:51] rauchg_: websocket, flash websocket, xmlhttprequest, xdomain in ie8, multipart in firefox
[17:51] rauchg_: all handle cross domain 
[17:51] sechrist: since when? O.O
[17:51] rauchg_: jsonp polling is only used for ie6-7
[17:51] rauchg_: since the beginnings of time? websocket has Origin negotiation 
[17:51] sechrist: yes but I thought it wasn't implemented
[17:51] rauchg_: xmlhttprequest CORS 
[17:51] rauchg_: yeah it ise
[17:51] rauchg_: speedo.no.de uses cross domain socket.io
[17:51] rauchg_: since you include the widget in your website
[17:52] Anti-X: w00t
[17:52] sechrist: daaaamn alright
[17:52] Anti-X: i couldn't even get it to connect to a different port!
[17:52] Anti-X: maybe i did it wrong
[17:53] rauchg_: Anti-X: we have an issue i think detecting different ports as cross domain haha
[17:53] rauchg_: i need to merge a pull request
[17:53] Anti-X: >_<
[17:53] sechrist: a real product that uses konami code
[17:53] rauchg_: it'll be fixed asap
[17:54] Anti-X: ACTION slaps rauchg_ around a bit with programming quotes referencing humans and computers
[17:54] sechrist: I've been home from the valley < 24 hours and I already miss it
[17:55] halfhalo: which valley
[17:55] sechrist: the silicon kind
[17:55] halfhalo: Eh
[17:55] DrunkDwarf has joined the channel
[17:55] Anti-X: the dead one
[17:55] halfhalo: To siliconey
[17:55] halfhalo: Although I do like the right turn yield crap
[17:55] dahankzter has joined the channel
[17:55] agnat has joined the channel
[17:55] halfhalo: Stupid LA and the not having that thing
[17:56] sechrist: mikeal: are you aware of a drizzle client for node yet?
[17:57] hannesw_ has joined the channel
[18:00] benreesman: anyone's favorite example of an open source demo app using express and connecting to mysql backend?
[18:01] aho has joined the channel
[18:03] dgathright has joined the channel
[18:04] dmcquay: ACTION <3's Astro's noatta.ch
[18:04] ioNull has joined the channel
[18:04] fabeat has joined the channel
[18:04] ioNull: Hi.. Is there something wrong with node-static 0.5.1 and node 0.2.3?
[18:04] mjr_: tjholowaychuk: know of anybody using mysql with express?
[18:05] tjholowaychuk: mjr_: nope
[18:05] tjholowaychuk: i dont know anyone using mysql at all actually with node
[18:05] mjr_: felix is, of course
[18:05] jameshome__ has joined the channel
[18:05] ioNull: has no method 'copy'
[18:05] ioNull:     at [object Object].<anonymous> (/usr/local/lib/node/.npm/node-static/0.5.1/package/lib/node-static.js:239:23)
[18:05] ioNull:     at [object Object].emit (events:27:15)
[18:05] tjholowaychuk: yup
[18:05] ioNull:     at [object Object]._emitData (fs:738:29)
[18:05] ioNull:     at afterRead (fs:719:10)
[18:05] ioNull:     at node.js:768:9
[18:05] tjholowaychuk: hopefully
[18:05] drudge: i have an express app with a mysql backend
[18:05] tjholowaychuk: lol
[18:05] mjr_: heh
[18:06] drudge: using dbslayer + custom orm
[18:06] ioNull: > . > Anybody knows what's wrong with node-static?
[18:06] tjholowaychuk: benreesman: do you have more specific questions? you can use the configure() callbacks to connect to different databases
[18:06] tjholowaychuk: based on NODE_ENV
[18:06] technoweenie: mjr_: borobudur_redis: Doe anyone knows if the node.js client is a lot faster than the php one?
[18:07] technoweenie: is there any work on some kind of cross platform redis benchmark tool?  i'd be shocked if the php one was faster than yours
[18:07] davidwalsh has joined the channel
[18:07] mjr_: technoweenie: it is at least 10X faster according to someone on the redis list.
[18:07] mjr_: technoweenie: node_redis is faster than php, I mean.
[18:07] _numbers has joined the channel
[18:08] technoweenie: cool
[18:08] Astro: dmcquay: thank you
[18:08] ioNull: - -.
[18:09] dstevens has joined the channel
[18:09] mjr_: technoweenie: I've asked on the list a couple of times if there's any way to compare performance across languages, and there's no good answer.
[18:09] benreesman: tjholowaychuk: no just wondering if there was a complete app somewhere that i could study
[18:10] pedrobelo has joined the channel
[18:10] dmcquay: Astro: http://www.synchrosinteractive.com/blog/9-nodejs/50-noattach-instant-personal-file-sharing
[18:10] Anti-X: Astro, just an html comment.. <p id="loading">Use JS..</p> <-- this is where you use <noscript> :P
[18:10] _numbers: is there an easier way than this which will throw errors if p doesnt exist:    var page = env.parsed_url().query.p || 0;
[18:10] tjholowaychuk: benreesman: oOoO not to sure sorry! dont forget that the Express repo has a bunch of examples in ./examples
[18:10] technoweenie: mjr_: yea, i'm not even sure why it matters.  i dont see anyone moving languages just for a redis client
[18:10] tjholowaychuk: I should add an example actually backed by a db though
[18:10] Astro: Anti-X: yeah...
[18:10] _numbers: i hate doing things like: (env && env.parsed_url() && env.parsed_url().query && env.parsed_url().query.p) ? env.parsed_url().query.p : 0
[18:11] technoweenie: is that parsing the url 4 times
[18:11] _numbers: probably
[18:12] Anti-X: Astro, and why are your js files typed differently? two are text/js and one is application/js :P
[18:12] benreesman: tjholowaychuk: hey thanks i'll give that a go
[18:12] Anti-X: <- validity police
[18:12] Astro: Anti-X: oops, thank you very much
[18:12] Anti-X: more to come :P
[18:12] Anti-X: prolly
[18:13] Astro: give it to me, I can take it
[18:13] shockie has joined the channel
[18:13] ioNull: - .-
[18:13] Anti-X: script tags in head, no matter what
[18:13] Anti-X: use $('document').ready()
[18:14] Anti-X: at least for the last one
[18:14] Anti-X: and then for the loading one, just use noscript for no script and the actual text in the loading
[18:14] Anti-X: :P
[18:14] Astro: I saw this practised on many other sites :)
[18:14] Anti-X: doesn't mean it's right
[18:14] ioNull: HI, all..What's wrong with "has no method 'copy'" in node-static?
[18:15] Astro: r u working at O by accident?
[18:15] Anti-X: also, html5 doesn't need type attributes in script tags
[18:16] Anti-X: O?
[18:16] Astro: opera
[18:16] Anti-X: no
[18:16] Anti-X: came close but they didn't want me
[18:16] Anti-X: losers!
[18:16] Anti-X: :P
[18:16] Astro: I'd rather keep those attrs
[18:16] Anti-X: well it's ALWAYS js
[18:16] Anti-X: except in IE, but IE is a c-word
[18:17] Anti-X: and i don't even know if IE8 supports vbscript...?
[18:17] Astro: or coffeescript?
[18:18] Anti-X: coffeescript still needs a js object, doesn't it?
[18:18] Anti-X: to parse it and smack it about
[18:18] drudge: it does Anti-X (IE8)
[18:19] Anti-X: will/does ie9
[18:19] Anti-X: ?
[18:19] Anti-X: i know they're backwards compatibility freaks, but there's gotta be a limit
[18:21] Egbert9e9 has joined the channel
[18:23] abiraja has joined the channel
[18:26] Evet has joined the channel
[18:27] saikat has joined the channel
[18:28] auser has joined the channel
[18:28] auser: hola
[18:28] Anti-X: salaam aleikum
[18:29] aconbere has joined the channel
[18:29] davida has joined the channel
[18:30] matt_c_ has joined the channel
[18:30] benburkert has joined the channel
[18:31] Druide__ has joined the channel
[18:32] saikat has joined the channel
[18:36] isaacs: mjr_: turns out sendfile didn't quite work, but sys.pump didn't seem to have any problems.
[18:37] isaacs: mjr_: i chalk it up to stream api being too complicated.
[18:37] mjr_: I think the stream API just needs to be more conssitent.
[18:37] mjr_: That's what I hope we can hash out on Thursday
[18:37] isaacs: yeah
[18:37] mjr_: The stream API is a truly great idea, IMO.
[18:37] isaacs: i remember the initial idea for it was really austere and plain.  i liked that a lot.
[18:37] mjr_: Having now used it for some non-trivial things, it's a big win.
[18:38] isaacs: now we have close vs end, which is not semantically clear, and "fd" which is only emitted *sometimes* when dealing with a stream that has fds, etc.
[18:38] isaacs: it's a bit untidy
[18:38] isaacs: not terrible, and the fact that you can just dumbly plug things into sys.pump is great.
[18:39] isaacs: but like, implementing or consuming a stream directly, that's a bit more painful than it should be.
[18:39] mjr_: Yeah, I think we can tidy it all up.
[18:39] mjr_: Oh hey
[18:39] mjr_: Are you using readstreams from fs.createReadStream()?
[18:40] tpryme has joined the channel
[18:41] ehaas has joined the channel
[18:45] isaacs: yeah
[18:45] isaacs: well, now i am.
[18:45] isaacs: that makes it work 100% of the time, afaict
[18:45] mjr_: neat
[18:45] mjr_: I noticed something with createWriteStream() that's odd, but then I remembered your issues were from uploading
[18:46] mjr_: but every time you do fs.createWriteStream().write(), it'll return false
[18:46] isaacs: and it made this nice pretty red diff: http://github.com/isaacs/npm/commit/0841e04
[18:46] mjr_: And then drain immediately
[18:46] isaacs: ah, yeah, i remember you talking about that
[18:46] mjr_: Because the write happens in the thread pool, what with it being a blocking call and all
[18:46] isaacs: so you get a lot of push/pull going on
[18:46] mjr_: But if you sys.pump into it, you are going to be pausing your reader like crazy
[18:47] isaacs: instead of tcp backpressure, you get tcp backspringing
[18:47] mjr_: The pause/resume happens REALLY fast, which might exercise some bugs.
[18:47] steadicat has joined the channel
[18:47] isaacs: yeah, but... still.  that's not great.
[18:47] isaacs: you could just write a test that does that
[18:48] codelotus has left the channel
[18:48] sh1m has joined the channel
[18:48] aho: creationix, that step thing is awesome :)
[18:50] auser has joined the channel
[18:50] Gruni has joined the channel
[18:50] weee has joined the channel
[18:51] weee has left the channel
[18:51] xla has joined the channel
[18:52] mikeal has joined the channel
[18:52] dmcquay has joined the channel
[18:54] isaacs: oh, hey, nvm.  seems like that createReadStream just pretends to work
[18:56] rasputnik has joined the channel
[18:56] SamuraiJack_ has joined the channel
[18:56] TheEmpath has joined the channel
[18:56] TheEmpath: hail
[18:57] mjr_: isaacs: there is something flaky in there when you do fs.createCreateStream and sys.pump() together.
[18:57] mjr_: Like you miss an event sometimes or something
[18:58] isaacs: mjr_: no, it's like it's not even beginning to write it.
[18:58] isaacs: gah, this is painful.
[18:58] tjholowaychuk: mjr_: I ran into something like that too
[18:58] mjr_: brb, lunch
[19:00] Nohryb has joined the channel
[19:00] isaacs: hm, and sendfile is giving me an EAGAIN error...
[19:00] matt_c has joined the channel
[19:00] bradleymeck has joined the channel
[19:01] programble has joined the channel
[19:01] hassox has joined the channel
[19:01] mape: github down?
[19:01] ben_alman has joined the channel
[19:02] TheEmpath: itz ze germanz
[19:02] rex_fernando: mape: I don't think so
[19:03] bradleymeck: mape its up here
[19:03] mape: keep getting 502 Bad Gateway on http://github.com/pgriess/wsbench/toggle_watch
[19:03] rex_fernando: just slow
[19:03] mape: when trying to watch
[19:03] TheEmpath: rofl
[19:03] TheEmpath: im getting an angry unicorn
[19:04] rex_fernando: mape: it's just a blank page for me
[19:04] bradleymeck: 400 here
[19:04] mape: :(
[19:04] davidascher has joined the channel
[19:04] TheEmpath: isaacs, I'll get updating those readmes for you finally
[19:04] TheEmpath: its been a busy week at work
[19:05] hsuh has joined the channel
[19:07] evl has joined the channel
[19:08] evl: I might be asking a completely stupidface question here but where can I find the documentation for the JSON object?
[19:08] matt_c_ has joined the channel
[19:09] tjholowaychuk: evl: its in v8, but basically you get JSON.stringify() and JSON.parse()
[19:09] auser: hm... For some reason, my http.createClient isn't working as expected...
[19:09] auser: is there a way to catch ALL events just for logging purposes?
[19:09] sh1mmer: creationix: mjr_ etc interested in thoughts on http://news.ycombinator.com/item?id=1760881
[19:12] kuya has joined the channel
[19:13] shockie has joined the channel
[19:13] dpritchett: i managed to get websocket-client to connect to my app but it doesn't seem to want to stay open indefinitely; it always closes after a few secs
[19:13] dpritchett: I think I need to specify a prototype that stays open when i call new WebSocket()
[19:14] hassox has joined the channel
[19:16] TheEmpath has joined the channel
[19:17] derferman has joined the channel
[19:17] spetrea: is there a really popular object-oriented module for Node.JS ?
[19:18] spetrea: I know about prototypal inheritance but that's just single inheritance and I think I'll reinvent the wheel if I have to check .prototype & stuff
[19:18] spetrea: any suggestions ?
[19:18] saikat has joined the channel
[19:18] pquerna: have you written much in node.js yet?  The use of the modules system keeps me from need to write classes/80% of the time
[19:19] pquerna: (because of how your variables inside your module are scoped, modules.* export works, etc)
[19:21] bradleymeck: spetrea what are you using multiple inheritance for?
[19:22] spetrea: bradleymeck: just experimenting, for fun
[19:22] spetrea: bradleymeck: I would trade it for mixins any given day
[19:22] ryan[WIN]: yeah don't try to do java-style oop in javascript
[19:22] bradleymeck: avoid it, only use multiple inheritance if you need to emulate an existing api
[19:23] ryan[WIN]: javascript is a dynamic language and supports runtime construction of objects
[19:23] bradleymeck: its slower than mixins :( but you do get instanceof i guess
[19:23] dohtem has joined the channel
[19:23] ryan[WIN]: if you're trying to use a design pattern or a construct of a statically compiled language in javascript you're almost always doing it wrong
[19:24] spetrea: ok I agree
[19:24] SubStack: classical hierarchies aren't too useful
[19:24] SubStack: at least, not when you've got lightweight closures
[19:24] bradleymeck: the multiple instanceof can be nice though :(
[19:24] spetrea: still, is there an OO module for node.js you like ?
[19:25] drudge: ACTION headdesks
[19:25] bradleymeck: the javascript one?
[19:25] SubStack: bradleymeck: you could just make a .isA function
[19:25] ryan[WIN]: spetrea, i have yet to use one - the module system is an excellent way to handle a lot of things like pquerna  said
[19:25] SubStack: ACTION does that in ruby >_<
[19:25] bradleymeck: substack true i guess
[19:25] spetrea: ryan[WIN]: ok then I'll use that one :)
[19:25] bradleymeck: but then you end up leaking if you hold references
[19:26] SubStack: what?
[19:26] ryan[WIN]: spetrea, require is not like #include 
[19:26] ryan[WIN]: it's not a preprocessing thing
[19:26] ryan[WIN]: it's a runtime construct
[19:26] derferman has joined the channel
[19:26] stagas has joined the channel
[19:26] ryan[WIN]: the only caveat is that modules loaded with require are synchronously loaded
[19:26] bradleymeck: if you have an Foo.isA() and you want to check its really a Foo and not something acting like a Foo you need to hold a reference to every foo
[19:27] ryan[WIN]: bradleymeck, correct
[19:27] bradleymeck: which is the leak until weakmaps become popular
[19:28] spetrea: I always get confused while reading crockford's http://javascript.crockford.com/inheritance.html
[19:29] spetrea: well I understand some of it but I really need to study/experiment hands-on deeper to understand it properly
[19:29] bradleymeck: http://howtonode.org/object-graphs might help
[19:30] ryan[WIN]: it's much easier to grasp JavaScript if you're familiar with LISP's objects
[19:30] drudge: nice article sh1mmer
[19:30] margle has joined the channel
[19:31] isaacs: mjr_: so, back to the hand pump
[19:31] sh1mmer: drudge: thanks. Any suggestions/thoughts?
[19:31] mape: fist bump?
[19:32] sh1mmer: spetrea: Doug is very computre sciency
[19:32] mif86 has joined the channel
[19:32] aho: spetrea, there are mixins n stuff in joose for example
[19:32] sh1mmer: spetrea: try Stoyan's Object Oriented JavaScript book.
[19:32] aho: http://code.google.com/p/joose-js/
[19:32] aho: (never used it myself though) :>
[19:32] spetrea: ah that's nice ! :) thanks !
[19:33] TheEmpath_ has joined the channel
[19:37] hassox has joined the channel
[19:37] loincloth has joined the channel
[19:38] ryan[WIN]: aw man
[19:39] bradleymeck: you just lost the lotto?
[19:39] ryan[WIN]: classes are compile time lookups for object relationships/members/and features
[19:39] karboh has joined the channel
[19:40] ryan[WIN]: js does not have to do it that wayyyyyyy argh
[19:40] aheckmann has joined the channel
[19:40] ryan[WIN]: :)
[19:40] ryan[WIN]: like pquerna was sayin earlier, use modules
[19:40] ryan[WIN]: require() is almost like magic
[19:41] ryan[WIN]: exports.* ftw
[19:43] aurynn: It's all variables. :)
[19:44] dpritchett: maybe my socket.io client has to send a heartbeat every so often so that it isn't hung up on
[19:44] ryan[WIN]: yeah but with the module you can do many of the things that you would normally use a class for
[19:44] ryan[WIN]: if you're using a class to hide implementation and expose an API
[19:45] ryan[WIN]: modules are perfect for that
[19:45] ryan[WIN]: you just export the interface
[19:45] dpritchett: foudn this in socket.io.js: 	Transport.prototype._onHeartbeat = function(heartbeat){ 		this.send('~h~' + heartbeat); // echo 	};
[19:46] ryan[WIN]: everything else is inaccessible from the caller's scope
[19:46] SubStack: dnode has ping ^_^
[19:47] mikeal has joined the channel
[19:47] bradleymeck: well as long as the prototypes arent exposed
[19:48] rex_fernando has joined the channel
[19:50] aslakhellesoy has joined the channel
[19:50] isaacs: sh1mmer: there's a bug in your postman example
[19:50] sh1mmer: isaacs: shoot
[19:51] isaacs: sh1mmer: there's never a stack of letters.  the postman always delivers messages as soon as they are received.
[19:51] isaacs: emit is sync
[19:51] aslakhellesoy: Is there a simple way to pump a stream (from a http put request) to stdout?
[19:51] sh1mmer: isaacs: I know
[19:51] sh1mmer: but there are other stacks
[19:51] sh1mmer: such as the kernel
[19:51] rauchg_: SubStack: when i released 0.6 as stable ping shouldn't be necessary on top of socket.io 
[19:51] isaacs: there's the event loop
[19:51] isaacs: and THAT has stacks of things
[19:52] hsuh_ has joined the channel
[19:52] SubStack: rauchg_: can the client hook on ping timeouts too?
[19:52] rauchg_: what do you mean hook
[19:52] sh1mmer: isaacs: the example does talk about how emit breaks in
[19:52] SubStack: .on('ping') for one and .on('timeout') for another
[19:52] rauchg_: ohh
[19:52] rauchg_: no, timeouts fire disconnect 
[19:52] sh1mmer: but it can only break in when it's called which means it has to be part of the current code path
[19:53] rauchg_: i've been considering adding error/timeout events
[19:53] isaacs: sh1mmer: well, emit != setTimeout/nextTick
[19:53] isaacs: emit is actually a very simple function.
[19:53] sh1mmer: irght
[19:53] sh1mmer: right
[19:53] dguttman has joined the channel
[19:53] sh1mmer: but putting it on a setTimeOut hauls it out of the code execution path
[19:53] SubStack: rauchg_: it's been important for stackvm since the connection can get saturated and the transport dies silently
[19:54] sh1mmer: which illustrates that it won't fire unless that code execution path has finished
[19:54] isaacs: emit(foo) --> call all the functions in this.listeners[foo]
[19:54] SubStack: or else the client keeps sending data long after the remote has hung up
[19:54] isaacs: setTimeout(foo) -> put foo on the event queu
[19:54] BHSPitCSP: rauchg_: how's that canvas magic coming along? :)
[19:54] sh1mmer: correct, and that was intentional
[19:54] SubStack: rauchg_: so dnode has a magical .reconnect() for those cases
[19:55] tjholowaychuk: BHSPitCSP: its coming :p got delayed a bit with some other stuff / lack of sleep
[19:55] isaacs: oh, i suppose in your slides, you did give a warning about increasingly bad metaphors so i shouldn't complain so much ;)
[19:55] BHSPitCSP: tjholowaychuk == rauchg_?
[19:55] tjholowaychuk: BHSPitCSP: nope lol I work w/ LearnBoost
[19:55] BHSPitCSP: Ah alright :P
[19:55] stagas_ has joined the channel
[19:56] sh1mmer: isaacs: heh.
[19:56] isaacs: sh1mmer: also, your slides are awesome.  omg.  i love this.
[19:56] sh1mmer: thanks
[19:56] BHSPitCSP: I want to see these slides
[19:56] sh1mmer: iPad fingerpainting ftw
[19:56] bradleymeck: tj you should just prefix your nick with [works@larnboost]
[19:57] isaacs: srsly
[19:57] isaacs: i would have read faster if i'd known that was at the end :)
[19:57] BHSPitCSP: Or they could both get learnboost organization masks from freenode :D
[19:57] hannesw_ has joined the channel
[19:57] sh1mmer: isaacs: well there is a bunch of stuff in the slide I'll cover in part 2
[19:58] sh1mmer: I wanted to make the article way more verbose for people who don't know as much as you :)
[19:58] dpritchett: maybe #node.js needs clan tags
[19:58] BHSPitCSP: I have a rather dumb question. I have a web site where you can sign in and authenticate using PHP sessions, and on that site is a game whose backend is a nodejs server. How can I handle authenticating between the two?
[19:59] aurynn: That's a fairly complex architecture question.
[19:59] bradleymeck: indeed
[19:59] BHSPitCSP: s/rather dumb/rather complex architecture/
[19:59] matt_c has joined the channel
[19:59] bradleymeck: i would recommend a 3rd party storage place and id the sessions for both
[19:59] dpritchett: to be fair BHSPitCSP said how *can* I, not how *should* i
[19:59] dpritchett: that simplifies the question a bit
[19:59] hassox has joined the channel
[20:00] aurynn: Okay, you can write a session id to a shared store, and have the node.js system test for a cookie.
[20:00] unomi: just set url hash ?trustme=true
[20:00] bradleymeck: ie throw the session data into redis etc and look it up when you need to from either end
[20:00] BHSPitCSP: unomi: thanks! that works
[20:00] unomi: no worries
[20:00] bradleymeck: as long as its not persistent url schemes could work
[20:01] rauchg_: BHSPitCSP: tjholowaychuk is the canvasm an
[20:01] robotarmy has joined the channel
[20:02] BHSPitCSP: rauchg_: did we ever figure out the prefix thing?
[20:02] path[l] has joined the channel
[20:05] BHSPitCSP: IIRC, the stable cdn-hosted client script isn't new enough to recognize that schema
[20:05] hpoydar has joined the channel
[20:05] spetrea: is there a way to make a blocking sleep in Node.JS , I want to use an API but don't want to make too many requests
[20:07] spetrea: maybe setTimeout will do it..
[20:07] bradleymeck: no
[20:07] blowery: spetrea: http://journal.paul.querna.org/articles/2010/09/04/limiting-concurrency-node-js/
[20:07] bradleymeck: it wont block there are better ways
[20:10] rnewson_ has joined the channel
[20:10] rnewson_ has joined the channel
[20:12] abiraja has joined the channel
[20:13] Sami_ZzZ has joined the channel
[20:15] aconbere has joined the channel
[20:16] blackdog_ has joined the channel
[20:19] Evet: anyone into Kyoto Cabinet?
[20:22] coffeecup: how can i convert binary data back to an image? 
[20:25] JimBastard_ has joined the channel
[20:26] chuhnk has joined the channel
[20:27] mape: base64?
[20:28] mape: uri data?
[20:28] stephenjudkins has joined the channel
[20:33] xla has joined the channel
[20:33] dgathright_ has joined the channel
[20:38] xla has joined the channel
[20:38] rnewson has joined the channel
[20:39] sh1mmer has joined the channel
[20:41] cloudhead has joined the channel
[20:43] galaxywatcher has joined the channel
[20:44] jacobolus has joined the channel
[20:45] ekidd has joined the channel
[20:48] nerdEd has joined the channel
[20:52] benv has joined the channel
[20:53] mikeal has joined the channel
[20:59] ryah: http://codereview.chromium.org/3615009/show :)
[20:59] ryah: multicore gc
[20:59] wink_: nice
[21:00] pgriess: huzzah
[21:00] wink_: ryah: just a heads up, there appears to be some problems with the crypto stuff on openssl 1.0.0, i've not narrowed all of them down, but got the hmac stuff working properly
[21:00] wink_: i know thats probably a sore spot though
[21:01] bradleymeck: whew multicore gc, multicore code gen next?
[21:01] bradleymeck: catching up to ie9 when they do, esp since function construction is pretty darn costly
[21:02] c4milo has joined the channel
[21:02] mape: ryah: if accepted what is the "usual" turnover rate untill it lands into node(v8)? weeks? months?
[21:02] dguttman_ has joined the channel
[21:03] aho: well, how much did the v8 and sunsider scores improve? :>
[21:05] derferman has joined the channel
[21:05] aconbere has joined the channel
[21:06] rauchg_ has joined the channel
[21:06] digitalspaghetti: whats a good format for comments that generate decent docs?
[21:07] digitalspaghetti: (for js obviously)
[21:07] bradleymeck: mape why not check the git log deps/v8 ? see when the submodule commit reference changes
[21:08] tjholowaychuk: digitalspaghetti: I use jsdoc-ish + http://github.com/visionmedia/dox for stuff like http://expressjs.com/api.html
[21:08] bradleymeck: digitalspaghetti jsdoc is pretty common, but know the problems with in file documentation
[21:08] aho: yuidoc is ok-ish
[21:09] aho: (if you ignore the somewhat ugly default template)
[21:09] TheEmpath has joined the channel
[21:09] aho: the only annoying thing is that it uses @return instead of @returns
[21:10] digitalspaghetti: tjholowaychuk: cool, yours seems pretty easy :D
[21:10] charlenopires has joined the channel
[21:10] aho: (the latter is autocompleted in komodo)
[21:10] tjholowaychuk: digitalspaghetti: it is not very flexible lol that is pretty much what you get, but I like it
[21:11] digitalspaghetti: I just want simple for now
[21:11] hassox has joined the channel
[21:12] mikeal has joined the channel
[21:14] mikeal has joined the channel
[21:14] tilgovi has joined the channel
[21:15] Tim_Smart has joined the channel
[21:16] rasputnik has joined the channel
[21:16] pedrobelo has joined the channel
[21:18] aubergine has joined the channel
[21:18] JimBastard_ has joined the channel
[21:18] JimBastard_: who can i talk to about getting a refund for my monthly npm subscription ?
[21:19] isaacs: JimBastard: it's in the mail
[21:19] isaacs: probably has someone else's name on it, though
[21:19] isaacs: you should probably go down to those blue boxes and just start opening shit
[21:19] JimBastard_: i didn't get anything? (ohh i must have forgotten to STAMP it )
[21:19] JimBastard_: ouch 
[21:19] isaacs: i mean, better safe than sorry
[21:19] isaacs: right?
[21:19] JimBastard_: :-D
[21:20] JimBastard_: i declare isaacs immune to gruff until npm 1.0
[21:20] isaacs: aw, thanks
[21:20] isaacs: the gruff is useful, though
[21:20] JimBastard_: true true
[21:20] JimBastard_: just dont let it get you down, you are doing great work so far
[21:20] isaacs: thanks.
[21:20] isaacs: i don't
[21:21] isaacs: i don't even think most of it is really personally motivated.  i mean, it's just "hey, my toy is broken" whining.  i do it, too.  we all do.
[21:22] zorzar_ has joined the channel
[21:22] spetrea: I suck at synchronization
[21:23] spetrea: I just wrote a github follower spider with setTimeout re-calls of the method that is crawling and a counter of current number of connections to not overwhelm the API
[21:23] zorzar_: hey i'm trying to figure out how to install npm in ~/.local i have node.js installed in /usr, but want to have an npm install per user
[21:23] spetrea: apparently after 10 seconds of running current connections hits max and doesn't go back ..
[21:23] Tim_Smart: zorzar_: All in the .npmrc, yol.
[21:24] mattly has joined the channel
[21:24] isaacs: zorzar_: well, if you have it installed in /usr/local already, then that's the global install.
[21:24] spetrea: it seems to be some kind of deadlock
[21:24] isaacs: zorzar_: the next version is going to have an `npm fix-root` that makes this stupid easy
[21:25] zorzar_: isaacs: i don't have it in /usr/local
[21:25] isaacs: zorzar_: or check this gist: http://gist.github.com/579814
[21:25] Tim_Smart: isaacs: Make a node.js install script. Most people have node.js installed before npm.
[21:25] isaacs: zorzar_: i thought you said that you had npm installed in /usr?
[21:25] zorzar_: yeah found that
[21:26] zorzar_: where does node have it's root by default?
[21:26] zorzar_: npm i mean
[21:26] isaacs: Tim_Smart: the official story will be: install node as root.  install npm as root.  run the npm multi-user-setup command (or whatever it ends up being called).  never ever use sudo with npm again
[21:26] isaacs: zorzar_: npm config get root <-- there
[21:26] dguttman has joined the channel
[21:26] isaacs: zorzar_: oh, by default.  yeah, by default it's {node's install location}/../lib/node
[21:26] zorzar_: i don't have npm installed
[21:26] zorzar_: ok
[21:26] dguttman has joined the channel
[21:27] isaacs: zorzar_: how does that "official story" sound to you?  would that solve your issue?
[21:27] zorzar_: yeah
[21:27] isaacs: zorzar_: the idea would be then that, when running with sudo, the only installed package appears to be npm itself.
[21:27] isaacs: but to install anythign else, you install it just for yourself.
[21:27] isaacs: and i give you a very easy way to do that
[21:27] isaacs: like, one command, answer a few questions, and then it Just Works.
[21:28] zorzar_: my problem is that npm installation mechanism isn't too transparent
[21:28] isaacs: and you just do "sudo npm update" to get new versions of npm
[21:28] ajsie has joined the channel
[21:28] isaacs: zorzar_: it's transparent if you like reading javascript ;)
[21:29] coffeecup: mape: thx i got it working now
[21:29] mape: ?
[21:29] coffeecup: the binary to image thingy
[21:30] Tim_Smart: isaacs: Remember that web framework I was talk to you about ages ago?
[21:30] zorzar_: ok i now have a .npmrc in my home have the env variable "npm_config_userconfig" set and in my .npmrc i have "root = $HOME/.local/lib/node; binroot = $HOME/.local/bin" does that sound good?
[21:30] isaacs: Tim_Smart: i love it when ya call me big poppa?
[21:30] isaacs: Tim_Smart: throw ya hands in the air, if you's a true playa?
[21:31] Tim_Smart: big poppa, it's coming along yol.
[21:31] pedrobelo has joined the channel
[21:31] isaacs: nice
[21:31] Tim_Smart: Each component can be used agnostically.
[21:31] isaacs: zorzar_: yeah, but just that it shoudl be your home dir, not a literal string '$HOME'
[21:31] isaacs: zorzar_: it's smart enough to interpret ~/, though
[21:32] isaacs: zorzar_: you should also set manroot to ~/.local/share/man or something
[21:32] zorzar_: isaacs: why doesn't it read env variables?
[21:32] Tim_Smart: JimBastard: You are apparently one of the organisation owners too http://github.com/biggie
[21:32] Tim_Smart: Don't kill it please :p
[21:32] isaacs: zorzar_: you don't actually have to set the npm_config_userconfig var.  ~/.npmrc is the default
[21:32] isaacs: zorzar_: it does
[21:33] Tim_Smart: Who is this JimBastard_ with a dash?
[21:33] isaacs: zorzar_: http://github.com/isaacs/npm/blob/master/lib/utils/default-config.js <-- default config setting logic there
[21:33] Tim_Smart: What did he do with the real JimBastard
[21:33] JimBastard_: Tim_Smart: multiple machiens
[21:33] zorzar_: isaacs: then what's the problem with using $HOME then?
[21:33] mape: coffeecup: ah neat :)
[21:33] kevwil has joined the channel
[21:33] Tim_Smart: JimBastard_: Damn you and your skynet.
[21:33] isaacs: zorzar_: well, it just doesn't know what to do with dollar sign 'h' 'o' 'm' 'e'
[21:34] JimBastsard: oosp
[21:34] mape: Tim_Smart: saw the new mongodb model thingy?
[21:34] zorzar_: isaacs: ok
[21:34] Tim_Smart: mape: Where?
[21:34] admc has joined the channel
[21:34] isaacs: zorzar_: it replaces /~\// with process.env.HOME+"/"
[21:34] JimBastsard: wtf where is JimBastard signed in from
[21:34] mape: Tim_Smart: Oh, might not be new, http://github.com/masylum/Mongolia
[21:34] JimBastard: mwhahahaha YOULL NEVER CATCH ME
[21:35] JimBastard_: dammit
[21:35] Tim_Smart: mape: Nope. Never seen it.
[21:35] JimBastard_: i should let you guys know there is really like 5 people who use this account
[21:35] JimBastard_: its how im always here talking
[21:35] JimBsatard: Marak is not one person.
[21:35] JimBsatard: Marak is a concept.
[21:35] JimBastard_: >>>><<<<<<
[21:35] JimBsatard: We are all part of the Great Marak.
[21:35] JimBsatard: JOIN US!
[21:35] zorzar_: isaacs: ok thx
[21:35] TooTallNate has joined the channel
[21:36] mape: Tim_Smart: might give som ideas
[21:36] JimBastard_: our home base is in morroco http://en.wikipedia.org/wiki/Marrakech
[21:36] tilgovi: if there's no explicit protocol, url.parse() can get confused by hostname:port form into thinking hostname is the protocol
[21:36] Tim_Smart: mape: Interesting. Did you end up playing with biggie-orm?
[21:36] isaacs: JimBastard: you mean MARAKo!!
[21:36] tilgovi: would you like me to patch it?
[21:37] isaacs: tilgovi: got a test that fails?
[21:37] Tim_Smart: mape: I just finished off the associations with many to many relations.
[21:37] tilgovi: url.parse("localhost:8080/test")
[21:37] isaacs: tilgovi: also, you'd have to make sure that your patch passes the other many many tests in there.
[21:37] Tim_Smart: Well finished as in first revision.
[21:37] TooTallNate has joined the channel
[21:37] mape: Tim_Smart: sorry no, didn't have anything decent to test it on so it kinda slipped my mind
[21:37] tilgovi: isaacs: yeah. I'm not sure what the appropriate thing is here. maybe my code should be rejecting a host header that doesn't include http(s), or maybe url.parse can be smarter
[21:38] isaacs: tilgovi: how do you tell the difference between that and mailto:isaacs?
[21:38] tilgovi: ahhh, there's the counterexample I couldn't think of
[21:38] Tim_Smart: mape: Oh that is cool, just looking for some feedback.
[21:38] tilgovi: I had a feeling
[21:38] TooTallNate: isaacs: What causes "illegal access" in npm?
[21:38] TooTallNate: isaacs: https://gist.github.com/fb5dab7d59c4a1de8dd5
[21:38] admc_ has joined the channel
[21:38] tilgovi: I was imagingi http(s):// and file:// and couldn't think of how it'd be ambiguous which part is protocol
[21:38] isaacs: TooTallNate: probably reading or writing something that youe 'not allowed to
[21:39] mape: Tim_Smart: As soon as I have something to use it on I'll make sure to send some feedback
[21:39] tilgovi: i'll just sanitize the host header if I have to, assuming http
[21:39] isaacs: TooTallNate: does it fail when you don't run as root?
[21:39] TooTallNate: yes
[21:39] TooTallNate: actually, idk, root is the only user
[21:39] isaacs: tilgovi: so, the // is actually optional in most cases.
[21:39] Tim_Smart: mape: Hopefully by then I have the biggie framework in a workable state, so you can use the framework.
[21:39] tilgovi: isaacs: that I didn't know.
[21:39] isaacs: tilgovi: http:foo is a valid relative url.
[21:39] tilgovi: why isn't it http:/foo
[21:40] tilgovi: where's the double slash come from
[21:40] tilgovi: I guess /foo would be absolute on the same host
[21:40] mape: Tim_Smart: It's more connect then express right?
[21:40] isaacs: tilgovi: because, starting from http://host/current/path http:/foo is http://host/foo whereas http:foo is http://host/current/foo
[21:40] zorzar_: isaacs: shouldn't i add ~/.local/lib/node to node's path? if so how do i do that? i just installed fugue, copy pasted their example and node can't finde the fugue module
[21:40] tilgovi: isaacs: got it. web is hard.
[21:40] isaacs: zorzar_: where is node installed?
[21:40] isaacs: tilgovi: well, url resolution is particularly nasty.
[21:41] isaacs: tilgovi: like most things on the web, it's all in the edge cases.
[21:41] zorzar_: isaacs: /usr/bin/node
[21:41] derferman has joined the channel
[21:41] isaacs: zorzar_: then ~/.local/lib/node won't be in the NODE_PATH
[21:41] tilgovi: isaacs: I'm trying to figure out the most tolerant way to rewrite the location header when my reverse proxy gets a 301 from upstream
[21:41] isaacs: zorzar_: imo, you should install node in $HOME if you want npm to work in $HOME by default, or hold off for the next version.
[21:41] isaacs: (next version of hpm)
[21:41] Tim_Smart: mape: biggie-router is like connect, but it has lots of modules that can help. Like the orm, and I'll be adding biggie-asset and biggie-sync soon. Basically the framework will bundle them all together is a nice way.
[21:41] isaacs: *npm
[21:42] isaacs: tilgovi: so... i wonder if we could like, just assume that it's not a host unless it has //, when it's not relative.
[21:42] mape: Yeah, the modules work with connect so my asset manager should work with it?
[21:42] zorzar_: isaacs: ok sad
[21:42] Tim_Smart: mape: Correct, they work as any other module standalone.
[21:42] isaacs: tilgovi: there's this flag so that it can interpret //asdf/foo as a path instead of a host/path
[21:42] mape: Tim_Smart: nice
[21:42] zorzar_: isaacs: is NODE_PATH a env variable node uses?
[21:43] isaacs: zorzar_: last alternative, you can set npm's root to ~/.node_libraries
[21:43] isaacs: zorzar_: that's in the NODE_PATH by default
[21:43] isaacs: zorzar_: yes
[21:43] isaacs: gosh, this stuff is NOT documented well.
[21:43] isaacs: or rather, IRC is a shitty documentation tool.
[21:43] isaacs: ^_^
[21:43] zorzar_: isaacs: hehe hmm NODE_PATH is empty for me
[21:43] TheEmpath: isaacs, i've made changes to the readme
[21:43] TheEmpath: should i just merge it into the origin or?
[21:44] isaacs: zorzar_: it takes the NODE_PATH, then cats that to ~/.node_libraries:{prefix}/lib/node
[21:44] isaacs: TheEmpath: sure.
[21:44] zorzar_: isaacs: if node uses NODE_PATH i should be able to add a path to it
[21:44] TheEmpath: i dont think i can.. its read-only :X
[21:44] isaacs: TheEmpath: rebase on latest master, push, send pull req
[21:44] isaacs: TheEmpath: oh, well, fork the repo and owrk on your own fork
[21:44] TheEmpath: ah
[21:44] matt_c has joined the channel
[21:44] isaacs: TheEmpath: or do: git fetch -a origin ; git format-patch origin/master
[21:44] zorzar_: isaacs: yay that worked
[21:45] kevwil has joined the channel
[21:45] mape: isaacs: you should just get do a command ala !faq npm <person1> <person2> <how many lines back to save> Title for the question
[21:45] isaacs: tilgovi: yeah, i think using the "not doing a relative resolution thing" flag is probably the best bet.
[21:45] mape: Like lastlog, only it takes 2 peoples lines and saves it somewhere you can point people
[21:46] isaacs: mape: that's a great ide
[21:46] tilgovi: isaacs: existing flag, or you're saying add something?
[21:46] isaacs: tilgovi: there's something like that now in url.js
[21:46] mape: Probly very easy to do in irssi (if one can combat the perl)
[21:47] isaacs: tilgovi: that's why url.parse(req.url) works now, even when it starts with //
[21:47] isaacs: mape: nah, the node irc agents are pretty baller these days
[21:47] isaacs: ircretary: what time is it?
[21:47] ircretary: isaacs: It's 2010-10-05T21:47:17.785Z by my watch, sir.
[21:47] halfhalo: heh... redid my irc plugin setup
[21:47] mape: Anyone gots the ncurses one working neat?
[21:47] isaacs: ircretary: tell mape he's got a funny hat.
[21:47] ircretary: isaacs: I'll be sure to tell mape
[21:47] mape has left the channel
[21:47] mape has joined the channel
[21:47] mape: heh
[21:48] TheEmpath: ok, so i've done the format-patch, i've made a commit, now what?
[21:48] TheEmpath: isaacs: ^
[21:48] isaacs: ircretary: when did you last see mape?
[21:48] ircretary: isaacs: mape was last seen at 2010-10-05T21:47:51.134Z, in #Node.js saying heh
[21:48] tilgovi: isaacs: as the code's written right now, it's too late at the point where that flag comes into play. protocol has already been stripped off
[21:48] mape: well there you go, even easier
[21:48] halfhalo: How plugins work now: http://github.com/halfhalo/Node.js-IRC/blob/master/plugins/vendor/helloWorld.js
[21:48] isaacs: TheEmpath: send the .patch file to npm-@googlegroups.com
[21:48] tilgovi: isaacs: I'll think about it and play with it. don't stress.
[21:48] halfhalo: Crap, forgot to push with the callbacks...
[21:48] TheEmpath: hur i go!
[21:48] isaacs: TheEmpath: or just to i@izs.me if you're too lazy to join the group.  but you should join the group
[21:49] TheEmpath: ill join the group
[21:49] isaacs: kewl
[21:50] mape: partys all around
[21:51] mape: isaacs: the repo down?
[21:51] mape: nm, just slow
[21:51] TheEmpath: k done
[21:51] TheEmpath: http://groups.google.com/group/npm-/browse_thread/thread/eeeed6db8cf0125
[21:51] zorzar_: i think i saw a beautiful soup implementation in node.js some days ago does anybody know that?
[21:52] tilgovi: isaacs: can you think of a situation where a negative lookahead assertion that "\d+\/" does not follow the protocol wouldn't work?
[21:52] isaacs: TheEmpath: kewl.  in the future, could you send patches as attachments rather than inline?  no need to resend this one, but it makes it easier to apply.
[21:52] tilgovi: i.e., with a negative look-ahead we'd still match protocols but host:port/ wouldn't match
[21:52] TheEmpath: lemme do that now
[21:52] mape: isaacs: takes 20.39sec to fetch the repo jsonp, just so you know
[21:53] isaacs: wow
[21:53] isaacs: mape: probably the views aren't up to date or something.
[21:53] isaacs: mape: also, it may be ec2's oddness
[21:53] mape: Damn those ec2s
[21:53] mjr_: isaacs: npm registry has been super slow all day
[21:53] isaacs: tilgovi: not sure.  haven't seen that code in a long time
[21:53] mjr_: like, SUPER slow
[21:53] isaacs: yeah
[21:54] isaacs: i've also been kinda slamming it with all sorts of crap and replication requests and such
[21:54] mjr_: It's too bad you don't work for a hosting company so you could get access to a nice place to run that db.
[21:54] mjr_: Oh well
[21:55] mjr_: Roomba needs CPU cycles.
[21:55] isaacs: hahah
[21:55] isaacs: mjr_: yes, the registry will live on some subdomain of nodejs.org fairly soon
[21:55] isaacs: mjr_: and on joyent awesomeness
[21:58] mape: isaacs: making a new page with purty www docs and whatnot?
[21:58] isaacs: mape: let's not get crazy
[21:58] mape: And some howtos to send new users to
[21:58] Lerchmo has joined the channel
[21:58] mape: Just send the designers at joyent some beer and you have it fixed in no time
[22:00] c4milo has joined the channel
[22:00] ryan[WIN] has joined the channel
[22:00] mjr_: Just send mape a few more ipads or whatever
[22:00] mjr_: You'll fix it up, right?
[22:01] mape: I could need one more of them 27" cinema displays ;)
[22:01] halfhalo: _only_ 27"?
[22:02] halfhalo: tsktsktsk
[22:02] mape: Or just hurry up Apple in Sweden to skip the silly 2week wait
[22:03] bbttxu has joined the channel
[22:03] aurynn: we all need 27" cinema displays.
[22:03] halfhalo: I'm happy with my 2148x1152 21.5" samsung
[22:04] mjr_: Why stop at 27 when 30's are getting more affordable all the time?
[22:04] JimBastard_: ive got dual 28inch
[22:04] JimBastard_: plus the macbook screen :-D
[22:04] JimBastard_: its overwhelming 
[22:05] mape: mjr_: pretty much the same res on 27" (a little lower) 
[22:05] halfhalo: I wish this mac mini could support more than two monitors...
[22:05] mape: JimBastard_: using a projector with some tape in the middle doesn't count
[22:05] halfhalo: :(
[22:05] JimBastard_: two computers
[22:05] JimBastard_: pc is running dual 28inchers
[22:05] JimBastard_: its real mape
[22:05] JimBastard_: lol
[22:05] JimBastard_: they were only $249.99 a piece
[22:05] mjr_: I've got dual 30's, and it's kinda too much.  Heats up the room a lot.
[22:05] JimBastard_: coming from 10 years ago, i like couldn't justify NOT getting it
[22:05] JimBastard_: mjr_: CRT?
[22:06] mape: cinema I would guess
[22:06] mjr_: No, dual 30" LCDs.
[22:06] JimBastard_: you win
[22:06] JimBastard_: fuck
[22:06] JimBastard_: lol
[22:06] mape: 30" CRT is just.. silly
[22:06] halfhalo: lol
[22:06] JimBastard_: my epeen has been emasculated by your massive displays 
[22:06] mjr_: My stuff is all old though, ~3 years ago
[22:06] mape: JimBastard_: What are the monitors? Never seen 28"
[22:07] JimBastard_: i bow before your leetness
[22:07] JimBastard_: mape: http://www.amazon.com/I-Inc-Lcd-If281Dpb-Hdmi-Hdcp/dp/B000WOL3B4
[22:07] isaacs: ACTION uses a macbook pro.
[22:07] isaacs: like, just a macbook pro
[22:07] isaacs: 15.4" ftw
[22:07] JimBastard_: i got a macbook pro
[22:07] JimBastard_: FOR FREE
[22:07] shimondoodkin: it is face heater PRO
[22:07] isaacs: JimBastard: ME TOO!!
[22:07] halfhalo: SO DID I
[22:07] isaacs: JimBastard: just for being hired
[22:07] JimBastard_: i had to get fired to get mine
[22:08] halfhalo: mine has a knife wound though...
[22:08] isaacs: i got another one for about $2000 more than free...
[22:08] mape: JimBastard_: isn't that a TV?
[22:08] mape: The res sounds low for 28"
[22:08] JimBastard_: mape: lol is it?
[22:08] JimBastard_: im currently running 1920x1200
[22:09] mjr_: JimBastard_: http://www.flickr.com/photos/mranney/5055635352/
[22:09] JimBastard_: mjr_: nice
[22:09] JimBastard_: at least i got your audio beat
[22:09] mape: JimBastard_: The 27" cinema/iMac runs 2560 x 1440
[22:09] JimBastard_: i have my studio monitors here
[22:09] JimBastard_: mape: o well
[22:09] JimBastard_: how much does those cost?
[22:09] mape: The cinema ones are only $1000
[22:10] isaacs: mjr_: i'm actually a fan of having less showing on my monitor at once.
[22:10] spetrea: I finally worked out the synchronization problems
[22:10] JimBastard_: 249.99...1000....
[22:10] JimBastard_: hrmm
[22:10] mjr_: Looks like they are around $1,000
[22:10] isaacs: mjr_: 16pt editor and terminal, small-ish windows.
[22:10] JimBastard_: i think id rather have 4 of these
[22:10] isaacs: when less code is showing at once, you have to factor things into smaller pieces.
[22:10] JimBastard_: isaacs: i usually dont code on the big screens
[22:10] spetrea: blowery: the link you gave me, I understood the idea from it
[22:10] mape: JimBastard_: But you lose them 600px width!
[22:10] spetrea: blowery: and used it in my spider
[22:10] JimBastard_: i use them for movies / irc / firebug
[22:10] mape: browsers
[22:10] JimBastard_: firebug is really nice on the large screens
[22:10] mape: im
[22:10] JimBastard_: yeah
[22:11] halfhalo: I like my samsung
[22:11] mjr_: I use the extra space for log windows mostly
[22:11] isaacs: yeah, firebug assumes you've got like a 3000px screen
[22:11] JimBastard_: chezburger time, bbl
[22:11] halfhalo: was 200 and has a higher than 1080p res
[22:11] mape: mjr_: Aren't those monitors adjustable in height? (why the book?)
[22:12] mjr_: They are already at their max height.  I would put volume 1 under the other one, but I need it from time to time.  :)
[22:12] mape: ah k
[22:12] tilgovi: is it normal that test-fs-symlink.js and test-http-upgrade-client2.js fail?
[22:13] mape: mjr_: btw looked at divvy?
[22:13] mjr_: I have not
[22:13] mape: http://www.mizage.com/divvy/
[22:13] zorzar_: mjr_: you should think about using a tiling window manager seems to be os x though :(
[22:14] mape: handy app for managing windows, especially terminal windows and whatnot
[22:15] mjr_: watching divvy video.  Pretty slick.
[22:15] WALoeIII has joined the channel
[22:16] spetrea: anyone wanna try my github spider ? http://github.com/wsdookadr/github-spider/blob/master/app.js
[22:18] mape: mjr_: there is also zooom2 for hotkey enabling to resize/move windows when the cursor is in the middle of them, think that is pretty common in linux desktop land
[22:18] mjr_: Yeah, I've used zooooooooooom2 before.  It's neat, but I ended up not using it that much.
[22:19] mape: seems like those applications are a hit and miss, even if they are neat, if you don't get in the habit of using them they just fade away
[22:19] mape: But I wouldn't manage without them
[22:19] shimondoodkin: there is  asimilar software for windows called "winsplit revolution" and it is free
[22:20] mape: there is also cinch but divvy is more full featured
[22:20] shimondoodkin: spetrea: ilike it
[22:21] ezmobius has joined the channel
[22:22] dipser_ has joined the channel
[22:22] UHMA has joined the channel
[22:22] pquerna: Error: ENOENT, No such file or directory at node.js:608:9
[22:22] pquerna: my favourite.
[22:22] mjr_: yeah, that's a good one
[22:24] JimBastard_: spetrea: what are you doing with that data
[22:25] spetrea: JimBastard_: I plan to use thejit on it
[22:25] JimBastard_: ?
[22:25] JimBastard_: to do what
[22:25] spetrea: JimBastard_: http://thejit.org/static/v20/Jit/Examples/Hypertree/example1.html
[22:25] spetrea: JimBastard_: just fun
[22:25] JimBastard_: spetrea: did you see, http://blog.nodejitsu.com/most-influential-github-users-by-location
[22:26] spetrea: shimondoodkin: thanks man, that's really a reward for me, last 3-4 hours just on that
[22:26] JimBastard_: could prob use your spider code instead of that ruby abomination i used
[22:26] JimBastard_: wanted to rewrite it in node anyway
[22:27] TheEmpath: so im at socket.ios site
[22:27] spetrea: JimBastard_: fork mine :)
[22:27] spetrea: JimBastard_: it would be the first fork I get :)
[22:27] TheEmpath: the npm is 0.5, but they are advertising they have .6
[22:27] tpryme has joined the channel
[22:27] TheEmpath: the instructiosn for git are git clone git://github.com/LearnBoost/Socket.IO-node.git socket.io --recursive 
[22:27] JimBastard_: spetrea: i watch first, fork later
[22:27] TheEmpath: i do that... but now what?  theres a makefile but no instructiosn on what to do with it
[22:27] spetrea: JimBastard_: that's ok also :)
[22:28] JimBastard_: lol, TheEmpath you work for warner?
[22:28] TheEmpath: i cannot confirm or deny that
[22:29] JimBastard_: ahahaha
[22:29] JimBastard_: whats the issue you are having exactly?
[22:29] kriszyp_ has joined the channel
[22:29] JimBastard_: i knew a bunch of people inside wmg
[22:29] TheEmpath: im used to ./configure, make, and make install
[22:30] JimBastard_: thats how you build node, yes
[22:30] TheEmpath: but apparently git clone --recursive handles that?
[22:30] rauchg_: TheEmpath: 
[22:30] rauchg_: 0.6 is not stable yet 
[22:30] rauchg_: but will be 
[22:30] rauchg_: very soon
[22:30] rauchg_: maybe as soon as today :P
[22:30] TheEmpath: 0.5 on npm is busted as well
[22:30] JimBastard_: i dont see what git clone and make have to do with each other
[22:30] rauchg_: 0.5.3 should work perfectly, it's in production in many sites
[22:30] TheEmpath: a few of us in this channel have had issues with it
[22:30] CIA-77: node: 03Ryan Dahl 07master * r7fca101 10/ (34 files in 6 dirs): Upgrade V8 to 2.4.8 - http://bit.ly/coz7WQ
[22:30] CIA-77: node: 03Ryan Dahl 07master * r5986a58 10/ deps/libeio/darwin/config.h : #define HAVE_FDATASYNC 0 for darwin; 10.5 is missing it - http://bit.ly/bPKhDI
[22:31] TheEmpath: i dont either jimbastard_
[22:31] JimBastard_: you trying to install socket.io?
[22:31] TheEmpath: but apparently, thems the install instructions
[22:31] TheEmpath: ya
[22:31] JimBastard_: its a node app
[22:31] JimBastard_: you clone that shit
[22:31] JimBastard_: and run it
[22:31] digitaltoad has joined the channel
[22:31] rauchg_: TheEmpath: 
[22:32] rauchg_: if you wanna see an example 
[22:32] rauchg_: check out 
[22:32] bradleymeck has joined the channel
[22:32] rauchg_: guille/jsconf-todo-demo
[22:32] rauchg_: it has installation instructions as well
[22:32] TheEmpath: nifty
[22:32] TheEmpath: thanks
[22:33] JimBastard_: i wonder if i know TheEmpath from other handles
[22:33] JimBastard_: TheEmpath: do you know marak?
[22:33] derferman has joined the channel
[22:33] TheEmpath: marak?  i do not
[22:33] pablort has joined the channel
[22:33] JimBastard_: aight, just wondering. i was talking to a few JS guys out of wmg the other month
[22:34] TheEmpath: there are many divisions
[22:34] JimBastard_: yeah, this was all online anyway
[22:34] rauchg_: there're so many divisions 
[22:34] ezmobius has joined the channel
[22:34] rauchg_: you can't even begin to understand marak.
[22:34] TheEmpath: lol?
[22:34] JimBastard_: i never understand marak
[22:34] rauchg_: me either
[22:35] TheEmpath: i am not in a position to say one thing or another about a company that i may or may not work at
[22:35] TheEmpath: jesus im worse than the CIA at this
[22:35] JimBastard_: yeah i mean, irc isnt helping you
[22:35] JimBastard_:  /whois
[22:35] JimBastard_: [18:35] == TheEmpath [~TheEmpath@system5.wmg.com]
[22:35] TheEmpath: I'll setup a SOCKS tomorrow
[22:35] TheEmpath: change my name
[22:35] TheEmpath: lay low
[22:35] TheEmpath: come back
[22:35] TheEmpath: be like "yo, hi"
[22:35] JimBastard_: k
[22:36] TheEmpath: im not quite used to working in a position as this
[22:36] JimBastard_: peon?
[22:36] TheEmpath: im used to being just a code monkey off in the nethers
[22:36] JimBastard_: :p
[22:37] benv has joined the channel
[22:37] TheEmpath: thanks for the example rauchg_
[22:37] JimBastard_: dont worry, one day you'll be funemployeed and get to tease people who join the node room from corporate networks
[22:37] JimBastard_: crap, thats me
[22:37] TheEmpath: lol
[22:37] rauchg_: np
[22:37] TheEmpath: i was funemployed a few months back
[22:37] TheEmpath: took two months off
[22:37] rauchg_: im gonna get 0.6 out the door asap 
[22:37] TheEmpath: it was great
[22:37] rauchg_: so that people stop getting confused :D
[22:38] TheEmpath: im madly in love with node.js
[22:38] techwraith has joined the channel
[22:38] techwraith: Me too :)
[22:38] rauchg_: so are we, we spend here all our days
[22:38] TheEmpath: the potential is really good for this framework
[22:38] TheEmpath: a unified language across all layers... oh yeah, sign me up, im tired of the tower of babel
[22:39] techwraith: Anyone know how to define the content type headers for pre-1.0 express (not express/connect)?
[22:39] JimBastard_: node?
[22:39] mape: what framework would that be?
[22:39] JimBastard_: techwraith: you can just like modify the response directly no?
[22:39] TheEmpath: node's considered a framework, ya?
[22:39] rauchg_: techwraith: wasnt it this.contentType()
[22:39] rauchg_: TheEmpath: in a way.
[22:39] JimBastard_: i dont know if node is a framework, semantics. maybe a platform
[22:39] JimBastard_: maybe just "awesome"
[22:40] tjholowaychuk: techwraith: cant remember I think it was contentType() like rauchg_ said
[22:40] techwraith: Thanks guys :)
[22:40] tjholowaychuk: JimBastard_: thats kinda what I like about node the most, it just takes care of so many things
[22:40] tjholowaychuk: in such a rad way
[22:40] techwraith: (we'll migrate over to connect soon I hope, lack of documentation on old express is killing me, lol)
[22:40] tjholowaychuk: techwraith: hehe sorry :)
[22:41] tjholowaychuk: dont be afraid to view source though, source is your friend
[22:41] JimBastard_: but it leaves many things open for implementation, kinda a reflection of the language its built on
[22:41] JimBastard_: javascript
[22:41] JimBastard_: let the node circle jerk commence
[22:41] halfhalo: ACTION backs away slowly
[22:41] TheEmpath: EDP wrapper fro V8?
[22:41] TheEmpath: for*
[22:42] eisd has joined the channel
[22:42] derferman has joined the channel
[22:44] paulr_ has joined the channel
[22:45] ajpiano has joined the channel
[22:50] hannesw_ has joined the channel
[22:54] devinus has joined the channel
[22:54] devinus: so...isn't it about time to write node's build system with node? :)
[22:54] Tim_Smart: rauchg_: I don't know why, but I'm the npm owner of socket.io. I noticed it hasn't gone past 0.5.3 yet so I haven't updated for some time.
[22:55] isaacs: Tim_Smart: you and rauch are both listed as owners
[22:55] Tim_Smart: Oh good.
[22:55] isaacs: either of you can push, or add owners, or remove yourself or the other person
[22:55] sschuermann has joined the channel
[22:55] sschuermann: re
[22:55] Tim_Smart: Suicide?
[22:55] Tim_Smart: Yay.
[22:56] isaacs: Tim_Smart: well, more like a hand-off
[22:56] isaacs: less violent, really :)
[22:57] ezmobius has joined the channel
[22:58] inimino: devinus ⋱ Build systems are a swamp from which many confident hackers have never returned.
[22:58] q_no has joined the channel
[22:58] Tim_Smart: Leaves the self hating hackers to write build systems.
[22:59] isaacs: yeah
[22:59] SubStack: npm supports multiple owners :o
[22:59] isaacs: build systems make package managers look trivial.
[22:59] SubStack: building!
[22:59] SubStack: I try to avoid that business
[23:00] Tim_Smart: Leaky homes etc.
[23:00] jashkenas has joined the channel
[23:02] sstephenson has joined the channel
[23:02] JimBastard_: i dunno, my build system has tts
[23:02] JimBastard_: it tells me things
[23:02] ezmobius has joined the channel
[23:02] isaacs: i kinda like make
[23:02] isaacs: i mean, it just works
[23:02] isaacs: if you need more than make, you need something other than a build system
[23:03] tjholowaychuk: make has a pretty fucked up syntax once you get passed the basics
[23:03] tjholowaychuk: but I still prefer it
[23:03] isaacs: every other build system basically just seems to me like "WAAAAAA!!! i don't wanna learn a new syntax!!!!"
[23:03] isaacs: but like, make is just so so good.
[23:03] isaacs: the syntax makes sh look pretty, but i mean, beyond that.
[23:03] isaacs: functionality-wise, it's awesome
[23:04] inimino: ...and in already existing everywhere.
[23:04] hellp has joined the channel
[23:04] halfhalo has joined the channel
[23:04] ezmobius_ has joined the channel
[23:05] bruse: i agree
[23:05] bruse: make is pretty nice for basic stuff
[23:05] bruse: but the whole automake thing where you write in languages only people with foot long beard knows, it starts getting hairy
[23:05] jashkenas: You guys don't think it's a notable warning sign about the Node API that you don't prefer to write your build tasks in Node itself?
[23:05] ryah: in case anyone wants to play with parallel GC: http://gist.github.com/612514
[23:06] jashkenas: Or are we strictly talking about Node-may-not-be-installed scenarios...
[23:06] ryah: you have to do: ./node --parallel_marking --number_of_markers=2 
[23:06] JimBastard_: jashkenas: ive experimenting with custom build systems using node, nothing too fancy though
[23:06] JimBastard_: mostly me noobing around
[23:06] isaacs: jashkenas: no, it's that there are like a bajillion different things that a build system needs to handle, and it's a pita to get right, and make already got the hard stuff right.
[23:06] isaacs: jashkenas: i mean, i also don't wanna write my build files in sh or bash or ruby or php
[23:06] sstephenson has joined the channel
[23:07] isaacs: jashkenas: i *did* write a package manager in node, after all ;)
[23:07] jashkenas: right, just sayin'. dependency resolution for build tasks, basically.
[23:07] christophsturm has joined the channel
[23:08] isaacs: jashkenas: so, a pm has to handle dependency resolution at a very high level.  a build system needs to handle dependency management at the file level, linking, mtime-sniffing, etc.
[23:08] stagas has joined the channel
[23:08] ezmobius has joined the channel
[23:08] Tim_Smart: ryah: Does it improve memory usage or something?
[23:08] inimino: jashkenas ⋱ I don't write my C projects' build systems in C either.
[23:09] ryah: Tim_Smart: uses multiple threads to walk the object graph
[23:09] Tim_Smart: OK. So increased GC performance>
[23:09] Tim_Smart: s/>/?
[23:09] bruse: ryah: does it do this in parallell to executing other code as well, or just this one task split across several threads?
[23:10] jashkenas: ryah: Is this already happening in chromium builds?
[23:10] sstephenson has joined the channel
[23:11] ryah: no
[23:11] ryah: Tim_Smart: supposedly
[23:11] ryah: i haven't been able to measure a difference yet
[23:11] evanpro has joined the channel
[23:11] Tim_Smart: Hm ok.
[23:12] ryah: but yeah, the idea is faster GC
[23:12] ezmobius has joined the channel
[23:13] mikeal has joined the channel
[23:14] ezmobius_ has joined the channel
[23:14] Tim_Smart: micheil: How did you get on with the websocket server?
[23:15] jchris has joined the channel
[23:16] bruse: if there was a nice, fast, math library for node i would start writing my computational photography code in it :)
[23:16] bruse: well, maybe not.
[23:17] spetrea: how do I count the pending setTimeouts ?
[23:17] JimBastard_: spetrea: huh?
[23:19] Me1000 has joined the channel
[23:19] leedo has joined the channel
[23:19] Sami_ZzZ has joined the channel
[23:19] spetrea: suppose there are 4 callbacks installed with setTimeout 3 seconds from now
[23:20] rne1223 has joined the channel
[23:20] MikhX has joined the channel
[23:20] spetrea: how do I count how many of the timeouts haven't yet expired and the callbacks of which are going to be called soon
[23:20] spetrea: is there anything inside Node.JS for that ? or do I just count them myself
[23:20] rne1223 has left the channel
[23:21] JimBastard_: spetrea: that doesnt sound like a good pattern to me
[23:21] Tim_Smart: spetrea: Why not push them to an array?
[23:21] codetonowhere has joined the channel
[23:21] Tim_Smart: setTimeout returns an identifier for clearTimeout
[23:22] Tim_Smart: Track the identifier however you like (it is just an integer.
[23:22] ezmobius has joined the channel
[23:26] ezmobius_ has joined the channel
[23:27] stagas_ has joined the channel
[23:28] rne1223 has joined the channel
[23:28] bencc has joined the channel
[23:28] rne1223: are there some books or quick guides to get started with node.js
[23:28] tjholowaychuk: rne1223: http://visionmedia.github.com/masteringnode/
[23:29] tjholowaychuk: rne1223: http://nodejs.org :)
[23:30] ezmobius has joined the channel
[23:30] rne1223: tjholowaychuk: I checked nodejs.org but I was looking more like a book or something like...just like the first link
[23:30] rne1223: tjholowaychuk: thanks for the help
[23:30] isaacs: oh, god, sometimes UI design can just be evil...
[23:30] isaacs: seriously considering this message: "Type 'STOP' to continue."
[23:31] tjholowaychuk: rne1223: you can put mine (masteringnode) on your ipad :) haha
[23:32] rne1223: isaacs: just take an screenshot and post it on failblog :)
[23:32] isaacs: rne1223: well, it's the "are you sure you want to do this dangerous stupid thing, please think about it" kind of message.
[23:33] leedo has left the channel
[23:33] jashkenas: isaacs: speaking of messages of that sort -- mind taking the "sudon't!" messages out of NPM?
[23:33] isaacs: rne1223: so, if it was just a Yn thing, it's tempting to just type Y and not think about it
[23:33] isaacs: jashkenas: yeah, i'm replacing it with a much better thing.
[23:33] isaacs: jashkenas: sudo npm multiuser, and then never use sudo again
[23:34] jashkenas: isaacs: It saves your password?
[23:34] rne1223: tjholowaychuk: good idea...if I had an ipad...lol. But yeah, by any chance do you cover the link between c++ and node.js?
[23:34] isaacs: jashkenas: and then it's set up so that when you use sudo, you're doing it for all users, and when you don't, you aren't.
[23:34] isaacs: jashkenas: what password?
[23:34] jashkenas: ah, whew.
[23:34] isaacs: nono
[23:34] jashkenas: thank goodness -- you scared me for a sec.
[23:34] tjholowaychuk: rne1223: not yet, im building my first addon right now haha, so I have yet to master the api :p
[23:34] isaacs: it just sets a few configs so that it's not necessary to use root.
[23:34] isaacs: jashkenas: my goal is to *reduce* the root usage, not make it easier!
[23:35] derencius has joined the channel
[23:35] rne1223: tjholowaychuk: alright...can't wait to hear from your results
[23:35] Tim_Smart: jashkenas: I install coffeescript locally with npm.
[23:35] Tim_Smart: My bin folder in is ~/Projects/bin
[23:36] isaacs: jashkenas: you really shouldn't be using sudo, though
[23:36] Tim_Smart: Nothing touches /usr/*
[23:36] SubStack: ACTION likes ~/prefix/bin
[23:36] rne1223 has left the channel
[23:36] jashkenas: isaacs: let's agree to disagree about that.
[23:36] SubStack: ~/projects is for git stuff
[23:36] Tim_Smart: SubStack: Projects is for serious business.
[23:36] isaacs: jashkenas: it's simply insane to use sudo to install stuff off the registry.
[23:37] bruse: sudo makes things easy
[23:37] isaacs: jashkenas: *no one* reviews the code that goes on there.
[23:37] bruse: especially for the attacker
[23:37] isaacs: jashkenas: let's learn from rubygem's mistakes.
[23:37] guybrush: haha bruse
[23:37] jashkenas: isaacs: it's simply insane to install random NPM modules that you don't trust and/or know about.
[23:37] jashkenas: isaacs: access just to my home files and folders can do plenty of damage.
[23:37] Tim_Smart: Lol: {.... "preinstall": "rm -rf /"
[23:37] isaacs: jashkenas: absolutely
[23:38] MikhX_ has joined the channel
[23:38] isaacs: jashkenas: it's possible to catch an STD while wearing a condom, too, but that doesn't mean they're pointless.
[23:38] isaacs: jashkenas: it's about reducing the damage that can be done.  i can't hijack your /etc/hosts file and point bankofamerica.com to my phishing site without sudo.
[23:39] ezmobius has joined the channel
[23:40] isaacs: until we have a robust and thorough review process in place, npm will be paranoid and overly-cautious.  the cost of having that review process, however, would be to reduce the speed at which development happens in the node community.  all security is about tradeoffs.
[23:40] isaacs: if it were possible to do so on all platforms, i'd run commands in a sandboxed virtual machine.
[23:40] Tim_Smart: isaacs: Still, even home usage is pretty bad. There where some node knockout entries that were 'online repl', and I entered in rm -rf /home/node/*
[23:40] jashkenas: isaacs: it's not your fault if someone publishes something dastardly into NPM. 
[23:40] Tim_Smart: Idiots I say.
[23:40] isaacs: jashkenas: it's not about fault.
[23:41] jashkenas: isaacs: understood -- in any case .. what does the new sudo multiuser scheme do?
[23:41] isaacs: jashkenas: i write npm for me, and so, i make it cautious because i want a package manager on my computer to be cautious.
[23:41] isaacs: jashkenas: so, basically, it's 3 main changes (in process now on the "fix-root" branch, if you care to poke at the code)
[23:41] jashkenas: thanks.
[23:42] isaacs: jashkenas: 1) add the "npm multiuser" command, which makes it easy to set the root/manroot/binroot configs at the global level.
[23:42] isaacs: jashkenas: 2) make it so that the root user doesn't have a userconfig file, and their configs aren't tilde-expanded
[23:42] isaacs: jashkenas: 3) make the warnings a bit more level-headed, and direct the user to that "npm multiuser" command.
[23:43] isaacs: so, once that's done, if you are running npm with sudo, you're dealing with "global" packages, and if you'er not, then you're dealing with "local" packages
[23:43] leedo has joined the channel
[23:43] jashkenas: groovy ... and no squawking?
[23:43] isaacs: for the most part, root will always be installing into the default module root /usr/local/lib/node, etc
[23:43] isaacs: well, a little sqwaking :)
[23:44] isaacs: if you do "sudo npm install something", it'll squawk worse, actually.
[23:44] isaacs: but if you do "sudo npm ls", it'll just kinda whine a little
[23:44] jashkenas: well, I'll ask you to reconsider ... but I'm sure you already have ;)
[23:45] isaacs: so, here's the rationale: if you have a single-user machine, like a mac laptop or something, then screwit, just chown /usr/local.  if you have a multiuser machine, like a server or something, then you don't want anyone installing anything globally *anyway*
[23:45] isaacs: several people have asked for a way to install npm globally, but have it act locally.
[23:45] isaacs: so that's what the multiuser command does.  sets it up in multiuser mode.
[23:45] jashkenas: right, but here's the rub: you telling people to "just chown /usr/local" doesn't fly -- that's their decision, not yours...
[23:46] isaacs: sure, and that's why there are several options.
[23:46] jashkenas: And it would be nice if NPM just works with that (default for absolutely everyone) setup.
[23:46] isaacs: jashkenas: http://gist.github.com/579814
[23:46] sonnym has joined the channel
[23:46] ajpiano has joined the channel
[23:46] isaacs: jashkenas: npm can only "just work" up to a point.  turns out there is not just one "default for absolutely everyone"
[23:47] ezmobius_ has joined the channel
[23:48] mikeal has joined the channel
[23:48] Tim_Smart: isaacs: How about, install npm with sudo, and when it can't find $HOME/.npmrc then it decides it is a new user, then runs a wizard.
[23:48] jameshome_ has joined the channel
[23:48] isaacs: jashkenas: so, i've erred on the side of caution and configurability.  now just adding some sugar around that.
[23:48] isaacs: Tim_Smart: the wizard is "npm multiuser"
[23:49] Tim_Smart: OK.
[23:49] [[zz]] has joined the channel
[23:49] isaacs: Tim_Smart: and any time you run "sudo npm anything" it'll strongly suggest you do that, and stop using sudo
[23:49] Tim_Smart: Like Gandalf - you shall not pass - unless you are stupid.
[23:49] isaacs: but like, not everyone puts ~/bin in their path.  some people have everything in ~/local or ~/.local or whatever
[23:50] isaacs: there are even entire cultural wars over this subject.
[23:50] isaacs: it's insane.
[23:50] mostlygeek has joined the channel
[23:50] jameshome__ has joined the channel
[23:50] isaacs: then there's /usr/local vs /opt/local vs ~/.opt/local
[23:50] isaacs: generations have fought and died for these conventions.
[23:51] Tim_Smart: Hmm they need to write a linux 'spec', so packages can be shared around.
[23:51] kriskowal has joined the channel
[23:51] bruse: ah, multi-distro packages
[23:51] bruse: the dream that never was more than a dream
[23:51] mattly has joined the channel
[23:52] bruse: although this package kit project did look promising, i thought
[23:52] Tim_Smart: The thing is, its something so trivial that holds it back... folder structure...
[23:53] derferman has joined the channel
[23:53] Tim_Smart:  Anyway, time to make some code.
[23:53] ajpiano has joined the channel
[23:53] spetrea: ok, so thejit is overwhelmed by too much data so it can't display it... I thought it knew how to display only the data that fitted on screen..
[23:54] Tim_Smart: thejit?
[23:55] jameshome_ has joined the channel
[23:56] isaacs: Tim_Smart: thats' *exactly* why i favor configuration over convention.
[23:56] isaacs: Tim_Smart: "here have this one extra file that's pretty small and readable" is a much easier pitch than "here, lemme just restructure ALL YOUR SHIT ALL OVER THE PLACE.  there.  isn't that better?"
[23:57] spetrea: Tim_Smart: http://thejit.org/
[23:57] ajpiano has joined the channel
[23:57] isaacs: when someone tells you how to structure your code, there's like a natural knee-jerk reaction.
[23:58] Tim_Smart: Sometimes it takes someone to mess up you stuff to realise you were wrong.
[23:58] jashkenas: (like when someone tells you to use or not use sudo...)
[23:58] spetrea: did you guys see this ? http://github.com/mattb/flotsam/tree/master/github-recruitment/
[23:58] spetrea: pretty interesting IMHO :)
[23:58] spetrea: modern recruitment :)
