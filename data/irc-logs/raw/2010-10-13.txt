[00:01] zooko has joined the channel
[00:04] [[zz]] has joined the channel
[00:05] micheil: ryah: yeah, I have no idea how to handle --
[00:05] melpad has joined the channel
[00:07] pngll has joined the channel
[00:08] jashkenas has joined the channel
[00:10] jakehow has joined the channel
[00:11] xraid has joined the channel
[00:12] boaz has joined the channel
[00:12] xraid has left the channel
[00:13] Tim_Smart: micheil: What is this for?
[00:13] micheil: node.cc
[00:13] micheil: the opt parser
[00:13] boaz has joined the channel
[00:14] Tim_Smart: Ah ok. Are you doing it in javascript? It would probably be cleaner.
[00:14] tjholowaychuk: Tim_Smart: its to low level you cant
[00:14] boaz has joined the channel
[00:14] tjholowaychuk: to much machinery between it and node.js
[00:15] tjholowaychuk: it was just a clusterfuck of conditionals before so it is being revamped to be more approachable
[00:16] Tim_Smart: Does C have a opt parser in its stdlib?
[00:17] boaz has joined the channel
[00:18] bpadalino: it's got a for loop and some flags you can set :(
[00:18] Tim_Smart: ;)
[00:19] micheil: yeah, it does, it's called getopt and getopt_long
[00:19] micheil: getopt.h for the latter
[00:19] sideshowcoder has joined the channel
[00:19] micheil: unistd.h for the former
[00:19] Tim_Smart: Interesting... http://live.gnome.org/Seed
[00:20] sprout has joined the channel
[00:21] MikhX has joined the channel
[00:22] bpadalino: didn't know about getopt and getopt_long .. neat
[00:22] muk_mb has joined the channel
[00:22] tjholowaychuk: getopt is kinda useless
[00:23] SubStack: agree
[00:23] SubStack: but there's http://github.com/substack/node-optimist 
[00:23] SubStack: but that isn't c
[00:24] SubStack: still, with a dictionary type you could build the same thing in c
[00:25] Aria has joined the channel
[00:25] bpadalino: just write a super optimized option parser inspired by ryah's http parser ..
[00:25] SubStack: optimizing an option parser sounds super silly
[00:26] SubStack: since it only fires up when the application starts up
[00:26] tjholowaychuk: yeah that would not be wise
[00:28] banjiewen_ has joined the channel
[00:28] bpadalino: details, details ..
[00:29] tjholowaychuk: coding with a bird in the background is the most annoying thing
[00:30] micheil: woah.
[00:30] micheil: argv is massive.
[00:31] tjholowaychuk: ?
[00:31] micheil: http://gist.github.com/623187
[00:31] micheil: massive.
[00:31] dpritchett has joined the channel
[00:32] ajpi has joined the channel
[00:32] tjholowaychuk: i think thats just overflow
[00:32] tjholowaychuk: since you have a null in there and then environment variables lol
[00:32] tjholowaychuk: or something crazy like that
[00:32] MikhX has joined the channel
[00:32] tjholowaychuk: check argc
[00:33] micheil: actually, that was an error there.
[00:33] prettyrobots has joined the channel
[00:33] micheil: wooo!
[00:33] micheil: got -- working.
[00:34] shaver: what's the state of the art for communicating between multiple node.js processes?
[00:35] Tim_Smart: shaver: pgriess has a webworker module, if you are going for a more 'forking' approach. Otherwise a named UNIX socket can't go wrong.
[00:35] fdfdf has joined the channel
[00:35] shaver: a named unix socket can go wrong in a large number of ways
[00:35] shaver: but I know what you mean
[00:35] tjholowaychuk: there is dnode
[00:36] tjholowaychuk: i havent used it
[00:36] tjholowaychuk: so i dont know if that is even what it is for :) but something to look into
[00:36] shaver: oh
[00:36] shaver: hello there, dnose
[00:36] JimBastard_: what you trying to do shaver ?
[00:36] shaver: dnode
[00:36] JimBastard_: dnode is for RMI
[00:36] shaver: JimBastard_: I have a system that I can decompose into a bunch of processes
[00:36] micheil: tjholowaychuk: dnode is for RPC via websockets
[00:36] micheil: iirc.
[00:36] dilvie has joined the channel
[00:36] fdfdf: hello
[00:36] tjholowaychuk: ah gotcha
[00:36] JimBastard_: shaver: why?
[00:37] JimBastard_: shaver: what are you trying to build
[00:37] abe has joined the channel
[00:37] shaver: doesn't really fit in this margin
[00:37] SubStack: micheil: regular sockets and websockets too
[00:37] gerred has joined the channel
[00:37] Tim_Smart: shaver: Are these processes spawned from a single parent?
[00:38] shaver: Tim_Smart: I'd like to be able to restart them in other orders
[00:38] micheil: SubStack: yo is the author, right?
[00:38] shaver: but I could probably write code to handle that
[00:38] Tim_Smart: shaver: Right, so independant.
[00:38] shaver: actually, most of them are worker-ish
[00:38] shaver: now that I think of it
[00:38] SubStack: micheil: yep
[00:39] abe: hello, sorry to interrupt. does anyone know how to get accurate timing data in node 
[00:39] micheil: abe: not interrupting.
[00:39] abe: some kind of high performance / high precision counter ?
[00:39] micheil: abe: well, there's always new Date and such
[00:39] JimBastard_: abe: there is a microseconds add-on 
[00:39] SubStack: also I wrote some ruby and perl modules for dnode too
[00:39] JimBastard_: i think...
[00:39] shaver: Date.now() works OK
[00:39] SubStack: and jesusabdullah is writing a python one
[00:39] micheil: as for anything higher in precision, it'd probably need to be a npm module
[00:40] shaver: in harmony there's a nanoseconds thing
[00:40] threeve has joined the channel
[00:40] shaver: Date.now() can be sub-millisecond precise, and still be in-spec
[00:40] shaver: but I don't know what v8 does there
[00:40] Blackguard has joined the channel
[00:40] shaver: (high-precision timing is a minefield, to do cross-platform :-( )
[00:40] Tim_Smart: ryah: I think http://live.gnome.org/GObjectIntrospection might have to be employed.
[00:40] abe: ahh ok thanks for the help
[00:41] abe: i will have to check out data.now()
[00:41] JimBastard_: new Date().getTime()
[00:41] abe: I have only done high precision timing on windows
[00:42] shaver: don't do "new Date"
[00:42] shaver: just do "Date.now()"
[00:42] shaver: avoid constructing and the method dispatch
[00:42] Tim_Smart: v8: Date.now()
[00:42] v8bot: Tim_Smart: 1286930556608
[00:43] Tim_Smart: ms since epoch
[00:43] shaver: v8: " " + Date.now() + " " + Date.now()
[00:43] v8bot: shaver: " 1286930579831 1286930579831"
[00:43] JimBastard_: v8: Date.getTime()
[00:43] v8bot: JimBastard_: TypeError: Object function Date() { [native code] } has no method 'getTime'
[00:43] cloudhead has joined the channel
[00:43] JimBastard_: that makes sense
[00:43] JimBastard_: v8: new Date.getTime()
[00:43] v8bot: JimBastard_: TypeError: undefined is not a function
[00:43] JimBastard_: v8: new Date().getTime()
[00:43] v8bot: JimBastard_: 1286930610180
[00:43] JimBastard_: v8: Date().getTime()
[00:43] v8bot: JimBastard_: TypeError: Object Tue Oct 12 2010 20:43:36 GMT-0400 (EDT) has no method 'getTime'
[00:44] shaver: Date() returns a string
[00:44] shaver: for reasons that probably only brendan recalls
[00:44] shaver: and he just left, or I'd ask him (and make fun of him)
[00:44] JimBastard_: i wrote it in two weeks, stop asking me questions
[00:44] Tim_Smart: shaver: According to the stack trace it is an object ;)
[00:44] micheil: fffuuu... it broke.
[00:44] Tim_Smart: v8: typeof Date()
[00:44] v8bot: Tim_Smart: "string"
[00:44] shaver: Tim_Smart: no
[00:44] derferman has joined the channel
[00:44] Tim_Smart: String it is.
[00:44] JimBastard_: v8: typeof new Date()
[00:44] v8bot: JimBastard_: "object"
[00:45] shaver: Tim_Smart: that's v8's method-missing message
[00:45] micheil: uguh, fixed.
[00:45] micheil: switch is evil.
[00:45] shaver: mostly you can trace Date's madness back to java.util.Date
[00:45] micheil: too evil.
[00:45] SubStack: I hate switch
[00:46] Tim_Smart: I like it and dislike it.
[00:46] Tim_Smart: So somewhere in the middle.
[00:48] abe: switch has its place but having fall through's can be error prone at times.. better to break on each clause
[00:49] SubStack: better to have a hash or array of closures
[00:51] abe: will have to try that one
[00:52] zooko has joined the channel
[00:53] abe: ok Date.now() seems ok but im sure there must be something better available to the os
[00:55] micheil: ryah: okay, while writing I've also identified an issue with the current opt parser, I'll create a ticket for a later fix.
[00:56] aho: <shaver> (high-precision timing is a minefield, to do cross-platform :-( ) <- it's always a minefield
[00:56] aho: fortunately a 1msec resolution is good enough for pretty much anything
[00:56] banjiewen has joined the channel
[00:57] shaver: Date.now() may not actually have 1ms resolution
[00:57] micheil: ryah: or not, I think the fix is easy
[00:57] shaver: even if it ends in a 1
[00:57] shaver: it's sadface
[00:58] DTrejo has joined the channel
[00:58] DTrejo: good evening
[00:58] DTrejo: JimBastard_: hey Marak
[00:59] JimBastard_: DONT BE BLOWING UP MY GOVERMENT
[00:59] JimBastard_: :p
[00:59] JimBastard_: sup DTrejo 
[01:00] JimBastard_: how did the presentation go?
[01:00] DTrejo: oh it went great
[01:00] DTrejo: we got 2nd and $200
[01:00] JimBastard_: who got first? max's team?
[01:00] DTrejo: and they want us to present at hacker nyc or somehting like that
[01:00] DTrejo: let me look up the name
[01:00] DTrejo: no, it was a guy who made the getzazu thing
[01:00] DTrejo: except with twilio
[01:00] JimBastard_: i must have missed that
[01:01] DTrejo: it calls you in the morning and tells you stuff like getzazu would
[01:01] JimBastard_: ohh
[01:01] abe: ok im off thanks for the help. will stick with Date.now() until something better comes around
[01:01] JimBastard_: who the fuck would want to be called in the morning
[01:01] JimBastard_: lol
[01:01] JimBastard_: that makes sense though
[01:01] DTrejo: he integrated like 9 apis
[01:01] DTrejo: so yeah, I guess the judges liked that
[01:02] DTrejo: JimBastard_: so I plan to use journey for routing and node-static for static files, but what about cookies and regular files?
[01:02] DTrejo: should I just use node-static anyway and change the cache headers?
[01:02] JimBastard_: sup?
[01:03] JimBastard_: whats a regular file
[01:03] paulr has joined the channel
[01:03] DTrejo: excuse me
[01:03] DTrejo: JSON etc
[01:03] DTrejo: dynamic stuff that changes every time you talk to it
[01:03] DTrejo: wow I'm bad at expressing myself
[01:04] JimBastard_: just route your static files to node-static
[01:04] JimBastard_: what about cookies?
[01:04] DTrejo: and other things I json.stringify?
[01:04] DTrejo: yeah that makes sense
[01:04] JimBastard_: journey can return any contentType
[01:04] JimBastard_: you can override that
[01:04] DTrejo: ok
[01:05] JimBastard_: you've also got full access to the request / response object
[01:05] JimBastard_: inside a journey route you get this.request
[01:06] DTrejo: mmk
[01:06] Yuffster has joined the channel
[01:07] DTrejo: JimBastard_: you mentioned that you have some sites with login functionality — what do you recommend for cookies?
[01:08] JimBastard_: DTrejo: for most apps i have the luxary of a single page app, so i can just set the basic auth header once
[01:08] JimBastard_: thats not really a great design though
[01:09] JimBastard_: i think express and or connect has session support, but the code for it is very simple
[01:09] charlenopires has joined the channel
[01:09] JimBastard_: you can read though http://github.com/marak/session.js
[01:09] ben_alman has joined the channel
[01:09] JimBastard_: im not sure the links for express sessions, im sure someone does
[01:09] JimBastard_: the technique is the same though 
[01:10] JimBastard_: voodootikigod has http://github.com/voodootikigod/login.js which might help
[01:10] tekky has joined the channel
[01:10] voodootikigod: JimBastard_: which reminds me i need to do some loving on
[01:10] dnolen has joined the channel
[01:10] JimBastard_: dont do loving on me please
[01:11] DTrejo: thanks guys :)
[01:11] voodootikigod: oh yea baby
[01:13] isaacs: micheil: this is what i'm thinking as an eventual API shape: http://github.com/isaacs/node-fuse/blob/dev/hello-fuse.js
[01:15] breccan has joined the channel
[01:15] c4milo2: isaacs: whops !!! 
[01:15] isaacs: whops?
[01:15] micheil: isaacs: the problem is the invocation of JS methods from C
[01:15] c4milo2: isaacs: I started to work in node-fuse two days ago !. I didn't know you were working on it 
[01:15] micheil: without having access to use handleScope
[01:16] isaacs: c4milo2: sweet :)
[01:16] micheil: (or I don't think we can access HandleScope
[01:16] isaacs: micheil: it's not thar hard.
[01:16] c4milo2: isaacs: how is it going ? 
[01:16] bentruyman has joined the channel
[01:16] micheil: c4milo2: we're just starting
[01:16] isaacs: c4milo2: well, i can't seem to get the basic hello world to run properly on MacFUSE, which sucks
[01:16] c4milo2: isaacs: but the bindings are done ? 
[01:16] isaacs: c4milo2: are you using the fuse_lowlevel?
[01:16] micheil: isaacs: iirc, macFUSE is kinda fucked.
[01:16] c4milo2: isaacs: yep 
[01:17] isaacs: c4milo2: nah, i'm still trying to figure it out
[01:17] isaacs: micheil: it's weird, because like every other fuse FS other than "hello world" works fine.
[01:17] micheil: I think we'll end up using the standard fuse bindings, it's less dependencies
[01:17] isaacs: micheil: sshfs works, encfs works, the python bindings work
[01:17] micheil: okay
[01:17] isaacs: c4milo2: on github?
[01:17] micheil: well, yeah the python bindings use the fuse.h binding.
[01:17] isaacs: c4milo2: we should combine efforts.  i have done almost nothing with it yet
[01:18] micheil: that'll make three devs.
[01:18] isaacs: micheil: but so does the hello world example program in the fuse code.
[01:18] c4milo has joined the channel
[01:18] micheil: hmm..
[01:18] isaacs: c4milo2: but it must use fuse_lowlevel
[01:18] micheil: isaacs: maybe it's outdataed?
[01:18] c4milo1 has joined the channel
[01:18] isaacs: c4milo: this will blow minds.
[01:18] c4milo1: isaacs: so what are you using to test it ? 
[01:18] isaacs: c4milo1: it's literally almost nothing right now.
[01:19] isaacs: just an api sketch and an example hello world program that doens't work on anything but linux
[01:19] isaacs: c4milo1: i just started reading through the fuse_lowlevel.h last night
[01:19] c4milo1: isaacs: I was thinking to implement a dummy filesystem that just call syscalls of the parent file system 
[01:20] isaacs: c4milo1: so, there's like a million file systems i want to implement.  but i want to implement them in js
[01:20] isaacs: that's the rub
[01:20] isaacs: so, i'm thinking, what we really need is really really good bindings to the fuse_lowlevel api
[01:20] c4milo1: isaacs: ahah I want to implement ext4 to be able to mount my linux partitions on mac osx :D 
[01:20] mbrochh has joined the channel
[01:20] isaacs: and then you can wrap that in js, so it's like the hello-fuse.js sketch i wrote
[01:21] c4milo1: yes !
[01:21] c4milo1: that would be really really nice 
[01:21] isaacs: mostly, i want to have two things: 1. a couchdb mount that doesn't suck a lot (blocking + http = hurt) and 2. an easy way to test pathological fs behavior
[01:21] isaacs: without having to like, ya know, hit my hd with a hammer
[01:21] c4milo1: isaacs: are you guys working full time on this or just a few hours every day ? 
[01:22] isaacs: c4milo1: so, far, just a few hours last night.  that's it
[01:22] isaacs: and i sent some emails to some fuse mailing lists about why hello world isn't working on my mac
[01:22] isaacs: i got part of the way through a node binding to fuse.h, and then realized how sucky that would be, since it means blocking everything
[01:22] c4milo1: isaacs: do you have some gists ? 
[01:22] c4milo1: or repo 
[01:22] micheil: isaacs: is fuse.h blocking?
[01:23] isaacs: micheil: yeah
[01:23] micheil: ACTION didn't know.
[01:23] isaacs: c4milo1: http://github.com/isaacs/node-fuse/
[01:23] micheil: isaacs: means I read heaps of the wrong shit yesterday.'
[01:23] andrewa2 has joined the channel
[01:23] isaacs: micheil: well, actually, it does some clever threading stuff, and uses the non-blocking fuse_lowlevel.h under the hood
[01:23] andrewa2 has left the channel
[01:23] mAritz: Tim_Smart: seriously, now you're here? i had a bunch of questions earlier about biggie-orm, but now everythings fine. but don't worry, i'll have more soon enough! :P
[01:23] micheil: k
[01:23] isaacs: but if you use the functions in fuse.h, they switch behavior based on the return value.
[01:24] isaacs: so you'd have to like, thread that shit, and it'd go through eio-custom, to fuse.h (blocking), to fuse_lowlevel.h (nonblocking), which is dumb
[01:24] isaacs: better to just wrap up fuse_lowlevel.h in javascript
[01:24] c4milo1: isaacs: nod
[01:24] SubStack: fuse!
[01:25] isaacs: way way easier, except for the fact that fuse_lowlevel's documentation is nonexistent
[01:25] isaacs: it's comments, and "look at how it's used in fuse.c"
[01:25] micheil: isaacs: I'm cool with implementing that.
[01:25] zooko has joined the channel
[01:25] isaacs: so, my plan is, write a hello world that works on the mac using fuse.c, then write the same hello world using fuse_lowlevel, and then do the node binding, because at that point, i'll know enough about how fuse works that it'll be easy
[01:25] micheil: isaacs: how do you think I learn most stuff?
[01:25] isaacs: hehe :)
[01:26] isaacs: not working on the mac is not cool, though
[01:26] charlenopires has joined the channel
[01:26] micheil: just learnt about getopt's by rewriting the node.cc ParseArgs method
[01:27] bruse: do you like it?
[01:27] micheil: like what?
[01:27] bruse: there are probably as many methods to parse arguments as there are developers
[01:27] isaacs: in fact, the hello.c program is included in the macfuse svn repo, and doesn't work on snow leopart
[01:27] isaacs: *d
[01:27] c4milo1: isaacs: ok so i will continue working on my stuff, perhaps we can share knowledge and experiences :) 
[01:27] TheEmpath has joined the channel
[01:27] micheil: where would the code that sends node into repl be?
[01:27] dilvie has joined the channel
[01:27] isaacs: c4milo1: how does that development path sound?
[01:28] isaacs: micheil: src/node.js
[01:28] micheil: k
[01:30] micheil: looks like I can't stop: build/default/node -e | echo "console.log('test');"
[01:30] micheil: from sending node into repl.
[01:30] c4milo has joined the channel
[01:30] c4milo has joined the channel
[01:30] isaacs: micheil: process.binding("stdio").isStdoutBlocking()
[01:30] micheil: ?
[01:31] c4milo: isaacs: good. the best way to learn in this case is getting hands on with the API due its poor documentation and studying another bindings (python, ruby, erlang, ocaml, etc) 
[01:31] isaacs: micheil: oh, wait, that doesn't work that way any more.
[01:31] isaacs: c4milo: none of the other bindings use the lowlevel api
[01:31] isaacs: c4milo: the macfuse svn has a "hello_ll.c" that does
[01:31] isaacs: c4milo: but that doesn't work on snow leopard, either, apparently
[01:31] micheil: isaacs: there is one that does.. forget where I saw it though
[01:32] c4milo: isaacs: compile error or just it doesn't work ? 
[01:32] pengwynn has joined the channel
[01:32] isaacs: c4milo: http://groups.google.com/group/macfuse/browse_thread/thread/d5eff547078b200c
[01:32] hober: Aria: yt?
[01:32] softdrink has joined the channel
[01:32] c4milo: isaacs: looking at it .. 
[01:32] Aria: I am
[01:33] isaacs: c4milo: my next move was going to be to check out hte encfs source and see what it does differently, because it works fine on my machine
[01:33] hober: I'm seeing something funny that might be jsdom or might be at your parser's end of it. hold on, will try to make more minimal test case
[01:33] isaacs: i mean, it's got its quirks, but it's actually pretty nice
[01:33] sprout has joined the channel
[01:34] c4milo: hey isaacs
[01:34] isaacs: c4milo: yo
[01:34] c4milo: isaacs: add to your compile flags this 
[01:34] c4milo: isaacs:  -mmacosx-version-min=10.5
[01:34] isaacs: interesting.
[01:35] Tim_Smart: isaacs: I might be interested in writing fuse bindings - mainly just to get more familiar with c++.
[01:35] isaacs: C4MILO: OMG YES YOU ARE A GENIUS AND I <3 YOU IN AN AWKWARDLY FRIENDLY WAY!!
[01:36] c4milo: isaacs: :)
[01:36] isaacs: what does that do?
[01:36] c4milo: thats a known issue with macfuse in Snow Leopard 
[01:37] isaacs: ok...
[01:37] c4milo: http://www.mail-archive.com/macfuse@googlegroups.com/msg01017.html
[01:37] isaacs: but i mean, in general, what does -m do?
[01:37] hober: Aria: I'm essentially reading a file in, using your parser to produce a dom, doing some straightforward dom manip, and then serializing the dom to another file
[01:37] Aria: Sweet. That's one thing I've been doing with it.
[01:38] hober: Aria: not rocket science. what I'm seeing is, if I have an explicit <html> </html> tags in the source document, when I serialize some stuff ends up in <body> that I would expect to be in <head>
[01:38] Aria: Oh yeah? Got examples?
[01:38] isaacs: c4milo: ok, step 1 is down.
[01:38] isaacs: c4milo: step 2 is to understand hello_ll.c
[01:38] hober: If I don't have explicit <html> </html> tags, everything ends up in <head> where I expect
[01:39] micheil: woo. I think I'm finished this patch!
[01:39] isaacs: c4milo, micheil, Tim_Smart, SubStack, anyone else interested in joining the node-fuse party: what do you think of this api? http://github.com/isaacs/node-fuse/blob/dev/hello-fuse.js
[01:39] dpritchett has joined the channel
[01:40] micheil: isaacs: I'll check in a moment
[01:40] micheil: just doing file tidy up before landing a new opt parser for node as a pull
[01:40] c4milo: isaacs: looking at it … 
[01:40] isaacs: basically, the idea will be that the cb can be called at any time, and all the setup will be in the fuse.mount() call, so if you have to do some http or something, it'll just be nonblockingly lovely
[01:40] isaacs: and if you call the cb right away? no big deal.  but either way, completely up to the implementer.
[01:41] jakehow has joined the channel
[01:41] jashkenas has left the channel
[01:41] Evet has joined the channel
[01:42] matt_c has joined the channel
[01:43] hober: Aria: http://gist.github.com/623267
[01:44] Aria: Interesting!
[01:46] c4milo: isaacs: it looks good but I would like to add the inode number as param also.
[01:46] hober: Aria: any guesses as to where I should begin to debug that?
[01:46] isaacs: c4milo: i think the inode number is managed by fuse
[01:46] Aria: Well, in the tools/ in the html5 package, there's a tool to run a test case with various debugs turned on.
[01:47] Aria: I was just about to go trace the parser states for some of those.
[01:47] isaacs: c4milo: but it might be supplied on the info object
[01:47] isaacs: c4milo: so you could track it
[01:47] isaacs: c4milo: getting hello world implemented will be a huge step.  from there, it's just adding more support for more functions.
[01:48] c4milo: isaacs: ok. sounds reasonable. So when I can start with my ext4fuse :P  
[01:48] isaacs: hehe
[01:48] isaacs: c4milo: if you wanna write it in C, you can do it now ;)
[01:48] Me1000 has joined the channel
[01:48] c4milo: isaacs: plop ahahah 
[01:49] hober: Aria: fwiw, it still happens if I disable all of the intermediary dom manip (adding <meta charset>, etc.)
[01:49] Aria: ACTION nods.
[01:49] isaacs: c4milo: realistically, probably some time in the next week or two, i should have the first few bits of the binding done.
[01:49] c4milo: isaacs: I can do it in C but I don't want to finish it in 2012 
[01:49] Aria: As it should, since that's post parse.
[01:49] softdrink has joined the channel
[01:49] Me1000 has joined the channel
[01:49] isaacs: c4milo: i mean, the fs api is kinda huge, and fuse implements ALL of it.
[01:49] hober: Aria: indeed.
[01:49] isaacs: c4milo: all that's required for hello world is getattr, open, read, and readdir
[01:50] isaacs: c4milo: but i wanna make it possible to write a complete fuse program in js
[01:50] Aria: ACTION sighs and hates on node's argv layout.
[01:50] micheil: Aria: ?
[01:50] micheil: I'm working on that at the moment.
[01:51] Aria: Oh, just argv[0] == node, argv[1] = script, argv[2] = what I expect argv[0] to be.
[01:51] Aria: (coming from ruby)
[01:51] micheil: Aria: ask ryah about it.
[01:51] isaacs: Aria: ruby is wrong there, imo
[01:51] micheil: if he says yes, then I change it.
[01:51] isaacs: Aria: argv[0] should be $0
[01:51] isaacs: Aria: argv[1] is $1
[01:51] shaver: I think Aria's right
[01:51] Aria: That's one way that works, too. That would also surprise me less.
[01:51] bruse: i agree with isaacs 
[01:51] derferman has joined the channel
[01:52] shaver: you very rarely want to treat program-name and script-file the same way as "user-provided arguments"
[01:52] Aria: I really found Ruby's way to make a lot of sense, since you then almost always have to shift argv if not.
[01:52] Tim_Smart: Aria: argv changes on the context.
[01:52] Aria: Yeah, exactly, shaver.
[01:52] isaacs: when you do "./my-node-prgram.js foo", and it's shebanged to "node", then what your'e really doing is "node my-node-program.js foo"
[01:52] Aria: I haven't wanted argv[0] or [1] yet.
[01:52] SubStack: Aria: you mean perl's way
[01:52] Aria: Well, yes. But the 'node' and 'my-node-program.js' are special there.
[01:52] shaver: I suspect that there are 10x more programs in node that have to manually skip [0] and [1] to enumerate over arguments uniformly, than that need argv[0] where it is
[01:52] isaacs: Aria: i've wanted to look at argv[1] before
[01:52] isaacs: Aria: it works the same as it does in a C program
[01:53] shaver: process.nodePath process.scriptPath
[01:53] SubStack: but then perl just took it from awk probably
[01:53] isaacs: where argv[0] is the executable, and the rest is the args
[01:53] whoahbot has joined the channel
[01:53] shaver: the provenance is clear
[01:53] shaver: it's just not useful :-)
[01:53] Aria: Oh, me too. But not in the same context as user supplied args.
[01:53] isaacs: Aria: take it up with posix
[01:53] shaver: in C it's there for efficiency and historical reasons
[01:53] Aria: And yeah, what shaver said.
[01:53] shaver: node needn't follow posix here
[01:53] bruse: argv[0] and argv[1] is just as user submitted as argv[n]
[01:53] Aria: Yeah, it really needn't. Ruby broke with that tradition to good effect.
[01:53] SubStack: posix is also synchronous
[01:53] SubStack: except for when it's not
[01:53] micheil: Okay, well, I'm not changing it in this patch.
[01:54] isaacs: Aria: nah, it just turned all the ruby users into whiners ;P
[01:54] micheil: Discuss it on the mailing list.
[01:54] Aria: bruse: Sure. But do you ever use them for the same thing?
[01:54] whoahbot has joined the channel
[01:54] Aria: I may have to.
[01:54] isaacs: userargs = process.argv.slice(2)
[01:54] SubStack: AIO or some such
[01:54] bruse: i guess i dont
[01:54] shaver: it just makes process.argv less useful
[01:54] isaacs: Aria: i want process.argv to be the actual argv of the process, for the same reason that i want request.url to be the actual url of the http request
[01:54] Aria: Heh. And what do you do with this?
[01:55] isaacs: Aria: well, for starters, i know that [0] is the executable and [1] is the script
[01:55] shaver: except that it might not be
[01:55] Aria: Sure. One could just as easily know that process.executable is the executable and process.script is the script
[01:55] shaver: depending on what the caller did
[01:55] isaacs: Aria: also, if there ever comes a time when i want to know what was actually supplied to the process, i'll have that
[01:55] shaver: the caller of exec, I mean
[01:55] isaacs: reduce magic
[01:55] Aria: Yes, is this even close to a normal use case, isaacs?
[01:55] shaver: but neither aria nor I are arguing that that information should be *removed*
[01:55] isaacs: Aria: consider "mate" vs "mate_wait"
[01:55] shaver: just that there should be a way to get "arguments to my program"
[01:56] Aria: Or do most people really just want to see what came after "that thing I wrote" on the command line?
[01:56] bruse: what's the point of making argv[2] into argv[0] then?
[01:56] Tim_Smart: Basically the normal way to parse arguments is to loop over them and look for the stuff you want.
[01:56] bruse: everyone knows what argv looks like
[01:56] shaver: and it should be the easy thing, and everywhere
[01:56] Aria: bruse: Eliminating two shifts for the normal case. Or a slice. 
[01:56] bruse: i'd be more confused if it looked different from anywhere else
[01:56] isaacs: Aria: there are cases where i may want to switch behavior based on the filename of the executable.
[01:56] shaver: (I think it should be called "arguments" rather than argv, too)
[01:56] micheil: Aria: take it to the mailing list.
[01:56] Aria: Sure, isaacs. So you switch on process.executable ;-)
[01:56] micheil: that way we can have a well thought out discussion about it.
[01:56] isaacs: shaver: can't.  "arguments" is special, and means something different than argv
[01:56] SubStack: var argv = require('optimist').argv; // it's just a hash!
[01:56] shaver: isaacs: not in top-level code it doesn't have to
[01:57] Aria: (yeah, though I could take it either way. argv is at least unambiguous.)
[01:57] SubStack: see, no switches or any of that nonsense
[01:57] shaver: arguments is a permitted variable name
[01:57] isaacs: Aria: the point is that argv in node should be have like argv in C, imo.
[01:57] shaver: in ES5
[01:57] isaacs: node is a js binding to C-land
[01:57] andrewfff has joined the channel
[01:57] Aria: Yeah, I'm asking why that's your opinion.
[01:57] shaver: no, swig is a JS binding to C-land
[01:57] Aria: Heh, it's a very twisted binding to C-land.
[01:57] isaacs: hehe
[01:57] shaver: node is an application environment
[01:57] isaacs: sure
[01:57] SubStack: don't write c in javascript
[01:57] shaver: you can't make syscalls directly or work with C structs
[01:57] Aria: It changes the API almost entirely, and in ways that largely make sense (and make common things really easy.)
[01:57] isaacs: it's a binding to a few certain C libraries, to be more specific
[01:57] shaver: so it's a poor binding to C-land!
[01:58] Aria: I have yet to see a use for argv that doesn't involve treating [0] and [1] specialy.
[01:58] shaver: yeah
[01:58] Aria: And that just reeks to me.
[01:58] isaacs: Aria: ruby is the only platform that shifts off argv[0, 1]
[01:58] isaacs: Aria: that has always struck me as odd
[01:58] SubStack: isaacs: it gets it from perl
[01:58] Aria: Oh, it is odd. It's also really nice.
[01:58] Aria: (and yeah, perl does similar)
[01:58] isaacs: ah, ok, perl too, then
[01:58] SubStack: and [1] goes into $0
[01:58] SubStack: so you can still get at it
[01:58] isaacs: makes sense, since ruby is like perl in a lot of ways
[01:58] aurynn: Is the crux of this argument "It's really hard to remember to shift the array" ?
[01:58] Tim_Smart: node shall not mess with my argv.
[01:59] murphy has joined the channel
[01:59] Aria: ruby /does/ get rid of [0], which is sad.
[01:59] shaver: erlang's bootargs doesn't have image-name in it, afaict
[01:59] SubStack: no ruby has $0 too
[01:59] isaacs: i really dig that in node, argv is the same in my program as it is in a C main() function
[01:59] Aria: But one rather often wants to, say, system(argv[0], argv[2..-1])
[01:59] Aria: SubStack: Yes, it has $0. which is argv[1], not argv[0]
[01:59] SubStack: anyways just process.argv.slice(2)
[02:00] Aria: Yeah, I just hate having to do that. Since every single use of argv I've had has had a slice(2) on it.
[02:00] Aria: Every. Last. One.
[02:00] aurynn: oh no?
[02:00] SubStack: Aria: use optimist!
[02:00] isaacs: Aria: there's a principle of least surprise issue at work here.
[02:00] bruse: java also starts its argument list on argv[2]
[02:00] SubStack: your option parsing will NEVER BE THE SAME AGAIN
[02:00] danielzilla has joined the channel
[02:00] Aria: Hehe, yes. I'm REALLY surprised by it being [2] for the first argument to my app ;-)
[02:01] isaacs: nodejs may attract many rubyists, but it is driven at it score by religious C coders
[02:01] Aria: 0 and 1 I both expect.
[02:01] shaver: it's also not uncommon in C to modify argv in place
[02:01] isaacs: shaver: sure, and you can do that in your node app, too ;)
[02:01] bruse: by the way, start programs with argc = 0 and see lots of interesting crashes
[02:01] shaver: isaacs: but you can't just pass "argv + 2" and have it work, because JS arrays aren't dependent
[02:02] isaacs: shaver: no, that's true.  but you can do process.argv.splice(2)
[02:02] bartt has joined the channel
[02:02] shaver: no
[02:02] shaver: you still don't get a refrence to the original array, offset
[02:02] isaacs: shaver: oh, right, that'd just slice it in place.
[02:02] micheil: woot! http://github.com/ry/node/pull/346
[02:02] isaacs: shaver: well, i mean, Array != array
[02:02] Aria: (also, in sh, $0 is the script and $1 is the first user supplied arg)
[02:03] Aria: (and 'bash' is not in the list)
[02:03] Aria: (nor sh)
[02:03] shaver: for context, I've been having this argument about the spidermonkey shell for like a decade now
[02:03] shaver: man, longer
[02:03] isaacs: Aria: $0 is /bin/bash
[02:03] shaver: 15 years, almost
[02:03] isaacs: Aria: unless you're in a subshell
[02:03] kjftw has joined the channel
[02:03] isaacs: $ echo $0
[02:03] isaacs: $ echo $0
[02:03] isaacs: . /bin/bash 
[02:03] shaver: yeah
[02:03] Aria: aredridel@coriolis:~/Projects/html5$ ./t.sh
[02:03] Aria: ./t.sh
[02:03] isaacs: (stupid IRC eating my output ;)
[02:03] shaver: $ sh -c 'echo $0'
[02:03] shaver: sh
[02:03] Aria: (that's echo $0)
[02:03] shaver: sure
[02:03] isaacs: Aria: right, and that's inside a subshell
[02:04] isaacs: in a subshell, $0 is the name of the program you called.
[02:04] Tim_Smart: test
[02:04] Tim_Smart: >.>
[02:04] isaacs: and if you wanna complain about that, take it over to #bash ;)
[02:04] Aria: aredridel@coriolis:~/Projects/html5$ ./t.js 
[02:04] Aria: node
[02:04] Aria: I'm just saying there's some serious sources of surprise here.
[02:05] isaacs: process.argv is the argv as it appears to node.
[02:05] isaacs: personally, i dig that
[02:05] Aria: Yeah? What do you use it for?
[02:05] langworthy has joined the channel
[02:06] isaacs: Aria: yeah, but then why not mung the req.url?
[02:06] isaacs: Aria: it's the same thing
[02:06] Aria: Except its not.
[02:06] isaacs: Aria: everyone has to figure out the hostname, and that means they have to read the req.headers.host and then append the req.url
[02:06] Aria: You use the url verbatim to construct a self-reference. That's a very, very normal case.
[02:06] Aria: And a very strange one for argv
[02:06] isaacs: it's the same principle
[02:06] chapel: hmm
[02:06] Aria: Is it?
[02:06] chapel: someone was talking about args? http://bitbucket.org/mazzarelli/js-opts/wiki/Home
[02:06] isaacs: rather than show you what we think you're going to need, we show you exactly what is there, and let you figure it out.
[02:07] isaacs: node is a lowlevel API
[02:07] Aria: (args come out as an array. req.url does. .. not.)
[02:07] isaacs: Aria: that's the closest analogy to a char**
[02:07] micheil: Aria: seriously, just take this to the mailing list. This is not going anywhere here.
[02:07] Aria: Hehe. I may well have to write this up.
[02:07] isaacs: hehe
[02:07] isaacs: sure
[02:07] dpritchett has joined the channel
[02:08] isaacs: i've gotta head back to oak land anyway.  see ya :)
[02:09] shaver: yeah, I guess I have to join th list now
[02:09] davidwalsh has joined the channel
[02:10] davidascher has joined the channel
[02:10] Aria: Ooh, new node bug! 
[02:10] micheil: shaver: not really, we just recommend it.
[02:10] Aria: require(anemptyjsfile) throws an error.
[02:11] shaver: well, if I want to participate in the conversation about argv
[02:11] c4milo has left the channel
[02:11] micheil: Aria: no, it doesn't.
[02:11] Aria: Huh. Did for me just now.
[02:11] Aria: v0.3.0-pre
[02:12] micheil: hmm..
[02:12] micheil: doesn't in v0.3.0-pre for me
[02:12] micheil: Aria: time to git pull I think.
[02:13] Aria: Indeed. Lemme see if it breaks after that.
[02:13] hober: Aria: thanks for your help!
[02:13] Aria: Sure thing. Still staring at it, hober. Trying to make sense of it ;-)
[02:14] hober: :)
[02:16] Aria: I'm just committing a tools/parse-doc.js.  if you node tools/parse-doc.js anhtmlfile parser,tokenizer, you'll get the state change info from the parse.
[02:17] micheil: Aria: what does this tools/parse-doc.js do?
[02:17] hober: ok, thanks
[02:17] micheil: and are you talking node/tools/*?
[02:17] Aria: No, I'm talking html5/tools/*
[02:17] micheil: k
[02:18] Aria: And it parses an HTML file.
[02:18] Aria: Just a testbed for working on testcases in separate files
[02:20] ryah: Aria: i've been meaning to fix the argv stuff for a long time
[02:20] Aria: Yea?
[02:20] ryah: just never got around ot it
[02:20] Aria: Hehe. 
[02:21] Aria: Well, count a vote for treating the first two args as it is now specially. (process.executable and process.script or process.filename being my suggestion)
[02:21] ryah: Aria: yeah
[02:22] ryah: process.execPath is $0
[02:22] Aria: Nice.
[02:22] ryah: (except better)
[02:22] Aria: (Altered from what the OS gave it? Dereferenced?)
[02:22] shaver: yeah
[02:22] shaver: that is great news
[02:22] shaver: yay ryah
[02:23] mbrochh has joined the channel
[02:23] mbrochh has joined the channel
[02:23] ryah: http://github.com/ry/node/blob/0fcb3bd3a9f585562c5b421314c206c9438f6cef/src/platform_linux.cc#L123-127
[02:23] hober: Aria: I've added a comment to that gist with the first bit of the output from parse-doc.js
[02:23] Aria: and micheil, yes, that fixes the empty js file error.
[02:23] hober: (only up 'til it looks to me like it's gone off the rails)
[02:23] micheil: ryah: well, I've just fixed part of the argv stuff
[02:24] Aria: sweet, hober. It looks like to me it's parsing the \n as something that belongs in the body, so it starts the body tag, rather than keeping it in head.
[02:24] hober: yeah
[02:24] hober: the phase transition to afterHead is before the first tag even closes
[02:24] Aria: Oh, fun! Reading /proc/self/exe. I love and hate linux for such an API.
[02:24] hober: no, nevermind, it's right after the first open tag
[02:24] hober: so yeah, it's the \n like you thought
[02:25] Aria: Hehe. (I added a debug to tokenizer.emitToken and it made it obvious.)
[02:25] hober: oh, I'm passing >40% of the tokenizer tests in my elisp tokenizer btw
[02:25] hober: mostly due to my test runner needing work
[02:25] hober: I think the tokenizer is pretty much done
[02:26] Aria: Sweet.
[02:26] cardona507 has joined the channel
[02:27] dguttman has joined the channel
[02:28] twoism has joined the channel
[02:28] micheil: ryah: http://github.com/ry/node/pull/346
[02:28] micheil: :D
[02:29] dohtem has joined the channel
[02:29] dohtem has joined the channel
[02:30] dohtem has left the channel
[02:31] micheil: hmm.. it's annoying how many issues on the github tracker aren't valid.
[02:31] gf3 has joined the channel
[02:31] shaver: that sounds _great_
[02:32] jameshome has joined the channel
[02:32] micheil: shaver: in the sense that they ask for an api to do X when it already exists in node.
[02:32] Aria: Wow, congrats, hober. You found a bug!
[02:33] shaver: that sounds like a documentation or API design bug, mis-described :-)
[02:33] micheil: shaver: it's definitely documented.
[02:33] softdrink has left the channel
[02:33] Tim_Smart: shaver: Or just humans that don't utilize C-f in browsers ;)
[02:33] hober: Aria: :)
[02:34] aho has joined the channel
[02:34] Aria: And fixed.
[02:34] micheil: like this as well. http://github.com/ry/node/issues#issue/184
[02:35] Aria: .... aaand you fixed a half dozen test cases I hadn't gotten to yet. Thank you.
[02:35] micheil: if you've read the docs / played with node, you'd find out that the require function caches modules.
[02:35] Aria: Yeah. Though I'd love to see what happens when you turn that off, or un-cache one.
[02:35] ryah: micheil: nice
[02:36] micheil: ryah: that's the other benefit of going to a third party bug tracker; people don't need to be committers to manage bugs
[02:36] hober: Aria: lovely. verifying... yup, looks good
[02:36] softdrink has joined the channel
[02:37] Aria: Awesome!
[02:37] hober: I might actually get this code into a releasable state this week
[02:37] hober: thanks to that bugfix
[02:37] derferman has joined the channel
[02:38] ysynopsis1 has joined the channel
[02:41] rcy has joined the channel
[02:41] meso has joined the channel
[02:41] Aria: Yay, hober 
[02:44] siculars has joined the channel
[02:44] ossareh has joined the channel
[02:46] everton has joined the channel
[02:46] eisd has joined the channel
[02:47] mjr_ has joined the channel
[02:48] everton_ has joined the channel
[02:49] eisd has joined the channel
[02:50] meso has joined the channel
[02:55] hober: Aria: is there any way to control the output of HTML5.serialize?
[02:55] hober: e.g. downcasing element names, prettifying whitespace, that sort of thing
[02:55] Aria: Not much, but what do you want?
[02:55] Aria: Ah, fun.
[02:56] DTrejo_ has joined the channel
[02:57] dpritchett has joined the channel
[02:57] jacobolus has joined the channel
[02:57] seangrov` has joined the channel
[02:59] hober: really just downcasing would do it for me, but it would be nice to have other such formatting options
[03:01] davidwalsh has joined the channel
[03:05] MikhX has joined the channel
[03:05] DTrejo_: ACTION just reread his conversation with JimBastard_ and realized how little sense he was making
[03:06] hober: Aria: another bug report: HTML5.serialize serialies <meta> as a non-void element, with a closing tag.
[03:06] hober: it shouldn't emit a closing tag for any void element
[03:06] Aria: Third parameter of serialize: {lowercase: true}
[03:06] hober: sweet, thanks
[03:06] Aria: Alright. Interesting.
[03:06] hober: make that <meta> and <link>, btw.
[03:07] hober: jsdom's doc.outerHTML gets this right FWIW
[03:07] Aria: Huh, okay.
[03:07] hober: [but jsdom quotes ' and " in <script> bodies, which makes it somewhat useless :(]
[03:07] markwubben has joined the channel
[03:07] Aria: [Heh.]
[03:11] hober: Are minimize_boolean_attributes and quote_attr_values exposed as options there too?
[03:11] Tim_Smart has joined the channel
[03:12] DTrejo_: I'm a hosting / domain noob: can one make a subdomain with node? or is that totally irrelevant and only has to do with the records your host has set up?
[03:12] DTrejo_: (I'm guessing the second)
[03:12] Tim_Smart: DTrejo_: subdomains are routed at the HTTP level, so node can - yes.
[03:12] DTrejo_: oh
[03:13] dguttman has joined the channel
[03:13] DTrejo: Tim_Smart: are there examples of that somewhere? 
[03:13] Tim_Smart: DTrejo: http host header?
[03:14] DTrejo has joined the channel
[03:14] mjr_: Tim_Smart: did you see felixge's struggles with making his mysql parser fast?
[03:14] Tim_Smart: mjr_: Nope.
[03:15] DTrejo has joined the channel
[03:15] DTrejo: oops
[03:15] inimino: "subdomains are routed at the HTTP level"?
[03:15] DTrejo: could you repeat that?
[03:15] mjr_: Tim_Smart: it sounds like something you might have some good insight into.
[03:15] DTrejo: my computer ran out of batteries
[03:15] mjr_: Tim_Smart: and it'd certainly be great for node if we had a solid and fast mysql driver.
[03:15] Tim_Smart: DTrejo: HTTP Host headers
[03:15] Tim_Smart: mjr_: For sure.
[03:15] marshall_law_ has joined the channel
[03:16] inimino: DTrejo ⋱ Does the subdomain already exist?
[03:16] DTrejo: I'm going to say no?
[03:16] DTrejo: yes definitely not
[03:16] DTrejo: imagine you wanted a site that was basecamp or etherpad style
[03:16] mjr_: Tim_Smart: basically it's slow, and the V8 profiler is no help.  Instruments.app isn't that helpful either.  He's doing a native JS implementation of the binary mysql protocol, which is pretty badass.
[03:16] Tim_Smart: DTrejo: You can route subdomains at a lower level, with CNAME records etc.
[03:16] inimino: OK, well you have to set that up in the DNS before you can serve requests on that domain.
[03:16] DTrejo: myteamname.basecamp.com or something like that
[03:17] mjr_: DTrejo: you can set up a bunch of things in DNS to point to the same IP.  Web browsers will send along a "Host" header with the request, so your server can tell which site the client is trying to reach.
[03:17] inimino: Right, you'd have to have BIND or something set up to create those domains.
[03:17] DTrejo: I think I need to learn more about HTTP host headers and compare that to setting up things with dns
[03:17] mjr_: DTrejo: that's how all the major shared hosting providers do it.
[03:18] dguttman has joined the channel
[03:18] inimino: Yep.
[03:18] inimino: First you set up the DNS, then you set up your HTTP server to use the Host header.
[03:18] mjr_: DTrejo: your domain resolves to the same IP as 1000 other peoples, and their apache/lb reads the Host header of each request to figure out which "site" to serve.
[03:19] inimino: "name-based virtual hosting"
[03:19] DTrejo: inimino: ah ok.
[03:20] ryah: sigh. setting up a linux laptop is never fun.
[03:20] ryah: amazing that sound don't just work..
[03:20] Evet has joined the channel
[03:20] Tim_Smart: ryah: Which distro?
[03:20] TomSlick`: what laptop you have -.-
[03:20] ryah: ubuntu
[03:20] ryah: thinkpad
[03:20] DTrejo: thanks for the information guys
[03:21] ryah: you'd think i'd be okay
[03:21] zooko has joined the channel
[03:21] Tim_Smart: ryah: My Macbook Pro 'just worked'. Maybe one or two little things..
[03:21] MikhX has joined the channel
[03:23] ryah: % alsamixer 
[03:23] ryah: cannot open mixer: No such file or directory
[03:23] ryah: -_-
[03:23] ryah: so painful
[03:24] hober: Aria: is this a treewalker problem? (the <meta></meta>/<link></link> thing)
[03:24] Yuffster has joined the channel
[03:24] Aria: Mmm. It's a not knowing it's self-closing problem. I'm reading my code to see what the best fix is.
[03:24] hober: ryah: this is why I went with a laptop vendor who ship only linux :)
[03:25] hober: Aria: cool, thanks.
[03:25] Prometheus: so, if I wanted to write a really tiny piece of software that does nothing else but proxy requests between two servers, node would be pretty much ideal for that, right?
[03:26] shaver: what sorts of requests?
[03:26] Aria: It's darn good.
[03:26] Prometheus: http requests
[03:26] ryah: Prometheus: if you're okay with it being suboptimal :)
[03:26] Prometheus: well, they are wsgi requests
[03:26] hober: Aria: another reason to want to tweak the serializer output: some autodiscovery (of rss feeds, openid stuff, etc.) rely on <link> elements being on their own line
[03:26] Prometheus: ryah: well, my other option is to use perlbal
[03:27] Prometheus: ryah: and really, I think it's a bit of an overkill here
[03:27] Aria: Whoa, really? Geez.
[03:27] Prometheus: although, in addition to just proxying I'd like for it to dynamically read the list of backends to proxy between, and then allow requests to be bound to specific backends
[03:28] Prometheus: dynamically keep a list of backends that can be updated*
[03:28] Prometheus: i.e. reading them from a file or something, something dead simple.
[03:28] Prometheus: something, something.. really smart =)
[03:28] mjr_: ryah: you may not have sound, proper power management, fan speed control, or even be able to reliably close the lid and have it wake up, but you DO have a nice POSIX environment.
[03:29] mjr_: Personally I'm pretty happy with shitty POSIX and working sound, but I can see how people want to make that tradeoff.
[03:29] Prometheus: mjr_: where as someone with mac os x would have the same environment? =P
[03:29] bpot has joined the channel
[03:29] cataska has joined the channel
[03:30] mjr_: Prometheus: BTW, I run a few different node-based proxy servers, and they works really well.
[03:30] Prometheus: mjr_: what kind of requests do they proxy?
[03:30] mjr_: Memory usage is low-ish, and performance is just fine for my loads.
[03:30] Tim_Smart: Prometheus: I am dual booting Mac and Ubuntu, and prefer Ubuntu by a reasonable amount.
[03:30] Prometheus: my intention here is to put something between nginx and my web application servers (uwsgi)
[03:30] benburkert has joined the channel
[03:31] Prometheus: because while nginx can reverse proxy, it doesn't do load balancing, and I was told the features I want are load balancing features (although I am not trying to load balance!) 
[03:31] Prometheus: I just quite simply want to serve multiple web applications from a single domain and bind users to specific web application server that they can choose 
[03:31] mjr_: It's all HTTP.  I've got a log server that handles 2-4KB HTTP POSTs, about 5/sec most of the time.  I've also got a couple of simple load balancers.
[03:31] Prometheus: mjr_: yeah, I'm not expecting huge traffic either, this will be behind authentication
[03:32] Prometheus: anyway, I thought this might be a good opportunity to play with node a little bit
[03:32] mjr_: I'm sure there are other, faster ways to proxy things, but I like having all of the logic easy to work with and in the same language.
[03:32] Prometheus: instead of just settling for perlbal, which does most (if not all) of what I just described
[03:33] Prometheus: also, perlbal eats memory like firefox under load (which isn't going to be a problem here), which I am not fan of
[03:33] mjr_: Prometheus: after proxying about 500,000 requests, my node process is still at 15MB RSS, and about 1 minute of CPU time.
[03:33] shaver: if you just want to proxy http requests, something like nginx or varnish might be what you want?
[03:34] mjr_: Actually, it bounces between 15MB and 35MB.
[03:34] Prometheus: mjr_: that's pretty good
[03:34] Prometheus: shaver: well, it's not so much proxying, really
[03:34] Prometheus: I don't know what's the real terminology to use here
[03:34] Tim_Smart has joined the channel
[03:34] Aria: Protocol translation?
[03:34] Aria: WSGI-to-HTTP?
[03:34] Prometheus: well, not even that
[03:35] Prometheus: here's a few points from perlbal's featureset, which pretty much summarize it
[03:35] Prometheus: "Gets list of nodes either from asynchronously monitored node file, or from in-server pool objects which you can add/remove nodes from using the management interface. "
[03:35] pengwynn has joined the channel
[03:35] Prometheus: i.e. read a file every so often to check for new nodes (as the application web servers will be brought up on demand)
[03:35] mjr_: a proxy with some custom logic
[03:35] Prometheus: and here, "Big one for us; a backend can instruct Perlbal to fetch the user's data from a completely separate server and port and URL, 100% transparent to the user"
[03:35] Prometheus: yeah
[03:35] Prometheus: logic that you can't build in nginx
[03:35] Prometheus: I tried and tried
[03:35] Prometheus: but to no avail
[03:35] Prometheus: it's not dynamic enough for something like this
[03:36] shaver: hmm
[03:36] shaver: yeah, was thinking with the lua script stuff, but it's not quite right
[03:36] shaver: a fine problem!
[03:36] mjr_: There may be other, more proper tools for this.  But node sure is a fun way to go.
[03:36] bradleymeck has joined the channel
[03:36] Prometheus: mjr_: I'm sure perlbal would suffice just fine, but like I said, I'd rather try node for kicks ;)
[03:36] Prometheus: I've already figured I have a few use-cases for node (whether or not they are appropriate)
[03:36] Prometheus: so I might as well get started one way or another =)
[03:37] mjr_: Yeah, get to learnin'
[03:37] Tim_Smart has joined the channel
[03:37] Prometheus: doesn't hurt to have yet another tool on my belt =)
[03:37] Prometheus: although I still need to figure out what's the best way to bind a user to a specific application node
[03:37] Prometheus: either cookies or some kind of headers
[03:38] Prometheus: but I'd like to avoid having to do anything custom on the application end
[03:38] Prometheus: because eventually I won't have control over the application code
[03:38] tekky has joined the channel
[03:38] Prometheus: well, anything other than the part that binds a user to a specific server
[03:38] Prometheus: so that's something that I still need to think about =)
[03:41] bentruyman has joined the channel
[03:42] Prometheus: and on the plus side of things, at least this channels seems very active
[03:42] Prometheus: having the author available is always a good thing
[03:43] Tim_Smart has joined the channel
[03:46] isaacs has joined the channel
[03:47] Tim_Smart has joined the channel
[03:47] ajpiano has joined the channel
[03:54] richcollins has joined the channel
[03:55] janne has joined the channel
[03:56] derferman has joined the channel
[03:59] benburkert has joined the channel
[03:59] Tim_Smart has joined the channel
[04:00] benburke_ has joined the channel
[04:01] tilgovi has joined the channel
[04:08] twoism has joined the channel
[04:11] JCS^ has joined the channel
[04:12] melpad has joined the channel
[04:12] jansc has joined the channel
[04:14] hassox has joined the channel
[04:17] jakehow has joined the channel
[04:18] dguttman has joined the channel
[04:18] rauchg_ has joined the channel
[04:23] Aria: hober: Empty tags now serialize that way. Newlines, however, copy exactly from in to out. Add 'em in the DOM before serializing!
[04:23] mbrochh has joined the channel
[04:24] Aria: And good night,
[04:28] jansc has joined the channel
[04:41] ryah: Wrote 1048576000 bytes in 4.634480s using 1024 byte buffers: 215.773938mB/s
[04:41] ryah: :)
[04:41] dguttman has joined the channel
[04:42] ryah: ^-- benchmark/io.c
[04:42] ryah: Wrote 1048576000 bytes in 24.205s using 1024 byte buffers: 41.31377814501136 mB/s
[04:43] ryah: ^-- benchmark/io.js
[04:43] banjiewen has joined the channel
[04:46] Tim_Smart: ryah: On master?
[04:46] davidascher has joined the channel
[04:46] deepthawtz has joined the channel
[04:46] ryah: yes
[04:47] Tim_Smart: ryah: What makes C so slow? :/
[04:48] AAA_awright_ has joined the channel
[04:48] ryah: is that slow?
[04:49] dmcquay has joined the channel
[04:52] zemanel has left the channel
[04:53] zemanel_ has joined the channel
[04:54] Tim_Smart: ryah: Well so much slower.
[04:54] sudoer has joined the channel
[04:55] zemanel_ has left the channel
[04:55] sudoer has joined the channel
[04:57] Tim_Smart: Heh cool vim thing for insert mode: C-R=
[04:57] davidascher has joined the channel
[04:59] davida has joined the channel
[05:02] Tim_Smart: ryah: How the heck did you get 215mB/s?
[05:03] _jdalton has joined the channel
[05:04] Tim_Smart: ryah: (btw, I read the benchmarks the other way around ;))
[05:04] _jdalton has left the channel
[05:09] dguttman has joined the channel
[05:19] hassox has joined the channel
[05:25] mAritz has joined the channel
[05:26] mAritz has joined the channel
[05:27] dguttman has joined the channel
[05:29] tapwater has joined the channel
[05:31] benburkert has joined the channel
[05:32] tapwater_ has joined the channel
[05:32] dguttman_ has joined the channel
[05:32] mape: Anyone know of any html validation done in JS?
[05:33] mape: Like the w3c validator but not having to run perl cgi thingys
[05:34] AAA_awright: dilvie: Isn't that what you did? ^
[05:34] mape: http://github.com/dilvie/h5Validate/ ?
[05:34] AAA_awright: mape: Nothing as elaborate as what the w3c has
[05:35] mape: Yeah.. 
[05:35] mape: I'm working on this fast prototyping frontend thing and want to implement automatic html validation through ajax (with a neat button showing the status)
[05:36] mape: But I don't think the api on the w3c validator is meant for such heavy use
[05:38] xdamman has joined the channel
[05:40] tapwater_ has joined the channel
[05:41] jayzzz has joined the channel
[05:44] JimBastard has joined the channel
[05:44] muhqu has joined the channel
[05:46] virtuo has joined the channel
[05:48] hellp has joined the channel
[05:49] __mn__ has joined the channel
[05:50] __mn__: micheil: getting errors on 'sys' is now 'util'?
[05:50] xer0x has joined the channel
[05:50] xer0x: <3 the node
[05:51] admc has joined the channel
[05:52] tobeytailor has joined the channel
[05:53] sonnym: mape: the w3c validator is open source, but written in perl.
[05:54] mjr_: micheil: what's the proper way to write a node lib that works with 0.3 and 0.2 and needs to switch between require("sys") or require("util")?
[05:54] mape: sonnym: Yeah, they have a deb package of it but was to tired to get it working with nginx and perl-cgi
[05:54] __mn__: yeah... this "sys" -> "util" is kinda annoying, is there any advantage in changing nomenclature?
[05:56] tapwater_ has joined the channel
[05:56] mjr_: __mn__: I kind of like the new name, but I don't know how to handle the switchover gracefully.
[05:56] __mn__: exactly
[05:56] __mn__: I just got stuff up and running now I'm having to figure out how to switch.
[05:57] mjr_: So far my plan is to ignore that deprecation warning.
[05:57] mjr_: It's been a successful strategy so far.
[05:57] sonnym: you could just wrap the requires in a try-catch
[05:57] __mn__: oh, I thought my app wasn't running because of it.
[05:57] sonnym: really inelegant, but will get the job done
[05:58] __mn__: I have an EC2 instance that I just booted up and it was working *BEFORE* and now it won't work, but now I'm trying to figure out how to upgrade node.js on my cygwin desktop?
[05:58] matjas has joined the channel
[05:58] __mn__: is there a proper way to upgrade node.js?
[05:59] mjr_: __mn__: I dunno about cygwin, but in regular unix, you can just make install your way to upgrade freedom.
[06:00] __mn__: don't you have to re-clone it from git to get the newest verison to then reinstall?
[06:01] mjr_: __mn__: indeed you do, or you can use the more efficient git commands to just bring yourself up to date
[06:01] mjr_: __mn__: git fetch ; git merge origin/master
[06:01] __mn__: thanks
[06:01] mjr_: is often what you'd do
[06:01] mjr_: But git is a wily and complicated thing.  Depending on what you've done, that might not be the right thing.
[06:01] mjr_: It probably is though
[06:02] __mn__: yay neither fetch or merge work
[06:03] mape: or just git pull?
[06:03] mape: or is that a bad idea considering one never alters the code?
[06:04] __mn__: I was just about to try that and it isn't either.
[06:05] murz has joined the channel
[06:08] derferman has joined the channel
[06:09] mjr_: Git is complicated.  If you aren't familiar with it, it can be a challenge to tame.
[06:10] __mn__: it was nice when I started using it
[06:10] aurynn: git is complicated
[06:10] aurynn: but now I use it for interacting with SVN
[06:10] MikhX has joined the channel
[06:11] matjas has joined the channel
[06:12] margle has joined the channel
[06:14] davidascher has joined the channel
[06:15] sonnym: I like what Linus says about svn. . . . that "cvs done right" is the totally wrong approach to source control
[06:15] __mn__: okay, so my EC2 is running off of  v.0.3.0-pre, how can I downgrade via git to 0.2.3? (how come v0.3.0-pre doesn't show up when you fetch -all tag?)
[06:16] mjr_: if you want a released version, I'd just download the tarball
[06:16] mjr_: but if you really want it from git, you can checkout the tag and build that
[06:17] jakehow has joined the channel
[06:17] jansc has joined the channel
[06:17] Nohryb has joined the channel
[06:18] mjr_: git checkout v0.2.3 ; ./configure ; make install
[06:18] mjr_: might very well do it
[06:18] __mn__: that works even if node is already installed?
[06:18] mjr_: yeah, probably
[06:18] sonnym: should just overwrite /usr/bin/node if it's already installed
[06:18] __mn__: sweet.
[06:18] sonnym: if you have your former source directory, you may want to try a make uninstall
[06:18] hzin has joined the channel
[06:19] __mn__: I'll try that first.
[06:23] mbrochh has joined the channel
[06:24] SamuraiJack has joined the channel
[06:28] ryah: Tim_Smart: ssd
[06:28] SamuraiJack_ has joined the channel
[06:36] tksohishi has joined the channel
[06:37] ncursestest has joined the channel
[06:38] rex_fernando has joined the channel
[06:42] ivanfi has joined the channel
[06:43] tobeytailor has joined the channel
[06:45] MikhX has joined the channel
[06:49] matjas has joined the channel
[06:49] SamuraiJack__ has joined the channel
[06:55] Mobbit has joined the channel
[06:55] xer0x has left the channel
[06:57] zemanel has joined the channel
[07:01] visnup has joined the channel
[07:01] SINPacifist has joined the channel
[07:04] Akufen has joined the channel
[07:04] Akufen has joined the channel
[07:04] TomsB has joined the channel
[07:06] jpld has joined the channel
[07:06] jpld has joined the channel
[07:08] simme has joined the channel
[07:09] simme has joined the channel
[07:11] rcy has joined the channel
[07:19] teemow has joined the channel
[07:20] mif86 has joined the channel
[07:24] sonnym: gotta love the ipad. . . debugging with alerts makes me feel like I'm writing js in the 90s again :(
[07:24] mape: sonnym: enable the console?
[07:24] delapouite has joined the channel
[07:25] sonnym: that sounds like a good idea.  know offhand how to do that?
[07:25] mape: sonnym: in the settings
[07:25] mape: enable developer console or something like that
[07:25] mikeal has joined the channel
[07:26] sonnym: mape:  sweet thanks.  I knew lamenting in here would get the answer :)
[07:26] mape: Hehe
[07:28] sonnym: so apparently webkit doesn't let you edit the inner html of a dom element I created. . . that's nice.
[07:29] fbits has joined the channel
[07:32] jetienne has joined the channel
[07:33] svnlto has joined the channel
[07:33] sonnym: pos is still rendering incorrectly.
[07:33] jetienne has joined the channel
[07:51] Evet_ has joined the channel
[07:52] astrolin has joined the channel
[07:56] hzin_ has joined the channel
[07:58] TomSlick` has joined the channel
[07:59] ph^_ has joined the channel
[07:59] sebs has joined the channel
[08:00] sschuermann: ITM: in themorning to you, fellow nodies ;) 
[08:00] Blink7 has joined the channel
[08:01] MikhX has joined the channel
[08:03] d0k has joined the channel
[08:05] jblanche has joined the channel
[08:06] wilmoore_ has joined the channel
[08:07] Blink7 has joined the channel
[08:09] sideshowcoder has joined the channel
[08:09] sschuermann: vows.js awesome
[08:14] JimBastard: sschuermann: :-)
[08:15] JimBastard: sschuermann: yes it is!
[08:15] JimBastard: we have been working on some tools to work with vows
[08:15] JimBastard: bringing cuke to node
[08:15] JimBastard: http://github.com/nodejitsu/kyuri
[08:17] ph^ has joined the channel
[08:18] mlangenberg: Anybody got some experience with Faye in production? I would like to know how the experience is with Internet Explorer (7/8) users.
[08:18] caolanm has joined the channel
[08:19] TomY has joined the channel
[08:21] rnewson has joined the channel
[08:21] rnewson has joined the channel
[08:24] mbrochh has joined the channel
[08:24] mbrochh has joined the channel
[08:28] unomi has joined the channel
[08:32] agnat has joined the channel
[08:32] aubergine_ has joined the channel
[08:33] path[l] has joined the channel
[08:39] Blink7 has joined the channel
[08:39] ctp has joined the channel
[08:46] mytrile has joined the channel
[08:47] CIA-36: node: 03Tom Hughes 07master * rf61b110 10/ src/node.cc : 
[08:47] CIA-36: node: Add signal handlers so we clean up before exiting.
[08:47] CIA-36: node: Add SIGTERM and SIGINT signal handlers so that we run the exit handlers
[08:47] CIA-36: node: before exiting when getting these signals. Fixes an issue where we
[08:47] CIA-36: node: couldn't run vi after CTRL+C'ing node because the stdin fd was left
[08:47] CIA-36: node: non-blocking. - http://bit.ly/d4fsNr
[08:47] CIA-36: node: 03Ryan Dahl 07master * r6691aca 10/ lib/net.js : Allow people to set backlog. Need a better API. - http://bit.ly/9SkAJ8
[08:49] CIA-36: node: 03Ben Noordhuis 07master * r045bd4c 10/ (.gitignore wscript tools/nodejs.pc.in): Preliminary pkg-config support. - http://bit.ly/d9Px51
[08:49] aubergine has joined the channel
[08:51] CIA-36: node: 03Ryan Dahl 07makefile * rb33af9d 10/ (Makefile tools/js2c.py): makefile - http://bit.ly/a0vWpR
[08:51] CIA-36: node: 03Ryan Dahl 07makefile * r3277d45 10/ Makefile : fix node_natives.h - http://bit.ly/ax2SlE
[08:51] CIA-36: node: 03Ryan Dahl 07makefile * rbc9a85f 10/ Makefile : ... - http://bit.ly/ajIhSm
[08:51] CIA-36: node: 03Ryan Dahl 07makefile * r392b03c 10/ Makefile : deps compiling - http://bit.ly/bHQDrf
[08:51] CIA-36: node: 03Ryan Dahl 07makefile * r081d8a2 10/ Makefile : Successful build - http://bit.ly/bcBduW
[08:51] digitalspaghetti: ULTRA COMBO!
[08:53] ryah: :)
[08:53] mlangenberg: I thought is was already possible to handle SIGINT?
[08:53] mlangenberg: s/is/it
[08:54] ryah: it is
[08:54] ryah: this is just to clean up stuff for node
[08:54] mlangenberg: nice
[09:01] tek has joined the channel
[09:02] MattJ has joined the channel
[09:04] xla has joined the channel
[09:05] tobeytailor has joined the channel
[09:06] svnlto has joined the channel
[09:07] JimBastard: can't sleep, must write javascript
[09:07] spetrea: JimBastard: :)
[09:10] olegp has joined the channel
[09:14] JimBastard: morning olegp 
[09:16] olegp: morning
[09:19] pngll has joined the channel
[09:20] dilvie has joined the channel
[09:23] sixtus42 has joined the channel
[09:26] sixtus42: Hi all. Is there a good example for how to pass an incoming HTTP request to a child process (i.e. spawn a new node that takes over the request). I don't need a lib, just a short gist.
[09:26] sixtus42: (if there is a lib already, I don't mind a pointer)
[09:26] AAA_awright: That kinda defeats the whole point of using Nodejs doesn't it?
[09:27] xla has joined the channel
[09:27] JimBastard: sixtus42: why not reverse proxy over http?
[09:28] JimBastard: you can use nexpect to spawn a process if you want
[09:28] JimBastard: http://github.com/nodejitsu/nexpect
[09:28] aubergine has joined the channel
[09:28] SubStack: or use dnode for rpc ^_^
[09:29] zomgbie has joined the channel
[09:29] JimBastard: im still seriously considering making our "how-it-works" section be a rage comic
[09:30] jacobolus has joined the channel
[09:30] digitalspaghetti: The other option is to write a connect middleware
[09:30] herbySk has joined the channel
[09:30] digitalspaghetti: http://github.com/senchalabs/connect
[09:31] JimBastard: whats wrong with http.createServer
[09:31] JimBastard: you dont need a whole middleware stack to pass req, resp, callback
[09:32] sixtus42: AAA_awright: why so?
[09:32] digitalspaghetti: true, but connect kind of wraps it up nicely
[09:32] digitalspaghetti: and provides other handlers
[09:32] digitalspaghetti: slightly less raw than http.createServer
[09:32] JimBastard: i was helping this team at the hackny event
[09:32] JimBastard: they were trying to use connect and having a few issues for sure
[09:33] JimBastard: got them fixed up proper
[09:33] JimBastard: they took 2nd place :D
[09:33] AAA_awright: sixtus42: People use threads to avoid forking, and people use Nodejs to avoid the overhead of threading...
[09:33] JimBastard: yeah, spawning child processes for http requests is prob not what you trying to do
[09:33] sixtus42: JimBastard: nope. I want to executed untrusted code in the connect of HTTP request
[09:34] sixtus42: and there is the "while (true)" problem
[09:34] omarkj has joined the channel
[09:34] sixtus42: and I don't want the master to proxy all the data, if I can just hand off the connection to the child
[09:35] JimBastard: jefe?
[09:35] sixtus42: AAA_awright: event loops are great, but you need more than one
[09:35] JimBastard: http://github.com/fictorial/jefe
[09:35] JimBastard: dunno if it will still work
[09:35] JimBastard: sixtus42: i would suggest spawning up a new process
[09:35] JimBastard: a new node instance
[09:35] JimBastard: and if it dies, let it
[09:35] JimBastard: chroot it
[09:36] AAA_awright: sixtus42: If you prefork or pre-initalize a thread then sure, but not one per request
[09:36] AAA_awright: One thread per thread core should be all that is necessary
[09:36] sixtus42: AAA_awright: I never claimed to do one per request, I just asked how to pass the socket
[09:36] sixtus42: AAA_awright: so the master doesn't need to proxy
[09:36] AAA_awright: Hmm I was just assuming you fork() at the request to get the memory state
[09:37] JimBastard: o.O
[09:37] sixtus42: AAA_awright: oh please...
[09:37] AAA_awright: Yeah I've had trouble spreading the load across threads that way too
[09:37] JimBastard: breakfest sammich time
[09:37] AAA_awright: sixtus42: That's been debated over and over here and elsewhere, I don't see where it's going anytime soon, maybe someone else does?
[09:40] sixtus42: AAA_awright: Guess, that's why I am asking. http://nodejs.org/api.html#event-fd-27 seems to be what I want example code for
[09:40] CIA-36: node: 03Joshua Peek 07master * r73b29d7 10/ (lib/net.js test/simple/test-net-connect-buffer.js): Don't flush net writeQueue on end() if its still connecting - http://bit.ly/bzgY1I
[09:43] antono has joined the channel
[09:47] CIA-36: node: 03Nathan Rajlich 07master * r9b1ff07 10/ (3 files in 2 dirs): Upgrade http-parser with a fix for spaces in headers - http://bit.ly/cEsGly
[09:49] matjas has joined the channel
[09:51] matjas has joined the channel
[09:53] aubergine has joined the channel
[09:54] sideshowcoder has joined the channel
[09:58] mattcodes has joined the channel
[09:59] thejefflarson has joined the channel
[10:01] aubergine_ has joined the channel
[10:03] mattcodes: Im experimenting with nodejs & nodeunit (async testing framework), would care to review/critic (help me with idioms) if Im out of line.
[10:04] mattcodes: Subject under test: http://pastebin.com/5VFwL3GW and Tester: http://pastebin.com/Cpr7TyaZ
[10:06] Nohryb has joined the channel
[10:07] aubergine has joined the channel
[10:09] Evet has joined the channel
[10:12] agnat has joined the channel
[10:21] ooooPsss has joined the channel
[10:25] svnlto has joined the channel
[10:25] skohorn has joined the channel
[10:26] svnlto has joined the channel
[10:26] ajsie has joined the channel
[10:26] ajsie has joined the channel
[10:27] caolanm: mattcodes: hi, I can see a few things you might want to change
[10:27] caolanm: require("routereader.js")  <-- the '.js' shouldn't be there
[10:28] caolanm: mattcodes: I'm not sure what you're trying to do with the routereader.getAll function, but I'd expect the callback to only be called after all results have loaded
[10:28] caolanm: instead of each time
[10:29] caolanm: its also normal for the first argument returned from a callback to be an optional exception
[10:29] caolanm: so if everything goes to plan, you do callback(null, value), otherwise you do callback(error)
[10:30] caolanm: in your test function you might want to call test.expect(10) to say you expect the callback to be executed 10 times
[10:30] caolanm: if that is indeed your intention
[10:30] caolanm: mattcodes: that any help?
[10:32] xla has joined the channel
[10:33] cefn has joined the channel
[10:33] ooooPsss_ has joined the channel
[10:35] mattcodes: caolanm
[10:36] mattcodes: there could be a million results hence passing in a callback to execute over each result 
[10:36] mattcodes: in reality each batch (paging: 1000)
[10:36] mattcodes: lets me give real scenario
[10:37] caolanm: ok
[10:38] mattcodes: pulling from a RESTful database, couchDb 
[10:38] mattcodes: each op (the ones with settimeout for emulation)
[10:38] mattcodes: could return either the full amount take(100) or less e.g. the last page might return (330
[10:38] mattcodes: sorry (33)
[10:39] mattcodes: so I pass in the callback to do the work either over each item (another loop to add) or over the batch (the loop is in the callback) 
[10:39] mattcodes: so I would probably need (err, callback, completionCallback) ?
[10:40] caolanm: depends what you want to do if an error occurs
[10:40] mattcodes: I would call the completion callback after couch/mongo/ravendb return less than the paging size request
[10:40] caolanm: if one of the requests returns an error would you want to continue with the others or return immediately not caring about the other results?
[10:41] caolanm: personally, I'd have an iterator function, called for each result as it arrives, and a callback called when all results have been processed.
[10:41] caolanm: if an error occurs, call the callback immediately with the error, and don't process any more
[10:42] mattcodes: i think thats where I was going, sorry I specified wrong pseduo signature) so it would (err, actionForEachResult, completitionCallBack) 
[10:43] mattcodes: or just (actionForEachResult, callback)
[10:43] mattcodes: then callback determines if error or not maybe as simple as pass as boolean 
[10:43] caolanm: exports.getAll = function(iterator, callback)
[10:44] caolanm: then call iterator(data), and callback(err) at the end
[10:44] caolanm: or callback(err, processed_data)
[10:45] caolanm: if you follow that sort of style then you can also use libs like: http://github.com/caolan/async to handle iterating over the requests
[10:45] mattcodes: cool. will adjust.. thanks
[10:46] caolanm: :)
[10:46] mmso has joined the channel
[10:46] mmso has joined the channel
[10:46] mattcodes: caolanm, just interested what was language/stack before nodejs/js?
[10:46] mattcodes: what was --> what was your
[10:48] skohorn has joined the channel
[10:49] caolanm: mattcodes: I do mostly python at work, but used to spend lots of time playing with javascript and erlang too.... now its mostly node.js ;)
[10:50] caolanm: although couchapps are a fun distraction from node
[10:50] caolanm: basically javascript is where it's at ;)
[10:52] mattcodes: interesting, Im really eager to make it work for me coming from c#, but the language being so small makes me wonder, I mean no byte arrays etc., no yield, no linq
[10:52] mattcodes: so given the choice you on say a greenfield (and complexed one) youd avoid your main/prior language python as much as you could?
[10:53] caolanm: sure :) ...javascript is my favourite language to work with
[10:54] derferman has joined the channel
[10:55] SubStack: no byte arrays? Buffer?
[10:55] mattcodes: any ruby / nodejs have any similar thoughts? given ruby's fame for simplicity?
[10:56] mattcodes: is that Node specific or part of commonjs?
[10:56] caolanm: mattcodes: node specific
[10:57] caolanm: mattcodes: it might be a different way of thinking, but I don't think you'll find javascript lacking
[10:57] SubStack: just different
[10:58] caolanm: right
[10:58] SubStack: and javascript is flexible enough that you can port over your favorite abstractions from other languages
[10:59] caolanm: ACTION <3 js flexibility
[10:59] mattcodes: caolanm, just what I wanted to hear, this could make me start enjoying dev again, .net eco space is PITA atm - and that using tools that peers are envious of (flexibility of near greenfield projects)
[10:59] mattcodes: where is everyone hosting their nodejs instances? ec2?
[10:59] aubergine_ has joined the channel
[10:59] rra_ has joined the channel
[11:01] svnlto has joined the channel
[11:01] ysynopsis has joined the channel
[11:02] caolanm: ACTION -> lunch
[11:02] ajsie: anyone uses MongoDB for Node?
[11:02] ajsie: could need some guidance
[11:07] unomi has joined the channel
[11:10] Kami_ has joined the channel
[11:13] zorzar has joined the channel
[11:13] kjy112 has joined the channel
[11:15] andrewfff has joined the channel
[11:19] V1 has joined the channel
[11:19] sideshowcoder has joined the channel
[11:20] sveimac has joined the channel
[11:20] DTrejo has joined the channel
[11:26] rra__ has joined the channel
[11:29] skohorn_ has joined the channel
[11:31] mlangenberg: Since JavaScript runs in a single thread, typical race conditions cannot occur. Is this rule stil valid when using setTimeout?
[11:33] SubStack: some types of race conditions don't occur
[11:33] SubStack: like the kind you get from threads
[11:33] cefn has left the channel
[11:33] SubStack: but there are race conditions to do with non-blocking that can be annoying
[11:33] mlangenberg: How does setInterval/setTimeout work? Do they just stop the current thread execution?
[11:34] deoxxa: mlangenberg: they schedule a callback for execution at x interval or time
[11:34] Tim_Smart has joined the channel
[11:35] ctp has joined the channel
[11:38] margle has joined the channel
[11:38] skohorn has joined the channel
[11:42] markwubben has joined the channel
[11:43] Tim_Smart has joined the channel
[11:44] mattcodes has joined the channel
[11:46] micheil: mjr_: I need to do a back port.
[11:46] micheil: mjr_: so util actually exists in 2.
[11:46] sechrist: http://simonhf.wordpress.com/2010/10/13/node-js-versus-lua-hello-world/
[11:47] sechrist: I can write an app that binds a socket in C and just spits out static content that can beat those benchmarks too
[11:47] sechrist: I don't see the point if you're going to have the counterexample super hardcoded
[11:47] sechrist: then again it's testing raw socket response I guess
[11:49] micheil: not only that, but look at how their handling http.
[11:49] tobeytailor has joined the channel
[11:49] micheil: with the network module, not with the http module
[11:49] micheil: I'm sure it's about time we stop comparing things.
[11:50] ctp has joined the channel
[11:51] Tim_Smart: sechrist: Is lua non-blocking?
[11:52] stride: *yawn* another day, another meaningless "benchmark"
[11:55] Tim_Smart: sechrist: I would rather see concurrency comparisons.
[11:56] micheil: ryah: ping.
[11:56] micheil: ryah: what's --v8-options meant to do?
[11:56] digitalspaghetti: stride: yea :(
[11:56] Tim_Smart: micheil: You have a habit of pinging ryah when it's 4-5am in SF ;)
[11:56] digitalspaghetti: i wish people would just get over it and just pick a stack and be happy
[11:57] micheil: Tim_Smart: hmm, I just got up, so.. uh
[11:57] digitalspaghetti: instead they have to nit pick over silly details that only really pedantic people care about
[11:57] micheil: I hope everyone's seen Chris Williams talk from JSConf?
[11:57] Tim_Smart: micheil: v8 has it's own comand line options.
[11:57] micheil: http://voodootikigod.com/jsconf-eu-2010-speech
[11:57] micheil: okay
[12:01] mattcodes has joined the channel
[12:02] ajsie: is there a couchdb ODM for node?
[12:03] digitalspaghetti: heh, linkedin is suggesting i connect with Doug Crockford :D
[12:04] digitalspaghetti: ajsie: no ORM, but node-couchdb
[12:04] digitalspaghetti: that's what I am using
[12:04] ben_alman has joined the channel
[12:04] digitalspaghetti: but I don't need an ORM since my client side is 100% JS as well, so i just save and load the JSON directly
[12:05] ajsie: digitalspaghetti: okay 
[12:05] ajsie: that is comparable with node-mongodb-native right?
[12:06] mlangenberg: I need some persistency too, but I'm probalby just going to write/read the JSON to disk on server shutdown/boot. 
[12:06] __mn__ has joined the channel
[12:06] ajsie: mlangenberg: why?
[12:06] ajsie: why not use mongodb/couchdb?
[12:07] ajsie: just tested mongoose 
[12:07] ajsie: worked perfect
[12:07] mlangenberg: Because it is yet another technology.
[12:07] ajsie: okay
[12:07] mlangenberg: My internal state is just a list of clients. Really small.
[12:07] ajsie: yeah
[12:07] mlangenberg: No problem to keep in in memory.
[12:08] mlangenberg: I really hope Faye is robust enough on the client (browser) side by the way.
[12:08] mlangenberg: Dealing with many Internet Explorer users on the frontend.
[12:09] daglees has joined the channel
[12:12] digitalspaghetti: i need some relational stuff, not full but i need foreign key types
[12:12] antono has left the channel
[12:13] pengwynn has joined the channel
[12:13] aubergine_ has joined the channel
[12:19] __mn__: I'm ./configure node.js on my desktop with cygwin and I have all the packages for it and I get a "could not configure a cxx compiler" (I have the g++ and libcpp). Any clue?
[12:19] ysynopsis has joined the channel
[12:19] nerdEd has joined the channel
[12:20] andrewfff:  hi all :) I'm scraping something off a website and will need to track cookies to keep myself logged in (kind of like http://www.voidspace.org.uk/python/articles/cookielib.shtml). Is there any easy way to do this? AFAICT there's isn't - Apricot won't do it and it's outside the scope of what jsdom seems to do
[12:22] __mn__: (figured it out, it needed the C++ share package also)
[12:23] __mn__: but now I am getting an [all] Error 1 on make, python 5820 fork: child 204 died waiting for dll loading, errno 11. ?
[12:23] micheil: good damn. v8 uses a for loop to parse command line args.
[12:25] hellp has joined the channel
[12:26] spetrea_ has joined the channel
[12:27] c4milo has joined the channel
[12:29] digitalspaghetti: o_0
[12:30] Anti-X has joined the channel
[12:31] spetrea has joined the channel
[12:32] micheil: here I was thinking that we were doing it wrong by using a for-loop, so I rewrote it to use getopt_long.
[12:32] bradleymeck has joined the channel
[12:34] bentruyman has joined the channel
[12:34] Tim_Smart: micheil: Nothing wrong with a for loop :)
[12:34] micheil: true, but it was butt ugly and hard to maintain.
[12:34] Tim_Smart: micheil: You will probably find getopt uses a loop :p
[12:35] micheil: true, but it's built in and *knows* how to parse options
[12:36] kriszyp has joined the channel
[12:37] murphy has joined the channel
[12:37] mytrile has joined the channel
[12:38] delapouite has joined the channel
[12:50] Ari-Ugwu has joined the channel
[12:50] MattJ: Is there a way to get the current stack trace in Node/V8?
[12:51] path[l]2_ has joined the channel
[12:52] Tim_Smart: MattJ: Yes. process.stack() or something.
[12:53] Tim_Smart: MattJ: OK it isn't process.stack(), but it is there somewhere...
[12:53] MattJ: :)
[12:53] Tim_Smart: MattJ: console.trace()
[12:54] agnat: Tim_Smart: yeah, that dumps a stack because it throws :-P
[12:54] MattJ: Tim_Smart: thanks!
[12:54] Tim_Smart: agnat: Yeah. Make sure you have a try catch though ;)
[12:55] agnat: Tim_Smart: but then it stops dumping ... so its a catch (22) :-)
[12:58] jansc_ has joined the channel
[13:03] ysynopsis has joined the channel
[13:05] matt_c has joined the channel
[13:07] jherdman has joined the channel
[13:07] dnolen has joined the channel
[13:09] skohorn has joined the channel
[13:13] path[l] has joined the channel
[13:13] ivanfi has left the channel
[13:13] davidsklar has joined the channel
[13:16] hellp has joined the channel
[13:16] unomi has joined the channel
[13:17] ajsie: the node application itself IS the server right?
[13:17] ajsie: so i dont have to use apache/nginx/thin/unicorn etc?
[13:17] Tim_Smart: ajsie: Yes.
[13:17] ajsie: Tim_Smart: cool
[13:18] Tim_Smart: ajsie: But it is recommended to use the best tools for the job.
[13:18] ajsie: Tim_Smart: but isn't node very capable of a lot of things
[13:18] Tim_Smart: E.g. nginx is better at node at static file serving, haproxy is better at load balancing.
[13:18] ajsie: okay
[13:18] ajsie: i will use CDN for static files
[13:19] ajsie: js/img/css etc
[13:19] Tim_Smart: ajsie: If you use node for everything, it will become you greatest weakness :)
[13:19] Tim_Smart: *your
[13:19] ajsie: Tim_Smart: CND for static files, then node for application
[13:19] ajsie: that should be sufficient?
[13:19] trotter has joined the channel
[13:20] Tim_Smart: ajsie: Depends on what scale you need to achieve.
[13:20] mif86 has joined the channel
[13:20] ajsie: Tim_Smart: Heroku/Joyent will do the admin and server stuff i guess
[13:20] ajsie: i just upload my node app to them .. and then serve some static files in CDN
[13:21] micheil: Tim_Smart: it'd be great to have something like Passenger for node
[13:21] Tim_Smart: ajsie: Yup. Should be fine for a small app.
[13:21] ajsie: Tim_Smart: joyent is designed for big apps right?
[13:22] micheil: for instance, config nginx such that it passes any requests that aren't a file on to node
[13:22] fbits_ has joined the channel
[13:22] ajsie: big companies are using it like Linkedin
[13:22] micheil: ajsie: depends, but they do design their stack for large deployments
[13:22] Tim_Smart: ajsie: Well, generally big apps will run their own specific stack.
[13:23] ajsie: Tim_Smart: what do big apps need that arent in those services
[13:23] micheil: Tim_Smart: iirc, Joyent actually provide the hardware & configuration
[13:23] ajsie: heroku/joyent
[13:23] micheil: heroku less so then Joyent at large deployments
[13:23] ajsie: i mean .. they are much better than me at deployment 
[13:24] micheil: ajsie: I'd recommend joyent over heroku any day for node.js stuff
[13:24] ajsie: even if i do everything myself the technology/security field changes in a rapid pace .. i can't be as updated as them
[13:24] ajsie: micheil: heroku doesn't work now for node.js .. neither joyent
[13:24] micheil: as for other stuff, they've got some really smart people working there, so, yeah, they should be able to handle things
[13:24] ajsie: micheil: but they are running solaris
[13:24] micheil: joyent most definitely does run node.js
[13:24] ajsie: so even if i run ssh into their shell i have to know solaris =(
[13:24] micheil: http://no.de
[13:24] ajsie: micheil: its not beta?
[13:25] ajsie: i couldn't sign up 
[13:25] micheil: it's just like any other unix system in many respects
[13:25] Tim_Smart: ajsie: True, but if you look at things like github, they had to switch to a custom stack due to complexities.
[13:25] micheil: yeah, the allocation of servers is currently beta.
[13:25] Tim_Smart: ajsie: It all depends on your app.
[13:25] micheil: ajsie: if you're wanting to build your own stack, contact Anchor Systems.
[13:25] micheil: (highly recommend them, really really nice guys.)
[13:25] marienz has joined the channel
[13:26] ajsie: why would i want to build my own stack?
[13:26] ajsie: never done deployment before =)
[13:26] micheil: anchor also designed the github stack.
[13:26] __mn__: what is the advantage of using joyent in contrast to EC2?
[13:26] micheil: if you've never deployed before, try joyent. it's really easy.
[13:26] ajsie: __mn__: read their website ... a comparison is there
[13:26] ajsie: okay 
[13:26] micheil: __mn__: git push to deploy, less server admin stuff
[13:26] ajsie: ill wait for no.de official launch
[13:27] micheil: that was 4 weeks ago.
[13:27] __mn__: hmm.
[13:27] micheil: iirc.
[13:27] pashields has joined the channel
[13:27] micheil: ajsie: they just want to keep a hold on the number of instances that they deploy for now, so you have to request a coupon
[13:28] ajsie: micheil: i have .. i dont get it
[13:28] ajsie: it said i was in queue
[13:28] ajsie: then what is next?
[13:28] Tim_Smart: ajsie: Do you use a unix based system day to day?
[13:28] ajsie: Tim_Smart: ubuntu every day
[13:28] micheil: ajsie: then you wait for then to allocate you a coupon
[13:29] Tim_Smart: ajsie: Good. Just get familiar with the terminal, and deploying apps should be easy.
[13:29] ajsie: Tim_Smart: yeah
[13:30] ajsie: micheil: i have requested a copuon
[13:30] ajsie: it will get sent to me how?
[13:30] ajsie: mail?
[13:30] micheil: no, unfortunately
[13:30] micheil: you have to ping their api to check
[13:30] emmanueloga has joined the channel
[13:30] micheil: https://api.no.de/coupons
[13:31] ajsie: its blank
[13:31] micheil: I'm wishing you could re-use coupons. 
[13:31] ajsie: i requested yesterday
[13:31] micheil: ajsie: in which case you haven't been allocated a coupon yet, and you'll have to either wait or talk to someone at joyent.
[13:32] ajsie: what an intuitive coupon service they have
[13:32] ajsie: =)
[13:32] ajsie: i hope it gets easier once im in 
[13:32] ajsie: the hardest part is to get in!
[13:32] micheil: yeah
[13:33] pzich has joined the channel
[13:33] Anti-X has joined the channel
[13:36] sudoer has joined the channel
[13:37] sudoer has joined the channel
[13:37] GriffenJBS has joined the channel
[13:38] paulr has joined the channel
[13:40] __mn__: how do you stop a server when its in the middle of logging?
[13:41] __mn__: I can't type into cygwin while the server is runnig unless it crashes.
[13:41] micheil: __mn__: I'm not sure what you mean..
[13:41] ivanfi has joined the channel
[13:41] micheil: ctrl+c is the unix way
[13:41] micheil: not sure on cygwin
[13:41] __mn__: its cygwin -> SSH into EC2
[13:42] wink_: ctrl-c should work 
[13:42] zooko has joined the channel
[13:44] __mn__: thanks. serious lifesaver :P.
[13:44] digitalspaghetti: Ctl D for cygwin i think
[13:44] svnlto has joined the channel
[13:45] GriffenJBS: what does "Build failed: Missing node signature for [bld:///home/user/prog/src/c.inc] (for implicit dependencies {task: cxx c.cc -> c_1.o})" mean?
[13:45] micheil: hmm..
[13:45] micheil: no idea.
[13:45] Tim_Smart: Ctrl C sends SIGINT, Ctrl closes stdin
[13:45] Tim_Smart: *Ctrl + D
[13:46] micheil: anyone used the v8 options in node?
[13:46] Tim_Smart: Anyway, I need sleep.
[13:46] micheil: like, done `node --someV8Option script.js`
[13:46] Tim_Smart: micheil: Aren't --prof and friends v8 options?
[13:46] micheil: yes
[13:47] Tim_Smart: micheil: `node -help` (not --help)
[13:47] micheil: wtf.
[13:48] fbits has joined the channel
[13:49] Tim_Smart: micheil: Yeah there are a lot of options.
[13:49] micheil: yeah, I didn't know that worked.
[13:49] micheil: ACTION is trying to handle this in the new opt parser
[13:50] micheil: I'm thinking the easiest / best way may be to create a fake argv / argc for v8
[13:50] micheil: because the current method is based on indexes and all sorts of stuff
[13:51] Tim_Smart: micheil: Doesn't node also have --v8-options
[13:51] micheil: yes
[13:51] micheil: that's the same as -help
[13:51] Tim_Smart: Sure.
[13:51] Tim_Smart: Anyway, I'm off.
[13:52] EyePulp has joined the channel
[13:52] GriffenJBS: I'm really starting to hate waf
[13:52] Tim_Smart has joined the channel
[13:52] EyePulp: what's waf stand for, anyway?
[13:52] GriffenJBS: I'm not saying make is better, but I prefer the devil I know
[13:52] micheil: it's a python build tool used by v8
[13:53] GriffenJBS: what ever was causing my error, has just 'vanished'
[13:54] GriffenJBS: lol, wikipedia shows Wife Acceptance Factor
[13:55] __mn__: okay, so I kill the server with CTRL+C but when I try to launch the server again I get EACCES, Permission Denied error, where it seems like it won't let me re-use the port (80) again. How do refresh all processes?
[13:55] GriffenJBS: __mn__: are you sure it's gone?
[13:56] __mn__: yeah, browsers can't access and I Ctrl+C it multiple times :P
[13:56] GriffenJBS: Ctrl+C is only useful for the current process
[13:57] GriffenJBS: *if* it's still running somewhere that explains why the port is in use
[13:57] __mn__: so how do I kill ports?
[13:57] GriffenJBS: you don't, you kill programs using the ports
[13:57] GriffenJBS: do you know what netstat is?
[13:58] __mn__: no... though the error states EACCESS at server.listen(net:1148:14) ?
[13:58] GriffenJBS: 'netstat -lpt' will show you what your looking for
[13:59] __mn__: SSH TCP connections
[13:59] GriffenJBS: -l shows listening ports, -p shows the PID of the program, and -t limits it to tcp
[14:00] __mn__: if I use a different port like (8080) it works fine... but then that is pointless because users have to type in .com:8080 rather than just .com
[14:01] micheil: GriffenJBS: netstat won't exist in cygwin.
[14:01] micheil: __mn__: you need to kill the node process.
[14:01] __mn__: micheil: its on EC2 so it works
[14:01] micheil: okay
[14:01] micheil: ps aux | grep node
[14:01] GriffenJBS: yeah, get out of cygwin if possible
[14:01] micheil: then kill the process with that PID
[14:02] pgriess has joined the channel
[14:02] micheil: hey pgriess 
[14:02] pgriess: howdy
[14:02] GriffenJBS: if your on a windows machine, vmware and install a distro of your choice, much easier to work with
[14:03] pgriess: micheil: haven't read your patch on arg parsing for node yet, but that codepath could definitely use some attention. glad you're going after it ;)
[14:03] __mn__: GriffenJBS: thats what I was doing before, but I'm trying to get off localhost and into a live server ( http://ec2-174-129-122-94.compute-1.amazonaws.com:8080 as of now)
[14:03] micheil: pgriess: yeah, it works, but doesn't handle the v8 args
[14:03] pgriess: micheil: oh. that's the hard part
[14:03] micheil: pgriess: trying to fix that now, it's a PITA
[14:03] pgriess: micheil: ok, so i'm less excited ;)
[14:04] micheil: pgriess: I'm thinking having a fake argv/argc for v8 would be the way to go.
[14:04] micheil: currently it's all based on these weird indexes and stuff
[14:04] micheil: (v8 actually uses similar to our current arg parser in it)
[14:05] ceej has joined the channel
[14:05] pgriess: micheil: yeah. the stumbling block that i always hit when implemting wrappers like this is that in the wrapper you end up needing to know all of the options that the wrapee supports so that you can ignore those and safely pass them
[14:05] micheil: yeah
[14:05] pgriess: micheil: if you can get a list of option definitions from v8, that would be great
[14:05] micheil: not possible.
[14:06] micheil: it's buried deeply into v8
[14:06] pgriess: micheil: the v8 guys might accept a patch for that if they're serious about allowing their engine to be easily embedded
[14:07] jtsnow has joined the channel
[14:07] micheil: actually.
[14:07] micheil: deps/v8/src/flag-definitions.h
[14:07] jtoy has joined the channel
[14:08] micheil: but it's awful.
[14:08] micheil: getopt_long is so much more awesome.
[14:09] micheil: the only thing it doesn't do is generate --help
[14:09] GriffenJBS: the typical -- won't work to split the cmd line?
[14:09] pgriess: GriffenJBS: it will, but is annoying. hoping we can do better
[14:10] GriffenJBS: pgriess: your right, but there is a reason so many use it
[14:10] pgriess: node --enable_gc -- --debug foo.js kind of sucks
[14:10] micheil: yeah
[14:11] micheil: if I have a static set of v8 arguments somewhere, then I can just check if the last-case option is in the v8 args, if it is, add it to the virtual argv and argc for v8
[14:11] pgriess: yeah
[14:11] micheil: I'm not looking forward to maintaining a list of v8 args though
[14:11] pgriess: i think you should just include flag-definitions.h
[14:11] GriffenJBS: pgriess: I, for one, appreciate someone trying for better, the world never gets better just using what works
[14:11] micheil: pgriess: I can't.
[14:11] pgriess: micheil: why not?
[14:11] micheil: it's really kinda funky.
[14:11] marshall_law has joined the channel
[14:12] micheil: pgriess: have a look at it, you'll soon know what I mean.
[14:12] xla has joined the channel
[14:12] brapse has joined the channel
[14:12] andrewfff: a potential problem with checking options against a list is if v8 introduces an option at a later date which conflicts with a node.js option
[14:13] teemow has joined the channel
[14:13] yhahn has joined the channel
[14:13] micheil: andrewfff: in which case we alias it.
[14:13] aabt has joined the channel
[14:13] micheil: like we do with --v8-options
[14:13] micheil: iirc, v8 only uses long optinos
[14:14] GriffenJBS: another junk way is to prefix all commands that should be passed ie --v8enable_gc
[14:15] pgriess: micheil: i don't see what the problem is w/ including flag-definitions.h. it just uses the cpp to generate a bunch of declarations. seems straight-forward to me
[14:16] pgriess: micheil: seems like exactly what you want
[14:16] micheil: pgriess: because, I need to figure out how to parse / use it.
[14:16] micheil: struct Flag is in flag.cc
[14:16] micheil: it essentially builds an array of options
[14:16] TomsB has joined the channel
[14:17] pgriess: ah, missed that Flag was defined in flag.cc
[14:17] pgriess: that's annoying
[14:17] pgriess: well, you can copy the definition, i suppose
[14:17] davidwalsh has joined the channel
[14:17] deepthawtz has joined the channel
[14:18] GriffenJBS: something else that has to kept in sync
[14:18] aubergine has joined the channel
[14:18] pgriess: yeah, but  the Flag structure itself probably changes rarely
[14:18] pgriess: and when it does, your code doesn't compile anymore
[14:18] pgriess: that's a pretty serious hint
[14:18] pgriess: oh
[14:19] pgriess: so it looks like SetFlagsFromCommandLine will do what you want
[14:19] pgriess: but its possibly static
[14:19] GriffenJBS: might be a good idea to contact the v8 team and see what they recommend
[14:19] micheil: yeah, but I need to have argv and argc to push off to.
[14:20] micheil: but seriously, wtf are they using a for loop + if/else thing
[14:20] pgriess: yeah, here you go
[14:20] pgriess: FlagList::SetFlagsFromCommandLine
[14:20] micheil: there's a reason for getopt_long in C
[14:20] pgriess: call it w/ remove_flags=true
[14:20] micheil: pgriess: node.cc line 1850~ calls it
[14:21] micheil: we currently call it with remove_flags=false
[14:21] pgriess: hm, interesting
[14:21] micheil: pgriess: not only that, but --help and co' are globbed by v8 then
[14:22] bradleymeck has joined the channel
[14:22] andrewfff: i suspect v8 avoids getopt because win32 doesn't have it
[14:22] micheil: *claimed, not globbed. 
[14:22] micheil: andrewfff: hmm. good point
[14:23] pgriess: so if we call SetFlagsFromCommandLine w/ remove_flags=true, v8 will ignore flags that it doesn't understand. we then have to make a second pass over the flags in node, ignoring all of those that *we* don't understand
[14:23] pgriess: that would work, but would not allow us to recognize bogus flags
[14:23] pgriess: (we'd silently swallow them)
[14:23] elliottkember_ has joined the channel
[14:23] pgriess: hm, actually that doesn't work because of flags that take args
[14:23] pgriess: nm
[14:24] micheil: pgriess: that's why I'm thinking that the static set of v8 args would work.
[14:27] davidascher has joined the channel
[14:27] micheil: pgriess: it'd be good if there was a setFlag that set only one flag.
[14:28] micheil: unless we moved node to use something similar to v8's flag's parse.
[14:28] hzin has joined the channel
[14:28] micheil: (that'd have a +1 for portability)
[14:29] mbrochh has joined the channel
[14:36] teemow has joined the channel
[14:38] rauchg_ has joined the channel
[14:41] micheil: hey rauchg_ 
[14:41] rauchg_: hey micheil 
[14:41] micheil: rauchg_: there's word that chrome 7 or 8 (probably 8) will use draft-02
[14:41] rauchg_: i read
[14:42] rauchg_: interesting because anne from opera said we might have -76 for a while haha
[14:42] micheil: yeah
[14:42] bradleymeck: they really should give a way to detect these drafts at this rate
[14:43] micheil: we might need to start thinking about implementing -02 for nws + socket.io + nwc.
[14:43] micheil: pgriess: ^^
[14:44] pgriess: from what i've seen, 02 support in nwc shoudln't be a problem (other than finding the handful of hours to do it)
[14:44] micheil: pgriess: also, as for node-websocket-client support, Ian Fette is interested in having it.
[14:44] pgriess: cool
[14:44] micheil: pgriess: I'm thinking once I get the parser working in nws, we could use that in both.
[14:44] pgriess: also, on a totally unrelated note: who is ian fette?
[14:45] pgriess: micheil: yeah that'd be nice. we have to have a similar buffer management scheme, but that'd be great
[14:46] micheil: pgriess: well, the client and server side data framing is the exact same.
[14:46] micheil: Ian Fette is from either Mozilla or Chrome, I forget, let me check.
[14:46] pgriess: micheil: yeah, i know. but to re-use the same parser we need our relevant data structures to be the same (e.g. if you want a single buf and i work on a list of buffers, it'd be a bummer to have to copy stuff around just to satisfy the api)
[14:47] pgriess: heh, his website is way old
[14:47] pgriess: but does mention chrome
[14:47] micheil: pgriess: well, I'm not sure
[14:47] micheil: pgriess: actually, may have been greg wilkins.. too many emails about it.
[14:47] pgriess: he's a PM for chrome
[14:48] micheil: right, yeah, Ian Fette is from Chrome, he say they are actively working on -02 support
[14:48] matt_c has joined the channel
[14:48] micheil: Greg Wilkins is from Opera, and he's wanting a client to test -02
[14:49] pgriess: ah cool
[14:49] micheil: might not be opera. wtf. too many people.
[14:49] micheil: anyway, Greg is after a -02 client.
[14:50] galaxywatcher has joined the channel
[14:51] sprout has joined the channel
[14:53] micheil: pgriess: alright, Greg Wilkins is from Webtide, aka, Jetty.
[14:53] zemanel has joined the channel
[14:56] Yuffster has joined the channel
[14:57] mattcodes has joined the channel
[15:01] pzich has joined the channel
[15:03] Me1000 has joined the channel
[15:05] cefn has joined the channel
[15:05] cefn has left the channel
[15:09] dnolen has joined the channel
[15:12] zomgbie has joined the channel
[15:12] Aria has joined the channel
[15:15] TheEnd2012 has joined the channel
[15:15] jblanche has joined the channel
[15:16] tj has joined the channel
[15:18] jamesarosen has joined the channel
[15:19] ajpiano has joined the channel
[15:19] muk_mb has joined the channel
[15:19] ajsie: is it possible to run a node file with shebang instead of having to run it with "node script.js"
[15:20] ajsie: cause # isn't a comment in javascript
[15:20] ajsie: so i can't do the shebang 
[15:21] micheil: yes
[15:21] micheil: ajsie: node will strip that shebang
[15:21] micheil: iirc.
[15:21] micheil: let me check.
[15:21] ajsie: micheil: okay
[15:22] sonnym has joined the channel
[15:22] Aria: Indeed it will
[15:23] ajsie: so .. that means i can use shebang and have it like an executable?
[15:23] digitalspaghetti: yea, i've seen scripts with !#/usr/env/bin node
[15:23] ajsie: great
[15:23] ajsie: just some js error on my IDE =)
[15:23] Aria: Yes you can. Only not /usr/env/bin, /usr/bin/env ;-)
[15:23] digitalspaghetti: Aria: yea :D
[15:23] Aria: Heh, yeah, your IDE will carp if it doesn't know about a shebang in JS
[15:23] digitalspaghetti: hence not using IDE's :p
[15:24] halfhalo: do everything in binary.  solves everything
[15:24] softdrink has joined the channel
[15:24] ajsie: :)
[15:25] bradleymeck: or just text editors, all you need is a built in grep and file nav
[15:26] aurynn: Buy a Mac, use TextMate. Solves everything. :)
[15:26] bradleymeck: booo i refuse to pay that much on both accounts
[15:26] Aria: Heh. 
[15:26] aurynn: yeah, macs are expensive.
[15:26] dysinger has joined the channel
[15:26] Aria: [I'll stop buying macs when any other manufacturer gets their shit together and stops making crap]
[15:26] aurynn: Worth it, but expensive
[15:27] micheil: ACTION bought one.. educational cost of 3000$
[15:27] micheil: (australian)
[15:27] Aria: Sounds about right for a pro
[15:27] micheil: yeah
[15:27] ajsie: aurynn: nah
[15:27] ajsie: dont like text editors
[15:27] ajsie: not helping a lot
[15:27] Aria: I use vi ;-)
[15:27] micheil: kinda pissed I missed out on the i7 issues by about 6 months.
[15:27] ajsie: :)
[15:27] aurynn: I got a brand new 13.3" macbook pro.
[15:28] aurynn: It doesn't have i7.
[15:28] aurynn: and.. I don't really care.
[15:28] aurynn: :)
[15:28] halfhalo: bah
[15:28] halfhalo: i7
[15:28] digitalspaghetti: i use gedit :p
[15:28] halfhalo: ACTION makes due with core 2 duo/quads
[15:31] seanouimet has joined the channel
[15:31] jakehow has joined the channel
[15:32] matt_c has joined the channel
[15:32] micheil: aurynn: when doing heaps of compiling and stuff, a i7 and 8 gigs of ram would be well worth it.
[15:32] richcollins has joined the channel
[15:32] micheil: digitalspaghetti: I used that before getting my mac, really good tool.
[15:32] micheil: can be made to be very similar to textmate
[15:32] aurynn: micheil, this is true. :)
[15:33] digitalspaghetti: yea, i have a few plugins installed
[15:33] halfhalo: Phenom x6 FTW
[15:33] Aria: (And, at the moment, I'm on a 1.6ghz atom. vi doesn't run any slower ;-))
[15:33] aurynn: 8GB of memory in my laptop is pretty cool itself
[15:34] halfhalo: 4GB sticks are much cheaper than I thought they would be
[15:34] halfhalo: I picked one up for 89 bucks recently for my laptop
[15:34] micheil: ACTION wouldn't know what sort of memory to get to upgrade his mac right now..
[15:34] digitalspaghetti: and i have a licence for e-texteditor but it doesn't work well under wine :(
[15:34] digitalspaghetti: and the linux port is just pants
[15:35] micheil: I need to get a second display too.
[15:35] digitalspaghetti: and now they want me to pay more for version 2
[15:35] halfhalo: micheil: how new is the computer?
[15:35] micheil: 9 months
[15:35] micheil: actually. 11 months
[15:35] micheil: nov 2009
[15:35] halfhalo: Should be laptop ddr3 methinks
[15:35] halfhalo: same as my mini and T400 use
[15:35] micheil: halfhalo: it's a mac.
[15:35] halfhalo: yeah
[15:35] micheil: hmm, okay
[15:36] halfhalo: I got my mini last december
[15:36] micheil: 1067 Mhz DDR3
[15:36] halfhalo: yeah
[15:36] micheil: k
[15:36] micheil: I wonder how much two 4Gb sticks are.
[15:36] halfhalo: wait, definitive answer
[15:36] halfhalo: about this mac
[15:37] micheil: yeh
[15:37] micheil: just remembered about that.
[15:37] fermion has joined the channel
[15:37] halfhalo: and Go with a single 4GB, cheaper to upgrade later on
[15:38] micheil: halfhalo: any recommended brands?
[15:38] halfhalo: not ocz
[15:38] halfhalo: I use geil or corsair
[15:39] halfhalo: but ocz is... interesting
[15:39] micheil: yeah, I've heard good things about corsair, I've generally gotten kingston though
[15:40] aurynn: micheil, $200 for 2x4GB of SO-DIMM DDR3.
[15:40] aurynn: USD
[15:40] micheil: hmm..
[15:40] micheil: where from?
[15:40] aurynn: I picked it up from Fry's the other day
[15:40] bjarkih has joined the channel
[15:40] halfhalo: I go to newegg or amazon
[15:40] zomgbie has joined the channel
[15:41] halfhalo: usually amazon since no sales tax, vs newegg which does in CA
[15:41] aurynn: given Fry's is <30 minutes away, and I'm in a state without sales tax.. good for me.
[15:41] micheil: ACTION has to ship stuff in.
[15:41] micheil: being I'm in australia and all.
[15:41] halfhalo: oh, one of _them_
[15:42] GriffenJBS: aurynn: which state is that/
[15:42] hober: WA, presumably
[15:42] hober: CA has a sales tax, IIRC
[15:43] bronb has joined the channel
[15:43] bronb has left the channel
[15:43] Aria: OR
[15:43] hober: and Fry's is only on the west coast
[15:43] Aria: WA has a sales tax
[15:43] hober: ahh, there you go
[15:43] aurynn: GriffenJBS, Oregon
[15:43] aurynn: and the Fry's is really close to Portland
[15:44] cadorn has joined the channel
[15:44] GriffenJBS: Alaska, Delaware, Montana, New Hampshire, and Oregon don't have sales tax
[15:44] halfhalo: Neither does Manhattan Beach in CA
[15:45] micheil: aww.. this mbp has a max memory of 8 gigs.
[15:45] micheil: I was hoping I could go 2x8Gb
[15:46] aurynn: Can you *Get* 8GB SO-DIMMs?
[15:46] Anti-X: you can get anything
[15:46] Anti-X: if you pay
[15:47] micheil: aurynn: I was hopeful.
[15:47] c4milo has joined the channel
[15:48] bradleymeck: Fry'
[15:48] bradleymeck: s is moving east, its been in tx for quite a bit
[15:48] matjas has joined the channel
[15:49] chapel: i wish fry's would come where I live
[15:50] micheil: gee.. probably about 220$AU for me to go to 8gbs.
[15:50] micheil: gotta love the US:AU being pretty much 1:1
[15:50] matt_c has joined the channel
[15:50] micheil: 0.99:1
[15:50] micheil: :D
[15:52] aheckmann has joined the channel
[15:52] mikew3c has joined the channel
[15:52] technoweenie has joined the channel
[15:53] Gruni has joined the channel
[15:56] stride: you guys seen backbone.js on HN?
[15:56] tjholowaychuk: whats that?
[15:56] micheil: nup
[15:56] micheil: what's that?
[15:56] halfhalo has joined the channel
[15:56] sudoer has joined the channel
[15:57] nodejs-log has joined the channel
[15:57] c4milo: what's that ? 
[15:58] stride: http://documentcloud.github.com/backbone/ seems that they want to provide a starting point for JS webapps with a pretty sophisticated model/view system
[15:58] stride: but - at first glance - their view stuff seems to depend on the DOM again :/
[15:59] c4milo: hum
[15:59] Anti-X: WHATS THAT
[15:59] Anti-X: ACTION runs into the wall
[15:59] micheil: Anti-X: just had to take it there, didn't you?
[15:59] micheil: :P
[16:00] Anti-X: well i was doing something else, so i missed the round, but i sort of just had to
[16:00] tjholowaychuk: hm :S
[16:00] rwaldron_ has joined the channel
[16:02] c4milo: I'm tired of software and computers  I will paint houses in the nearly future instead . it's less anarchic :P 
[16:02] micheil: stride: I don't think it's tied to the DOM
[16:03] micheil: stride: only the View stuff
[16:04] marshall_law has joined the channel
[16:04] marshall_law has joined the channel
[16:05] stride: orly? hmkay
[16:05] teemow has joined the channel
[16:05] Aria: Interesting. I wonder how that'd fly server-side.
[16:05] Aria: (since we have a working dom now)
[16:06] zooko has joined the channel
[16:06] bencc has joined the channel
[16:07] stephank has joined the channel
[16:08] benburkert has joined the channel
[16:10] micheil: Aria: just method override it.
[16:10] paulwe has joined the channel
[16:11] Aria: Yeah, I just wonder how apps written using it would work.
[16:11] gerred has joined the channel
[16:13] stride: hm, yeah, some minimal example for all of that would be nice
[16:13] robotarmy: backbone looks and smells proper
[16:13] robotarmy: i'm going to use it.
[16:14] stride: I like the thought of reusing validations & even models somehow
[16:14] tjholowaychuk: the model api looks really meh
[16:15] robotarmy: i wrote some model/dom sync code and it was troublesome - partitioning that into view and model actually makes so much sense - more sense than MVC on the server side
[16:15] tjholowaychuk: everything else looks like underscore stuff
[16:15] robotarmy: serverside - MC - Clienc Side MV
[16:17] banjiewen has joined the channel
[16:18] ctp has joined the channel
[16:18] richcollins has joined the channel
[16:19] cefn has joined the channel
[16:21] yviktorov has joined the channel
[16:22] TheEmpath has joined the channel
[16:23] sprout has joined the channel
[16:27] ph^ has joined the channel
[16:34] herbySk has joined the channel
[16:36] sivy has joined the channel
[16:36] sivy: good morning
[16:36] sivy: are there any recommended template engines for node/express that are not yaml-based? this old-skool webhead needs some markup.
[16:37] tjholowaychuk: sivy: ejs / mustache
[16:38] sivy: ACTION looks
[16:38] sivy: tjholowaychuk: you write Jade?
[16:38] tjholowaychuk: yeah
[16:39] sivy: sorry, no offense. I tried to get into the yaml-based templates with ruby, and couldn't make the leap there either
[16:39] sivy: :)
[16:39] tjholowaychuk: its not based on yaml tho :p it just has an indentation based syntax
[16:39] tjholowaychuk: ah no worries
[16:39] sivy: well, yeah, that's what i mean
[16:39] sivy: haml, jade, etc
[16:39] tjholowaychuk: they are certainly more cryptic in ways
[16:40] sstephenson: sivy: check out Eco for another take on ejs-style templating: http://github.com/sstephenson/eco
[16:41] norviller has joined the channel
[16:41] sivy: sstephenson: will do! thanks!
[16:43] slashxr has joined the channel
[16:44] bpot has joined the channel
[16:44] rra_ has joined the channel
[16:46] mAritz has joined the channel
[16:47] isaacs has joined the channel
[16:48] sivy: hm, djangode looks pretty good
[16:48] sivy: i like, and am familiar with, django templating
[16:48] isaacs: anyone know if there's a way to tell node's event loop "hey, i'm involved with something, please don't exit, I'll let you know when I'm done"?
[16:49] micheil: hmm..
[16:49] micheil: maybe.
[16:49] micheil: I'll have to look though
[16:49] joshpeek: tjholowaychuk: ping, wanted to ask about array headers in connect
[16:49] micheil: isaacs: good place to look is at about the middle of node.cc
[16:49] tjholowaychuk: joshpeek: hey, yeah I saw that
[16:49] tjholowaychuk: not sure why it is there lol
[16:49] mjr_: isaacs: you can set a timeout way in the future, then cancel it
[16:50] isaacs: mjr_: yeah, that just seems... not right.
[16:50] isaacs: like i should be doing a different thing than that.
[16:50] isaacs: i should be doing whatever thing that thing does.
[16:50] joshpeek: tjholowaychuk: array headers are needed for headers that have multiple values like set-cookie
[16:51] tjholowaychuk: joshpeek: for sure, but there are ways around it other than that patch
[16:51] tjholowaychuk: that is how node used to handle headeres
[16:52] joshpeek: how are you handling multiple set cookies in your apps?
[16:52] sivy: tjholowaychuk: while I've got my jade template open: how do I use an object property in an li? i've got li= obj.prop but I get undefined
[16:52] dahankzter has joined the channel
[16:53] isaacs: it looks like maybe that's what ev_ref does?
[16:53] paulr_ has joined the channel
[16:53] tjholowaychuk: sivy: if you have an object "obj" that will be fine
[16:53] sivy: tjholowaychuk: huh. ok
[16:53] tjholowaychuk: sivy: li= "some" + " js"
[16:53] tjholowaychuk: for example, so any valid js
[16:53] sivy: tjholowaychuk: that's what i thought. could be data error. thanks
[16:56] jameshome has joined the channel
[16:57] GriffenJBS: :-( people just won't let go of threads
[16:58] jpld has joined the channel
[16:58] siculars has joined the channel
[16:59] Anti-X: isaacs, did you see pull request for npm? about the arguments position in list
[16:59] jameshome has joined the channel
[17:00] isaacs: Anti-X: yeah, haven't had a chance to review yet
[17:00] isaacs: looks uncontroversial, though
[17:00] Anti-X: also it sort of speeds up the sort, because it doesn't check max for every row
[17:00] isaacs: 0.2.4 is contrib party :)
[17:01] Anti-X: though the sort speed is rather irrelevant compared to the time it takes to download the registry
[17:01] Anti-X: or whatever else it is that takes ages
[17:02] omarkj has joined the channel
[17:03] isaacs: yeah, that's what it's doing
[17:03] eboyjr has joined the channel
[17:03] isaacs: it'd be better for it to kinda pre-filter, and cache for some amount of time, too
[17:04] Anti-X: that wouldn't be a bad idea
[17:04] Anti-X: if you pre filter you wouldn't need cache, at least not for now
[17:04] Anti-X: it's not large enough that it's do or die
[17:04] isaacs: the first requires building a "filter aware" view for the couchdb (not hard, just haven't done it yet) and the second involves setting up some kind of way to cache everything that is downloaded from the registry
[17:04] tapwater has joined the channel
[17:05] cardona507 has joined the channel
[17:05] eboyjr: frode: Is nodejs.irc yours?
[17:05] isaacs: i'm sort of hoping that mikeal's request thing will grow some ETag-aware caching and stuff
[17:05] MikhX has joined the channel
[17:06] slashxr: does node.js have a mysql adapter
[17:06] frode: eboyjr: no
[17:07] isaacs: slashxr: there are a few userland modules for that
[17:07] chapel: why would you want mysql :P
[17:07] svnlto has joined the channel
[17:07] V1 has joined the channel
[17:07] isaacs: slashxr: 3, actually.  npm ls mysql
[17:07] eboyjr: frode: Okay lol thanks
[17:07] eboyjr: frodenius: Is nodejs.irc yours?
[17:07] mattcodes has joined the channel
[17:08] langworthy has joined the channel
[17:08] slashxr: why would i not want mysql?
[17:08] Blink7 has joined the channel
[17:08] brianmario has joined the channel
[17:09] aurynn: well..
[17:09] aurynn: what do you need?
[17:10] slashxr: not sure, i just want to start playing around with it 
[17:10] slashxr: not even sure what node.js is!
[17:10] isaacs: mjr_, micheil: yeah, ev_ref() and ev_unref() tell the event loop not to die
[17:10] GriffenJBS: start with small bites
[17:10] mattvermaak has joined the channel
[17:11] mape: Strange question.. But has anyone gotten the w3c validator running locally? (v1.1)
[17:11] matjas has joined the channel
[17:11] aurynn: slashxr, I'll note that I'm kind of biased (I am maintainer of the postgres.js lib), so I may be the wrong person to ask :)
[17:11] noahcampbell has joined the channel
[17:11] V1: V1 ;)?
[17:11] slashxr: so for starters, is sys.puts()  the equivalent of print() / echo() ?
[17:11] mape: Trying to make a service so I can validate html and get a json responce
[17:11] V1: slashxr: use console.log instead of sys.puts
[17:11] GriffenJBS: slashxr have you looked at the api?
[17:12] V1: and yes they are the same
[17:12] slashxr: console.log is for firebug no?
[17:12] slashxr: griffen: well kinda
[17:12] jameshome has joined the channel
[17:12] isaacs: i don't care what anyone says.  mysql is good enough for a lot of really useful things.
[17:12] isaacs: who gives a crap if it's not "web scale" or some other bs
[17:12] slashxr: facebook / twitter all uses mysql
[17:12] jameshome: it's no /dev/null
[17:13] aurynn: mysql is great if you need a datastore you can talk to with sql
[17:13] aurynn: so is sqlite
[17:13] c4milo: isaacs: ! 
[17:13] aurynn: (I don't think there's sqlite bindings yet)
[17:13] slashxr: twitter is 90% mysql, 10% cassandra
[17:13] aurynn: but... I wouldn't use mysql if I needed a rdbms
[17:13] stride: I've heard that relational algebra scares php developers :>
[17:13] isaacs: c4milo: !
[17:13] c4milo: isaacs: how is the work going with node-fuse ? 
[17:13] isaacs: c4milo: i read a lot more code last night
[17:13] stalled has joined the channel
[17:13] isaacs: c4milo: it's not so terrible.
[17:13] isaacs: i have a plan
[17:14] slashxr: i think most sites can run on single server
[17:14] c4milo: isaacs: great 
[17:14] slashxr: its just the other 2%
[17:14] slashxr: that needs multiple
[17:14] hoodoos has joined the channel
[17:15] hoodoos: hail to everyone
[17:15] dmcquay has joined the channel
[17:16] rra_ has joined the channel
[17:16] vilhonen has joined the channel
[17:16] isaacs: c4milo: the idea will be to have it set up the fuse event loop on a separate thread, and call ev_ref to keep node from exiting.  then, when you tell it to unmount (which could happen via either calling myFuseObject.unmount() or `umount`ing or `fusermount -u`ing the mount point in the os), it'll call ev_unref when it cleans up
[17:16] slashxr: is chat.nodejs.org open source?
[17:16] isaacs: c4milo: and then just build out the big ops struct with functions that convert the args into JS objects, mint a cb function, and call the JS function.
[17:17] slashxr: also, if all files are in js, doesn't it mean all your site sources become entirely viewable now?
[17:17] dmcquay: slashxr - no
[17:17] vilhonen: what's the best library for web scraping for node.js?
[17:17] dmcquay: server side js
[17:17] isaacs: slashxr: i thought it was http://github.com/ry/web_ircd
[17:17] slashxr: so it compiles at run time?
[17:17] dmcquay: slashxr - yes, but that's besides the point
[17:17] dmcquay: it executes server side
[17:17] ajsie: is it smart to replace ruby with javascript/node?
[17:18] isaacs: slashxr: the js code isn't downloaded to teh client.
[17:18] c4milo: isaacs:  what you mean with a separated thread ?
[17:18] micheil: isaacs: sorry about that, what's the go?
[17:18] micheil: I've been afaik.
[17:18] mape: Best module to send multidata/form-data with node?
[17:18] aurynn: ajsie, depends on what you're doing.
[17:18] ajsie: aurynn: server side things
[17:18] ajsie: replacing ruby as general programming language on server side 
[17:18] isaacs: c4milo: well, there's this blocking call to fuse_session_loop
[17:18] aurynn: ajsie, node is a tool. Is the tool better for the tasks you're trying to accomplish?
[17:18] ajsie: i can't see any problems with javascript 
[17:19] aurynn: does JS allow you to represent your problems easier?
[17:19] slashxr: isnt it fastser to have a compiled binary than to compile at run time?
[17:19] isaacs: c4milo: it just sits there waiting for a new request to delegate
[17:19] creationix has joined the channel
[17:19] isaacs: c4milo: so,that's what needs to be asyncified
[17:19] c4milo: isaacs: how ? 
[17:19] sschuermann: fixing 302 / 301 bugs at 7 at night ... priceless
[17:19] ajsie: aurynn: my question is is there things ruby can do javascript cannot on server side
[17:19] dmcquay: slashxr - perhaps
[17:19] isaacs: c4milo: i don't really know.  pthread?
[17:19] c4milo: isaacs: I was thinking that perhaps we could need to considerer read directly from /dev/fuse 
[17:19] sschuermann: pissing off the art director while writing a bugfix: awesome ninjalike
[17:20] isaacs: c4milo: oh, yikes.
[17:20] c4milo: isaacs: in a non blocking way
[17:20] isaacs: c4milo: no thanks
[17:20] dmcquay: but there's more to consider than just that
[17:20] ajsie: aurynn: yepp .. i can solve my problems faster cause i just have to focus on one language/code base
[17:20] aurynn: ajsie, Ruby and JS are both Turing-complete. They can both do eveyrthing the other can do.
[17:20] ajsie: aurynn: so it solves a lot .. better than maintaing 2 different code bases that cannot be shared between
[17:20] creationix: node can do anything
[17:20] ajsie: aurynn: great
[17:21] eisd has joined the channel
[17:21] benburkert has joined the channel
[17:21] aurynn: Whether or not the libs exist - different story.
[17:21] isaacs: c4milo: that would be repeating a lot of what fuse_lowlevel.c already does
[17:21] ajsie: then i do yet another big decision since mysql -> mongodb
[17:21] aurynn: creationix, ohey. Yep, we're willing to pick up maintenance for postgres.js
[17:21] ajsie: ruby -> javascript 
[17:21] isaacs: ajsie: mongo nooooo!!!
[17:21] creationix: aurynn: awesome, do you want my namespace in npm
[17:21] ajsie: aurynn: im very satisfied with the library pool so far
[17:22] ajsie: isaacs: no mongo?
[17:22] ajsie: mongodb rock
[17:22] ajsie: s
[17:22] isaacs: ajsie: not if you care about your data.
[17:22] ajsie: isaacs: :)
[17:22] ajsie: isaacs: is couchdb better?
[17:22] creationix: mongo rocks if you're trying to scale a ruby app
[17:22] ajsie: creationix: why is it not good for the data
[17:22] creationix: but for a node app, it doesn't help as much
[17:22] isaacs: ajsie: if it's just analytics or something, and you'er cool with losing a few (or all of it) then great
[17:22] rauchg_: isaacs: care to elaborate ?
[17:22] ajsie: because it has 60 seconds disk persistence?
[17:23] c4milo: isaacs: yes, but it's a better approach that hack fuse , it isn't ? 
[17:23] aurynn: creationix, which namespace do you have?
[17:23] creationix: mongo is fine as long as you understand what you're getting into
[17:23] c4milo: s/hack/to hack/
[17:23] creationix: it's not a cure-all solution
[17:23] rauchg_: mongodb deployed with replica sets is no less durable than any other database
[17:23] creationix: aurynn: not sure, I think "postgres-js"
[17:23] isaacs: c4milo: well, this wouldnt' really be hacking fuse.  it would just be using the established lowlevel API, and not blocking on the loo
[17:23] isaacs: loop
[17:23] ajsie: creationix: either way it will be nosql ... someone that has used CouchDB?
[17:24] isaacs: rauchg_: you know how every week there's some company blogging about how they lost all their data because they ever so slightly misconfigured couchdb?
[17:24] ajsie: is the persitence better there?
[17:24] isaacs: oh wait, no...
[17:24] isaacs: because *that never ever happens* with couchdb.
[17:24] creationix: each "nosql" has it's own quirks
[17:24] aurynn: there's something to be said for ACID.
[17:24] qFox has joined the channel
[17:24] isaacs: mongodb has no "ok, it's really written" guarantees, no append-only transaction log, etc.
[17:24] rauchg_: isaacs: i never heard of a company losing all their data with mongodb
[17:24] rauchg_: i only heard of a guy who set up a 32bit instance of mongodb for machine learning 
[17:25] rauchg_: ignored the 2gb warning
[17:25] rauchg_: and got big in the blogosphere :D
[17:25] jameshome: issacs: links?
[17:25] isaacs: rauchg_: 4square
[17:25] micheil: mape: I want to rewrite the validator in javascript / node.js
[17:25] rauchg_: did they lose data ?
[17:25] creationix: did 4square actually lose data or just suffer massive downtime?
[17:25] jameshome: 4square didn't lose any data.
[17:25] ajsie: isaacs: but wont it be fixed in the future?
[17:25] zooko has joined the channel
[17:25] isaacs: right, they suffered massive downtime.
[17:25] creationix: but they did discover that you can't defragment when running hot/online
[17:25] isaacs: still pretty bad.
[17:25] ajsie: i can't see why they cant fix some issues
[17:25] rauchg_: 11 hour downtime due to using a feature that most databases don't have, because mongodb is pushing innovation with automatic sharding.
[17:26] jameshome: they are dealing wiith massive scale
[17:26] creationix: ajsie: you can't just "fix" things if the architecture made tradeoffs early on that prevents it
[17:26] mape: micheil: I would love that, now I'm doing nasty unstable/experimental debian stuff with nginx->apache->w3c validator that still can't seem to do html5.. but now I have to test sending formdata to it, but not sure what the easiest way to send formdata in node is
[17:26] creationix: like scaling a rails app to handle 100,000 concurrent connections
[17:26] isaacs: bigcouch and riak can both distribute data pretty damn effectively.
[17:26] rauchg_: very different from a massive data loss 
[17:26] ajsie: hmm
[17:27] ajsie: mongodb or couchdb
[17:27] ajsie: that is the question
[17:27] isaacs: rauchg_: what happens if the machine pops in the 60 seconds while you're waiting for an fsync?
[17:27] ajsie: i really hate the views in couchdb
[17:27] ajsie: who has the time to write every view
[17:27] Sembiance: the company I work for inherited a ruby on rails site with lots of traffic. I don't think I can convince them to move to node.js ;)
[17:27] ajsie: :)
[17:27] ctp has joined the channel
[17:27] isaacs: ajsie: temp views :)
[17:27] ajsie: isaacs: heard that is just for development
[17:27] ajsie: shouldn't be used for production
[17:28] isaacs: ajsie: the reason why mongo is fast is because there isn't a write guarantee.
[17:28] isaacs: flushing to disk is not fast.
[17:28] creationix: ajsie: postgres 9.0 has key/value stores now
[17:28] creationix: and postgres is solid
[17:28] vilhonen: creationix: why do you think that rails app couldn't be scaled for 100000 concurrent connections?
[17:28] ajsie: creationix: they have? 
[17:28] aurynn: this is why we use RAID controllers with battery-backed cache.
[17:28] ajsie: json?
[17:28] rauchg_: isaacs: you'd use a replica, with replica sets the recovery would be automatic 
[17:28] rauchg_: it's a tradeoff 
[17:28] rauchg_: you can set --syncdelay=1 
[17:28] isaacs: rauchg_: now you have two problems :)
[17:28] creationix: vilhonen: because ruby apps use blocking I/O and this need at a minumum a thread per connection
[17:28] rauchg_: if you wanted
[17:28] aurynn: write guarantee and returns quickly
[17:28] jstemmer has joined the channel
[17:28] rauchg_: no you don't 
[17:29] ajsie: isaacs: but it can be written to disc directly i think
[17:29] creationix: you try to put 100,000 threads on a system and see what happens
[17:29] rauchg_: you have a production-quality setup
[17:29] ajsie: i think there is an option 
[17:29] rauchg_: which involves more than one computer having your data.
[17:29] isaacs: rauchg_: personally, i am very paranoid, and without some kind of recoverable append-only data structure, i don't believe that your db can survive failure.
[17:29] vilhonen: creationix: how about using a reverse proxy to balance the load?
[17:29] ajsie: i like mongodb not because its fast, but they think about the users
[17:29] isaacs: mysql and postgres have their transaction log, couchdb has an append-only btree data structure as the db.
[17:29] creationix: vilhonen: sure, but then you need a LOT of hardware
[17:29] ajsie: the query is awesome
[17:29] vilhonen: you also probably encounter other bottle necks if you are able to have open sockets for 100,000 users
[17:29] creationix: vilhonen: or use something like node that made the tradeoff in favor or concurrenct
[17:30] ajsie: but only for console :(
[17:30] creationix: vilhonen: and get away with just a couple processes
[17:30] isaacs: if you need size and sharding, then riak and bigcouch are both awesome, and provide very realistic guarantees about what happens to your data.
[17:30] technoweenie: vilhonen: extremely few apps have 100k concurrent connections unless they're doing long lived connections (web sockets, long polling)
[17:30] micheil: man.. this is another couchdb vs mongodb vs mysql vs INSERT_YOUR_DATABASE_HERE talk, right?
[17:30] creationix: technoweenie: I wonder how much of that is because it simply hasn't been possible so people designed around it
[17:31] ajsie: isaacs: riak is key/value store? what is the difference between riak and couchdb/mongodb
[17:31] isaacs: micheil: i'll show you where you can insert your database...
[17:31] isaacs: ajsie: riak is BIG
[17:31] creationix: technoweenie: I mean, that's why mongo was popular, it made it easier to scale ruby apps
[17:31] EyePulp: zing!
[17:31] isaacs: ajsie: minimum 3 nodes.
[17:31] technoweenie: to scale ruby apps? what
[17:31] ollie has joined the channel
[17:31] technoweenie: ha anyways
[17:31] creationix: but yes, the node tradeoff is you have to use callbacks EVERYWHERE
[17:31] creationix: that sucks in a different way
[17:31] isaacs: creationix: s/sucks/IS AWESOEM/
[17:32] micheil: seriously. go read their websites, make up your own mind, these Tech X vs Tech Y discussions are useless.
[17:32] vilhonen: creationix: I don't see v8 so much more efficient that it would make a lot of difference to ruby in hardware requirements
[17:32] rcy has joined the channel
[17:32] jameshome: micheil: +1
[17:32] vilhonen: you are probably doing something in addition to keeping those sockets open 
[17:32] creationix: vilhonen: no, it's not the language, it's the blocking vs non-blocking that makes the difference
[17:32] isaacs: vilhonen: it's not v8, it's the fact that node uses libev and libeio rather than blocking IO
[17:32] creationix: though v8 is pretty darn fast
[17:33] isaacs: oh, beat to the punch by creationix, yet again...
[17:33] isaacs: :)
[17:33] creationix: basically anything that has lots of I/O and not so much CPU intensive calculations will be awesome fast on node
[17:33] DTrejo has joined the channel
[17:34] ajsie: creationix: but if i use CPU intensive calculations
[17:34] ajsie: what happens then?
[17:34] creationix: well, then put those in seperate processes
[17:34] creationix: and communicate over IPC
[17:34] ajsie: or it will block?
[17:34] creationix: then your main node process is free to be a super fact event reactor
[17:34] creationix: ajsie: yep, cpu stuff blocks in node
[17:35] creationix: as does memory lookups
[17:35] V1: 4square went down because didn't monitor there databases it has nothing to do with mongo.
[17:35] micheil: exactly.
[17:35] bentruyman has joined the channel
[17:35] vilhonen: creationix: you're examples work well if you are serving some static content but if I create a rails app I will most definitely want to create dynamic content
[17:35] jchris has joined the channel
[17:35] vilhonen: and it requires cpu cycles
[17:35] micheil: the database filled up all of the available memory on one cluster, meaning that reads / writes hit disc
[17:35] V1: If they made a new shard before it went out of control there wouldn't be any down time. You know you are limited to a server and you should act accordingly 
[17:35] aurynn: Do as little as you can per callback in Node, and let it return to the loop.
[17:35] ajsie: creationix: okay
[17:35] creationix: vilhonen: not much
[17:36] aurynn: Curiously, node makes a great argument to doing as Much As You Can in your DB.
[17:36] creationix: vilhonen: what kind of dynamic content are you thinking about
[17:36] vilhonen: populating template with calculated data or data fetched from a database
[17:36] creationix: v8 is plenty fast for a blog engine to have everything in a single process
[17:36] creationix: vilhonen: yeah, that's not expensive
[17:36] pashields_ has joined the channel
[17:36] creationix: I'm talking about calculating 50 PI digits or something
[17:37] creationix: (maybe not 50, but a lot)
[17:37] technoweenie: you wouldnt want to do that in ruby either, ha
[17:37] sudoer has joined the channel
[17:37] tilgovi has joined the channel
[17:37] V1: It doesn't matter which nosql database you are using, if you don't measure you app you are fucked anyways, no technology can save you, that is the lesson you should learn from 4square. .. Just my 2 cents..
[17:38] isaacs: V1: you can't say that architecture doesn't matter, though
[17:38] isaacs: V1: i mean, that's just silly
[17:39] creationix: no, the lesson from 4square is to not be dumb!
[17:39] micheil: isaacs: 4square was running perfectly fine on mongo though, they just didn't monitor the memory consumption and crashed.
[17:39] technoweenie: also, lift doesnt scale
[17:39] isaacs: right
[17:39] creationix: chose a technology based on it's strengths and weaknesses and then be aware of it.
[17:39] isaacs: but that seems like a pretty trivial failure case to bring down *every* node.
[17:40] micheil: I should write a script that calculates the amount of time that these tech X vs tech Y discussions waste.
[17:40] pashields has joined the channel
[17:40] jameshome: having the database beyond ram capacity isn't a trivial failure
[17:40] vilhonen: what is 4sq using currently as a database?
[17:40] micheil: mongo.
[17:40] V1: mongo
[17:40] isaacs: there's a reason that oil pipelines track their data in giant riak rings, and not in mongo.
[17:40] isaacs: because failure is just simply not an option.
[17:40] mape: isaacs: they use node as well?
[17:40] technoweenie: do they? thats cool
[17:40] isaacs: mape: not usually :)
[17:40] micheil: isaacs: 4square is hardly an oil pipeline.
[17:40] jameshome: heheh
[17:40] mape: isaacs: So I shouldn't use node then? :S
[17:40] isaacs: micheil: right, but riak is cheap :)
[17:41] V1: than why is my oil so expensive?
[17:41] micheil: not for commercial stuff.
[17:41] isaacs: mape: if you care more about speed than CAP, then sure, use mongo.
[17:41] creationix: either nStore will become vapourware or it will crush all the competition!
[17:41] pashields has joined the channel
[17:41] isaacs: V1:  :)
[17:41] creationix: (at the moment it's basically a different flavor or node-dirty)
[17:42] vnguyen has joined the channel
[17:42] micheil: ryah: ping.
[17:43] isaacs: micheil: he's in st louis
[17:43] micheil: ah
[17:43] isaacs: iirc
[17:43] isaacs: (a city in the juicy center of the USA)
[17:43] micheil: so he won't be about today?
[17:43] steadicat has joined the channel
[17:43] isaacs: dunno
[17:43] ajsie: isaacs: do you think i can store sensitive information in couchdb?
[17:43] mape: So.. Easiest way to send formdata with node?
[17:43] ajsie: like credit card info
[17:44] micheil: ajsie: as long as you secure it.
[17:44] ajsie: i've heard mongodb isn't reliable for that
[17:44] technoweenie: ajsie: properly secure your stuff regardless of the data store
[17:44] isaacs: ajsie: sure, just don't expose :5984 to the internet :)
[17:44] micheil: ajsie: just like databases X, Y and Z.
[17:44] jameshome: hahahahaah
[17:44] technoweenie: mongodb sends all data to the nsa, dont do it
[17:44] jansc has joined the channel
[17:44] ajsie: technoweenie: i mean is couchdb technically reliable
[17:44] isaacs: ajsie: yes, very
[17:45] ajsie: mongodb can lose your data
[17:45] isaacs: ajsie: by default, it favors availability over consistency.
[17:45] micheil: ajsie: mongodb can't loose your data if you configure it properly.
[17:45] GriffenJBS: technically, nothing is reliable
[17:45] vilhonen: so what is mongodb good for if it loses data?
[17:45] technoweenie: anything can lose your data, have a good backup story
[17:45] ajsie: vilhonen: yeah .. i wonder
[17:45] isaacs: GriffenJBS: no, technically no *hardware* is reliable.
[17:45] jameshome: *sobs into keyboard*
[17:46] isaacs: GriffenJBS: the question is how the architecture handles that failure.
[17:46] aurynn: Shit's gonna break.
[17:46] isaacs: like, every car will get into an accident.  you can't build an accident-proof car.  what you can do is design it so that the people inside are less likely to die.
[17:46] creationix: it's not a question of "if" it breaks, but "when"
[17:46] GriffenJBS: nothing is 100% reliable, you use your budget to make it closer to 100%
[17:46] creationix: and what happens when it breaks
[17:46] isaacs: mongo is a motorcycle, and they don't give you a helmet by default.
[17:46] ajsie: isaacs: good metaphor haha
[17:47] stephenjudkins has joined the channel
[17:47] vilhonen: if you want to be cool you will choose the motorcycle
[17:47] creationix: crash at 150mph with no helmet
[17:47] heavysixer has joined the channel
[17:47] creationix: yeah, you'll lose data
[17:47] micheil: ooo juicy isaacs: http://izs.me/v8-docs/
[17:47] ajsie: isaacs: will i be more safe if i put on my helmet on crashes ? =)
[17:47] GriffenJBS: at 150 a helmet doesn't help much
[17:47] isaacs: sure
[17:47] GriffenJBS: what you hit depends more
[17:47] isaacs: if you nuke the data center, your data's gone.
[17:47] creationix: well, I ride a scooter that maxes out at 75mph and I always wear a full helmet and body armor
[17:48] isaacs: unless you have a copy of your entire db in another place.
[17:48] creationix: so that's like mongo with all the saftey features turned on
[17:48] GriffenJBS: asteroid, supernova, you guard against what you can
[17:48] isaacs: separate the two data centers, and you either lose write-availability, or you lose consistency -- the question is how you handle conflicts
[17:48] isaacs: it's a fascinating topic, and marketing usually does more harm than good.
[17:49] isaacs: creationix: yeah, you suit up like you'er getting ready to do battle in an arena or something.
[17:49] isaacs: i guess the 101 counts ;)
[17:49] creationix: isaacs: wait till it cools down I have armored pants too
[17:50] creationix: meh, 101 is tame, market street at 6pm is insane
[17:50] isaacs: yeah
[17:50] jameshome: that's my daily commute
[17:50] jameshome: on a bicycle
[17:50] isaacs: busses scare me the most.
[17:50] isaacs: they could flatten you and not even notice.
[17:50] isaacs: and they drive in the bikelane
[17:51] creationix: busses are like getting slashdotted
[17:51] creationix: and reddit and hackernews 
[17:51] isaacs: creationix: sure.
[17:51] creationix: all at the same time
[17:51] jameshome: I like to think of them as cattle
[17:52] isaacs: creationix: getting a lot of traffic is roughly equivalent to being maimed by a giant machine.
[17:52] isaacs: ACTION is much more afraid of busses than slashdot
[17:52] creationix: lol
[17:52] jameshome: that's because you don't use mongo
[17:52] isaacs: bringin it back.
[17:52] aurynn: lol
[17:52] isaacs: nice
[17:52] eisd has left the channel
[17:52] jameshome: sorry, couldn't help myself
[17:53] creationix: though couch is a little sluggish at times (it's all relative)
[17:53] vilhonen: what are you guys using for parsing html or doing web scraping?
[17:53] creationix: couch is like driving a hummer
[17:53] creationix: vilhonen: html4 parser + jsdom + sizzle
[17:53] creationix: *html4 parser
[17:53] creationix: **html5
[17:53] creationix: :O
[17:54] creationix: oh, + request
[17:54] vilhonen: what do you use request for
[17:54] bradleymeck: custom dom + slick + html-parser
[17:54] creationix: request for http, html5 + jsdom to get a dom, and sizzle to query
[17:54] yonkeltron has joined the channel
[17:54] vilhonen: I'll try that out
[17:54] creationix: or sometimes I just use node's native client
[17:54] creationix: (got http)
[17:54] vilhonen: bradleymeck: what's a custom dom
[17:55] bradleymeck: one you write yourself
[17:55] vilhonen: why would you want to do that as there's jsdom
[17:55] creationix: brthat's some hardcore NIH
[17:55] creationix: I've got NIH pretty bad, but I even use jsdom
[17:56] bradleymeck: i had started it a while ago, serves me well, been tested by me for my needs
[17:56] creationix: oh, then that makes sense
[17:56] creationix: I thought you made it after jsdom came out
[17:56] bradleymeck: couple months after but meh
[17:57] technoweenie: creationix: just for reference, github is getting around 10k rpm
[17:57] creationix: vilhonen: http://github.com/creationix/scraperdemo
[17:57] ThePub has joined the channel
[17:57] creationix: technoweenie: not bad
[17:57] creationix: and mostly ruby right?
[17:57] technoweenie: well, thats just rails
[17:58] creationix: yeah, ruby can scale, it's just hard
[17:58] creationix: I used to do a lot of ruby
[17:58] technoweenie: not really, try scaling git, ha
[17:58] technoweenie: god i wish ruby was our problem
[17:58] creationix: oh man, yeah, git is slow
[17:58] creationix: wheat caches everything possible
[17:58] creationix: and I don't do near the git introspection you guys do
[17:59] technoweenie: i think wheat hits some overhead spawning a  child proc
[17:59] creationix: how do you reuse a process?
[17:59] technoweenie: i'm trying to get scott or someone to add a node wrapper for libgit2
[17:59] creationix: so it would be an in-process git library?
[18:00] creationix: that would speed things up a little
[18:00] digitalspaghetti: creationix: couch may be sluggish, but it seems to have better Transaction Consistency
[18:00] digitalspaghetti: than mongo
[18:00] creationix: sluggish is relative
[18:00] halfhalo has left the channel
[18:00] creationix: I "only" get 20,000 inserts per second on my local test couch
[18:00] creationix: using my couch-client library
[18:01] admc has joined the channel
[18:01] digitalspaghetti: yea, i'm doing nowhere near that :D
[18:01] agnat has joined the channel
[18:01] rra__ has joined the channel
[18:02] creationix: I do wonder, how much of ACID mongo has with a proper setup
[18:02] creationix: there is no concept of transactions right?
[18:03] dmcquay: creationix - correct
[18:03] dmcquay: don't mistake me for an expert, but i'm 95% sure that's correct
[18:03] creationix: heck, I don't even think nStore is fully ACID
[18:03] rauchg_: you can do atomic operations 
[18:03] rauchg_: with $push 
[18:03] rauchg_: $set
[18:03] rauchg_: etc
[18:04] creationix: rauchg_: that's usually good enough
[18:04] digitalspaghetti: yea, basically mongo your actually write to memory, then it writes to disk
[18:04] digitalspaghetti: and if you run out of memory (ala 4Square) it causes big issues
[18:04] creationix: can you tell mongo to not return the insert till it's written to disk and fsynced?
[18:05] digitalspaghetti: afaik, not at the moment but that's due for and upcoming release, but don't quote me on it
[18:05] creationix: node clients wouldn't care about slight latency
[18:05] creationix: since they're not blocked waiting on it
[18:07] yonkeltron: i'm getting an awesome npm install error
[18:07] overra has joined the channel
[18:07] digitalspaghetti: indeed, it means i have to actually put "Loading" data in my client side :D
[18:07] yonkeltron: is this the place to report it?
[18:07] isaacs: yonkeltron: awesome, eh?
[18:07] isaacs: yonkeltron: sure.
[18:07] isaacs: yonkeltron: gist the output
[18:07] isaacs: or pastie, if you prefer
[18:08] yonkeltron: isaacs: http://pastebin.com/TqtY732b
[18:08] isaacs: yonkeltron: whoa, what's /ho?
[18:08] yonkeltron: NO IDEA
[18:09] yonkeltron: therein lies the error
[18:09] isaacs: yonkeltron: do you have a .npmrc file in your home dir?
[18:09] yonkeltron: WHOA
[18:09] yonkeltron: i do
[18:09] isaacs: yonkeltron: or any npm_config_* stuff in your env?
[18:09] yonkeltron: i was like
[18:09] yonkeltron: not cool
[18:09] isaacs: yonkeltron: that IS an awesome error :)
[18:10] digitalspaghetti: Thunder. Thunder THUNDER. THUNDERCATS /ho
[18:10] yonkeltron: can i make it install to ~/bin (while i'm at it?)
[18:10] yonkeltron: digitalspaghetti: clever
[18:10] digitalspaghetti: :p
[18:10] yonkeltron: digitalspaghetti: actually, very clever
[18:10] isaacs: yonkeltron: the configs you want are root (for node modules), binroot (for executables) and manroot (for manpages)
[18:11] yonkeltron: fascinating
[18:11] Druid_ has joined the channel
[18:11] isaacs: yonkeltron: and you can prefix them with ~/ if you want, i believe that works in the latest release.
[18:11] yonkeltron: i ask because it's not a good idea for me to make /usr/lib chowned by me
[18:11] yonkeltron: will it create dirs if they aren't there?
[18:12] isaacs: yonkeltron: it'll try, and crash if it fails
[18:12] yonkeltron: hawtness
[18:12] yonkeltron: ok so i'll do that
[18:12] eboyjr has left the channel
[18:12] rauchg__ has joined the channel
[18:12] isaacs: yonkeltron: check these out: http://gist.github.com/579814
[18:13] isaacs: yonkeltron: http://gist.github.com/579814#file_yet_another_option.sh is probably what you're after
[18:13] mjr_ has joined the channel
[18:14] zooko has joined the channel
[18:14] yonkeltron: that's nice right there
[18:14] evanpro has joined the channel
[18:15] sonnym has joined the channel
[18:15] yonkeltron: worked
[18:15] yonkeltron: outstanding
[18:15] brapse has joined the channel
[18:16] yonkeltron: isaacs: thanks for the help.
[18:17] svnlto has joined the channel
[18:22] bpot has joined the channel
[18:23] ThePub has joined the channel
[18:24] zomgbie has joined the channel
[18:24] zooko has left the channel
[18:24] path[l] has joined the channel
[18:25] jblanche has joined the channel
[18:25] jamesarosen has joined the channel
[18:25] hoodoos: excuse me, creationix, does your postgres-js can be considered production ready?
[18:26] creationix: no, but aurynn has one that's about to replace mine
[18:26] creationix: it's pretty stable
[18:26] aurynn: Mine is pretty much alpha, at this point.
[18:26] creationix: any more alpha than mine?
[18:26] aurynn: I don't *think* there's deadly bugs
[18:26] hoodoos: :)
[18:27] creationix: hoodoos: what kind of operations are you doing?  If it's just executiny sql then it should be pretty stable
[18:27] hoodoos: creationix, yes, just running simple queries
[18:27] creationix: I think my driver has some simple race condition that makes it fail under high load
[18:27] hoodoos: creationix, what else can you do to relational database? :))
[18:27] creationix: should be pretty trivial to fix once you find it
[18:28] creationix: hoodoos: all sorts of stuff, the protocol is wide
[18:28] yonkeltron has left the channel
[18:28] creationix: prepared statements, transactions, wire-encryption, ...
[18:28] aurynn: hoodoos, my driver handles prepared statements and should be able to do transactions.
[18:28] aurynn: eventually.
[18:29] hoodoos: i see a ry's driver on github, but he says it's experemental..
[18:29] comster has joined the channel
[18:31] aurynn: Most of the drivers are going to be experimental right now
[18:31] aurynn: Starting Friday, I'm assembling an app on mine, so I'll be able to smash bugs
[18:31] hoodoos: aurynn, btw, can you tell me some overal spherical comparison of mysql against postgresql? i'm running some simple queries doing x > field1 and x < field2 and mysql shows really low performance on that kind of stuff, mssql was A LOT faster.. what about postgresql? sorry for offtopic :(
[18:32] aurynn: hoodoos, Postgresql should be able to handle that really well. Those queries would really depend on your indexes, though
[18:32] creationix: I find postgres is a lot easier to fine-tune
[18:32] aurynn: and if you want to get really fancy, postgres has GIS support
[18:32] creationix: and generally a better engine
[18:33] ryanfitz has joined the channel
[18:33] hoodoos: creationix, aurynn thanks guys, i guess it's worthy to try it out
[18:33] kjy112 has joined the channel
[18:33] creationix: hoodoos: yeah, try aurynn's driver, but be prepared for a couple bumps
[18:33] hoodoos: i just got an ip2location database and I can't use it on mysql :) it was piece a cake on mssql :)
[18:34] aurynn: hoodoos, PostGIS definitely supports that.
[18:34] creationix: yeah, postgres has the original rtree implementation I seem to remember
[18:34] aurynn: It'll be some work to set up, but it'll definitely be doable, and fast.
[18:35] hoodoos: thanks again
[18:35] sveimac has joined the channel
[18:35] Prometheus: there's no reason to use mysql over postgres =)
[18:35] MikhX has joined the channel
[18:36] Druid_ has joined the channel
[18:36] aurynn: If you know MySQL exclusively, and you don't like your data very much.
[18:36] aurynn: ;)
[18:36] Prometheus: and you like slow queries and..
[18:36] Prometheus: and you don't care about high concurrency =P
[18:36] hoodoos: Prometheus, this is the one I love mostly
[18:36] creationix: Prometheus: there could be tons on reasons to use a technically inferior tool
[18:36] creationix: people do it all the time
[18:36] aurynn: there are reasons to use it
[18:37] Prometheus: creationix: I know, a lot of people develop with PHP
[18:37] aurynn: AS long as you're aware of your tradeoffs
[18:37] creationix: Prometheus: well, php doesn't bundle mysql anymore than postgres these days
[18:37] Prometheus: nothing to do with databases, just saying, they like technically inferior tool =P
[18:37] Prometheus: something that feels very much hacked together and glued on
[18:37] jchris has joined the channel
[18:38] noahcampbell has joined the channel
[18:38] hoodoos: postresql 8.4 is fine i guess? :)
[18:38] aurynn: hoodoos, 9.0 just came out
[18:38] Prometheus: 9.0 is hotness =)
[18:38] aurynn: Some people advocate waiting for 9.0.2 or so
[18:38] hoodoos: not in repos yet, let's get it somewhere else then )
[18:38] aurynn: and yes, 9.0 is hawt.
[18:38] creationix: 9.0 has "nosql"
[18:39] Prometheus: but yeah, might want to go with 8.4 nonetheless
[18:39] creationix: so I guess we can't call it nosql anymore
[18:39] hoodoos: postgresql is new edge SQL nosql database.. :)
[18:39] creationix: Prometheus: why? 
[18:39] Prometheus: well, if it doesn't come packaged in his system
[18:40] creationix: ahh
[18:40] Prometheus: it's not like it's much work, but you know
[18:40] creationix: http://javadude.wordpress.com/2010/09/28/installing-postgresql-9-0-on-ubuntu/
[18:40] creationix: I love ppa
[18:40] Prometheus: oh, not bad
[18:40] dshaw has joined the channel
[18:40] bruse: what does "has nosql" mean?
[18:41] zomgbie has joined the channel
[18:41] Prometheus: is cool
[18:41] hoodoos: key/value i belive
[18:41] Prometheus: =P
[18:41] creationix: I mean it has arbitrary key/value
[18:41] fjakobs has joined the channel
[18:41] bruse: i see
[18:41] creationix: it's a new data type in 9.0
[18:41] Prometheus: I wonder how fast that is
[18:41] creationix: hence the quotes around "nosql"
[18:41] bruse: yeah
[18:41] Prometheus: I've been using kyoto cabinet for kvs lately
[18:41] creationix: pretty fast I seem to remember
[18:41] bruse: i still think VoltDB looks really interesting
[18:41] creationix: I talked to a few postgres people at couchcamp right before it was released
[18:41] bruse: if you have a setup that's big enough to support it
[18:42] Prometheus: hmm
[18:44] hoodoos: aurynn, btw, does your driver has something like connection pooling? 
[18:44] aurynn: hoodoos, not yet
[18:44] aurynn: though that's in the roadmap
[18:44] hoodoos: aurynn, i implemented my own for mysql driver i used, works pretty well, dunno if it's too simple :)
[18:44] aurynn: hoodoos, it queues blocks of messages internally, so it *should* be able to handle a decent amount of load on the same connection. Just be careful to commit after each block. :)
[18:45] paulr__ has joined the channel
[18:45] tobeytailor has joined the channel
[18:45] Prometheus: wouldn't you want to handle connection pool at middleware level
[18:45] hoodoos: aurynn, I hope I will only select :)
[18:45] Prometheus: like, using pgpool or something?
[18:45] aurynn: Prometheus, yes
[18:45] aurynn: Prometheus, but
[18:45] aurynn: node's single-thread nature means every request it handles gets dropped on the same line
[18:45] bentruyman has joined the channel
[18:45] Prometheus: ah
[18:45] aurynn: Sooo
[18:45] Prometheus: right
[18:46] aurynn: unless every request opens a new connection (also viable)
[18:46] hoodoos: it's too deadly
[18:46] hoodoos: :)
[18:46] comster: I'm having a newb problem, when doing 2 simultaneous ajax requests onload, I realize that the result of my first request is being overridden by the second.  Any tips on what pattern/technique I should be using to avoid sharing variables between requests?
[18:47] hoodoos: do array.push for results? :)
[18:47] ossareh has joined the channel
[18:48] aurynn: if part of your request startup is db.connect(), and binding that db conn to your request state, you won't need an in-driver pooler.
[18:48] TomSlick` has joined the channel
[18:48] aurynn: but you will need a pooler
[18:49] seangrov` has joined the channel
[18:49] creationix: comster: don't use the same variable for both
[18:49] creationix: comster: depends on what you're trying to do
[18:49] cloudhead has joined the channel
[18:50] hoodoos: creationix, greatly :)
[18:50] comster: creationix, it seems like my 2 concurrent requests are in the same scope/sharing vars
[18:50] aurynn: Concurrency is hard.
[18:50] creationix: comster: need to see some code
[18:51] creationix: every request to node will be call the request callback
[18:51] creationix: but if you have a variable scoped outside the callback, then maybe they will share it
[18:52] comster: hmmm, I'll probably try to setup a test example of my problem
[18:53] fjakobs has joined the channel
[18:53] creationix: comster: but yes, all requests go to the same node process and share the same global scope
[18:54] creationix: so you have to understand what's scoped to what
[18:54] comster: thanks creationix, this is what I'm trying to get a stronger grasp of.
[18:55] davidascher has joined the channel
[18:55] hoodoos: what command is being called to display all commands on double tab in console? :)
[18:55] hoodoos: damn, i'm finished with offtopic, sorry :)
[18:56] mape: Anyone here a frontend developer?
[18:57] aurynn: frontend being?
[18:58] mape: css/markup/js
[19:00] herbySk has joined the channel
[19:00] aurynn: then no, not really.
[19:00] kgf: what's the reason for asking? might get more positive responses with a more focused question?
[19:01] mape: I'm poking around with http://boilerplate.mape.me/
[19:01] banjiewen_ has joined the channel
[19:01] ThePub has joined the channel
[19:02] mape: The idea is to make prototyping easier
[19:02] mape: So at work I open it up on 4 different screens, load a different browser and then start coding
[19:02] mape: No need for refreshing css when css changes, refreshes the page on template/js changes
[19:03] mjr_: that's a neat idea
[19:03] mape: and if you click the S button it redirects all open windows to the same page so you can edit it and see changes
[19:03] comster: not bad
[19:03] tjholowaychuk: mape: I used to do that back in the day :)
[19:03] mape: and the v button to validate the page
[19:03] tjholowaychuk: when i actually did front-end stuff
[19:04] mape: Make it a lot more "fun" to find bugs in IE6/7/8
[19:04] MikhX has joined the channel
[19:04] marshall_law_ has joined the channel
[19:04] mape: No need to manually update them, you can notice errors straight away
[19:04] blowery: mape: cool stuff
[19:06] mape: Yeah wondering if there is something obvious missing
[19:08] nerdEd has joined the channel
[19:08] pedrobelo has joined the channel
[19:08] markwubben has joined the channel
[19:08] rbranson has joined the channel
[19:09] stagas has joined the channel
[19:10] derferman has joined the channel
[19:11] MikhX has joined the channel
[19:11] ThePub has joined the channel
[19:12] jcromartie has joined the channel
[19:13] rbranson has joined the channel
[19:14] rbranson has joined the channel
[19:15] Aria has joined the channel
[19:16] shripadk has joined the channel
[19:16] rbranson_: FYI -- finally got around to updating node-ffi, it runs on v0.2.3 now :)
[19:18] jblanche has joined the channel
[19:18] chapel: hmm
[19:18] chapel: I updated, but its 3.0 pre
[19:18] chapel: should I drop down to 0.2.3?
[19:18] rbranson_: i built it against 0.2.3
[19:18] rbranson_: haven't tested against trunk
[19:18] kgf: uh, you mean 0.3 pre? that's what a git checkout will always show iinm.
[19:18] chapel: yeah
[19:18] chapel: thats what I mean
[19:19] chapel: Im just playing around with a script and learning
[19:19] gJ|Alex has joined the channel
[19:19] chapel: does it matter that I use a stable version or what?
[19:19] aliem has joined the channel
[19:19] jcromartie has joined the channel
[19:20] stupidhares has joined the channel
[19:23] stupidhares: Is there any Way to find out wether the bytes I just wrote to a Network stream were received on the other side?
[19:23] strmpnk has joined the channel
[19:24] ajsie: isaacs: couchdb looks great with REST api
[19:24] isaacs: ajsie: INORITE!?
[19:24] ajsie: inorite?
[19:24] stupidhares: The service i am Talking to does not send replies on success, just formatting errors
[19:25] chapel: hmm
[19:25] chapel: have any of you tried cradle with couchdb?
[19:25] chapel: http://github.com/cloudhead/cradle
[19:25] stupidhares: with sync write(), I could be sure, that upon return, the Server actually received the package
[19:26] bradleymeck: just use Request
[19:26] bradleymeck: no need to complicate couch with a wrapper
[19:26] matjas has joined the channel
[19:26] chapel: yeah I guess, I mean I agree
[19:26] digitalspaghetti: node-couchdb is nice
[19:28] isaacs: ajsie: inorite = "I know, right!?"
[19:28] ajsie: =)
[19:28] mif86 has joined the channel
[19:30] stupidhares: A callback for write would be nice to have
[19:32] brianmario has joined the channel
[19:32] stupidhares has joined the channel
[19:33] delapouite has joined the channel
[19:33] hellp has joined the channel
[19:33] shripadk: yeah node-couchdb is good...
[19:34] stupidhares has joined the channel
[19:35] shripadk: bradleymeck: ping
[19:35] bradleymeck: pong
[19:36] shripadk: ha :) i was just having a look at session-web-sockets
[19:36] sveimac has joined the channel
[19:36] shripadk: here is my setup: express, redis(for sessions), socket.io
[19:37] pedrobelo has joined the channel
[19:37] muhqu_ has joined the channel
[19:37] aho has joined the channel
[19:37] bradleymeck: havent tested it against redis, one caveat of the current implementation is it has to reuse the session object
[19:37] mjr_: stupidhares: the other side needs to send something back to tell you it got there.
[19:37] shripadk: i could retrieve the session data in a weird sort of way(you can call it a hack if you like)
[19:38] bradleymeck: well, the store for the session does
[19:38] mjr_: stupidhares: even if node called you back to tell you that data was written to the socket, you don't know if the other end of the socket got it unless the other end sends something.
[19:38] shripadk: without using session-web-sockets... 
[19:38] shripadk: what i did was
[19:39] micheil: shripadk: if you're doing everything in the single node process, it might be easier to store the sessions in memory in app.
[19:40] stupidhares: mjr_: With sync code, write() would return only after the TCP ack of all packages, or am I wrong.
[19:40] micheil: stupidhares: that would be wrong.
[19:40] micheil: seriously, why would you want to do that?
[19:41] MikhX has joined the channel
[19:43] mjr_: stupidhares: nope, write can succeed without the application on the other end getting the data, or even before the data leaves the sending machine.
[19:43] Aredridel has joined the channel
[19:43] bradleymeck: shripadk?
[19:44] stupidhares: mjr_: Good to know. Back to Networking 101 for me & man send, then.
[19:44] mjr_: stupidhares: what is on the other end?
[19:46] stupidhares: mjr_: Apple Push Notifications. Will only ever reply, when the message was misformed, and close the connection afterwards.
[19:46] mjr_: oh man
[19:46] mjr_: Yeah, their protocol sucks badly
[19:47] mjr_: And guess what?  If you have multiple requests in flight, you can't know which one of them caused the connection to close
[19:47] mjr_: such an awful protocol
[19:47] Aredridel has joined the channel
[19:47] bradleymeck: at least it isnt adobe made
[19:47] stupidhares: Precisely what's currently on my mind
[19:47] mjr_: You have two choice, as far as I can tell.
[19:48] mjr_: 1) send only one request per connection, which Apple tells you not to do, but which is actually quite reliable.
[19:48] micheil: write -> check  connection status -> write ...
[19:48] mjr_: 2) open a pool of connections, and after each request, wait for a couple of seconds to see if the connection is closed
[19:48] micheil: wouldn't that work?
[19:48] mjr_: micheil: you don't know how long it takes to get there, be validated, rejected, and dropped.
[19:48] micheil: ah
[19:48] mjr_: So you can wait 2 seconds, for example, and that seems to be OK.
[19:49] micheil: so why would you use this protocol?
[19:49] mjr_: You have to use it to send Apple Push Notifications
[19:49] micheil: it's like, worse then the current websockets protocol :P
[19:49] mjr_: It's the only way.
[19:49] micheil: ah
[19:49] stupidhares: Man, who had the idea for this
[19:49] mjr_: If they'd just send back an ack message of some kind, it'd be workable.
[19:50] mjr_: stupidhares: did you see the recent mailing list post about the APN library for node?  
[19:50] mjr_: It seems to have some error handling logic in there that sounded interesting
[19:50] mjr_: But I haven't looked at it yet.
[19:50] mjr_: Maybe I don't understand the protocol fully and there is some per-request error notification somehow.
[19:50] V1: Is there a easy way to get cpuUsage yet in node? Or do we need to exec a childproces that reads out some unix prog?
[19:51] mjr_: But my understanding is that they just drop the connection if a request is invalid, and you don't know which one caused the drop.
[19:51] stupidhares: mjr_: I'm aware of at least node-apns, but this is Pferds mu
[19:51] mjr_: stupidhares: http://github.com/argon/node-apn
[19:51] mjr_: "Enhanced binary interface support with error handling"
[19:52] mjr_: Maybe that's something.
[19:52] stupidhares: ...this is more of a Let's check out node project
[19:52] mjr_: We have this same issue talking to APN from python.
[19:53] stupidhares: I'll most likely use an existing lib, though
[19:54] admc has joined the channel
[19:55] mjr_: oh shit, it looks like Apple fixed it.  You can use the "enhanced" format.   http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingWIthAPS/CommunicatingWIthAPS.html
[19:55] creationix: wow, what a great quote "JavaScript is just a glue language for a presentation tier, no business logic."
[19:56] creationix: said in June 2007
[19:56] stupidhares: mjr_: If there is no error, APN will not post anything
[19:56] wink_: creationix: someone really missed the boat on that one
[19:56] stupidhares: mjr_: I'm already using the enhanced format
[19:56] mjr_: stupidhares: if you send "enhanced" messages, you'll get an ack back.
[19:57] mjr_: no
[19:57] creationix: wink_: he was arguing that the "module pattern" was completely unneeded and only made code more complicated
[19:57] mjr_: ?
[19:57] bradleymeck: creationix would you accept a patch that makes sessions have a pointer back to their store for connect?
[19:58] creationix: bradleymeck: dies it not already?
[19:58] creationix: *does
[19:58] bradleymeck: it does not, only the object itself
[19:58] creationix: are you sure, I thought tjholowaychuk added a .sessionStore reference or something
[19:58] tjholowaychuk: creationix: are we going to revert that weird array one? gotta figure out what is going to be our solution for that
[19:58] creationix: tjholowaychuk: let's find out what's going on in node before changing anything
[19:59] bradleymeck: ill check again , but didnt look like that a couple days ago (perhaps im on an old connect)
[19:59] tjholowaychuk: creationix: i think its the array, but not the entire thing as an array
[19:59] creationix: hmm, who here would know
[19:59] tjholowaychuk: creationix: which sucks still because you have to check if that header even has an array yet, and then push to it
[19:59] tjholowaychuk: so its the same thing we were doing before
[19:59] tjholowaychuk: but with a string
[19:59] creationix: ryah is out of town I think
[20:00] creationix: isaacs: do you know the status of array headers in node?
[20:00] tjholowaychuk: bradleymeck: there is session.req i think, so you could do session.req.sessionStore
[20:00] tjholowaychuk: possibly
[20:01] isaacs: creationix: nope
[20:01] bradleymeck: mmm interesting, thatll do
[20:01] tjholowaychuk: creationix: i think you can writeHead(200, { 'Set-Cookie': [..] })
[20:01] tjholowaychuk: but that patch was doing [['Set-Cookie', '...']] or something
[20:01] creationix: bradleymeck: do you not have access to req?
[20:01] tjholowaychuk: which we dont need
[20:01] creationix: tjholowaychuk: yeah, that's the old node interface
[20:01] creationix: deprecated, but never removed I think
[20:01] tjholowaychuk: from wayyyyyy back
[20:02] stupidhares: mjr_: Well, No data received in my implementation
[20:02] mjr_: stupidhares: that sucks.  As I read it that doc though, it should always send you something back, which is the only way to know if it worked.
[20:03] V1: \o/! Just passed 1000 connected clients on my socket.io app
[20:03] bradleymeck: creationix, i could have a reference to it, but the main point of data is the session so, i was only holding onto that
[20:03] EyePulp: V1: wow - simply connected or passing traffic?
[20:04] tjholowaychuk: bradleymeck: yeah .req is only really there so that the methods like session.destroy() will unfold to req.sessionStore.destroy(req, function(){})
[20:04] tjholowaychuk: etc
[20:04] tjholowaychuk: little sugar on the api
[20:04] V1: EyePulp: That is connected, so that's probably 95% sending data a few idle users
[20:04] creationix: ahh, then session.req.* is perfect
[20:06] stupidhares: mjr_: http://github.com/argon/node-apn/blob/master/lib/apn.js#L54 Just errors, which IS nice, but Ack would be nice to have...
[20:06] Aria has joined the channel
[20:07] mjr_: stupidhares: I'm sure the author would be happy for a patch. :)
[20:07] marshall_law has joined the channel
[20:08] Tim_Smart has joined the channel
[20:08] dahankzter has joined the channel
[20:09] xla has joined the channel
[20:11] MikhX has joined the channel
[20:11] programble has joined the channel
[20:13] MikhX_ has joined the channel
[20:14] stupidhares: mjr_: I meant from apple
[20:14] MikhX has joined the channel
[20:15] mjr_: stupidhares: the apple doc implies that they do send an ack.  I think that library just doesn't expose it.
[20:16] V1: mape: I remember your node dashboard also displayed CPU stats, may i ask how you pulled that off? As i'm in the process of building measuring & collecting tools in to my node app
[20:16] mape: V1: it was just a proof of concept
[20:16] mape: nothing actually working
[20:17] V1: mape: Tobad, that I would probably have use ps with a childProcess to get the data i guess
[20:17] mape: Yeah, rsms had a patch for load though
[20:17] mape: if I'm not mistaken
[20:17] V1: Yeah I remember something like that, but I can't remember if was accepted or not
[20:21] MikhX has joined the channel
[20:21] MikhX has joined the channel
[20:22] MikhX has joined the channel
[20:27] MikhX has joined the channel
[20:28] davidascher has joined the channel
[20:36] Me1000 has joined the channel
[20:43] MikhX has joined the channel
[20:45] felixge has joined the channel
[20:45] felixge: ryah: I thought you were going to undo the sys -> util rename
[20:45] felixge: it's really silly
[20:45] felixge: now I need to update all my modules
[20:46] felixge: to try{ util = require('util'); } catch (e) { util = require('sys'); }
[20:47] jherdman has joined the channel
[20:47] creationix: felixge: are you trying to write modules for both 0.2.x and 0.3.x?
[20:47] siculars has joined the channel
[20:47] felixge: creationix: yeah
[20:47] creationix: good luck with that,
[20:47] creationix: I'm not that brave
[20:47] felixge: creationix: there haven't been too many breaking changes yet
[20:48] felixge: in fact almost none
[20:48] felixge: as far as I am concerned
[20:48] creationix: nice
[20:48] creationix: the 'constants' refactor broke connect and I had to patch it
[20:48] felixge: creationix: node-mysql was running from v0.1.102 to HEAD (until the sys -> util thing)
[20:49] felixge: creationix: right, but you can require the bindings you need
[20:49] felixge: which also have the constants
[20:49] EyePulp: some node -love on dave winer's scripting.com today:  http://scripting.com/stories/2010/10/13/ericKiddsFeedhoseClientInJ.html
[20:50] siculars has joined the channel
[20:51] davidascher: Tim_Smart: is biggie documented somewhere yet?
[20:51] Tim_Smart: davidascher: Not yet, I'm still implementing it.
[20:52] mikeal has joined the channel
[20:52] davidascher: cool.  am curious to understand the differences w/ backbone for example =)
[20:52] BHSPitCSP: tjholowaychuk: which project does the canvas stuff fall under?
[20:52] tjholowaychuk: BHSPitCSP: what do you mean? its not open source yet
[20:52] tjholowaychuk: im busy with other stuff
[20:52] tjholowaychuk: ATM
[20:52] davidascher: btw, is it just me, or is there a pacific northwest cluster for node folks?
[20:52] BHSPitCSP: tjholowaychuk: ah okay
[20:53] creationix: EyePulp: nice
[20:53] tjholowaychuk: BHSPitCSP: will let you know when its OS
[20:53] creationix: dahankzter: I'd say more of a bay-area cluster
[20:53] BHSPitCSP: tjholowaychuk: schweet
[20:53] EyePulp: creationix: seems like a good fit for what they're trying to accomplish
[20:53] derferman has joined the channel
[20:53] creationix: EyePulp: yep
[20:54] aubergine has joined the channel
[20:54] eisd has joined the channel
[20:54] eisd has left the channel
[20:54] digitalspaghetti: awesome; http://i.imgur.com/ttege.png
[20:54] digitalspaghetti: troll face has been accepted into Unicode 6
[20:55] digitalspaghetti: oh wait, no it's fake :(
[20:56] jesusabdullah: That would've been the best thing ever
[20:56] creationix: poor font makers
[20:56] saikat has joined the channel
[20:56] agnat has joined the channel
[20:56] digitalspaghetti: the FFFFFUUUUUU face could have been used for exceptions :D
[20:56] saikat_ has joined the channel
[20:58] digitalspaghetti: although this is the genuine list: http://www.unicode.org/charts/PDF/U1F600.pdf
[21:01] hoodoos: aurynn, ping
[21:01] creationix: digitalspaghetti: ahh, my machine doesn't have a font with those codes
[21:02] digitalspaghetti: yea it won't yet, i think these are just published
[21:03] deepthawtz has joined the channel
[21:03] aurynn: hoodoos, pong
[21:03] bartt has joined the channel
[21:04] wao: w 10
[21:05] hoodoos: aurynn, oh no more questions yet :) just kicking pg for my user to be able to connect :)
[21:05] aurynn: Aah :)
[21:06] aurynn: Lemme know if you have any questions :)
[21:08] hoodoos: aurynn, from now on it seems to work :)
[21:08] aurynn: Yay :)
[21:09] hoodoos: just strange interface for my taste.. to catch error on connect i gotta do db.on('error',...)
[21:09] aurynn: I'm still working on the API
[21:10] aurynn: I was trying to get it to work
[21:10] aurynn: as the first thing
[21:10] hoodoos: is there any message on succesful connect?
[21:11] aurynn: It won't emit any messages unless there's an error
[21:11] aurynn: there's a connect event you can listen for
[21:13] hoodoos: ah! i will get all errors on error event? for query exec e.g.?
[21:16] hoodoos: aurynn, i guess it would be more comfortable to have an error on every query otherwise it's hard to understand which query failed and what to do next :)
[21:16] aurynn: Again, I haven't really workedo n the API yety.
[21:16] aurynn: Individual query objects will get their errors.
[21:16] aurynn: (since that bugs me too)
[21:17] hoodoos: aurynn, i'm not insisting :) just trying to be useful))
[21:18] aurynn: hehe
[21:18] aurynn: Yeah, query/tx objects will get errors
[21:18] aurynn: as opposed to a global error
[21:18] digitalspaghetti: interesting: http://developer.yahoo.com/blogs/ydn/posts/2010/10/how-many-users-have-javascript-disabled/
[21:18] jchris has joined the channel
[21:18] rauchg_ has joined the channel
[21:18] digitalspaghetti: seems ~ 2% of users won't have JS enabled
[21:19] MikhX_ has joined the channel
[21:19] hoodoos: digitalspaghetti, poor node.js :)
[21:22] digitalspaghetti: hoodoos: no, that's just client side which isn't bad
[21:22] thedwalker has joined the channel
[21:22] digitalspaghetti: because you can just generate the markup on the server and transmit it
[21:22] stalled has joined the channel
[21:23] digitalspaghetti: which means stuff like http://express.davglass.com/ is very relivant
[21:23] svnlto has joined the channel
[21:23] digitalspaghetti: for example, view source of this page: http://express.davglass.com/datatable
[21:23] digitalspaghetti: no actual JS :D
[21:24] hoodoos: digitalspaghetti, was jocking :)
[21:25] hoodoos: digitalspaghetti, just wondered why you decided to post it here )
[21:25] davidascher has joined the channel
[21:25] bradleymeck: the fact is though, even with server side js doing lifting for non-js users, it is pretty brutal on the server to do that on a large scale
[21:27] mAritz has joined the channel
[21:27] chapel: make your site, let people know that js is needed for certain functions, and they can enable it or not for your site
[21:27] francoislaberge has joined the channel
[21:27] aho: http://developer.yahoo.com/blogs/ydn/posts/2010/10/how-many-users-have-javascript-disabled/
[21:27] bradleymeck: indeed, though i would be interested in turning off css and seeing what havoc happens now days
[21:28] aho: fyi :]
[21:28] aho: *nowadays
[21:29] digitalspaghetti: One of Dave Glass's example was mobile - generate some of the markup on the server side so there is functionality until the client side JS downloads
[21:30] aurynn: I like how facebook sends the barebones down, and then the JS callbacks get the rest.
[21:31] creationix: aurynn: sure, that makes initial load take a while
[21:31] creationix: look at gmail
[21:31] bradleymeck: yea, but without some heavy templating and customization that is hard to do for most places.
[21:32] nerdEd has joined the channel
[21:32] JCS^ has joined the channel
[21:32] tilgovi_ has joined the channel
[21:32] aurynn: clearly, the solution is to embed json payloads in base64 format in the css.
[21:33] aurynn: ;)
[21:34] derferman has joined the channel
[21:35] rauchg_ has joined the channel
[21:36] micheil: isaacs: any progress on node-fuse?
[21:39] vnguyen has joined the channel
[21:42] KungFuHamster has joined the channel
[21:42] V1 has left the channel
[21:42] isaacs: micheil: yeah, reading through some stuff.
[21:43] micheil: so, where do we stand, and what should I be looking at?
[21:43] isaacs: micheil: i've got hello world running with fuse, and with fuse_lowlevel, and with fuse_lowlevel in multithreaded mode.
[21:43] micheil: okay
[21:43] isaacs: micheil: working on figuring out how to make that use ev.h's event loop rather than its own
[21:43] micheil: link?
[21:44] isaacs: http://github.com/isaacs/node-fuse/tree/dev
[21:44] isaacs: not much there yet.
[21:44] bartt has joined the channel
[21:44] KungFuHamster_ has joined the channel
[21:45] digitalspaghetti: oh man
[21:45] digitalspaghetti: <3 you
[21:45] Tim_Smart: isaacs: Perl module to get the glib event loop into EV http://cvs.schmorp.de/EV-Glib/Glib.xs
[21:45] Tim_Smart: It will require similar code...
[21:45] mattvermaak: if you are making alot of calls out to a service (for instance redis), to construct an object, how do you capture when the object is finished to send back to a client response
[21:45] isaacs: neat
[21:46] isaacs: ryah also gave me a few helpful pointers
[21:46] sideshowcoder has joined the channel
[21:46] digitalspaghetti: isaacs: seriously this is probably one of the most useful thing's i've seen yet
[21:47] isaacs: digitalspaghetti: yeah, it'll be nice having fuse in a high-level language other than python, without blocking
[21:48] breccan has joined the channel
[21:49] deanlandolt has joined the channel
[21:49] micheil: digitalspaghetti: you mean node-eventstream isn't useful? :(
[21:50] abe has joined the channel
[21:50] xonecas has joined the channel
[21:50] micheil: isaacs: lua isn't high level?
[21:50] isaacs: micheil: HA! lua...
[21:50] deanlandolt: ryah how opposed would you be to slightly changing Buffer.prototype.slice to something like Buffer.prototype.range in the 0.3 branch, and having Buffer.prototype.slice return an actual copy?
[21:50] isaacs: ACTION feels about lua the way most people probably feel about javascript..
[21:50] wink_: booooooo
[21:51] micheil: deanlandolt: new Buffer(buf.slice(...))
[21:51] micheil: no?
[21:51] micheil: isaacs: just sayin'
[21:51] deanlandolt: micheil: yeah, that works, but it conflicts w/ all the other binary implementations out there
[21:51] micheil: meaning?
[21:51] deanlandolt: as well as the typical javascript slice behavior
[21:51] isaacs: micheil: it's a cool language and all, but i mean, seriously?  lua?  i dunno..
[21:51] micheil: does slice normally copy? I'm not familiar with that.
[21:51] mjr_: mattvermaak: if you are using a single redis client instance, they all run serially.  You can send your client response in the callback of the last redis command.
[21:52] xonecas: hey can someone help me out on how to create multiline strings with node. Or as an alternative how to include html files?
[21:52] deanlandolt: for instance you can't specify node's version of slice on a ByteString...what's wrong with range?
[21:52] micheil: xonecas: I'm not sure what you mean, explain please.
[21:52] deanlandolt: xonecas: heh, no multiline strings in js...sorry man
[21:52] micheil: deanlandolt: range sounds weird.
[21:52] micheil: ACTION does multiline strings in js.
[21:53] MikhX has joined the channel
[21:53] thedwalker has left the channel
[21:53] deanlandolt: micheil: okay, well it doesn't have to be range...but /something/ else :)
[21:53] deanlandolt: view
[21:53] micheil: >_>
[21:54] xonecas: here is my situation, I'm using node with the mustache library. but writing a html template in js is a pain. so I was hoping I could include html files and pass them to mustache. but now that I think of it, i could use the fs module to access the files, pass them into a buffer and then by mustache? Do you guys think that will work /
[21:54] deanlandolt: i'm trying to specify a generally usable binary type that can be used across all the implementations...this is really the one real pain point
[21:54] ysynopsis has joined the channel
[21:54] micheil: xonecas: you create a file called: file.mu
[21:54] deanlandolt: xonecas: yeah, that's the right thing
[21:54] micheil: it has embedded logic and html.
[21:54] micheil: that's how it's done.
[21:55] micheil: then you fs.read the file in, parse it with mustache and yeah
[21:55] xonecas: micheil: deanlandolt thanks guys:)
[21:55] micheil: deanlandolt: explain what each actually does though, I'm still unsure what they do.
[21:55] abe: does any one know if it would be possible to do rtmp video streaming with node?
[21:55] micheil: deanlandolt: and make sure you include an indexOf if it's a bytearray
[21:55] deanlandolt: Buffer.prototype.slice would make a copy of the buffer, not share memory
[21:56] deanlandolt: and the current behavior would just get a different name
[21:56] micheil: okay, like Array.prototype.slice
[21:56] deanlandolt: exactly
[21:56] micheil: okay, so, perhaps something like range does make sense.
[21:56] deanlandolt: it's not /just/ that it conflicts with other implementations...it's that it violates expectations
[21:56] deanlandolt: least surprise and all that
[21:56] micheil: isn't there some array subset thing?
[21:57] deanlandolt: well i'm not suggesting node should grow a whole slew of array-like features (or string-like)...just that the names it /does/ use should be consistent w/ the rest of js
[21:57] bradleymeck: lua is fine for embedding, doing complex things in it gets hairy w/ metatables etc, still it beats the f out of JS in math performance
[21:57] shaver: depends on the JS engine
[21:57] bradleymeck: nope
[21:57] micheil: deanlandolt: yeah, I'm cool with that, I actually have a patch to add indexOf()
[21:57] bradleymeck: beats em all
[21:58] deanlandolt: yeah, indexOf would be nice :)
[21:58] derferman has joined the channel
[21:59] micheil: Buffer.prototype.subset?
[21:59] MikhX has joined the channel
[21:59] micheil: range sounds better.
[21:59] deanlandolt: view sounds decent too
[22:00] micheil: hmm, no.
[22:00] Tim_Smart: deanlandolt: Isn't that what slice is for?
[22:00] micheil: view doesn't.
[22:00] micheil: Tim_Smart: slice isn't mutating / creating
[22:00] micheil: slice just gives a segment
[22:00] deanlandolt: Tim_Smart: yes, but slice /should/ make a copy like its behavior on strings and arrays
[22:00] micheil: dean's proposing that it copy it into a new buffer
[22:00] shaver: WebGL typed arrays use "view" as the terminology
[22:00] deanlandolt: shaver: interesting
[22:01] Tim_Smart: So just a new Buffer(); copy() deal?
[22:01] guybrush: anyone knows about this simplify-seed? http://github.com/christkv/node-git/blob/master/lib/git/git_file_operations.js#L4
[22:01] shaver: I think we're going to see something similar in TC-39 over time
[22:01] deanlandolt: Tim_Smart: yeah, effectively (w/o the target)
[22:01] deanlandolt: shaver: most likely in the very next version of es
[22:02] shaver: I'm not sure we'll see the views stuff in the next one
[22:02] deanlandolt: so it'd be good to stay away from colliding with standard terminology like slice :)
[22:02] shaver: but I'm behind on my harmony reading
[22:02] shaver: probably easiest to ask on es-discuss
[22:02] micheil: deanlandolt: actually, what you're proposing is Buffer.copy
[22:02] deanlandolt: shaver: yeah, perhaps not, but i bet you'll see slice and i bet it'll be a copy
[22:02] deanlandolt: micheil: sort of...just without the target buffer
[22:02] micheil: yeah
[22:02] mattvermaak: mjr_: if it is a variable number of redis calls being made, and they are being done in a loop, then the last redis call is hard to determine
[22:02] brapse has joined the channel
[22:03] deanlandolt: it's probably how most people are using .slice now and they just don't realize it :)
[22:03] micheil: deanlandolt: it seems easily implementable once theres' a spec.
[22:03] micheil: deanlandolt: it's up to ryah if he wants to follow it though
[22:03] deanlandolt: yeah, i'll happily do a patch if ryah's down
[22:03] deanlandolt: i figure i better get on it before 0.3 lands
[22:03] stephenjudkins has joined the channel
[22:04] shaver: deanlandolt: the GL views permit type-punning too, I believe
[22:04] Tim_Smart: deanlandolt: ryah isn't really taking buffer patches at this stage.
[22:04] shaver: deanlandolt: view a 16-entry ByteBuffer as a 4-entry Int32Buffer
[22:04] mjr_: mattvermaak: an easy solution is to just throw an extra command in at the end of the loop.
[22:04] Tim_Smart: deanlandolt: He wants to see if he can get them into v8's heap first.
[22:04] bjarkih has joined the channel
[22:05] deanlandolt: Tim_Smart: i'm gonna try anyway...i think i have a good argument about it violating expectations...if you poll the list i bet the majority of folks things it already does a copy :)
[22:05] deanlandolt: ah, that's right...i remember reading that
[22:05] deanlandolt: but this wouldn't really affect that
[22:05] Tim_Smart: deanlandolt: Then those people didn't read the docs.
[22:06] Tim_Smart: deanlandolt: I prefer it referencing data myself.
[22:06] deanlandolt: even if you read the docs just being a javascript user gives you certain expectations
[22:06] deanlandolt: Tim_Smart: i'm not suggesting we kill that feature (it's really useful)...just that it be called something else
[22:06] deanlandolt: range, view, subset, whatever
[22:07] pkrumins: powsy pow, announcing an awesome node.js module soon
[22:08] shimondoodkin has joined the channel
[22:08] ossareh has joined the channel
[22:08] Tim_Smart: deanlandolt: Done. http://gist.github.com/625032
[22:08] micheil: Tim_Smart: I fear that the v8 stuff will take a lot long then 3.0
[22:08] micheil: erm
[22:08] micheil: 0.3.0
[22:09] micheil: I think it'd be like 0.4.0 before we see it somehow.
[22:09] Tim_Smart: micheil: Quite possibly.
[22:09] deanlandolt: Tim_Smart: heh...yep, but i don't want to do that to people...it's pretty violent
[22:09] deanlandolt: ryah's gotta be on board
[22:09] micheil: deanlandolt: that is wrong anyway.
[22:09] micheil: I think. wait. no.
[22:09] micheil: I read it wrong.
[22:10] micheil: deanlandolt: beside's it should be done in C land IMO.
[22:10] deanlandolt: micheil: yeah, it'd be better as a memcopy but none the less it /could/ be done in js land...
[22:10] Tim_Smart: micheil: What should be? Calling into C++ is too slow :/
[22:11] micheil: Tim_Smart: implementing dean's copy-on-slice
[22:11] Tim_Smart: micheil: We already have copy...
[22:11] unomi has joined the channel
[22:11] micheil: but that's effectively what it does.
[22:11] micheil: read the back conversation.
[22:11] davidascher has joined the channel
[22:11] Tim_Smart: micheil: Did you see the gist?
[22:11] deanlandolt: oh well, thanks guys for the feedback
[22:12] micheil: Tim_Smart: yes.
[22:12] deanlandolt: sounds like it's not that controversial at least :)
[22:12] teemow has joined the channel
[22:12] deanlandolt: i just think it'd be shitty to stomp all over Buffer.prototype.slice w/o at least some reasonable expectation that this is the direction things will head
[22:13] micheil: deanlandolt: time to hit the mailing list, i guess.
[22:13] deanlandolt: yep
[22:14] isaacs: it'd be nice if node had opendir/closedir bindings...
[22:14] cardona507 has left the channel
[22:14] Tim_Smart: micheil: I don't this is something that should be done in the C++ api though.
[22:14] isaacs: so you could stream directory contents rather than having to return a potentially giant array
[22:14] micheil: isaacs: is it something that could be done through libeio?
[22:14] Tim_Smart: isaacs: Nothing stopping you ;)
[22:14] isaacs: micheil: yes, and i'm guessing it's not even all that hard.
[22:15] isaacs: micheil: you said you wanted to flex your C a bit, right?
[22:15] shaver: are there async readdirs?
[22:15] shaver: ACTION ponders
[22:15] micheil: isaacs: if it can be done through libeio natively without custom, then I can get a patch in quickly
[22:15] isaacs: micheil: node_file.cc + man opendir
[22:15] isaacs: micheil: yeah
[22:15] isaacs: shaver: readdir is async, but doesn't return until it's read the entire dir.  it's like readFile that way
[22:15] micheil: otherwise I need to use eio_custom which isn't too hard, just a bit painful
[22:16] kjy112 has joined the channel
[22:16] shimondoodkin: isaacs:do you have huge dirs?
[22:16] micheil: ACTION does.
[22:17] shaver: isaacs: I mean for the filesystem
[22:17] isaacs: shaver: oh, i dunno
[22:17] zomgbie has joined the channel
[22:17] micheil: isaacs: no opendir in libeio
[22:17] isaacs: shimondoodkin: it's more the point of the thing.
[22:17] ThePub has joined the channel
[22:17] micheil: looks like a job for eio_custom
[22:17] shaver: huge dirs or network filesystems (or just heavily-loaded disks) can make you want async directory operations
[22:17] Anti-X: man i was put off from C for so many years, just because of C++... only recently have i realised that it was stupid to think of them as one
[22:17] isaacs: micheil: you should add it to eio.c!
[22:17] isaacs: micheil: it'd be rad!
[22:17] micheil: hmm..
[22:18] micheil: where'd schmorp go from colloquy
[22:18] Tim_Smart: micheil: He has his own IRC server.
[22:18] malkomalko has joined the channel
[22:18] micheil: Tim_Smart: yeah, what's the address?
[22:18] Tim_Smart: irc.schmorp.org I think
[22:19] malkomalko: quick question on ry's eventmachine vs node.js speed comparison from last year.  do we still think that those numbers would generally be the same today?
[22:19] malkomalko: http://four.livejournal.com/1019177.html
[22:19] Tim_Smart: Maybe not.
[22:19] tjholowaychuk: Anti-X: C is way better than c++, dont let it ruin it for you lol
[22:19] micheil: what a shitty interface, remember connection is by default unchecked.
[22:19] tjholowaychuk: s/better/nicer/
[22:19] malkomalko: our org is making a decision to use node.js vs eventmachine for our async operations
[22:19] Anti-X: tjholowaychuk, too late, i don't have time to become a C guru anymore
[22:19] Anti-X: i had time, but then, C++ killed my dreams
[22:20] Tim_Smart: micheil: irc.schmorp.de
[22:20] tjholowaychuk: Anti-X: yeah i started c++, then I stopped because I realised how lame it was
[22:20] micheil: k
[22:21] bradleymeck: malkomalko, speed wise node probably is winning, stability eventmachine is winning
[22:21] siculars has joined the channel
[22:21] Tim_Smart: micheil: /join #schmorpforge
[22:21] micheil: k
[22:21] malkomalko: thanks bradleymeck
[22:22] mikeal has joined the channel
[22:24] micheil: ACTION quite likes C and C++.
[22:24] Anti-X: :o
[22:24] Anti-X: you must be sterilized
[22:24] Anti-X: ACTION flexes the scissors
[22:24] micheil: but then again. I'm a JavaScript developer, so a lot of C and C++ I will like.
[22:24] micheil: I've never done much in other programming langauges
[22:24] bruse: c is awesome indeed
[22:24] bradleymeck: i enjoy c, i think c++ is irksome in many ways but practical.
[22:25] Tim_Smart: You can pretty much code C in C++ anyway ;)
[22:25] micheil: like, seriously, the one language I can't get my head around yet is erlang.
[22:25] Anti-X: but that's like the best one!
[22:25] micheil: I should add C/C++ to my résumé
[22:25] bradleymeck: yep, but you can also make code terrible to figure out in c++ with templates + preprocessor + overloading + class magic
[22:25] dguttman has joined the channel
[22:26] tjholowaychuk: to me c++ has more magic than it really needs
[22:26] tjholowaychuk: possibly because I dont know it all
[22:26] tjholowaychuk: but still seems evil
[22:26] micheil: C++ is probably where php got it from.
[22:27] tjholowaychuk: php has less magic than c++
[22:27] tjholowaychuk: at least last time i used php
[22:27] bruse: i think c++ is too complex
[22:27] bradleymeck: tj, there are 3 languages fighting eachother in c++ for most large projects (ugg), 2 in C, that enough scares me
[22:28] bruse: it is possible to write pretty nice code in c++, but it's also way too easy to write code that is way too horrible than it needs to be
[22:28] tjholowaychuk: bradleymeck: haha yeah exactly
[22:28] micheil: tjholowaychuk: I think once you've looked at v8, that's where it gets scary.
[22:28] tjholowaychuk: namespaces i like, thats about it
[22:28] tjholowaychuk: overloading... meh
[22:29] Anti-X: micheil, erlang is like node, except you code in a flat structure (as opposed to nodes nested callbacks), and you need to explicitly pass data around (partly because it's a functional language, it can't store anything) to other threads (whereas node will let you access any object anywhere if you so choose)
[22:29] micheil: tjholowaychuk: did you know about isaac's v8 documentation?
[22:29] Tim_Smart: micheil: V8 is nice C++...
[22:29] bradleymeck: v8 is nice c++
[22:29] isaacs: micheil: that stuff is way out of date
[22:29] micheil: Tim_Smart: what!?!
[22:29] tjholowaychuk: micheil: ya saw that a while back, again tho I just look at source lol just read v8.h
[22:29] isaacs: micheil: i should regen it..
[22:29] micheil: isaacs: update plz.
[22:29] Tim_Smart: micheil: You haven't seen the ugly stuff :p
[22:29] bradleymeck: micheil it is nice, dont look into webkit
[22:29] micheil: bradleymeck: oh. yeah.  that's right. I did do that.
[22:30] micheil: I was going to add __noSuchMethod__ to javascript Core.
[22:30] micheil: so v8 would add it.
[22:30] micheil: like. v8 has a patch for it, but won't apply it until javascript core does.
[22:30] bradleymeck: javascript is not meant to have that by design, the fact it is in spidermonkey confuses me
[22:31] micheil: bradleymeck: I think it'll be quite useful.
[22:31] softdrink has joined the channel
[22:31] micheil: bradleymeck: y'know, for ORM's and stuff like that.
[22:31] bradleymeck: i think proxies are far more useful and that __noSuchMethod__ is rarely truly useful outside of debugging
[22:31] bruse: i would imagine gecko is worse than webkit
[22:31] bruse: when it comes to c++
[22:31] micheil: it might be slow, and should be used with caution, but yeah.
[22:32] micheil: bruse: gecko's pretty good.
[22:32] micheil: ACTION used to work heavily with mozilla tech.
[22:32] micheil: that was my introduction to evented IO using javascript.
[22:32] bradleymeck: micheil how would it be useful in orm?
[22:32] micheil: bradleymeck: I'm guessing.
[22:33] bradleymeck: ACTION shrugs
[22:33] tjholowaychuk: i dont like how DataMapper (and most other ruby ORMs) use that stuff in ruby
[22:33] bruse: i've only written npruntime plugins
[22:33] tjholowaychuk: to much magic again
[22:33] aurynn: nosuchmethod is really, really, really useful
[22:33] bruse: and it left a pretty bad taste in my mouth
[22:33] tjholowaychuk: its great until you actually have to look into what is happening
[22:33] tjholowaychuk: then its just annoying as hell
[22:34] bradleymeck: aurynn i have seen many people argue that and have yet to see the argument show something that i find useful beyond debugging
[22:35] bradleymeck: largely i see people abuse it to act like a lazy virtual table
[22:36] aurynn: bradleymeck, "lazy virtual table" ?
[22:36] bradleymeck: a virtual table indexed at runtime, ie: making functions that dont exist because they dont exist yet
[22:38] isaacs: micheil: http://izs.me/v8-docs/generated
[22:38] isaacs: up to date now
[22:38] micheil: neat!
[22:38] isaacs: note the much fancier doxygen tabs :)
[22:38] micheil: that'll be useful
[22:38] micheil: so many circular references in v8 files.
[22:40] alexfner has joined the channel
[22:40] GriffenJBS: ... "For other documentation see <a href="http://code.google.com/apis/v8/">useless link</a>" lol
[22:41] alexfner: what's a good, lightweight model for communicating between node.js instances on the same machine?
[22:42] shaver: I'm looking at dnode for that
[22:42] GriffenJBS: unix sockets, typically, depends what your trying to do
[22:42] Tim_Smart: Looks useful http://izs.me/v8-docs/classv8_1_1String_1_1ExternalAsciiStringResource.html
[22:42] bradleymeck: alexfner, sockets or webworkers
[22:43] Tim_Smart: Wonder how it performs compared to Buffer.
[22:44] mikew3c has joined the channel
[22:44] shaver: how do you use webworkers to communicate to different instances?
[22:44] shaver: can they rendezvous somehow?
[22:44] shaver: that would be pretty neat!
[22:45] micheil: shaver: by unix sockets, iirc.
[22:45] shaver: oh
[22:45] shaver: so they need a common parent
[22:45] shaver: to find each other?
[22:45] shaver: I will explore this
[22:46] micheil: shaver: best check the docs / code.
[22:46] micheil: or talk to pgriess
[22:46] micheil:  / peter griess, who I think is now at Facebook and not Yahoo.
[22:47] Tim_Smart has joined the channel
[22:47] mikeal: how does dnode not block?
[22:47] micheil: no idea.
[22:47] stagas has joined the channel
[22:48] zemanel_ has joined the channel
[22:50] shimondoodkin: hey look: process.on('uncaughtException' .... @ http://github.com/shimondoodkin/nodejs-autorestart
[22:50] bradleymeck: why would it block?
[22:51] isaacs: anyone know about ld?
[22:51] micheil: ld?
[22:51] isaacs: getting some lame "symbol not found" things, even though it's not having a problem linking the .h file
[22:51] shaver: ...what about it?
[22:52] GriffenJBS: shimondoodkin: there are several modules that handle that
[22:52] shimondoodkin: excaptions?
[22:52] isaacs: and if i add -lev it fails because it can't find the library
[22:52] isaacs: http://gist.github.com/625118
[22:53] isaacs: the symbols in question are clearly defined in ev.h
[22:53] isaacs: and i'm doing: #include <ev.h>
[22:53] isaacs: in my c file
[22:53] shaver: symbols aren't defined in h files
[22:53] Aria: That doesn't define symbols, that makes it define a reference.
[22:53] shaver: they're delcared in h files
[22:53] isaacs: ok..
[22:53] agnat: isaacs: you have to tell ld that these symbols will be provided by node ...
[22:53] shaver: (with some rare exceptions)
[22:53] Aria: It'll need the .so / .a whatever to actually have a definition
[22:53] isaacs: so i need to link to the ev.o or some such?
[22:53] isaacs: ah, ok
[22:53] Aria: Yeah.
[22:54] Aria: (or -lev, if you have a dynamic copy of libev; libev.a to link statically)
[22:54] isaacs: right,right
[22:54] isaacs: got it
[22:54] isaacs: ok
[22:54] mr_daniel has joined the channel
[22:54] pkrumins: _announcer is dead again!
[22:54] pkrumins: so i'mma tweet myself
[22:54] pkrumins:   
[22:54] bradleymeck: _announcer clear the tubes!
[22:54] pkrumins: Tweet: Introducing node-lazy - http://bit.ly/92kekP - lazy lists for node.js! [Peteris Krumins]
[22:54] pkrumins: =^_^=
[22:54] Tim_Smart: isaacs: If you are using node-waf, it does this all for you.
[22:54] isaacs: Tim_Smart: i'm using make
[22:55] SubStack: ACTION helped
[22:55] pkrumins: sure did!
[22:56] bradleymeck: node-waf is not a happy camper at detecting mac os when you pull in frameworks
[22:56] Tim_Smart: bradleymeck: node-waf makes most people unhappy campers.
[22:57] bradleymeck: :( yea... mainly cause docs on it are odd
[22:58] gerred has joined the channel
[22:59] rauchg_ has joined the channel
[23:02] Tim_Smart: isaacs: Does Google host their own version of the API docs?
[23:02] isaacs: Tim_Smart: no idea
[23:03] agnat: isaacs: you are building a node add-on with make?
[23:04] isaacs: agnat: it's not a node-addon yet
[23:04] HAITI has joined the channel
[23:04] isaacs: agnat: it's just a program that uses ev and fuse_lowlevel
[23:04] HAITI: cheers node.js
[23:04] agnat: ah, ok. just a test executable ... ic
[23:04] digitalspaghetti: tjholowaychuk: ping
[23:04] tjholowaychuk: yo
[23:05] digitalspaghetti: you had any experience with express + node 0.3-pre breaking get requests?
[23:05] digitalspaghetti: but works fine in 0.2.3
[23:05] mikew3c has joined the channel
[23:05] tjholowaychuk: lots yup
[23:06] tjholowaychuk: well connect / express
[23:06] digitalspaghetti: ahh, k :D
[23:06] tjholowaychuk:  / lots of other mods
[23:06] digitalspaghetti: so i'll stick with 0.2.3 for now
[23:06] tjholowaychuk: sorry :) once it is stable it will be supported very shortly after
[23:06] digitalspaghetti: no probs, i thought i was going mad
[23:06] tjholowaychuk: haha nope
[23:06] digitalspaghetti: (well i am but that's beside the point)
[23:06] EyePulp has joined the channel
[23:07] micheil: tjholowaychuk: remember: sys is now util
[23:07] tjholowaychuk: micheil: i know, i havent even begun support for 3.x yet tho
[23:07] tjholowaychuk: to busy with production stuff right now
[23:07] micheil: I might.
[23:08] micheil: sounds like you guys need more node guns.
[23:08] Tim_Smart: Does Github have something to search the source tree with?
[23:08] micheil: Tim_Smart: unfortunately no.
[23:08] micheil: technoweenie: wanna have that as a feature request?
[23:08] tjholowaychuk: haha yeah man. as long as everyting is clearly commented as being a backwards compat patch ( so we can rip out the old code later ) im happy to accept stuff
[23:09] technoweenie: the source tree? 
[23:09] technoweenie: theres a code search
[23:09] cjheath has joined the channel
[23:09] marshall_law_ has joined the channel
[23:09] Tim_Smart: technoweenie: Ooo. Please tell me more.
[23:10] technoweenie: http://github.com/search?type=Code&language=javascript&q=prototype&repo=&langOverride=&x=0&y=0&start_value=1
[23:10] Tim_Smart: technoweenie: I see now..
[23:10] micheil: technoweenie: that's no code search
[23:10] micheil: technoweenie: like, search within the files of a repo.
[23:10] Tim_Smart: micheil: repo:ry/node stuff
[23:11] shimondoodkin: i use :fgrep -iR 'readdir' ./*
[23:11] Tim_Smart: "We're sorry, but there was a problem connecting to our search server. Try again soon."
[23:11] micheil: ah
[23:11] micheil: cool
[23:11] Tim_Smart: >.<
[23:11] technoweenie: yea, ha
[23:11] ossareh has joined the channel
[23:12] mikew3c_ has joined the channel
[23:12] zemanel_ has joined the channel
[23:14] Tim_Smart: Found the cheecky bugger http://github.com/ry/node/blob/master/tools/wafadmin/Tools/node_addon.py
[23:14] HAITI: Tim_Smart: git grep ?
[23:14] Tim_Smart: *cheeky
[23:14] Tim_Smart: HAITI: grep -R
[23:14] GriffenJBS_ has joined the channel
[23:14] Tim_Smart: But git grep sounds interesting...
[23:15] HAITI: yeah, It would be cool to do right on github.com
[23:15] HAITI: withouth cloning first
[23:15] Tim_Smart: Wow git grep is super fast.
[23:15] HAITI: without
[23:16] micheil: git grep?
[23:16] Tim_Smart: Oh, it had cached from my grep op.
[23:16] Tim_Smart: Or something.
[23:16] HAITI: git grep -n btw for line numbers ... http://www.kernel.org/pub/software/scm/git/docs/git-grep.html
[23:17] tjholowaychuk: anyone have experience with really long timeouts? not sure how efficient they are, or if its fine
[23:17] tjholowaychuk: I imagine it is fine, but hey :)
[23:17] micheil: tjholowaychuk: those prod. issues, are they mainly related to websockets or?
[23:18] tjholowaychuk: micheil: what do you mean? I just meant we are busy working with stable stuff for production, so we dont really have time to support 0.3.x
[23:18] tjholowaychuk: until it is stable and we move to it
[23:18] micheil: ha
[23:18] micheil: *ah
[23:18] micheil: right, I thought you said you had production issues
[23:18] tjholowaychuk: ohh nope :)
[23:18] bruse: i wonder if git grep is implemented the same way as gnu grep
[23:18] micheil: my bad there.
[23:19] Tim_Smart: bruse: The output is exactly the same - so maybe.
[23:19] Tim_Smart: Except I get nice colors with normal grep.
[23:19] stephenjudkins has joined the channel
[23:20] micheil: --color
[23:20] HAITI: ;
[23:20] HAITI: ;)
[23:20] micheil: I wonder when my new mic will arrive.
[23:21] HAITI: What kind of mic?
[23:21] HAITI: Music production or just for chatting?
[23:21] shaver: for spying
[23:21] bruse: Tim_Smart: apparently gnu grep uses some clever heuristics to be super fast
[23:21] bruse: there was a good article on it somewhere
[23:21] stalled has joined the channel
[23:21] alexfner: nodejs has webworkers?
[23:22] Tim_Smart: bruse: OK. Yeah it does some sort of caching, because running it again made it almost instant.
[23:22] micheil: alexfner: via npm module
[23:22] bruse: nice
[23:22] micheil: HAITI: a samson Zoom H4n
[23:22] Tim_Smart: micheil: http://dl.dropbox.com/u/396394/screenshots/grep.png
[23:22] micheil: HAITI: to do both music production and podcasting
[23:22] alexfner: ah, so what's better that or websocket connection between different instances of node on the same machine?
[23:23] alexfner: socket*
[23:23] micheil: Tim_Smart: so, it needs some tweaking
[23:23] micheil: alexfner: I'd say a custom binary protocol between the two instances
[23:23] micheil: using net module.
[23:23] micheil: websockets has a lot of over head
[23:23] micheil: especially if webworkers is 1:1
[23:23] alexfner: you'll have to forgive me, I know what nodejs is, but I haven't actually used it
[23:24] micheil: in the sense that you have 1 script talks to 1 script
[23:24] alexfner: I'm just looking to make a simple canvas based 2d multiplayer game 
[23:24] alexfner: and users would connect to the nodejs service using websockets
[23:24] alexfner: but I am trying to figure out how to scale node
[23:24] micheil: alexfner: ah
[23:24] alexfner: so I was thinking, multiple instances
[23:24] micheil: scaling websockets requires a bit of work
[23:25] micheil: peter griess has done a lot of research in this area.
[23:25] alexfner: oh?
[23:25] [[zz]] has joined the channel
[23:25] micheil: http://developer.yahoo.com/blogs/ydn/posts/2010/07/multicore_http_server_with_nodejs/
[23:27] davidascher has joined the channel
[23:27] alexfner: micheil: reading now, thanks
[23:28] drudge has joined the channel
[23:29] Gruni has joined the channel
[23:29] shimondoodkin: how about compiling node with - j 5
[23:29] shimondoodkin: is it makes a difference?
[23:29] micheil: isaacs: so, with opendir, what is it that it actually does?
[23:30] micheil: -j 5?
[23:30] shimondoodkin: insted of multi proccess
[23:30] isaacs: micheil: man opendir
[23:30] micheil: doesn't say much
[23:30] micheil: http://www.gnu.org/s/libc/manual/html_node/Opening-a-Directory.html#Opening-a-Directory
[23:30] isaacs: micheil: it gives you a dir handle, which you can get to walk through the directory
[23:30] shimondoodkin: gcc -j is number of cores +1
[23:30] prettyrobots has joined the channel
[23:30] isaacs: and then you closedir to release it
[23:30] micheil: so, like.. 
[23:30] ooooPsss has joined the channel
[23:30] micheil: how would you walk it.
[23:30] micheil: I've never seen it used before.
[23:31] isaacs: micheil: from man opendir: http://gist.github.com/625185
[23:32] micheil: so what do you want implemented?
[23:32] shimondoodkin: it is probably posible to split the readdir function to 3 but it will probably never be accepted to node source because of exposing pointer addresess to javascript
[23:32] sonnym has joined the channel
[23:34] isaacs: micheil: i wanna be able to stream directories in js
[23:34] unomi has joined the channel
[23:34] micheil: k
[23:34] isaacs: micheil: it's not a small thing to add
[23:34] alexfner: micheil: java looks easier to implement than this... :)
[23:35] micheil: alexfner: feel free, just don't get sued by oracle.
[23:35] alexfner: a server written in java, that is
[23:35] alexfner: heh
[23:35] skohorn has joined the channel
[23:35] alexfner: I won't
[23:35] micheil: k
[23:35] micheil: also, don't talk about how it's better then XYZ
[23:35] alexfner: oh I am not trying to do that
[23:35] micheil: k
[23:35] alexfner: I just mean, it seems like scale isn't yet a part of node
[23:36] alexfner: would that be accurate?
[23:36] micheil: node can already scale to a large size, just not over multiple cores (natively)
[23:37] banjiewen has joined the channel
[23:39] micheil: isaacs: so, you're not wanting a function that reads every file in a directory in a streaming manner, just something that outputs the names of files in a directory in a streaming manner?
[23:40] isaacs: micheil: yeah
[23:40] shaver: yeah
[23:40] shaver: readdir
[23:40] micheil: k
[23:40] isaacs: micheil: imagine you have 1,000,000,000 files in a directory
[23:40] shaver: imagine that your directory is on a slow network drive
[23:40] micheil: yeah]
[23:40] shaver: and you don't want to block on it
[23:40] isaacs: micheil: or, even, in some kind of crazy fuse scenario, an *infinite* number of files in a directory
[23:40] isaacs: (though that would be bad behavior)
[23:40] micheil: isaacs: the eio code for it is pretty complex.
[23:40] isaacs: micheil: yep
[23:41] micheil: it's also kinda messy imo.
[23:41] isaacs: you'll have to basically implement opendir, readdir that takes a dir handle, and then closedir
[23:41] micheil: hmm..
[23:41] shimondoodkin: "micheil:complex"  why it seems super simple
[23:41] isaacs: all as separate nonblocking/sync functions
[23:41] davidwalsh has joined the channel
[23:41] isaacs: micheil: now you see why i'm not doing it ;)
[23:42] micheil: shimondoodkin: uhh.. for the reason that you need to maintain a heap of stuff
[23:42] isaacs: micheil: it's complicated, and only really solves kind of a scant edge case.
[23:42] shimondoodkin:  /src/node_file.cc
[23:42] micheil: isaacs: I'm probably not likely to do it.
[23:42] micheil: shimondoodkin: no. wrong file.
[23:42] isaacs: yeah, figgered as much :)
[23:42] micheil: deps/libeio/eio.c
[23:42] isaacs: there are better ways to spend a week, i'm sure
[23:42] micheil: lines 1202-1398
[23:43] jchris has joined the channel
[23:43] micheil: isaacs: I was meant to be studying this week.. but eh''
[23:43] tilgovi_ has joined the channel
[23:46] shimondoodkin: micheil: ive not found where it invokes EIO_READDIR seens like scandir is just an unused function of libeio
[23:47] micheil: shimondoodkin: uh.
[23:47] micheil: just look at the libeio code.
[23:47] micheil: I don't think we bind it in node yet
[23:47] micheil: actually, we do.
[23:47] micheil: also, we don't call EIO_READDIR
[23:47] shimondoodkin: there is a responce handler but no call
[23:47] HAITI: micheil: sorry stepped away/ that looks like a nice mic! it reminds me of the pcmd1 i have dreams about this one every other week http://pro.sony.com/bbsc/ssr/cat-audio/cat-recorders/product-PCMD1/ 
[23:48] micheil: shimondoodkin: we do ASYNC_CALL("READDIR", ...)
[23:48] micheil: it's a wrapper.
[23:48] paulr has joined the channel
[23:49] micheil: shimondoodkin: the code takes a bit of time to read and understand, so, yeah
[23:50] shimondoodkin: oh found line 1858/1971
[23:50] micheil: shimondoodkin: it takes time to really read it, not something to explain quickly.
[23:53] ossareh has joined the channel
[23:55] creationix has joined the channel
[23:55] ThePub has joined the channel
[23:56] melgray has joined the channel
[23:56] threeve has joined the channel
[23:57] [[zz]] has joined the channel
[23:59] shimondoodkin: micheil: i see, probably some eio custom might be a solution
