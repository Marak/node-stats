[00:07] SubStack: pHcF: res.render('somepage.jade', { locals : { myvar : 'meow' } })
[00:07] pHcF: SubStack: i tried that, but didn't work.. i created a dynamic helper
[00:08] SubStack: hmm the api might've changed
[00:09] SubStack: nope that should work, the docs say
[00:10] squires has joined the channel
[00:12] cardona507 has joined the channel
[00:12] omarkj has left the channel
[00:14] JusticeFries: what are some of the best node.js packages out there?
[00:14] JusticeFries: i grabbed express, socket.io, geddy..
[00:15] justinlilly: JusticeFries: packages for what?
[00:15] JusticeFries: I'm curious to see what everyone's using, mostly.
[00:15] SubStack: the best the best the best
[00:17] JusticeFries: i guess I could just look at npm list :)
[00:17] SubStack: and http://github.com/ry/node/wikis/modules
[00:17] isaacs: JusticeFries: it'd be good to analyze out that info from the registry somehow.
[00:18] SubStack: but if a module isn't on npm it probably isn't worth using
[00:18] roberthahn has joined the channel
[00:18] tprice: monday or sunday?
[00:18] jesusabdullah: You mean, what day is it?
[00:18] justinlilly: is there anything like rip or virtualenv for node yet?
[00:19] SubStack: monday
[00:19] SubStack: for 19 minutes now
[00:19] tprice: for you is it  monday or sunday?
[00:19] jesusabdullah: justinlilly: https://github.com/isaacs/nave
[00:19] jesusabdullah: Sunday
[00:19] breccan has joined the channel
[00:19] justinlilly: cool.. thx.
[00:19] isaacs: justinlilly: what's rip?
[00:19] tprice: so you on this side of the world
[00:19] jesusabdullah: Well, some side or other
[00:19] SubStack: jesusabdullah: why are you not using UTC‽
[00:19] justinlilly: isaacs: virtualenv for ruby.
[00:20] isaacs: oh, neat
[00:20] isaacs: i thought rubyists were all about rvm
[00:20] justinlilly: well, its actually pip + virtualenv, iirc
[00:20] jesusabdullah: SubStack: idk
[00:20] FuzzYspo0N: I need some v8 help if anyone wants to take a stab at it : Accessing a child property inside c++ from the parent property Accessort
[00:20] justinlilly: it's written by github guys.
[00:20] roberthahn: i leave you guys for a day and you're *still* talking about UTC? :)
[00:20] isaacs: kewl
[00:20] justinlilly: but I *do* think rubyists are all about rvm.
[00:20] isaacs: if you use npm, and haven't modified the default path configs, then it works like pip+virtualenv when used with nave or nvm
[00:21] isaacs: that is, when in the subshell, you're "segregated", since the paths are all based on the location of the node binary
[00:21] FuzzYspo0N: isaacs, aren't you a v8 ninja?
[00:21] isaacs: FuzzYspo0N: nah, i'm a js wizard.
[00:21] FuzzYspo0N: isaacs, ah , fair trade
[00:21] isaacs: no bladed weapons, d4 hit dice, need concentration, but i get better spells.
[00:22] FuzzYspo0N: heh, and quicker leveling
[00:22] FuzzYspo0N: cos v8 has level 98 UNKNOWNWTF
[00:22] FuzzYspo0N: a wild exception appears!
[00:22] FuzzYspo0N: Sigh. Sometimes i wanna punch it in the head.
[00:22] SubStack: ACTION casts functional programming
[00:23] jesusabdullah: Look again. YOUR PROCEDURES ARE NOW DIAMONDS
[00:24] tmpvar has joined the channel
[00:25] boaz_ has joined the channel
[00:28] arrty has joined the channel
[00:30] halfhalo: diamonds you say?
[00:30] twoism has joined the channel
[00:31] roberthahn: boy, if I had a diamond for every procedure that turned into a diamond…
[00:31] roberthahn: I'd have 0 diamonds :(
[00:31] FuzzYspo0N: you would have the hardest code known the man
[00:32] SubStack: vulnerable to high temperatures however
[00:32] SubStack: at low pressures
[00:32] roberthahn: do flamewars generate sufficient heat to expose vulnerabilities?
[00:33] frodenius: jesusabdullah++
[00:33] v8bot:  frodenius has given a beer to jesusabdullah. jesusabdullah now has 3 beers.
[00:33] FuzzYspo0N: grr, why is it v8 gets all friendly and then when you are steaming along will punch you in the balls. I find it unhelpful at best
[00:33] halfhalo: yes, but it would be shiny
[00:33] robotarmy has joined the channel
[00:33] roberthahn: FuzzYspo0N: look at it this way: it builds character
[00:34] FuzzYspo0N: roberthahn, oh sure. Im not complaining per se, just a love hate thing going on.
[00:34] FuzzYspo0N: And more honestly, really hoping someone has done what im trying
[00:34] FuzzYspo0N: else, i have lost a couple days
[00:35] roberthahn: i'm sure by the end of the day you'll be quite a character
[00:35] roberthahn: what are you doing?
[00:35] FuzzYspo0N: tryring to get a child property, from the parent object accessor callback
[00:35] aubergine has joined the channel
[00:36] FuzzYspo0N: ie; file is a c++ class exposed to js, so is path. If i say file.path = new Path()  i am inside the c++ accessor for file.path, i cant seem to reassign that internal pointer that v8 stores for me
[00:37] FuzzYspo0N: like, myClass::pathSet(...) {   args.Holder()->Set(this is an infinite loop too) } 
[00:37] roberthahn: can't help you on that one. don't know much C++
[00:37] FuzzYspo0N: no worries. explaining it might help me figure a way
[00:38] roberthahn: but if you can pretend i'm not much smarter than a  Cardboard Joe, I have a question to ask - can you pass in a reference to the pointer you want to reassign?
[00:39] creationix has joined the channel
[00:39] creationix has left the channel
[00:40] FuzzYspo0N: Hmm, im not sure what you mean? I am handed both JS side objects in the callback. I have the parent, and the new value for the child. I cant seem to get the child
[00:42] roberthahn: if you have the new value for the child, how can you not get it?
[00:43] FuzzYspo0N: no right, player.name = 'new player name';  I have 'new player name' and i have player. 
[00:44] FuzzYspo0N: I cant seem to fetch the name c++ instance variable, and edit it. I can get the raw c++ instance, sure
[00:44] reid has joined the channel
[00:44] FuzzYspo0N: but i cant tell the JS object to update (especially if its an object child, not a native0
[00:47] tim_smart has joined the channel
[00:48] tmpvar: FuzzYspo0N, can you gist?
[00:48] isaacs has joined the channel
[00:49] FuzzYspo0N: tmpvar, sure i can try but context might be lacking
[00:49] FuzzYspo0N: sec
[00:52] ircretary has joined the channel
[00:53] robotarm_ has joined the channel
[00:55] langworthy has joined the channel
[00:59] x0xMaximus has joined the channel
[00:59] micheil has joined the channel
[01:00] FuzzYspo0N: tmpvar, just not its not node related (not this part , anyway). The node stuff is alot simpler but i hit this problem before. (this is also the one place v8 developers seem to congregate).
[01:00] micheil: mscdex: hey, node-smtp-client isn't really up to date
[01:00] tmpvar: FuzzYspo0N, ah
[01:00] micheil: it was built against node pre 0.1.30
[01:01] FuzzYspo0N: tmpvar, its general v8 question though, everywhere else is dead for v8 help :/  can you see this gist? https://gist.github.com/c7a5a6d94645f9d4dab4
[01:01] tmpvar: peeking
[01:01] FuzzYspo0N: gah, it totally raped my formatting.
[01:02] FuzzYspo0N: sorry about that
[01:02] tmpvar: np
[01:03] JusticeFries: hmm anybody using npm with cinderella?
[01:03] isaacs: JusticeFries: what's cinderella? (besides a fairy tale)
[01:04] JusticeFries: https://github.com/atmos/cinderella
[01:04] isaacs: whoa, is this like a homebrew-for-nerds thing?
[01:05] zentoooo has joined the channel
[01:05] JusticeFries: yup
[01:05] dnolen has joined the channel
[01:05] JusticeFries: its pretty awesome
[01:05] bbttxu has joined the channel
[01:05] JusticeFries: its great for keeping your dev environ atomic too
[01:05] isaacs: yeah, i can dig it!
[01:06] JusticeFries: i'm having a little issue figuring out how to setup my PATH so that it can find my npm modules
[01:06] isaacs: but, no, i don't use npm with it
[01:06] isaacs: ah. it'd be the NODE_PATH youre' interested in
[01:06] JusticeFries: ah, perfect.
[01:06] isaacs: npm config get root
[01:06] isaacs: that's where npm puts stuff.
[01:06] matt_c has joined the channel
[01:06] tmpvar: FuzzYspo0N, interesting
[01:06] JusticeFries: so I can just export NODE_PATH = whatever?
[01:06] isaacs: yep
[01:06] JusticeFries: perfect
[01:06] FuzzYspo0N: tmpvar, i cant see how i can grab the c++ instance, of the js object to replace :/
[01:07] JusticeFries: grrr
[01:08] tmpvar: FuzzYspo0N, if i remember correctly, you need to unwraqp it
[01:08] FuzzYspo0N: tmpvar, no i can get the c++ instance of the texture itself, but that does not notify the parent geometry that it has changed
[01:09] FuzzYspo0N: i dont want to replace the raw c++ pointer, with the one inside the new arguments internalField. I want to replace the whole .texture with the new texture() that i have been handed
[01:10] FuzzYspo0N: ie : i can change the visual texture using the c++ instance. But then if i call geom.texture.name , it will be wrong
[01:10] JusticeFries: oh how odd
[01:10] tmpvar: oh weird
[01:10] JusticeFries: isaacs: why would npm install something outside of the root path?
[01:10] tmpvar: FuzzYspo0N, i havent touched this stuff in a few months.. have you considered not using weak refs?
[01:10] JusticeFries: just tried to reinstall express, and threw a warning.
[01:10] FuzzYspo0N: because geom.texture is not changing, geom.texture.internalField[0] is
[01:11] isaacs: JusticeFries: well, it's got three things that are relevant.
[01:11] tmpvar: FuzzYspo0N, or is that important in this case?
[01:11] isaacs: root = modules and .npm folder, binroot = executables, manroot = manpages
[01:11] FuzzYspo0N: tmpvar, very :) And its not the weak reference. Its the JS object that needs to be switched , it seems trivial
[01:11] FuzzYspo0N: but its weird
[01:11] tmpvar: yeah, it does seem trivial
[01:11] galaxywatcher has joined the channel
[01:11] tmpvar: is this an open project?
[01:11] FuzzYspo0N: i cant access the child without triggering the callbacks
[01:11] JusticeFries: ah ha
[01:12] JusticeFries: so do I need to symlink something into that lib folder?
[01:12] FuzzYspo0N: open in what sense, tmpvar ?
[01:12] rwaldron has joined the channel
[01:12] tmpvar: FuzzYspo0N, released to the public
[01:12] JusticeFries: if its in the binroot?
[01:12] isaacs: JusticeFries: no, npm will handle all that
[01:12] isaacs: JusticeFries: just set those configs appropriately
[01:13] FuzzYspo0N: tmpvar, semi? its a 2d engine iv been experimenting with for some time. I decided to expose my rendering low level to the scripting language, and hit some new challenges :D 
[01:13] FuzzYspo0N: For the link to "what it is' im doing : blog.centrc.net/the-inner-workings-of-2d-game-tech-laboratory
[01:13] JusticeFries: oh hurf i'm in the wrong directory tryign to run my app
[01:13] FuzzYspo0N: woops. http://blog.centrc.net/the-inner-workings-of-2d-game-tech-laboratory
[01:13] JusticeFries: okay, still can't find module 'express'
[01:13] FuzzYspo0N: tmpvar, its not closed per se, i just want to finish exposing this rendering before i release the next build
[01:14] tmpvar: sure
[01:14] FuzzYspo0N: there are people using it
[01:14] tmpvar: interesting
[01:14] JusticeFries: oh there w go
[01:14] FuzzYspo0N: and i plan to use it for www.ludumdare.com next weekend, thats why i am hurrying now. 
[01:14] tmpvar: i see
[01:14] jesusabdullah: ooh
[01:14] jesusabdullah: I wanna do ludum dare someday
[01:15] FuzzYspo0N: tmpvar, its got all the usual suspects, networking, physics, sprites etc
[01:15] sid__ has joined the channel
[01:16] FuzzYspo0N: tmpvar, i think i posted about an older tech demo, http://blog.centrc.net/laboratory-and-pong-online
[01:16] EGreg: hi
[01:17] tmpvar: FuzzYspo0N, looks fun
[01:17] FuzzYspo0N: eww, woah the code there is ridiculous :D
[01:17] tmpvar: haha
[01:17] FuzzYspo0N: lucky thats oldschool
[01:17] FuzzYspo0N: thanks tmpvar, experimental that turns awesome is always fun for me
[01:17] kenbolton has joined the channel
[01:17] tmpvar: honestly i havent touched v8/node addons since < node 0.2
[01:17] FuzzYspo0N: no worries, ill find a way
[01:17] tmpvar: so im not sure If i can help.. but its always good to throw out an example of the issue you are running into
[01:18] FuzzYspo0N: thanks for the attempts ;p
[01:18] tmpvar: yeah, i dont see anything that is blatantly wrong heh
[01:18] FuzzYspo0N: its working great.
[01:18] FuzzYspo0N: Its just, i cant extend it the way i want
[01:18] FuzzYspo0N: theres no obvious way :/
[01:18] FuzzYspo0N: nothing was obvious i guess, when i started with v8 lol
[01:18] FuzzYspo0N: its a magical beast.
[01:19] strmpnk has joined the channel
[01:20] FuzzYspo0N: i guess ill try it as a function, and wrap that instead? Might work.
[01:20] FuzzYspo0N: ACTION goes back to the code.
[01:21] zentoooo has joined the channel
[01:25] JusticeFries: isaacs: mind telling me your binroot in comparison to your root? the relative path down? i think that may be the issue when cinderella installed NPM
[01:26] isaacs: JusticeFries: they're just two separate things
[01:26] JusticeFries: so they don't share the same root directory?
[01:26] JusticeFries: (and do you have NODE_PATH pointing to both places?)
[01:26] isaacs: JusticeFries: the binroot defaults to the folder node is in, and the root defaults to {execpath}/../lib/node
[01:26] isaacs: JusticeFries: no, you have NODE_PATH->root, and PATH->binroot
[01:26] JusticeFries: OH
[01:26] JusticeFries: ha.
[01:26] JusticeFries: okay
[01:27] isaacs: i know, they're somewhat unfortunately named configs.
[01:27] omygawshkenas has joined the channel
[01:27] chrislgibson has joined the channel
[01:28] JusticeFries: yeah I'm having some straaange issues.
[01:28] JusticeFries: cannot find module 'express'
[01:29] JusticeFries: there's also no symlink to it in my root
[01:30] JusticeFries: but its there under .npm/express
[01:33] JusticeFries:  grr
[01:37] mw has joined the channel
[01:38] JusticeFries: isaacs: i've found the problem...it's not symlinking connect or express in my /lib/node root dir, instead it just puts it all in .npm - seen this before at all?
[01:38] isaacs: JusticeFries: this rings a bell.
[01:38] isaacs: what version of npm?
[01:39] JusticeFries: 0.2.11
[01:39] isaacs: that wa sa pretty recent bug.  maybe "npm update npm" will fix it
[01:39] isaacs: ah, yes.
[01:39] isaacs: haha, sorry for the goosechase
[01:39] isaacs: didn't even think of that until you mentioned it
[01:39] JusticeFries: no problem. :)
[01:40] marienz has joined the channel
[01:40] JusticeFries: hm homebrew's installing 0.2.11...there's the problem!
[01:41] JusticeFries: haaa
[01:41] JusticeFries: there we go
[01:42] JusticeFries: npm install npm, and then removing the homebrew version works like a charm
[01:42] isaacs: h
[01:42] isaacs: ah
[01:45] JusticeFries: or just brew install npm --HEAD :D
[01:45] JusticeFries: weird
[01:45] JusticeFries: thanks though
[01:45] chrischris has joined the channel
[01:47] reid: using homebrew+npm forces you to reinstall your apps when you update node
[01:47] reid: unless you have a properly setup npm config
[01:47] reid: caveat emptor
[01:47] JusticeFries: ooh.
[01:48] JusticeFries: do you suggest just dropping homebrew and building npm myself?
[01:48] isaacs: JusticeFries: yes.  i do frequently recommend that, even to the point of pissing people off sometimes ;)
[01:48] reid: actually, i should be more clear,
[01:48] reid: using node with homebrew, then npm on top, is what causes trouble
[01:48] isaacs: yes
[01:48] reid: not npm alone
[01:48] JusticeFries: okay. maybe I'll just build both.
[01:48] isaacs: using npm+node, both on homebrew, works fine, except that you can't use npm to update itself.
[01:49] reid: it works fine until you upgrade node
[01:49] tek has joined the channel
[01:49] isaacs: JusticeFries: https://gist.github.com/579814
[01:49] jesusabdullah: building npm is pretty easy, too
[01:49] JusticeFries: perfect. i'll just compile myself and be happy
[01:49] jesusabdullah: at least, on the lennox's
[01:50] reid: homebrew is a package manager that wants to be a One True Package Manager, the project is hostile to having other package managers messing with it's reserved prefix (e.g., /usr/local)
[01:51] JusticeFries: its nice for ruby dev setup
[01:51] JusticeFries: probably a good idea to keep my ruby dev and node dev separated though
[01:55] mjr_ has joined the channel
[01:57] mischief has joined the channel
[01:57] yonkeltron: jesusabdullah: it's easy on the lennox because of the gold lines
[01:58] JusticeFries: perfect. i'm all set now, got it out of using homebrew at all
[01:58] JusticeFries: thanks.
[01:59] ajpiano has joined the channel
[02:02] omygawshkenas has joined the channel
[02:02] jvolkman_ has joined the channel
[02:03] jesusabdullah: gold lines?
[02:03] sudoer has joined the channel
[02:03] mischief has joined the channel
[02:05] pHcF: is there any way to create an express helper with a callback?
[02:05] pHcF: an assync helper?
[02:06] mischief has joined the channel
[02:07] nbqx has joined the channel
[02:12] piscisaureus has joined the channel
[02:12] ossareh has joined the channel
[02:14] mischief has joined the channel
[02:14] mischief has joined the channel
[02:16] micheil has joined the channel
[02:16] comster has joined the channel
[02:18] h03ru has joined the channel
[02:20] robotarmy has joined the channel
[02:22] abiraja has joined the channel
[02:24] Ecu-Truin has joined the channel
[02:25] mikeal has joined the channel
[02:25] Ecu-Truin: To those who've worked with node regularly, is it fast enough to handle constant streaming games such as a FPS or RTS?
[02:25] Wyverald has joined the channel
[02:27] roberthahn: Ecu-Truin:  that may well depend on how you architect your apps
[02:27] roberthahn: node.js is certainly capable of sustaining a large number of concurrent connections
[02:27] Aria: The general answer is 'yes', but the devil is in the details
[02:28] zentoooo has joined the channel
[02:29] micheil: Ecu-Truin: the bigger question is generally is your code capable of sustaining constant streaming games/
[02:29] Ecu-Truin: Isn't it always? :3  I estimated that it could.  I'd assume that you'd need to have Websocket or FlashSocket to be able to have reliable latency, eh?
[02:29] micheil: Aria: now I feel like listening to placebo's song.
[02:30] SubStack: wait what
[02:30] micheil: Ecu-Truin: depends. what's the client?
[02:30] roberthahn: pHcF: i'm on the Express man page now, and it looks to me like helpers aren't designed to be async
[02:30] benalman has joined the channel
[02:30] Ecu-Truin: I haven't written anything quite yet.  Mostly just running concepts through my head of random things to try do with node for fun.
[02:30] Ecu-Truin: The client would be HTML5/JS.
[02:30] micheil: Ecu-Truin: node's code is pretty much built around the idea of streams; so, you'd need to explain more to get better answers
[02:31] micheil: Ecu-Truin: the problem there would more likely be the browser client rendering the game, not the server code
[02:31] isaacs: Aria: Hey!!  I actually have a usecase for process.argv[0] being "node"!!
[02:31] isaacs: jashkenas: ^^
[02:31] micheil: evenin' isaacs 
[02:31] isaacs: omg that's how i might be able to hack a path around the homebrew issue (part of it anywya)
[02:32] isaacs: hiya, micheil 
[02:32] Aria: Oh do you now?
[02:32] isaacs: yeah
[02:32] Ecu-Truin: Thanks.
[02:32] isaacs: the reason why brew+npm+node sucks is because process.execPath is Cellar/node/0.2.5/bin/node, right?
[02:32] Aria: Oh, could be, yeah
[02:33] JusticeFries: yep
[02:33] isaacs: (it is, been annoyed this a lot lately.)  well, i can sniff process.argv[0], and if it's just "node", then I know that the process.execPath has to be validated against the PATH environ
[02:33] JusticeFries: ahh.
[02:33] isaacs: and i can look through each of the items in the PATH, and check for an executable thing called process.argv[0], and use THAT in place of the process.execPath
[02:34] JusticeFries: i could put together a patch for that tomorrow if you like.
[02:34] JusticeFries: well
[02:34] isaacs: so if you symlink node from some silly location to /usr/local/bin/node, i can use that path instead.
[02:34] JusticeFries: depending on what's on my plate
[02:34] isaacs: JusticeFries: i'm gonna do this right now in npm
[02:34] JusticeFries: oh perfect
[02:34] Aria: Any reason that process.self or process.interpreter wouldn't work just as well for that?
[02:34] isaacs: Aria: because i need to know what was actually entered to the execvp
[02:35] isaacs: Aria: now, if that actual argv[0] was put in some other place, whatever
[02:35] isaacs: but the point is, having it around provides a way around this problem that has been plaguing me.
[02:35] jashkenas: nicely done.
[02:35] Aria: Yes indeed. (I'd NEVER say get rid of it!)
[02:35] tekky has joined the channel
[02:35] Aria: (I just think it's more useful moved)
[02:35] isaacs: nono, i'm sure
[02:36] rory959 has joined the channel
[02:36] isaacs: and on a purely meaningless esthetic pov, i prefer it being on argv[0], because it's part of the argument vector, but whatever, that's neither here nor there.
[02:36] Aria: HEhe, yeah. I
[02:36] isaacs: what's exciting was that every time we've had this discussion, you've been all "no one uses that!" and i've been like "yeah... but... um..."
[02:37] cjm has joined the channel
[02:37] mischief has joined the channel
[02:37] Aria: ACTION laughs. Yeah.
[02:37] isaacs: see!! there IS a use case!
[02:37] isaacs: :D
[02:38] roberthahn: crazy node.js webapp idea: a  reminder service, where you enter an email, a message, and a time to send the message, only, we use setTimeout as the mechanism to hold the reminder, and send the email when the timeout fires
[02:38] roberthahn: I have  2 friends who don't use node.js think i'd be nuts to try it
[02:39] micheil: roberthahn: you know what's crazy about that? if your server / process dies, so does all your reminders
[02:39] pHcF: roberthahn: how can i do that so?
[02:39] isaacs: roberthahn: like followupthen.com?
[02:39] isaacs: roberthahn: that service is super handy
[02:40] isaacs: you just cc:2weeks@followupthen.com, and it sends a reminder in 2 weeks.
[02:40] Druid_ has joined the channel
[02:40] isaacs: or bcc: and it only sends teh reminder to you
[02:40] roberthahn: micheil: i would store each reminder in a redis database such that, when the process is restarted, i re-read all the  reminders and set up adjusted setTimeouts
[02:40] ybit has joined the channel
[02:40] isaacs: or just to: with no other recips, and it only emails you
[02:40] justinlilly: anyone know of an article that will compare/contrast all of these testing frameworks?
[02:40] roberthahn: isaacs: is that a node.js service?
[02:40] micheil: roberthahn: psh. cron ftw.
[02:40] isaacs: roberthahn: don't think so
[02:40] isaacs: probably not
[02:40] isaacs: micheil: it's more like "at" than "cron"
[02:40] justinlilly: Just want something useable and fairly easy. Will need some form of mocking support. Would rather not *have* to install it with npm.
[02:40] cafesofie has joined the channel
[02:41] isaacs: micheil: not repeated
[02:41] micheil: isaacs: same idea though.
[02:42] roberthahn: so, general feeling here is: "not that crazy, but obvious problems like persistence needs to be addressed"
[02:43] pHcF: roberthahn: how can i make express helpers assync?
[02:43] whyme has joined the channel
[02:43] isaacs: roberthahn: also, it should be super duper easy to use.
[02:43] isaacs: persistence is less important
[02:44] isaacs: i've got calendars already for persistence
[02:44] JusticeFries: anyone going to nodeconf?
[02:44] isaacs: JusticeFries: i'll be there ;)
[02:44] JusticeFries: i'm debating between nodeconf or railsconf.
[02:44] jakehow has joined the channel
[02:44] JusticeFries: leaning toward nodeconf. :3
[02:44] jacobrelkin has joined the channel
[02:44] isaacs: nodeconf ftw!!
[02:44] roberthahn: pHcF: you'd have to look at express's helpers source to be sure, but, honestly, i think they're designed to not be async - they're supposed to help get content into templates
[02:44] JusticeFries: okay you convinced me
[02:44] isaacs: :D
[02:45] pHcF: roberthahn: hmm... any idea about how to make an assync call from the view?
[02:45] benalman has joined the channel
[02:45] roberthahn: pHcF:  without knowing more, i'd suggest you make the call from the controller
[02:46] MikhX_ has joined the channel
[02:46] roberthahn: ok, time for sleep. good night all!
[02:46] SubStack: persistence eh? https://github.com/substack/node-permafrost 
[02:46] roberthahn: pHcF:  i'll be back tomorrow if you still need help
[02:46] MikhX_ has joined the channel
[02:47] pHcF: roberthahn: ok
[02:47] wdperson has joined the channel
[02:48] chrisdickinson: v8bot: (0xFF << 24 | 0x74 << 16 | 0x4F << 8 | 0x63) === 0xFF744F63
[02:48] v8bot: chrisdickinson: Use v8: <code> to evaluate code or "`v commands" for a list of v8bot commands.
[02:49] skohorn has joined the channel
[02:49] SubStack: oh no bitmath
[02:50] chrisdickinson: ): so it turns out that bit-twiddling in JS does not always work the way one hopes
[02:50] SubStack: because javascript integers are actually ieee floats
[02:50] meso has joined the channel
[02:51] chrisdickinson: SubStack: only sometimes.
[02:51] chrisdickinson: and under duress.
[02:51] SubStack: anyways, buffers!
[02:52] chrisdickinson: this is an issue where i'm trying to compare a buffer value against a known magic int :\
[02:52] chrisdickinson: i was hoping I could just make a quick U32(buf) === 0xdeadbeef 'y sort of thing
[02:52] mikew3c_ has joined the channel
[02:52] SubStack: var magic = new Buffer([ 0xff, 0x74, 0x4f, 0x63 ])
[02:53] chrisdickinson: yeah, I just didn't want to have to build buffers for every single offset coming out of the file
[02:53] bingomanatee has joined the channel
[02:53] xonecas has joined the channel
[02:54] chrisdickinson: ultimately it just fouls up on the sign at the front. you can get around it using parseInt(buf[0].toString(16) + buf[N].toString(16), 16)
[02:55] chrisdickinson: not pretty, admittedly, but I'm going to need that buffer as an integer eventually anyway. it'd be nice if buffer had methods to read out sliced portions as integers
[02:55] SubStack: v8: Math.pow(2,24)*0xff + Math.pow(2,16)*0x74 + Math.pow(2,8)*0x4f + 0x63 === 0xFF744F63
[02:55] v8bot: SubStack: true
[02:56] tekky has joined the channel
[02:56] SubStack: chrisdickinson: I wrote something to do that
[02:56] SubStack: http://github.com/substack/node-binary 
[02:56] SubStack: only has the async interface for now however
[02:57] pHcF: is there any way to create an express helper with a callback?
[02:57] pHcF: an assync helper?
[02:57] chrisdickinson: SubStack: cool. I'm actually writing a library to natively access git at the moment
[02:57] chrisdickinson: (kind of a for-fun thing)
[02:58] chrisdickinson: so, I'm having to do a lot of messing around with binary data in buffer form (to get the idx and packfile formats read and parsed correctly)
[02:58] googol has joined the channel
[03:00] Wyverald1 has joined the channel
[03:00] isaacs: chrisdickinson: you're writing a git client in node?
[03:00] isaacs: that's awesome!
[03:00] irclogbot_ has joined the channel
[03:00] isaacs: irclogbot_: hello
[03:01] SubStack: shit I should really make that sync binary interface tonight
[03:01] _h03ru has joined the channel
[03:03] hzin has joined the channel
[03:03] nlacasse has joined the channel
[03:03] ashleydev has joined the channel
[03:04] jesusabdullah has joined the channel
[03:06] slaskis has joined the channel
[03:08] justinlilly: isaacs: for the modules wiki page, think there is value in having a jump list at the top of all the headings?
[03:08] Ecu-Truin has left the channel
[03:08] isaacs: justinlilly: sure.
[03:08] chrisdickinson: isaacs: yeah; right now it can read objects in the loose format, more or less (but it's a start!)
[03:08] isaacs: justinlilly: edit away :)
[03:08] chrisdickinson: hopefully it'll be a lot more useful than that silly node-python thing i wrote a while back :)
[03:08] isaacs: oh, chrisdickinson that was you?
[03:08] isaacs: i remember that
[03:09] chrisdickinson: yeah, sorry about that :)
[03:09] isaacs: mikeal is working on a node-php thing that's even more disgusting :)
[03:09] isaacs: it's not php in node.  it's just the worst aspects of php in node.
[03:09] chrisdickinson: haha
[03:10] isaacs: he was telling me about it, and he was like, "and what's great, is i can be like performance?  whatever.  it gets done 'eventually'"
[03:10] airportyh has joined the channel
[03:11] SubStack: to say that php has worst aspects implies that it has best ones
[03:11] isaacs: SubStack: oh, it certainly does.
[03:11] isaacs: i mean, it's a cool platform, i think
[03:11] chrisdickinson: it's certainly widespread (for better or worse)
[03:11] SubStack: mysql_real_escape_string() etc
[03:12] isaacs: if you already have apache, and are serving a filesystem-based static site, it just kinda dovetails right in for a litlte bit of template-based functionality
[03:12] isaacs: for a lot of stuff, it makes way more sense than using node
[03:12] isaacs: also: super handy for cli programs.
[03:12] _h03ru: so is cholera…
[03:12] isaacs: ugly as it is, it's not as ugly or obnoxious as bash or as insane as perl
[03:12] SubStack: command line php programs oh balls
[03:12] SubStack: that sounds horrid
[03:12] isaacs: SubStack: nah, it's great.
[03:13] chrisdickinson: isaacs: really? it's been a while since i used it last, but i remember using php to make command line programs being.. uncomfortable
[03:13] isaacs: about half the time i could use bash, i'll opt for php instead if i know it's installed.
[03:13] SubStack: but there's already perl and ruby and python and loads others
[03:13] SubStack: probably at least one of those is already installed even
[03:13] isaacs: sure
[03:13] isaacs: i dunno.
[03:13] isaacs: php's not... judgemental.
[03:14] isaacs: you can write it while drunk even, and it'll probably mostly work.
[03:14] SubStack: perl and ruby are like that too
[03:14] chrisdickinson: ACTION can attest to that from experience.
[03:14] SubStack: python not so much
[03:14] chrisdickinson: my big issue with python at the moment is the weird context switch from javascript to python. i end up with a lot of.. semi-anonymous functions in python, when i really should be using classes instead
[03:15] SubStack: I have a similar beef with python
[03:15] SubStack: you need to name everything
[03:15] airportyh has joined the channel
[03:15] SubStack: and naming is the hardest part of programming
[03:16] micheil: ACTION just uses javascript for everything.
[03:16] chrisdickinson: ACTION is quickly headed that direction
[03:17] JusticeFries: same
[03:17] JusticeFries: this time next year I'm anticipating my whole stack will be in JS.
[03:17] JusticeFries: and avoid rails
[03:17] halfhalo: ACTION hearts rails
[03:18] JusticeFries: so do I. :D
[03:18] JusticeFries: but I'm starting to heart js more
[03:18] chrisdickinson: I'm kind of a django kid. but yeah, I can definitely see myself headed more towards JS over the next year.
[03:18] micheil: ACTION uses the tool best for the job, but usually that tool for me is javascript
[03:18] SubStack: I never liked rails.
[03:18] nlacasse has joined the channel
[03:19] SubStack: I built an app with it, which turned out nicely enough
[03:19] jesusabdullah has joined the channel
[03:19] tk_idle has joined the channel
[03:19] JusticeFries: where we're going as a shop, ideally, is having everything on the front-end be JS, and our back end is boilerplate code that sits on top of the DB and returns JSON/does expensive operations/supplies async views
[03:19] ashleydev has joined the channel
[03:19] SubStack: but it tries to do too much for you without properly hiding what it's doing behind an interface
[03:19] JusticeFries: with heavy use of client-side MVC
[03:20] SubStack: I also don't like "MVC" or any other design pattern
[03:20] mikeal has joined the channel
[03:20] SubStack: well, any object oriented (which actually means java and c++ GoF shit) pattern
[03:20] justinlilly: really? Why?
[03:20] SubStack: since functional programming makes nearly every one of them obsolete
[03:20] thebigbad has joined the channel
[03:20] JusticeFries: how so, out of curiousity?
[03:20] justinlilly: Your issue isn't with design patterns, but more with OOP, then?
[03:21] JusticeFries: from a practical standpoint.
[03:21] ybit: shopping cart e-commerce with node.js, examples?
[03:21] SubStack: the GoF stuff as far as I can tell is all just work-arounds for not having closures
[03:21] justinlilly: not quite.
[03:21] dipser has joined the channel
[03:21] justinlilly: I watched a talk 2 weeks ago about implementing the observer pattern in clojure implementing actors.
[03:21] postwait has joined the channel
[03:22] justinlilly: was pretty intersting. It doesn't look quite the same, but its the same principle.
[03:22] SubStack: instead of the "visitor pattern", just require a traversal library and .forEach(function (node) { /* ... */ })
[03:23] galaxywatcher has joined the channel
[03:23] irclogbot_ has joined the channel
[03:23] SubStack: or instead of defining some cumbersome class to do sorts, just collection.sort(function (a,b) { /* ... */ })
[03:23] langworthy has joined the channel
[03:24] SubStack: with anonymous closures you can abstract that GoF crap away until it's a one-liner after requiring a library
[03:24] vineyard has joined the channel
[03:24] chrisdickinson: a rose by any other name?
[03:24] justinlilly: turtles all the way down?
[03:24] justinlilly: I can shove a bunch of things in a library and make it a library.
[03:24] justinlilly: err and make it a one liner.
[03:24] chrisdickinson: i mean, ultimately, the pattern's still there, it's just.. nicer to read and write.
[03:24] JusticeFries: you still have to do it /somewhere/
[03:25] SubStack: patterns are not abstractions though
[03:25] SubStack: patterns are work-arounds for insufficient language primitives to properly implement abstractions
[03:25] SubStack: granted, functional languages have design patterns too, but they are mind-bendingly higher-order
[03:26] jakehow has joined the channel
[03:27] justinlilly: So what's your argument?
[03:27] justinlilly: Design patterns are awful unless its lisp, then everything is awesome?
[03:28] alek_br has joined the channel
[03:28] SubStack: if you're relying heavily on design patterns then it's a good sign that your language is too low-level for your problem
[03:28] justinlilly: Which language has no design patterns? (ie: the highest level language)?
[03:29] SubStack: I'm not contending that such a language exists
[03:29] justinlilly: So you're saying "Every language is too low level for my problem."
[03:29] justinlilly: ?
[03:30] SubStack: well actually sure, every language sucks
[03:30] justinlilly: ACTION goes back to using a shitty language to get something done. :-P
[03:30] noahcampbell has joined the channel
[03:30] SubStack: but see, I like solving problems once and for all
[03:31] Twelve-60 has joined the channel
[03:31] SubStack: patterns are all about re-implementing the same solution over and over
[03:32] SubStack: metaprogramming ftw
[03:32] jashkenas: SubStack: here's a pattern for you to solve. the-error-as-the-first-argument-to-the-callback pattern in Node.js.
[03:32] SubStack: oh already solved that
[03:32] SubStack: http://github.com/substack/node-seq 
[03:33] SubStack: just stick a .catch() in your chain
[03:33] SubStack: more more
[03:33] jashkenas: fantastic. And the pass-a-closure-as-the-continuation-of-the-computation pattern?
[03:34] SubStack: you can do that with http://github.com/substack/node-chainsaw 
[03:34] SubStack: seq is actually just built on chainsaw
[03:37] SubStack: they're both just particular instances of monads ported to javascript
[03:38] joelklabo has joined the channel
[03:39] SubStack: I'd really like to see a continuation-passing system built on node.js like seaside or haskell on a horse
[03:39] SubStack: for web programming
[03:40] SubStack: there's every other type of web framework but I haven't seen one of these yet
[03:43] Aria: The only problem with those is making them survive an app server restart.
[03:43] SubStack: true!
[03:43] Aria: They got a lot less popular once REST style took off.
[03:44] SubStack: maybe something with websockets could revive the style
[03:44] jashkenas: yeah, Ajax destroys continuation-passing web frameworks... because the rich state is in the client.
[03:45] jashkenas: If you watch Avi talk about Seaside, he says as much.
[03:47] JusticeFries: once the security issues with websockets are fixed.
[03:47] JusticeFries: they just got disabled in ff 4 by default
[03:48] boaz has joined the channel
[03:50] breccan has joined the channel
[03:54] boaz has joined the channel
[03:56] justinlilly: ACTION wishes there was a clear winner for a testing framework in node :(
[03:57] Aria: Why not enjoy the pile of winners?
[03:57] justinlilly: I've been trying to figure out which one I can use or which one is good, etc.
[03:58] SubStack: ACTION votes expresso
[03:59] mikew3c has joined the channel
[04:01] max has joined the channel
[04:02] ShinMei has joined the channel
[04:02] chrisdickinson: i like platoon (disclaimer, i kind of wrote platoon)
[04:02] JusticeFries: i've been thinking...of doing my JS testing in coffeescript, for readability's sake.
[04:02] JusticeFries: and making some sort of coffeescript testing framework.
[04:03] whyme: ACTION did a test framework and hesitate to self promote
[04:03] JusticeFries: whether or not that's a good idea.
[04:03] JusticeFries: i don't know yet.
[04:04] sechrist: man wtf
[04:04] sechrist: the subway by SJSU was out of every kind of bread except wheat
[04:04] SubStack: links plox!
[04:04] sechrist: it was like that song by weird al
[04:04] SubStack: that place in new mexico
[04:05] whyme: https://github.com/5long/reut heh
[04:05] sechrist: yeah that one
[04:05] SubStack: fuck it's hard to spell
[04:05] sechrist: albuquerque
[04:05] sechrist: i'm not sure if I spelt it properly
[04:05] SubStack: Albuquerque
[04:05] SubStack: says the internet
[04:06] JusticeFries: infallible
[04:06] chrisdickinson: whyme: cool!
[04:06] chrisdickinson: how does it guess async/sync?
[04:07] sechrist: it infers
[04:08] whyme: chrisdickinson: default timeout = 1 so it works sync
[04:08] whyme: for setup/teardown, it looks at setupFunc.length
[04:09] sechrist: hm
[04:09] whyme: length == 1 -> sync
[04:09] sechrist: what if I have function(cb)?
[04:09] chrisdickinson: cool.
[04:10] whyme: sechrist: um, sorry don't get it.
[04:10] dipser has joined the channel
[04:10] sechrist: ah nevermind -- I thought it was basing it on args length
[04:10] sechrist: now I bet it
[04:10] chrisdickinson: i went the direction of using a wrapper function (assert.async) that would increment the assertion's expected count when executed, and decrement it on the callback's execution
[04:10] Sami_ZzZ has joined the channel
[04:11] chrisdickinson: which admittedly totally falls on its face when you do something like setInterval(assert.async(...), N)
[04:11] whyme: I don't like expectNum cuz you have to count.
[04:11] whyme: timeout is okay.
[04:13] xonecas: sechrist: thanks for the heads up, I'm ordering pizza then
[04:13] sechrist: san carlos pizza across the street never does me wrong
[04:13] xonecas: do they have hawaian? :-)
[04:13] kenbolton has joined the channel
[04:13] sechrist: that I don't know
[04:14] chrisdickinson: whyme: yeah -- the way i'm going, you don't do any of the counting yourself
[04:14] chrisdickinson: you can just assume that when you pass a callback, you should wrap it in assert.async, and the framework does the counting for you
[04:14] sechrist: xonecas: are you in this area? lol
[04:15] whyme: chrisdickinson: yep I did that, too
[04:15] whyme: and assert.emits(), just a little bit higher level
[04:15] chrisdickinson: awesome
[04:16] chrisdickinson: i need to figure out a good way to do more dom-related testing
[04:16] whyme: in browser?
[04:17] SubStack: selenium, I think it is?
[04:17] whyme: YUITest supports event simulation iirc
[04:18] chrisdickinson: well, platoon is designed to be streamed down to browsers in serialized form by a test-driving server
[04:18] sechrist: anybody here have experience with selenium and ie6?
[04:19] EGreg has joined the channel
[04:19] sechrist: I have to support that dinosaur and it's killing me
[04:20] tekky has joined the channel
[04:25] deepthawtz has joined the channel
[04:25] noahcampbell has joined the channel
[04:26] tim_smart has joined the channel
[04:27] nonnikcam has joined the channel
[04:30] whyme: ls
[04:30] whyme: - - sorry
[04:30] ShinMei: .
[04:30] ShinMei: ..
[04:30] ShinMei: p0rn/
[04:40] SubStack: Aikar: added synchronous parsing, tonight no less
[04:40] JusticeFries: sechrist: what are you having issues with?
[04:41] megana has joined the channel
[04:42] micheil has joined the channel
[04:42] megana: Hi Node.js, I'm trying to upload a file and send some form data with it
[04:43] megana: is there anything that can handle this for me???
[04:44] x0xMaximus has joined the channel
[04:48] Aikar: SubStack: nice
[04:49] Aikar: finally got my wifi tethering back fixed
[04:49] Aikar: got stuck in tennesee due to weather canceling all fdlights :/
[04:51] tylerstalder has joined the channel
[04:52] megana: did they frisk you aikar?
[04:52] Aikar: no, i went through the nudie scanner like a good boy
[04:53] megana: eww
[04:53] megana: I'm not doing that
[04:53] megana: There's not even a point to it
[04:54] tilgovi has joined the channel
[04:54] SubStack: ACTION affixes plastic explosives with beveled edges to megana's abdomen
[04:55] megana: or put some sharp plastic in your bag
[04:55] megana: or kung fu
[04:55] megana: or don't even fly, just blow up the hoover dam or something, I mean come on :P
[04:56] SubStack: radio-controlled birds
[04:56] SubStack: like in that movie
[04:56] megana: birds?
[04:56] SubStack: like in that movie: THE BIRDS
[04:57] megana: yeh
[04:58] megana: what's your favorite thing about node.js?
[04:59] cardona507: the fact that i get to use javascript syntax on the server :)
[05:00] megana: do you get annoyed by having a callback jungle?
[05:00] SubStack: javascript accidentally so much right
[05:00] Aria: I don't. (You can tame the callback jungle.)
[05:00] creationix has joined the channel
[05:01] creationix has left the channel
[05:01] cardona507: tame the callback jungle - nice
[05:02] cardona507: "It's a callback jungle - Where the living is harder" 
[05:02] cardona507: -bob marley
[05:02] rburhum has joined the channel
[05:02] megana: callback race? oh what a disgrace
[05:02] Aria: When you've got three or four levels of nesting, it's time to NAME a few of those functions and move them aside.
[05:04] xslashxr has joined the channel
[05:04] isaacs: ruby is hard.
[05:05] megana: how is ruby hard Isaacs?
[05:05] isaacs: megana: it's like the language is optimized for the illusion of readability.
[05:05] megana: oh
[05:05] megana: yeah
[05:05] isaacs: but " " might have huge incredible side-effects.
[05:05] megana: I hate that
[05:05] isaacs: "oh, you instantiated a string.  well well then..."
[05:06] megana: why would I want my numbers to have methods?
[05:06] SubStack: ACTION monkey punches isaacs 
[05:06] josephhitchens has joined the channel
[05:06] Aria: Ruby's fine. It's the users you have to watch out for...
[05:06] isaacs: Aria: yeah.
[05:06] Aria: They try so hard to make Ruby into things it's not, and then call it a "DSL" and pretend that's a good thing.
[05:06] isaacs: yeah.  no.  that's awful.
[05:06] isaacs: that's the worst idea ever.
[05:06] SubStack: Isn't it great how modules extend other modules and builtins in a wide variety of incompatible ways?
[05:06] megana: there's a lot of def in ruby
[05:06] isaacs: you don't need a dsl.  you just need a "l"
[05:06] SubStack: it makes code reuse so much more interesting
[05:07] Aria: Yeah, people doing crazy clever stuff with massive side effects.
[05:07] isaacs: i think even getter/setters was probably a mistake in js
[05:07] SubStack: but see, I am all about crazy clever stuff
[05:07] megana: I like how nodejs proves we don't need crap like domain models :P
[05:07] isaacs: if you can't do it with functions, you don't need to do it.
[05:07] SubStack: but ruby makes it really hard to reuse that clever stuff without breaking other modules
[05:08] isaacs: SubStack: that "clever" stuff is only good if you wrote it.
[05:08] megana: isaacs, what good is polymorphism anyways?
[05:08] cardona507: isaacs: "it's like the language is optimized for the illusion of readability." - 1. why is that bad? 2. whats the illusion?
[05:08] isaacs: cardona507: because people write very literate-style programs.  you read it, and it's like "oh, that's english, I know what that does"
[05:09] isaacs: but it turns out, "readability" in the sense of being able to read a program and know what it does, is only half of the story, and not the interesting half.
[05:09] isaacs: what you really want is a language that lends itself to *unsurprising modifyability*
[05:09] Aria: That too.
[05:09] SubStack: readability isn't so much about the code as it is about the person reading it
[05:09] isaacs: so being readable is a plus, but not required, and not the end of the story.
[05:10] Aria: Though I think the problem is deep knowledge of knowing what it does.
[05:10] Aria: I like to read it and know what the bits under the hood do.
[05:10] Aria: Not just "what's this supposed to accomplish"
[05:10] isaacs: sure
[05:10] SubStack: in that expectations and exposure to different design styles is going to change how you perceive a module's readability
[05:10] isaacs: Aria: that is how i read programs.
[05:10] Aria: Me too.
[05:10] Aria: (And I think that's what leads to surprises when you make changes.)
[05:11] isaacs: Aria: the issue is that, with ruby programs, you often have to trudge through a LOT of code to get to that.
[05:11] Aria: (Because when you cleverly redefine bits to mean entirely other things...)
[05:11] isaacs: yeah
[05:11] Aria: Yes indeed!
[05:11] Aria: .oO(Like me going to fix Markaby recently.)
[05:11] SubStack: mutability!
[05:11] isaacs: with js, you hit a point pretty early that's like, "ok, this is iterating over an array with a function.  i know that, because it's all that "function" and [] can ever mean."
[05:12] cardona507: isaacs: "*unsurprising modifyability*" I need a moment to grok that...
[05:12] isaacs: granted, you CAN be doing something awful and sickening like changing the Array constructor or something.
[05:12] SubStack: cardona507: well you can modify an awful lot in ruby
[05:12] isaacs: cardona507: I mean, "read the program, understand the intent" is part of the problem.  the other part is "have a new idea of an intent, and know how to change the program to change its intent"
[05:12] Aria: Yeah. If you do, you have to be Very Careful.
[05:12] SubStack: method_missing, class_eval, instance_eval
[05:13] SubStack: all manners of deep and dangerous magic
[05:13] isaacs: SubStack: these are not features.  they're bugs.
[05:13] SubStack: eigenclasses too
[05:13] SubStack: isaacs: agree
[05:13] SubStack: harmony proxies > all of that ruby shit
[05:13] Aria: Eigenclasses at least make some sense and are really consistent.
[05:13] Aria: But people make crazy shit with it.
[05:13] isaacs: js has too many features.  ruby is like js squared
[05:14] isaacs: at least js doens't have operator overloading (much)
[05:14] Aria: Heh. Yeah.
[05:14] isaacs: there IS the valueOf method, which can be overridden, and is triggered in specific orders by various numeric operators.  adn toString
[05:15] isaacs: v8: Date.prototype.valueOf = function () { return "YO!" };  var d = new Date();  return 7 + d
[05:15] v8bot: isaacs: SyntaxError: Illegal return statement
[05:15] isaacs: v8: Date.prototype.valueOf = function () { return 13 };  var d = new Date();  return 7 + d
[05:15] v8bot: isaacs: SyntaxError: Illegal return statement
[05:15] dguttman has joined the channel
[05:15] isaacs: v8: Date.prototype.valueOf = function () { return "YO!" };  var d = new Date();  7 + d
[05:15] v8bot: isaacs: "7Mon Dec 13 2010 00:15:56 GMT-0500 (EST)"
[05:16] isaacs: whoa, i guess it doesn't let you do that on Date :)
[05:16] SubStack: builtins are more hardened
[05:16] isaacs: yeah
[05:17] SubStack: oh it's probably doing toString
[05:17] SubStack: v8: Date.prototype.toString = function () { return "YO!" };  var d = new Date(); 7 + d
[05:17] v8bot: SubStack: "7YO!"
[05:17] isaacs: v8: Date.prototype.valueOf = function () { return "YO!" };  var d = new Date();  7 << d
[05:17] v8bot: isaacs: 7
[05:17] isaacs: v8: Date.prototype.valueOf = function () { return 10 };  var d = new Date();  7 << d
[05:17] v8bot: isaacs: 7168
[05:18] isaacs: v8: Date.prototype.valueOf = function () { return 10 };  var d = new Date();  7 > d
[05:18] v8bot: isaacs: false
[05:18] hassox has joined the channel
[05:18] isaacs: v8: Number.prototype.valueOf = function () { return this + 1 } ; 1 + 1
[05:18] v8bot: isaacs: 2
[05:18] isaacs: v8: Number.prototype.valueOf = function () { return this + 1 } ; 1 + new Number(1)
[05:18] v8bot: isaacs: RangeError: Maximum call stack size exceeded
[05:19] isaacs: v8: Number.prototype.valueOf = function () { return 100 } ; 1 + new Number(1)
[05:19] v8bot: isaacs: 101
[05:20] justinlilly: what's the << operator in javascript?
[05:20] justinlilly: bitshift?
[05:21] justinlilly: ACTION assumes so.
[05:21] jashkenas: v8: 100 << 1
[05:21] v8bot: jashkenas: 200
[05:21] SubStack: v8: [3] << [4]
[05:21] v8bot: SubStack: 48
[05:21] mbrochh has joined the channel
[05:21] mbrochh has joined the channel
[05:21] SubStack: coercion!
[05:22] Wyverald1: what do people here think of coffescript?
[05:22] justinlilly: I think its cool, but only if you're interested in a compile step.
[05:22] jashkenas: ACTION grabs popcorn
[05:23] mbrochh_ has joined the channel
[05:24] tprice: v8: 100 << 1 >> 100 << 1
[05:24] v8bot: tprice: 24
[05:25] JusticeFries: Wyverald1: i've thought of using coffeescript as a platform to run js testing with
[05:25] JusticeFries: haven't seriously looked at it
[05:25] Wyverald1: it's nice to play with
[05:26] Wyverald1: I'm just not sure if it should go into production
[05:26] sugardave has joined the channel
[05:26] justinlilly: Why not?
[05:26] Wyverald1: plus, I never really liked python's indentation based blocks...
[05:26] justinlilly: You can theoretically inspect the js output, if necessary.
[05:26] justinlilly: ACTION digs significant whitespace.
[05:27] justinlilly: The main reason I would use coffeescript is because it would provide the language that I expect to be there.
[05:27] Wyverald1: eg. is it stable? I don't like the idea of writing a huge project in coffeescript and later having to port it
[05:27] jashkenas: not just in theory ... the JS is pretty-printed. https://gist.github.com/736830
[05:27] JusticeFries: ooh.
[05:27] justinlilly: ie: I'd like list comprehensions in my code, foreach, etc.
[05:27] JusticeFries: wait, is it 100% JS compliant?
[05:27] jashkenas: Wyverald1: A 1.0 will happen on December 24th, if that's what you're looking for.
[05:27] jashkenas: JusticeFries: what does that mean?
[05:27] bpadalino: v8: 16 >> 96
[05:27] v8bot: bpadalino: 16
[05:27] bpadalino: so weird
[05:27] JusticeFries: as in
[05:27] fmeyer has joined the channel
[05:27] JusticeFries: it'll compile to JS 100% of the time, with no weird crap?
[05:28] jashkenas: All generated JS passes JavaScriptLint, if that's what you're asking.
[05:28] JusticeFries: yep.
[05:28] JusticeFries: exactly what I'm asking. :)
[05:28] jashkenas: The weird crap is mostly temporary variables generated by the compiler.
[05:28] JusticeFries: ah, okay.
[05:28] jashkenas: [a, b, c] = [3, 2, 1]    requires tempvars, for example.
[05:28] Wyverald1: I don't know, but significant whitespace feels too unreliable for me
[05:28] JusticeFries: right.
[05:29] justinlilly: Wyverald1: being a python programmer, I can promise you that its not.
[05:29] matjas has joined the channel
[05:29] justinlilly: If anything, it makes it quite apparent when you're doing something weird.
[05:31] JusticeFries: huh looking at the coffeescript site I like it.
[05:31] rchavik has joined the channel
[05:33] jashkenas: JusticeFries: I added the bigger console, and the "Load" buttons this afternoon, so you can play around with the examples without having to paste them.
[05:33] BHSPitMonkey has joined the channel
[05:33] BHSPitMonkey has joined the channel
[05:33] bruce has joined the channel
[05:34] JusticeFries: excellent.
[05:39] mikeal has joined the channel
[05:41] joelklabo has joined the channel
[05:43] megana: if I have a string like fileInfo[1].title, and it has a value, how could I add it to another object?
[05:43] megana: so object.fileInfo[i].title will have that value
[05:45] dnolen has joined the channel
[05:48] Wyverald1: megana: object.fileInfo=fileInfo ?
[05:49] megana: but I wouldn't know the string ahead of time
[05:50] Wyverald1: I'm not sure what you mean, but object.fileInfo = fileInfo does a reference assignment
[05:50] matjas has joined the channel
[05:53] justinlilly: http://dpaste.com/286069/
[05:54] justinlilly: ^^ anyone have thoughts on how that 3rd test method (in expresso) could look better?
[05:54] justinlilly: or is that as good as it gets? (My javascript style sensibilities aren't tuned yet.)
[05:56] faust45 has joined the channel
[05:57] Wyverald1: bot.register(/.*/, function (client,from,to,msg,matches) {first_match_called = true;});
[05:58] whyme: justinlilly: need assert.called()?
[05:58] Wyverald1: why not just write bot.register(/.*/, function () {first_match_called = true;}); ?
[05:58] Wyverald1: you aren't using the parameters anyway
[05:58] Yuffster has joined the channel
[05:58] justinlilly: Wyverald1: gotcha. Not used to positional arguments being optional :)
[05:59] Wyverald1: yeah, that's not the way in Python, no?
[06:00] justinlilly: correct. positional arguments are mandatory.
[06:00] justinlilly: though you can get around it with some special concessions they have (*args)
[06:00] Wyverald1: destructuring?
[06:00] justinlilly: whyme: that might be helpful. I'm assuming that's another library?
[06:01] justinlilly: If so, I'd like to avoid any more libraries for the moemnt.
[06:01] hassox has joined the channel
[06:02] justinlilly: Wyverald1: not sure what it's called. *args aggregates all positional arguments into a list (named args) and **kwargs gets the keywords args as a dict.
[06:02] whyme: justinlilly: yep, I did one: http://github.com/5long/reut
[06:03] whyme: justinlilly: and this supports assert.async too: http://github.com/chrisdickinson/platoon
[06:03] justinlilly: whyme: Poked around with that the other night.  not sure why I switched back to expresso.
[06:03] mikeal has joined the channel
[06:03] justinlilly: (reut, that is)
[06:04] justinlilly: for now, I'm just going to stick with expresso so I can get something written. Spent too long trying to figure out which tool to use that I could have used to be writing reasonable tests.
[06:04] whyme: yep, expresso is easy to get started 
[06:05] whyme: reut needs a specific pattern and is hard to migrate :(
[06:16] JusticeFries: does jimbastard still come around these parts?
[06:19] aklt has joined the channel
[06:22] hassox has joined the channel
[06:26] mscdex: JusticeFries: yep
[06:26] mscdex: JusticeFries: and he still raps
[06:26] JusticeFries: sweet. i'm waiting patiently to get into nodejitsu. :D
[06:28] noahcampbell has joined the channel
[06:36] achiu has joined the channel
[06:38] justinlilly: http://dpaste.de/skLF/#l42 - having some issues with line 42 here. If I change state to this, I get an error as this apprently referrs to something else. Can anyone explain exactly what's happening there?
[06:38] achiu has joined the channel
[06:39] justinlilly: the error is specifically "TypeError: Object #<an Object> has no method 'register'"
[06:40] justinlilly: ACTION feels like he's missing something fairly important.
[06:40] boaz has joined the channel
[06:45] whyme: justinlilly: .forEach() accepts 2nd arg as `this`
[06:46] tim_smar1 has joined the channel
[06:47] whyme: http://cli.gs/BrhLsW
[06:49] sivy has joined the channel
[06:51] mscdex: the code works for me
[06:51] mscdex: :S
[06:51] aaronblohowiak has joined the channel
[06:51] aaronblohowiak: what is the docco clone that doesnt require pygments ?
[06:51] paulrobinson has joined the channel
[06:52] tim_smart has joined the channel
[06:53] saschagehlich has joined the channel
[06:53] mscdex: justinlilly: this simplified version works for me: https://gist.github.com/738736
[06:53] mscdex: don't know why it doesn't work for you
[06:54] masahiroh has joined the channel
[06:54] tco has joined the channel
[06:54] mscdex: otherwise maybe you can try removing the forEach with a normal for-loop and using `this.register`
[06:57] tek has joined the channel
[06:59] aaronblohowiak: aaronblohowiak: it is dox
[06:59] aaronblohowiak: oh, thanks man.  i always forget that.
[06:59] aaronblohowiak: aaronblohowiak: its okay, me too
[06:59] mscdex: ircretary: tell aaronblohowiak it is dox
[06:59] ircretary: mscdex: I'll be sure to tell aaronblohowiak
[06:59] aaronblohowiak: mscdex++
[06:59] v8bot:  aaronblohowiak has given a beer to mscdex. mscdex now has 1 beers.
[07:00] ben_alman has joined the channel
[07:01] justinlilly: awesome. it was the implicit this object. thanks, whyme.
[07:01] whyme: yw
[07:02] mraleph has joined the channel
[07:06] dguttman has joined the channel
[07:08] qFox has joined the channel
[07:09] Blink7 has joined the channel
[07:10] SamuraiJack has joined the channel
[07:15] derren13 has joined the channel
[07:15] mikeal has joined the channel
[07:21] JimBastard has joined the channel
[07:22] Phyllio has joined the channel
[07:22] langworthy has joined the channel
[07:30] GasbaKid has joined the channel
[07:46] captain_morgan has joined the channel
[07:46] Dreamer3 has joined the channel
[07:47] bahamas has joined the channel
[07:48] virtuo has joined the channel
[07:52] simme has joined the channel
[07:52] themiddleman has joined the channel
[07:53] mraleph has joined the channel
[07:54] ph^ has joined the channel
[07:57] sepehr has left the channel
[08:02] hassox has joined the channel
[08:06] mAritz has joined the channel
[08:07] jspiros has joined the channel
[08:07] EyePulp has joined the channel
[08:08] matjas has joined the channel
[08:09] TomY has joined the channel
[08:11] saschagehlich has joined the channel
[08:15] Jonasbn_ has joined the channel
[08:16] jspiros has joined the channel
[08:17] springify has joined the channel
[08:18] Druid_ has joined the channel
[08:19] faust45 has joined the channel
[08:20] beawesomeinstead has joined the channel
[08:20] beawesomeinstead has joined the channel
[08:23] captain_morgan has joined the channel
[08:24] killfill has joined the channel
[08:29] pifantastic_ has joined the channel
[08:31] mscdex: node.js rules!
[08:31] mikedeboer has joined the channel
[08:32] SubStack: fact
[08:32] SubStack: node.js rules the schools
[08:32] daglees has joined the channel
[08:36] [AD]Turbo has joined the channel
[08:37] geeks_bot has joined the channel
[08:45] mscdex: a bot!
[08:46] ewdafa has joined the channel
[08:46] robmason has joined the channel
[08:48] adambeynon has joined the channel
[08:48] benalman has joined the channel
[08:49] tonio has joined the channel
[08:50] sechrist: so in v8
[08:51] sechrist: if I have a [], and I set foo[1000], does 0-999 actually exist and take up memory?
[08:51] mscdex: v8: var foo = []; foo[1000]; foo.length;
[08:51] v8bot: mscdex: 0
[08:51] mscdex: v8: var foo = []; foo[1000] = 'blah'; foo.length;
[08:51] v8bot: mscdex: 1001
[08:51] mscdex: ^
[08:52] caligula has joined the channel
[08:52] sechrist: well I know that, but I mean behind the scenes
[08:52] sechrist: I have an array growing like that and memory doesn't seem to be increasing
[08:52] mscdex: v8: var foo = []; foo[1000] = 'blah'; foo[5];
[08:52] v8bot: mscdex: undefined
[08:52] [AD]Turbo: hi there
[08:52] mscdex: because they're all set to undefined
[08:52] sechrist: well I am setting them to null
[08:53] sechrist: I have a copy in place reaper thing
[08:53] mscdex: even null takes up space
[08:53] mscdex: iirc
[08:53] sechrist: should I 'delete'? or something?
[08:53] JimBastard has joined the channel
[08:53] mscdex: why not use an object instead of an array if you don't want to create 999 other entries?
[08:54] mscdex: JimBastard: [01:25] <JusticeFries> sweet. i'm waiting patiently to get into nodejitsu. :D
[08:54] sechrist: how would I remove items without making another object?
[08:54] caligula has joined the channel
[08:54] sechrist: or clean it up in size without changing keys around
[08:55] whyme: v8: ary = []; ary[1000] = void 0; ary.length
[08:55] v8bot: whyme: 1001
[08:55] JimBastard: JusticeFries: shiiiit me too
[08:55] mscdex: sechrist: the permanent way is to use delete, but that sends v8 into a slow case so maybe just set it to undefined
[08:55] sechrist: will delete hash[key] suffice for getting rid of it?
[08:55] sechrist: meh
[08:55] SamHasler has joined the channel
[08:55] mscdex: just depends on what your needs are
[08:56] sechrist: it's basically a queue
[08:56] ruxkor has joined the channel
[08:56] mscdex: if it's a queue why not just push and pop?
[08:56] sechrist: well sort of, it's a callback queue, I send out a request with an id, and when I get a reply with that id, I execute that callback
[08:56] mscdex: oh
[08:57] mscdex: i'm doing something like that too with node-oscar
[08:57] sechrist: I have a reap function that works if there are no outstanding callbacks
[08:57] sechrist: and cleans up the array
[08:57] mscdex: i've been using an object and just setting the value at the request id key to undefined
[08:57] sechrist: but if the array is constantly in motion I have no idea how to handle it
[08:57] devtime has joined the channel
[08:57] mikeal has joined the channel
[08:57] mscdex: but then again my range of request ids is limited, so it wouldn't grow that large anyway
[08:57] sechrist: yeah mine are 1-65535
[08:58] sechrist: 16bit reqid
[08:58] mscdex: ah, mine is half that
[08:58] mscdex: 16 bit though
[08:58] sechrist: hmm so I should just use a hash and set them to undefined once returned?
[08:59] JusticeFries: JimBastard: oh hey.
[08:59] JusticeFries: JimBastard: that reddit snafu was a little ridiculous.
[08:59] mscdex: that's what i'm doing so far. i haven't decided yet though if i should run a cleanup function on it after some time
[08:59] sechrist: JimBastard is Julian Assange
[08:59] sechrist: there I said it
[08:59] JusticeFries: haha.
[09:00] JimBastard: internet 
[09:00] sechrist: knock knock
[09:00] whyme: sechrist: better delete instead of set undefined
[09:00] sechrist: but mscdex just said "slow" and "delete" in the same sentence
[09:01] whyme: v8: hash={foo: void 0}; 'foo' in hash
[09:01] v8bot: whyme: true
[09:01] whyme: well I prefer the `in` operator so I have to use delete
[09:02] sechrist: if(hash['foo']) -> if('foo' in hash)?
[09:02] mscdex: if you use undefined just do a typeof check
[09:02] mscdex: well typeof works whether it exists or is undefined
[09:02] whyme: 'foo' in hash returns true if hash.foo is falsy
[09:02] mscdex: er not exists
[09:03] sechrist: hmm so I don't really need a reaper function then
[09:03] sechrist: other than for timeouts on cbs
[09:04] sechrist: this sounds moar efficient
[09:04] ebi: I try to write tests for one of my module with expresso but it has a require() that does a whole lot of stuff. Can I mock out the required module so it get's a stub instead?
[09:06] Zem has joined the channel
[09:06] Zem: hola amigos
[09:07] sechrist: this seems to be working
[09:07] sechrist: well that's pretty cool
[09:08] whyme: ebi: this is how i mock fs module
[09:08] whyme: https://github.com/5long/roil/blob/master/src/file.js#L55
[09:08] teemow has joined the channel
[09:09] mscdex: sechrist: a hash of 60000 values set to undefined is only a few megs more than an empty hash
[09:09] mscdex: so not that big of a deal
[09:09] sechrist: interesting
[09:09] whyme: ebi: and have you checked require.paths ?
[09:10] mscdex: v8: process.memoryUsage()
[09:10] v8bot: mscdex: ReferenceError: process is not defined
[09:10] mscdex: thought so
[09:10] sechrist: but to count items in my hash I have to iterate through and ++
[09:11] sechrist: that's another reason I used a []
[09:11] mscdex: you don't have to
[09:11] whyme: Object.keys(hash).length
[09:11] mscdex: you could do Object.keys(foo).length
[09:11] mscdex: heh
[09:11] sechrist: oh snap
[09:11] ebi: whyme, nope I check that out thank you very much :)
[09:12] mscdex: sechrist: otherwise just keep a counter around, that'd be the most efficient
[09:12] sechrist: wait Object.keys(foo) is inefficient?
[09:12] frodenius: more efficient that for(p in foo) anyway
[09:12] mscdex: i'm sure it's inefficient compared to looking up an integer value
[09:12] frodenius: s/that/than
[09:12] sechrist: oh you mean .length
[09:12] sechrist: eh
[09:13] sechrist: sigh I am prematurely optimizing
[09:13] mscdex: i'm assuming it does some work generating an array of object keys
[09:13] ebi: whyme, so in testing you inject something else for _watchModule eh? This is actually what I do on the client side probably I should just go for that approach, thanks :)
[09:13] mscdex: but a counter variable is easier and faster
[09:13] whyme: ebi: yw :)
[09:14] sechrist: when I add and when I delete I just up an int?
[09:14] sechrist: yeah that works
[09:14] sechrist: well down the int on delete
[09:14] mscdex: yeah
[09:16] MikhX_ has joined the channel
[09:16] tahu has joined the channel
[09:17] aubergine has joined the channel
[09:20] sveimac_ has joined the channel
[09:22] zomgbie has joined the channel
[09:24] mraleph has joined the channel
[09:26] benalman has joined the channel
[09:30] romeo_ordos has joined the channel
[09:30] romeo_ordos has left the channel
[09:33] mikew3c has joined the channel
[09:33] d0k has joined the channel
[09:36] isaacs has joined the channel
[09:36] saschagehlich: v8bot: Math.floor(new Date().getTime()/1000)
[09:36] v8bot: saschagehlich: Use v8: <code> to evaluate code or "`v commands" for a list of v8bot commands.
[09:37] saschagehlich: v8: Math.floor(new Date().getTime()/1000)
[09:37] v8bot: saschagehlich: 1292233039
[09:38] altamic has joined the channel
[09:39] frodenius: saschagehlich㇀ ~~(Date.now()/1e3)
[09:40] frodenius: save the characters!
[09:40] saschagehlich: v8: ~~(Date.now()/1e3)
[09:40] v8bot: saschagehlich: 1292233206
[09:40] saschagehlich: wow, didn't know that
[09:40] frodenius: ;)
[09:42] saschagehlich: v8: 1^3
[09:42] v8bot: saschagehlich: 2
[09:42] saschagehlich: why is 1*1*1 = 2?
[09:42] frodenius: ^ is not Math.pow
[09:42] isaqual has joined the channel
[09:42] frodenius: it's logical xor
[09:42] saschagehlich: ah, didn't know that either :D
[09:43] bzinger has joined the channel
[09:45] sriley has joined the channel
[09:49] aubergine has joined the channel
[09:49] mraleph: frodenius: I would rather use x << 0 instead of ~~x =) 
[09:50] mscdex: but ~~ makes it look like it's on fire!
[09:50] mraleph: but outside of tight loop or on modern JITs that would not probably matter. 
[09:54] papandreou has joined the channel
[09:57] tahu has joined the channel
[09:58] clarkf has joined the channel
[09:59] papandreou: tim_smart: Hey Tim, seems like you're the one that put node-compress into the npm repo. Any chance you can publish a new version? There has been some major bugfixes. I even opened an issue here a while ago: https://github.com/egorich239/node-compress/issues#issue/8
[10:02] ErikCorry has joined the channel
[10:02] benalman has joined the channel
[10:05] augustl has joined the channel
[10:05] sechrist: http://blogs.sitepoint.com/2009/11/12/google-closure-how-not-to-write-javascript/
[10:05] sechrist: this is hot shit
[10:10] benburkert has joined the channel
[10:14] frodenius: that is old shit
[10:15] InsDel has joined the channel
[10:17] guid has joined the channel
[10:18] chapel: what they could have done, instead of trying to lambast google for views, why not submit a patch
[10:18] christophsturm has joined the channel
[10:24] zorzar_ has joined the channel
[10:24] ErikCorry: Riposte to the sitepoint blog:
[10:24] ErikCorry: http://news.ycombinator.com/item?id=937257
[10:24] aubergine has joined the channel
[10:24] ErikCorry: Frankly the caching of .length is a very minor optimization
[10:25] ErikCorry: http://jsperf.com/loops/6
[10:25] ErikCorry: And anyone who mixes in code on the same page that adds enumerable properties to Object.prototype has already lost
[10:25] ErikCorry: Or overwrites 'undefined.
[10:26] sriley: tbh googles frontend code is somewhat woefull
[10:26] mikew3c has joined the channel
[10:27] sriley: mostly invalid html etc
[10:29] benalman has joined the channel
[10:29] mraleph has joined the channel
[10:30] saschagehlich: was micheil here in the past few hours?
[10:32] TomY has joined the channel
[10:35] saschagehlich: mscdex: so, micheil said that node-smtp-client is outdated? :(
[10:35] mscdex: saschagehlich: i guess... well at least his repo
[10:36] saschagehlich: sad... did you see an alternative for that?
[10:36] saschagehlich: otherwise I can't release my beta :(
[10:46] sveimac has joined the channel
[10:49] sveimac has joined the channel
[10:50] kawaz_home has joined the channel
[10:51] benalman has joined the channel
[10:54] stride: saschagehlich: https://github.com/Marak/node_mailer maybe? (haven't tested it though)
[10:54] saschagehlich: stride: that's what I tried out before node-smtp-client - it does not encode the content properly
[10:55] stride: oh, ok
[10:56] antares_ has joined the channel
[10:56] delapouite has joined the channel
[11:00] [AD]Turbo has joined the channel
[11:00] stride: hm. that sitepoint article is mostly picky imho. aside from loops and hash lookups it mostly says that the author doesn't like C developers :)
[11:06] stagas has joined the channel
[11:10] mohiam has joined the channel
[11:13] benalman has joined the channel
[11:17] everzet has joined the channel
[11:21] concernedcitizen has joined the channel
[11:23] nodenode has joined the channel
[11:25] aubergine has joined the channel
[11:25] everzet has joined the channel
[11:30] TomY has joined the channel
[11:32] benalman has joined the channel
[11:35] [[zz]] has joined the channel
[11:36] oal has joined the channel
[11:38] iszak has joined the channel
[11:38] iszak has joined the channel
[11:40] fermion has joined the channel
[11:41] stephank has joined the channel
[11:42] everzet has joined the channel
[11:42] linac has joined the channel
[11:48] tahu has joined the channel
[11:48] everzet has joined the channel
[11:54] benalman has joined the channel
[11:55] gkmngrgn has joined the channel
[11:57] whyme has joined the channel
[11:59] hellp has joined the channel
[11:59] sveimac has joined the channel
[12:01] Kami_ has joined the channel
[12:04] zentoooo has joined the channel
[12:06] kawaz_home has joined the channel
[12:09] demolithion has joined the channel
[12:10] everzet has joined the channel
[12:10] derren13 has joined the channel
[12:13] kenbolton has joined the channel
[12:13] FuzzYspo0N has joined the channel
[12:14] benalman has joined the channel
[12:14] cjm has joined the channel
[12:16] everzet has joined the channel
[12:22] fly-away has joined the channel
[12:22] eee_c has joined the channel
[12:23] aubergine has joined the channel
[12:30] everzet has joined the channel
[12:34] benalman has joined the channel
[12:37] everzet has joined the channel
[12:48] jmar777 has joined the channel
[12:48] ben_alman has joined the channel
[12:54] everzet has joined the channel
[12:54] benalman has joined the channel
[12:54] tahu has joined the channel
[12:55] okuryu has joined the channel
[12:55] stagas: lol just got a free .eu domain
[12:58] mAritz: disregardmeisuckcocks.eu ?
[12:58] stagas: no I got to type it in, I got nodejs.eu
[12:58] stagas: :)
[12:59] stagas: now I need to build a service for it
[12:59] stagas: yay
[12:59] fuzzy_ has joined the channel
[12:59] stagas: it's some christmas offer from a greek domain provider, only 200 offered I guess I was lucky. I saw it on twitter
[13:01] chapel: nice
[13:02] [AD]Turbo has joined the channel
[13:02] chapel: not sure if I told ya stagas but I have the object cache or whatever functioning
[13:02] chapel: atm, after 60 seconds it flushes it, on a per item basis
[13:03] [AD]Turbo has joined the channel
[13:03] chapel: but if subsequent requests for the same thing hit, it resets the timer to 60 seconds again
[13:03] everzet has joined the channel
[13:04] pyrotechnick has joined the channel
[13:04] chapel: also, if there is an update to the record, the next request will force a database call again to refresh the cache
[13:04] pyrotechnick: does anyone know if there's any plans for an xmpp server in node.js?
[13:06] stagas: chapel: cool
[13:08] chapel: tbh, it really wasn't needed, but just trying to learn and get better
[13:08] ianward has joined the channel
[13:08] chapel: though I have a lot to do to make it a useable app in the first place
[13:09] everzet has joined the channel
[13:10] gkmngrgn has left the channel
[13:12] mraleph: pyrotechnick: Russian analogue of Facebook called vkontakte developed their on XMPP server on node.js. But it is close-source afaik
[13:16] romeo_ordos has joined the channel
[13:16] romeo_ordos has left the channel
[13:17] everzet has joined the channel
[13:17] Gruni has joined the channel
[13:18] beawesomeinstead has joined the channel
[13:18] beawesomeinstead has joined the channel
[13:19] pyrotechnick has left the channel
[13:20] erikcorry2 has joined the channel
[13:21] arpegius has joined the channel
[13:23] everzet has joined the channel
[13:25] mscdex: in soviet vkontakte, the source closes you
[13:30] booths has joined the channel
[13:30] everzet has joined the channel
[13:31] pifantastic_ has joined the channel
[13:33] broofa has joined the channel
[13:34] robinduckett has joined the channel
[13:34] robinduckett: afternoon
[13:36] herbySk has joined the channel
[13:38] skohorn has joined the channel
[13:38] MikhX has joined the channel
[13:39] splashs has joined the channel
[13:42] everzet has joined the channel
[13:43] saschagehlich has joined the channel
[13:43] mscdex: robinduckett: morning
[13:44] Ori_P has joined the channel
[13:45] robinduckett: anyone here got one of those chrome netbooks they don't want? :D
[13:47] mscdex: heh
[13:47] mscdex: why not just install chrome os on an existing laptop?
[13:47] mscdex: :P
[13:50] christophsturm has joined the channel
[13:50] BillyBreen has joined the channel
[13:51] tylerstalder has joined the channel
[13:51] strixv has joined the channel
[13:52] mbrochh has joined the channel
[13:53] mape: stagas: auction or no one took it?
[13:53] stagas: mape: it was free
[13:54] mape: So no one had taken it
[13:54] stagas: mape: yeap
[13:54] mape: Hmm guess there are quite a lot of them left
[13:54] stagas: mape: I was surprised. I redirected it to nodejs.org for now :)
[13:54] mape: nodejs.nu and whatnot
[13:54] mape: I just setup the news stuff for http://nodejs.se
[13:55] dnolen has joined the channel
[13:55] mape: Guess I'll see if there is something better to do in the future
[13:56] stagas: mape: I need an ideafor the .eu can't think of one yet. thinking about snippets of code for common problems or what
[13:57] mape: stagas: I want to make node docs that are just a list of all the node api calls
[13:57] mape: and then have people submit examples of how to use them
[13:57] mape: kinda like php.net comments deal but more focused on snippets
[13:57] cjm has joined the channel
[13:58] nonnikcam has joined the channel
[13:59] stagas: that would be cool
[13:59] kjeldahl_ has joined the channel
[14:01] mape: Requires some critical mass or PR pimping but think new people would like it
[14:03] mscdex: it would neat if there were json objects for the api
[14:03] mscdex: then we could take that data and create any kind of layout we want
[14:03] confoocious has joined the channel
[14:04] mscdex: if people want to do that
[14:04] pHcF has joined the channel
[14:04] kriszyp has joined the channel
[14:04] stagas: like how?
[14:04] mscdex: it would have stuff like required and optional parameters, etc
[14:04] stagas: like views?
[14:05] robinduckett: how can I use a httpclient to connect through a socks5 proxy in node?
[14:05] jetienne has joined the channel
[14:05] mscdex: stagas: not exactly, i mean just to have it available in the doc/ directory. markdown files could still be generated from the json during `make docs` or whatever
[14:06] mscdex: it would allow the api to be available in a much more portable format
[14:06] pHcF: people, how can i make a express local variable (to be accessed by my .ejs) available in all my views without using a helper? (actually, to be assync)
[14:06] stagas: oh you're talking about the api docs :)
[14:06] mscdex: stagas: yeah
[14:07] stagas: I was thinking like fs({ action: 'open', file: 'blah', callback: foo}) :P
[14:07] stagas: when you said json objects for the api
[14:08] mscdex: oh heh
[14:08] mscdex: sorry, i was reading what mape said
[14:08] mscdex: and that got me to thinking
[14:08] mscdex: maybe i'll do that today
[14:09] mape: Just needs some simple design, and some moderation
[14:09] mape: And an easy way to replicate the docs into the new format
[14:10] MattJ has joined the channel
[14:14] saschagehlich: okay, who would like to write a cool smtp client for me? :P
[14:14] Ond has joined the channel
[14:18] stagas: mape: the backend should be relatively simple. everything could be user submitted from the web frontend. this way you can have docs and examples on modules, which most of them lack docs right now
[14:20] boaz has joined the channel
[14:20] mscdex: yes! that means i won't have to write docs anymore!
[14:20] mscdex: :D
[14:21] stagas: I'm thinking SO and php.net mix kind of
[14:23] mw has joined the channel
[14:24] malkomalko has joined the channel
[14:25] beta_ has joined the channel
[14:25] jchris has joined the channel
[14:26] aubergine has joined the channel
[14:28] chapel: I think thats a great idea stagas
[14:28] chapel: would be great for general js stuff too
[14:28] chapel: tips and tricks
[14:28] chapel: gather up tons of example functions, just different ways to do things that people commonly do
[14:29] yonkeltron: om. nom. nom.
[14:34] iszak has joined the channel
[14:35] davidsklar has joined the channel
[14:35] booths: So, is there anything I can flush or something to deal w/ the JSON.parse memory usage? I'm parsing like 10k + json objects, even though they're individually small it spikes my rss while it's parsing.
[14:35] everzet has joined the channel
[14:36] zum has joined the channel
[14:37] iszak: it would be nice if node.js had hooks to garbage collection if desired.
[14:37] zum has joined the channel
[14:37] stagas: booths: combine a bunch in an array before parsing maybe?
[14:37] postwait has joined the channel
[14:38] booths: stagas: You mean make an array of the json strings, and then json.parse the array?
[14:38] gf3 has joined the channel
[14:40] stagas: booths: yes and then: JSON.parse('[' + json_array.join(',') + ']') though that's a bit hackish :)
[14:40] stagas: booths: or try eval
[14:40] stepheneb has joined the channel
[14:40] booths: stagas: That's an interesting approach, might give that a try. Thanks.
[14:41] akahn has joined the channel
[14:41] mraleph: stagas: bad recommendation with eval (at least for modern V8 ver >= 2.5.3)
[14:42] stagas: iszak: you can start node like this: node --expose_gc app.js   and then call gc() inside your app
[14:42] iszak: fine grain control?
[14:42] iszak: or it doesn't happen.
[14:42] TheEnd2012 has joined the channel
[14:42] TheEnd2012 has left the channel
[14:43] stagas: mraleph: well he can try, if it works, why not?
[14:43] mraleph: stagas: because for V8 ver < 2.5.3
[14:44] mraleph: JSON.parse essentialy uses eval inside
[14:44] iszak: When are we getting crankshaft?
[14:45] mraleph: eval creates a code objects which seat in code space, which is collected only on major collections.
[14:45] mraleph: JSON.parse in V8 >= 2.5.3 uses separate JSON parser which creates json objects directly avoiding this overhead
[14:46] mraleph: also eval sucks performance out of enclosing scope.
[14:46] Insanity5902 has joined the channel
[14:46] paulrobinson has joined the channel
[14:46] booths: I assume 2.5.3 is the node version, not the v8 version, right?
[14:47] robinduckett: 2.5.3 is v8
[14:47] mraleph: booths: nope it is V8 version. I know nothing about node versions 
[14:47] femtoo has joined the channel
[14:47] robinduckett: v0.2.5 or so for node
[14:47] robinduckett: although mine says it's still 0.2.4
[14:47] iszak: crankshaft anyone?
[14:47] mraleph: iszak: it is already in node HEAD is not it?
[14:48] iszak: I don't know, is it? I can't tell, I should check it out.
[14:48] booths: So, how how would i find what v8 version I'm using, because it sounds like that's the issue from what mraleph is saying
[14:48] mraleph: booths: just look into deps\v8\src\version.cc
[14:48] robinduckett: v8 versions are bound to node
[14:49] booths: thanks
[14:50] mraleph: I think node eventually should provide JSON.parse that will operate on buffers directly.
[14:51] jvolkman_ has joined the channel
[14:51] mraleph: otherwise you still have overhead of copying Buffer data into V8 heap before parsing it.
[14:51] stagas: and a bufferify method
[14:54] amacleod has joined the channel
[14:55] iszak: should I go nightly build?
[14:55] jmar777: parsing JSON from a (utf8) buffer isn't too bad. sadly I have to be "that guy" and not share the code as it's proprietary, but I've got a heavily-commented 90-liner for that
[14:55] iszak: I mean it's not like the API changes much
[14:56] mraleph: iszak: nobody can predict whether you are going to benefit from CS or not.
[14:56] iszak: CS?
[14:57] iszak: oh yes.
[14:57] aheckmann has joined the channel
[14:58] iszak: I think someone should benchmark it.
[14:58] mischief has joined the channel
[14:58] mischief has joined the channel
[14:59] Ond: Someone already has
[14:59] iszak: link?
[14:59] iszak: Please.
[14:59] ben_alman has joined the channel
[14:59] Cowbook has joined the channel
[15:00] mraleph: iszak: even if someone benchmarks it interpreting results is not easy. this all is highly dependent on the code you have. 
[15:00] ChosenOne has left the channel
[15:00] iszak: of course.
[15:00] iszak: but some benchmark is better than none.
[15:00] jmar777: this is only semi-related, but kriszyp seems to have noted that eval is significantly faster than JSON.parse (https://github.com/kriszyp/multi-node/blob/master/lib/multi-node.js#L116)
[15:01] jmar777: no defense given in the code comment there, but he may have some metrics lying around
[15:01] paulrobinson has joined the channel
[15:01] piscisaureus has joined the channel
[15:02] Ond: http://groups.google.com/group/nodejs/msg/c6a69a2987b85e97?pli=1
[15:02] Ond: iszak ^
[15:02] mraleph: jmar777: maybe he benchmarked it incorrectly by passing the same string again and again. there is a compilation cache there for eval :-)
[15:03] iszak: Thanks onar 
[15:03] iszak: Ond, *
[15:03] bzinger has joined the channel
[15:03] rwaldron_ has joined the channel
[15:03] mraleph: jmar777: for modern V8 I expect JSON.parse to be faster and it definitely has a better memory usage
[15:03] iszak: no pretty graphs :(
[15:03] mraleph: and that is only Hello World benchmark
[15:03] jmar777: mraleph: sounds like a plausible explanation... i can't think of any reason off the top of my head for JSON.parse to be significantly slower. I guess technically JSON is a little more stringent than object literal syntax, so it may have more validation requirements
[15:04] iszak: see - that's hardly a benchmark then
[15:05] figital has joined the channel
[15:05] jetienne has joined the channel
[15:08] chrischris has joined the channel
[15:10] kriszyp: I think I just got the eval faster than JSON.parse results when using the same string repeatedly (V8 must cache eval strings), but I think JSON.parse is really faster, normally
[15:10] chrischr_ has joined the channel
[15:11] cferris has joined the channel
[15:12] jmar777: kriszyp: ahh. sorry if I took your code comment out of context there. I just remember seeing it when you were helping me with the stream framing
[15:13] xla has joined the channel
[15:15] kriszyp: I think I had misunderstood earlier tests
[15:16] pifantastic_ has joined the channel
[15:16] trotter has joined the channel
[15:17] augustl_ has joined the channel
[15:19] danoyoung has joined the channel
[15:19] jchris has joined the channel
[15:20] isaqual has joined the channel
[15:21] TomY has joined the channel
[15:21] EyePulp has joined the channel
[15:26] stagas: is it possible that http.createClient could be leaking?
[15:26] isaqual has joined the channel
[15:26] matt_c has joined the channel
[15:28] chapel: hmm
[15:28] chapel: any way to profile it?
[15:29] stagas: dunno
[15:31] slaskis has joined the channel
[15:32] robotarmy has joined the channel
[15:32] jamund has joined the channel
[15:32] tisba has joined the channel
[15:32] bingomanatee has joined the channel
[15:34] akahn has left the channel
[15:35] brianleroux has joined the channel
[15:36] matt_c has joined the channel
[15:38] brianleroux has joined the channel
[15:39] joelklabo has joined the channel
[15:39] softdrink has joined the channel
[15:40] eee_c has joined the channel
[15:43] booths: Is there a way to extend the socket.io timeout that I'm just missing. I tried adding {websocket: {closeTImeout: 16000}} but that seems to have no affect.
[15:43] BillyBreen has joined the channel
[15:47] geeks_bot1 has joined the channel
[15:48] eee_c1 has joined the channel
[15:48] StM has joined the channel
[15:48] geeks_bot has joined the channel
[15:50] geeks_bot has joined the channel
[15:51] boaz_ has joined the channel
[15:52] aubergine has joined the channel
[15:57] robinduckett: booths: i've never had a timeout
[15:57] brianleroux has joined the channel
[15:58] booths: robinduckett: well, it's an extreme case situation, but parsing like 8k objects client side seems to lock up the browser long enough to where it disconnects.
[15:59] daniellindsley has joined the channel
[15:59] deepthawtz has joined the channel
[15:59] foxulet has joined the channel
[16:00] jchris has joined the channel
[16:00] herbySk has joined the channel
[16:01] abiraja has joined the channel
[16:01] brianleroux has joined the channel
[16:02] mies has joined the channel
[16:03] foxulet: Hi guys, anyone got a free minute ? I can't figure out if it's possible to set the depth limit to JSON.stringify, thanks.
[16:03] dguttman has joined the channel
[16:03] ewdafa has joined the channel
[16:05] robinduckett: booths: if you're parsing that much shit client side you're doing it wrong
[16:05] jmar777 has joined the channel
[16:05] robinduckett: booths: and if you can't figure it out any other way, you need to parse it in batches so that you don't interfere with the client / server heartbeats
[16:05] booths: robduckett: i'm not trying to fix parsing that many objects, just trying to figure out why it's not letting me set the options.
[16:07] possibilities has joined the channel
[16:07] tjholowaychuk has joined the channel
[16:08] robinduckett: booths: not a clue, check the source code
[16:11] Ori_P has joined the channel
[16:12] stephank` has joined the channel
[16:12] nefD has joined the channel
[16:15] jaw6 has joined the channel
[16:16] cafesofie has joined the channel
[16:17] sonnym has joined the channel
[16:17] mischief has joined the channel
[16:17] zum has joined the channel
[16:17] skohorn has joined the channel
[16:17] mikedeboer has joined the channel
[16:17] jesusabdullah has joined the channel
[16:17] tprice has joined the channel
[16:17] ivan has joined the channel
[16:17] MrNibbles has joined the channel
[16:17] kgf has joined the channel
[16:17] sideshow has joined the channel
[16:18] sonnym has joined the channel
[16:19] jesusabdullah has joined the channel
[16:21] tapwater has joined the channel
[16:24] Phyllio has joined the channel
[16:25] JusticeFries has joined the channel
[16:25] foxulet: Hi guys, anyone got a free minute ? I can't figure out if it's possible to set the depth limit to JSON.stringify, thanks.
[16:26] JusticeFries has joined the channel
[16:29] mraleph: foxulet: it do not think it is possible
[16:30] fangel has joined the channel
[16:30] mraleph: sigh... damn typos are killing me.
[16:31] SubStack: foxulet: fortunately stringification is quite a bit easier than parsing if you roll your own implementation with custom behavior
[16:31] SubStack: https://github.com/substack/js-traverse/blob/master/examples/stringify.js 
[16:31] tjholowaychuk: foxulet: or you could traverse and null-out the depth you are looking for
[16:31] tjholowaychuk: before passing
[16:32] SubStack: also that!
[16:32] foxulet: I guess the null out part would be best, or replace it with "Content truncated"
[16:33] tjholowaychuk: foxulet: something like that, whatever works for you there
[16:33] foxulet: I'm actually working on a little logger
[16:33] SubStack: oh snap, just do this:
[16:34] SubStack: var Traverse = require('traverse'); Traverse([[[[[[[1]]]]]]]).map(function (x) { return this.level <= 3 ? x : null }).value
[16:34] SubStack: seems to work
[16:34] pHcF: guys, any idea about how to call a function from my ejs in an assync way?
[16:34] SubStack: then JSON.stringify the result of course
[16:34] MikhX has joined the channel
[16:35] brianler_ has joined the channel
[16:35] aurynn has joined the channel
[16:35] foxulet: SubStack: Thank you :)
[16:37] brianleroux has joined the channel
[16:38] boaz_ has joined the channel
[16:39] Max-Might has joined the channel
[16:42] SamHasler has joined the channel
[16:46] Vertice: in node.js, is the response.write call asynchronous ?
[16:46] Vertice: why i am asking, is i wrote a form layer, that will emit a 'success' event when the form is validated
[16:46] Vertice: one of the things that needs to be done in these listeners is to do response.redirect('/new/path')
[16:47] Vertice: but in the case of something with db access
[16:48] tjholowaychuk: so you are trying to redirect after having called write() a few times?
[16:48] Vertice: ie: FormObj.on('success', function(req, res) { db.save(data, function(err, data) { res.redirect('/' . data._id); } ); });
[16:48] Vertice: tjholowaychuk: it emits success on the form
[16:48] Vertice: and if it reaches back to the process method
[16:48] Vertice: it renders
[16:49] Vertice: (ie: in the case of an invalid form)
[16:49] mjr_: res.write() is async, as are all write calls on streams.
[16:49] Vertice: at the moment it just renders the page again, and then does the redirect after (which fails because of headers)
[16:49] Vertice: and it has no callback i can use
[16:49] Vertice: to see when it's done ?
[16:49] yonkeltron: just trying to read a file i'm getting this error and i have no idea how to go about fixing it: http://pastebin.com/GnuybM9Q
[16:49] spoobie has joined the channel
[16:49] mjr_: You need to get something back from the other side
[16:50] mjr_: That's the only way to know in a TCP system.
[16:50] yonkeltron: could someone take a peek and tell me where i can look to try and solve it?
[16:50] mjr_: HTTP makes this easy though, with its request/response cycle.
[16:50] Vertice: even inside a single request
[16:50] dmcquay has joined the channel
[16:50] torvalamo has joined the channel
[16:50] Vertice: ?
[16:50] tjholowaychuk: Vertice: just dont write() anything until the form is validated?
[16:50] webben: Vertice: The request still has to go over the network.
[16:50] Vertice: form is validated, it's now being submitted
[16:50] tjholowaychuk: and then output the success or error message(s)
[16:51] Vertice: and as part of the submission i want to have it redirect on success
[16:51] mjr_: There is no way to know if the other end of a write has received your data until you get some kind of response.  
[16:51] mjr_: The HTTP response code is fine.
[16:51] Vertice: is there a ob_flush then ?
[16:51] tjholowaychuk: Vertice: yeah, so just submit -> validate -> (pass? redirect : output-errors)
[16:51] Vertice: basically
[16:51] tjholowaychuk: i dont see the issue lol
[16:52] Vertice: what it's doing atm, is just showing the same page again
[16:52] tjholowaychuk: you can send some json after to the page saying { redirect: '/foo, after: 5000 }
[16:52] tjholowaychuk: and use that via js
[16:52] tjholowaychuk: to show the page for a little and redirect
[16:52] GasbaKid has joined the channel
[16:53] tjholowaychuk: or meta refresh
[16:53] Vertice: mmm
[16:53] Vertice: i think i have an idea
[16:53] sprout has joined the channel
[16:55] jchris has joined the channel
[16:56] tylerstalder has joined the channel
[16:56] mikeal has joined the channel
[16:57] stagas: made a favicon for nodejs.org: http://dl.dropbox.com/u/396087/favicon.html
[16:57] aubergine has joined the channel
[16:57] jspiros has joined the channel
[16:57] softdrink: ACTION makes out with socket.io
[16:58] springmeyer has joined the channel
[16:59] kkaefer: stagas: http://i.kkaefer.com/node%281%29_--_evented_I_O_for_V8_JavaScript-20101213-185853.png <-- doesn't look good in the tab
[16:59] stagas: kkaefer: yeah it does better with darker bgs
[17:00] kkaefer: but nice otherwise; maybe you should make the bg dark, not transparent
[17:00] springmeyer has joined the channel
[17:01] isaqual has joined the channel
[17:02] stagas: http://dl.dropbox.com/u/396087/favicon-dark.html
[17:02] stagas: uses the same bg as nodejs.org's bg
[17:03] stagas: but I like the transparent one better
[17:03] isaqual: Can node be good for parsing huge csv files? Is it more powerful than php for that job ?
[17:04] abiraja has joined the channel
[17:04] MikhX has joined the channel
[17:05] beawesomeinstead has joined the channel
[17:05] beawesomeinstead has joined the channel
[17:07] brianleroux has joined the channel
[17:09] ph^ has joined the channel
[17:10] cloudhead has joined the channel
[17:10] eee_c has joined the channel
[17:10] stagas: kkaefer: can you test this? http://dl.dropbox.com/u/396087/favicon-shadow.html
[17:12] jmar777 has joined the channel
[17:12] dtrasbo has joined the channel
[17:13] jvolkman__ has joined the channel
[17:13] d0k has joined the channel
[17:13] aconbere has joined the channel
[17:13] zomgbie has joined the channel
[17:14] jonaslund has joined the channel
[17:15] jonaslund: a small Q, any idea if there is going to be any "binary" support in the base dist?
[17:15] Aikar: isaqual: prolly same as fopen/fgetcsv in php in terms of resources as thats buffered. youll have async buffered read in node so yes it should be a lil better 
[17:15] stephank has joined the channel
[17:16] Aikar: jonaslund: base dunno, but substacvk released a binary module the other day
[17:16] yonkeltron: can someone run this for me and tell me what error they get? http://pastebin.com/jx80DDTv
[17:16] Aikar: npm install binary
[17:16] jonaslund: i'm mostly thinking about writing numbers (double prec) to binary,etc.. the JS only libs are well.. slow :)
[17:16] jonaslund: Aikar: cool, i'll look at it
[17:16] jonaslund: Aikar: i was wondering about the base dist since i use win on my workstation
[17:16] Aikar: jonaslund: for building binary buffers, he also has a library 'put'
[17:16] Aikar: npm install put
[17:17] pHcF: tjholowaychuk: you there?
[17:17] Aikar: the binary module is for reading buffers
[17:17] isaqual: Aikar: Thanks. Currently my parsing scripts takes 20-30 minuts per shot so any boost can be good :)
[17:17] jonaslund: yeah i figured. doesn't make that much sense otherwise :D
[17:17] tjholowaychuk: pHcF: yup
[17:17] Aikar: SubStack: imo should combine put into binary, put seems weird name lol
[17:17] pHcF: tjholowaychuk: can i pm you?
[17:17] tjholowaychuk: sure
[17:17] SubStack: perhaps!
[17:18] Aikar: then binary could be for all things binary ;)
[17:18] SubStack: but how would that work, usage wise?
[17:18] Aikar: maybe binary.build().word32le(322).buffer();
[17:18] jonaslund: maybe i should bite the bullet and start building node myself :P
[17:18] jonaslund: (or does npm work with windows?)
[17:19] Aikar: and binary.parse().word32le('bar').tap(); ?
[17:19] Aikar: how did you add the sync method btw, i ahavent had a chance to look at it
[17:19] jonaslund: (though i guess it's all cygwin based)
[17:19] isaacs has joined the channel
[17:19] Aikar: jonaslund: id recommend downloading virtualbox and run a CentOS VM under windows
[17:20] Aikar: that way you can still use windows but run it under linux
[17:20] Aikar: centos was fairly easy to install, just on the install setup over the netinstall.iso, i had to uncheck all packagesd before installing as yum blew up?
[17:21] Aikar: id recommend using netinstall.iso as its quick install in like 30 mins
[17:21] sriley: cygwin works fairly well
[17:21] jonaslund: already got a debian vbox actually
[17:22] fermion has joined the channel
[17:22] broofa has joined the channel
[17:22] Aikar: ah ok, i started on centos so ive stuck with it :p
[17:22] danoyoung has left the channel
[17:22] msekimura has joined the channel
[17:22] possibilities has joined the channel
[17:22] broofa has joined the channel
[17:22] Aikar: man being in a diff timezone is throwing me off
[17:23] Aikar: pc still says 12:23 lol
[17:23] Aikar: got stuck in TN due to weather cancelling our connection flight :/
[17:23] torvalamo has joined the channel
[17:23] cardona507 has joined the channel
[17:23] Tidwell has joined the channel
[17:23] jonaslund: hmmm
[17:24] jonaslund: how hard is to write V8 bindings?
[17:24] Aikar: you mean a custom node module?
[17:24] jonaslund: yeah
[17:24] Aikar: check api docs theres a nexample
[17:24] SubStack: Aikar: the sync stuff just returns self instead of using chainsaw
[17:24] Aikar: its simple actually
[17:24] jvolkman_ has joined the channel
[17:24] jonaslund: binary looks simple to use, but how is the perf ?
[17:25] jonaslund: ACTION would be thinking if pre-declaring the binary mappings for maximum performance
[17:25] SubStack: well I have some stuff in perf/
[17:25] jonaslund: though.. for many file formats that binary module would be sweet
[17:25] rauchg_ has joined the channel
[17:25] jonaslund: i'm mostly in need of fast marshalling right now :)
[17:26] jonaslund: (parsing the flash format would be nice with that binary module i think :))
[17:26] SubStack: oh sweet, parse is quite a bit faster since it doesn't use the event system
[17:26] SubStack: faster than bufferlist too
[17:26] SubStack: (my previous binary parsing module)
[17:26] Aikar: SubStack: ok so you already got a .parse for sync, maybe switch the async to trigger anytime tap is called?
[17:27] SubStack: Aikar: you can still nest chains inside tap()
[17:27] SubStack: with the sync stuff
[17:27] SubStack: and loops still work
[17:28] SubStack: async is just for streams where you might not have all the data yet
[17:28] SubStack: and the module needs to wait for the data to arrive
[17:28] jonaslund: SubStack: yeah.. i'm not really thinking of "parsing" though :)
[17:29] Aikar: im not sure under what context youd need the async method for a buffer object. maye get rid the binary() method and make it binary.parse(), binary.stream() for async, and binary.build()?
[17:29] SubStack: could work
[17:29] SubStack: binary() could do automatic detection
[17:29] Aikar: true
[17:29] SubStack: for stream and parse
[17:30] Aikar: modules rather new enough tho i dont think you need to worry about keeping backwards compart
[17:30] Aikar: compat
[17:30] Aikar: id almost opt to say not support binary() just to keep the usage syntax self describing
[17:30] ivan has joined the channel
[17:31] yonkeltron: tjholowaychuk: can i ask a quick question about how to go about debugging an issue i'm having?
[17:31] tjholowaychuk: yonkeltron: sure
[17:32] yonkeltron: tjholowaychuk: running this code: http://pastebin.com/jx80DDTv
[17:32] mischief has joined the channel
[17:32] yonkeltron: i get this error: http://pastebin.com/FUhm7qba
[17:32] Aikar: SubStack: agreed?
[17:32] yonkeltron: when i should get this error: http://pastebin.com/vUr9wzLF
[17:33] yonkeltron: and i get the error i should get when i run it on a diff machine
[17:33] tjholowaychuk: why are you shooting for that error? haha use __dirname + '/test_script.js'
[17:33] Aikar: or require.resolve('./test_script')
[17:34] yonkeltron: ok fine
[17:34] yonkeltron: but
[17:34] yonkeltron: not the point
[17:34] yonkeltron: i'm getting some sort of a parse or syntax error
[17:34] yonkeltron: when i should be getting file not found
[17:35] Aikar: using .3.x? syntax for that stuff changed to require('vm')
[17:38] yonkeltron: v0.2.5
[17:38] noahcampbell has joined the channel
[17:38] slloyd has joined the channel
[17:39] mjr_ has joined the channel
[17:40] wilmoore has joined the channel
[17:40] eee_c has joined the channel
[17:41] Gruni has joined the channel
[17:43] yonkeltron: dammit
[17:43] yonkeltron: the error was in my script that it tried to load
[17:43] yonkeltron: ok
[17:43] yonkeltron: so
[17:43] synoptase has joined the channel
[17:43] mischief has joined the channel
[17:43] yonkeltron: that tells us something
[17:43] synoptase has left the channel
[17:44] kkaefer: isaqual: yes, you can parse csv files with js pretty fast
[17:44] yonkeltron: shitty error messages when loading scripts
[17:44] kkaefer: isaqual: but you can do pretty much the same with PHP too
[17:44] yonkeltron: tjholowaychuk, Aikar: but new error
[17:44] isaqual: kkaefer: I was just wondering is there any benefetis comparing to php
[17:44] benburkert has joined the channel
[17:45] kkaefer: isaqual: it depends on what you want to do with the data
[17:45] isaqual: kkaefer: and i allready have done that with php. But it hurts :) Takes about half hour per parse.
[17:45] isaqual: kkaefer: basically parse and the dump to mysql.
[17:46] kkaefer: isaqual: the best approach is probably to determine what the bottleneck is
[17:46] kkaefer: isaqual: e.g. is it the disk i/o while reading the file
[17:46] kkaefer: network while connectin to the database?
[17:46] kkaefer: database i/o?
[17:47] isaqual: good point
[17:47] kkaefer: isaqual: but it's probably wise to start optimizing with mysql
[17:47] kkaefer: isaqual: e.g. disabling indexes in the table
[17:47] isaqual: i think disk io is biggest neck
[17:47] kkaefer: before starting to insert rows
[17:47] kkaefer: and grouping insert queries
[17:47] kkaefer: e.g. insert into ... values (..), (...), (...)
[17:47] isaqual: mysql tables are  allready fine tuned.
[17:48] kkaefer: isaqual: nah, I mean: disable keys before inserting, reenable after you're done
[17:48] kkaefer: that way mysql doesn't have to constantly update the keys while inserting
[17:48] isaqual: mmm.. that is something i would try.
[17:48] steffkes has joined the channel
[17:48] jonaslund: hmmmmmmm
[17:49] kkaefer: isaqual: do you group queries?
[17:49] jonaslund: is there any module that supports embedding code directly via TCC ?
[17:49] jonaslund: C code
[17:50] jonaslund: (kinda small prob though that the V8 bindings is c++ :))
[17:51] kkaefer: isaqual: I don't think php is the bottleneck here; optimizing the mysql queries is probably key here
[17:51] mape: Hmmm google.com totally borks jsdom :/
[17:51] ossareh has joined the channel
[17:51] sth: mape: that'll be because Google does't close their tags
[17:51] sriley: i wouldnt be too suprised, googles frontend code is woefull
[17:52] jonaslund: http://search.cpan.org/~sisyphus/Inline-0.46/C/C.pod <- kinda like that
[17:52] yozlet has joined the channel
[17:52] mscdex: woot, i gots the buffer module api doc json-ified
[17:52] mape: sth: Well yeah, but would be nice to have jsdom be resiliant like that
[17:52] isaqual: kkaefer: What do you actually mean by grouping ?
[17:52] sriley: btw is there a decent way to debug in node.js, breakpoints step though code etc
[17:52] tjholowaychuk: mape: htmlparser is being a bitch for me too
[17:52] stagas: mscdex: manually or automatically? :)
[17:53] mape: Yay! First good reason to use bing :P
[17:53] mape: I just started building a let this thing loose and it will harvest good anon proxys for me script
[17:53] sth: sriley: node-inspector with node 0.3.X
[17:53] derren13 has joined the channel
[17:53] sth: It's pretty awesome
[17:53] cagdas has joined the channel
[17:54] mscdex: stagas: manually of course, since there is no way to easily parse the current docs for the various details like return values and types, parameter types, default values, etc
[17:54] mscdex: but like i said, you could easily automatically write the docs from the json data
[17:54] kkaefer: isaqual: INSERT INTO foo VALUES (1, 'test'), (2, 'bar'), (3, 'baz');
[17:55] kkaefer: isaqual: i.e. don't run a query per line
[17:55] kkaefer: but one query for serveral lines
[17:55] sriley: cheers, ill take a poke at it
[17:55] kkaefer: also, http://dev.mysql.com/doc/refman/5.5/en/insert-delayed.html might be interesting
[17:56] slaskis: tjholowaychuk: did you ever take a crack at ejs stack traces?
[17:56] tjholowaychuk: slaskis: nope didnt have time yet sorry
[17:57] slaskis: tjholowaychuk: oh ok, no rush just curious :)
[17:57] tjholowaychuk: slaskis: if you want to / have time you could reference jade. basically you just need an object with .lineno, and buffer .lineno++ in the template
[17:57] tjholowaychuk: and catch errors and then take a slice of the template source
[17:57] tjholowaychuk: and then re-throw or whatever
[17:58] aubergine has joined the channel
[17:58] slaskis: tjholowaychuk: hmm, it does sound pretty easy. i'll have a look at it
[17:58] tjholowaychuk: slaskis: yup it is
[17:58] kkaefer: isaqual: you can probably have 50 or more value groups/lines per query; I don't know what the exact number is, though
[17:58] isaqual: kkaefer: Yeah, my queries are not grouped
[17:59] aubergine_ has joined the channel
[17:59] Druid_ has joined the channel
[18:00] ossareh has joined the channel
[18:00] tjholowaychuk: htmlparser has some of the most unreadible js ive ever seen haha, this is fun
[18:02] saschagehlich has joined the channel
[18:03] arpegius has joined the channel
[18:03] cnus8n has joined the channel
[18:03] micheil has joined the channel
[18:04] SubStack: Aikar: pow new binary
[18:05] SubStack: ok now back to actually using this module to build stuff
[18:05] matjas has joined the channel
[18:06] Aikar: lol
[18:07] jmar777: isaacs: did you happen to get a chance to look at the url.parse patch? http://groups.google.com/group/nodejs-dev/browse_thread/thread/d926c3ab9e96d470
[18:07] SubStack: Aikar: I left the put name though :p
[18:07] SubStack: Binary.put() sounds pretty legit
[18:08] cjm has joined the channel
[18:12] mr_daniel has joined the channel
[18:13] Aikar: SubStack: alias .build to put? ;) 'building a buffer' lol
[18:14] sechrist has joined the channel
[18:15] sveisvei has joined the channel
[18:15] mape: Isn't jsdom suppose to execute inline js? things like document.write
[18:16] joelklabo has joined the channel
[18:17] xslashxr has joined the channel
[18:19] gkatsev: There was a thread on the mailing list about it.
[18:19] Aikar: SubStack: also maybe add dwordle to map to word32le, qwordle to go to word64le, bytele to word8le, wordle to word16le, and then .word .byte .dword .qword map to their le versions. i do some minor C++ work so it threw me off seeing word for 32bit lol. binary.parse(buf).byte('a').word('b').dword('c').qword('d').vars makes a alot more sense to me
[18:20] reid has joined the channel
[18:20] gkatsev: Apparently, it only does that sometimes or something.
[18:20] tjholowaychuk: mape: it does by default
[18:21] tjholowaychuk: there are some options to disable (which is what I wanted as the default)
[18:21] sechrist: I <3 binarY
[18:21] slaskis: tjholowaychuk: does the ejs tests work for you? 
[18:21] mape: tjholowaychuk: Hmm seems like it doesn't on the page I use it on
[18:21] mape: Guess I'll have to use the good ole regex :S
[18:21] tjholowaychuk: slaskis: yup. you need to git submodule update --init and then make test
[18:22] slaskis: oh, ok
[18:22] benburkert has joined the channel
[18:23] bingomanatee has joined the channel
[18:23] aguynamedben has joined the channel
[18:25] herbySk has joined the channel
[18:27] brianleroux has joined the channel
[18:27] sriley has left the channel
[18:29] sh1mmer has joined the channel
[18:30] jpick has joined the channel
[18:30] gkatsev: mape: https://groups.google.com/d/topic/nodejs/52ItY50BCIA/discussion
[18:31] mape: gkatsev: Hmm 
[18:31] creationix has joined the channel
[18:32] chrisdickinson: anyone run into EFAULT errors in node?
[18:35] lowik has joined the channel
[18:37] vnguyen has joined the channel
[18:37] jvolkman__ has joined the channel
[18:37] tahu has joined the channel
[18:38] sechrist has joined the channel
[18:38] stephenjudkins_ has joined the channel
[18:38] bruce has joined the channel
[18:38] msekimur_ has joined the channel
[18:39] booths has joined the channel
[18:40] fermion has joined the channel
[18:40] pquerna: survey: do people know / remember what the OSI model is?
[18:42] creationix has joined the channel
[18:43] msekimura has joined the channel
[18:43] creationix: pquerna: yes, why
[18:43] pquerna: just wondering how much of it i need to cover at node camp.
[18:43] creationix: (disclaimer, I took undergrad networking just a year ago)
[18:43] pquerna: how many people won't remember why tcp is different from udp
[18:43] SubStack: why cover OSI at all?
[18:44] yonkeltron: can you pass an argument to require?
[18:44] yonkeltron: other than the module you want to load?
[18:44] SubStack: OSI is not very important for understanding TCP and UDP
[18:44] pquerna: i guess
[18:44] yonkeltron: agreed
[18:44] creationix: pquerna: the problem with osi is that it's not how the internet really works
[18:44] pquerna: well
[18:44] pquerna: i mean
[18:44] pquerna: it is, kinda.
[18:44] creationix: it was the idea
[18:44] pquerna: at some level :)
[18:44] creationix: but in reality, it's much fewer layers
[18:44] pquerna: true
[18:45] SubStack: what's the one with 4 layers?
[18:45] pquerna: the ip model
[18:45] creationix: yep
[18:45] creationix: http://en.wikipedia.org/wiki/File:UDP_encapsulation.svg
[18:45] creationix: I like that diagram
[18:46] creationix: 4 layers is plenty I think
[18:46] shripadk has joined the channel
[18:46] pquerna: k.
[18:46] msekimur_ has joined the channel
[18:46] pquerna: i'm just not sure about this auidence
[18:46] ossareh has joined the channel
[18:46] creationix: even my graduate professor said that OSI was worthless other than knowing what it means for job interviews
[18:46] creationix: and that's in academia
[18:46] Phyllio has joined the channel
[18:46] pquerna: hah
[18:46] micheil: wasn't OSI the european one?
[18:46] liar has joined the channel
[18:47] creationix: when I took cisco classes a decade ago, they really stressed osi
[18:47] jvolkman_ has joined the channel
[18:47] yonkeltron: i've heard some pretty strong criticisms of OSI, actually
[18:48] pquerna: yes, thats how i learned osi too. cisco ccna.
[18:48] creationix: the only useful thing I learned from the CCNA course is how to build my own cat5 cables
[18:48] sechrist: I work in videoconferencing and I hear the osi model referenced every day
[18:49] sechrist: if I didn't know what it was half of the conversations should be gibberish
[18:49] sechrist: however that's just because we rely heavily on networking efficiency -- most people don't have to
[18:49] yonkeltron: creationix: i still really want to learn how to do that.
[18:50] creationix: sechrist: I would think understanding how it's really implemented would be more important than 7 layers of abstraction
[18:50] creationix: if you're going for performance
[18:50] sechrist: that's of course true
[18:50] sechrist: but saying "there's a problem on layer 3" is pretty explicit
[18:50] creationix: true
[18:50] sechrist: it helps in communication
[18:50] msekimura has joined the channel
[18:50] mraleph has joined the channel
[18:50] creationix: I think the 4 layers of IP are specific enough though
[18:51] yonkeltron: sechrist: you refer to the layers by number?
[18:51] sechrist: here, yeah
[18:51] pquerna: definately
[18:51] mikeal: so, who are these guys http://www.nodejscloud.com/ ?
[18:51] sechrist: we have wan simulators, large juniper systems, and kinds of networking gear around here
[18:51] creationix: mikeal: not sure, other than they just started following me on twitter
[18:51] pquerna: mikeal: i was wondering who is behind it
[18:52] vineyard has joined the channel
[18:52] pquerna: they don't say much anywhere about who they are; just what they are going to do someday :)
[18:52] sechrist: wow, another one
[18:52] sechrist: is there even a proven market for this yet?
[18:52] halfhalo: no, but it sounds cool!
[18:52] sechrist: I'd assume most people in the node community don't need a "cloud service"
[18:52] jpick: their dns servers are from 619cloud.com - might be the same people
[18:52] sechrist: other than VMs
[18:52] mikeal: it's proven that people can make web pages about them :)
[18:53] creationix: we'l find out tomorrow "We are going to NODE.JS CAMP in San Francisco on December 14th. If you're also going, send us a message to meet up."
[18:53] halfhalo: "I run an embedded javascript cloud setup with source code integration and push for popular scms that has the benefit of scaling up on demand"  Bah
[18:53] tjholowaychuk: will there be vids of the node camp?
[18:54] sechrist: "cloud" is so ambiguous
[18:54] yonkeltron: agreed
[18:54] mikeal: tjholowaychuk: yes
[18:54] Vertice has joined the channel
[18:54] Deirdre_ has joined the channel
[18:54] tjholowaychuk: mikeal: awesome
[18:54] halfhalo: my car is in the cloud
[18:54] mikeal: of the talks, but the talks are short
[18:54] mikeal: the main point of the event is the all day tutorial
[18:54] mikeal: which you don't need :)
[18:54] sechrist: I want to sneak in
[18:54] stagas: ustream? :)
[18:54] SubStack: san francisco is in the cloud most of the time
[18:54] langworthy has joined the channel
[18:54] creationix: anyone who can't make it, just peek at the github repo
[18:54] mikeal: we can teach tjholowaychuk all about using Express :P
[18:55] halfhalo: hah
[18:55] jpick: yep, it's going to be ustreamed
[18:55] tjholowaychuk: mikeal: haha sweet :D
[18:55] sechrist: ustreamed? nice
[18:55] creationix: jpick: don
[18:55] creationix: don't kill the nets
[18:55] Deirdre_: UStream in testing now, check it out: http://www.ustream.tv/channel/node-js-camp
[18:55] sechrist: some of the control flow discussions i'd like to hear
[18:55] sechrist: unless it's just "use step blah blah"
[18:55] creationix: sechrist: lol
[18:56] mikeal: man
[18:56] creationix: now I have to redo my slides
[18:56] mikeal: why was i not invited to speak at this http://www.jsday.it/2011/
[18:56] mikeal: i wanna go to Italy :)
[18:56] jpick: boney m :-)
[18:56] sechrist: why is there a rhino in the corner
[18:56] sechrist: rhino + js = hate
[18:56] gf3 has joined the channel
[18:56] yonkeltron: i also wondered that
[18:56] mikeal: sechrist: i was thinking the same thing!
[18:56] sriley has joined the channel
[18:57] yonkeltron: sechrist: what do you mean? what's wrong with writing host objects in java? c'mon now!
[18:57] SubStack: people should write more flow control libs
[18:57] jpick: there's a rhino on the cover of flanagan's o'reilly javascript book
[18:57] mikeal: SubStack: and testing frameworks, and template libraries
[18:57] yonkeltron: sechrist: if you want any real functionality, you have to make host objects so you might as well think of it like require
[18:57] SubStack: and web frameworks
[18:57] sechrist: java vm
[18:57] sechrist: makes me cry
[18:57] SubStack: not enough web frameworks
[18:57] yonkeltron: why?
[18:57] mikeal: SubStack: and half ass JVM languages
[18:57] yonkeltron: sechrist: why does the vm make you cry?
[18:58] sechrist: well the VM itself is actually ok
[18:58] sechrist: I just hate java
[18:58] stagas: hello world examples I need more
[18:58] yonkeltron: hotspot, how does it work?
[18:58] sechrist: I think node
[18:58] sechrist: node's generic createserver and settimeout example is a little too little
[18:58] dguttman has joined the channel
[18:58] SubStack: and chat servers
[18:58] tokumine has joined the channel
[18:58] saschagehlich: do I really need node-base64 to encode a string into a base64 string?
[18:58] halfhalo: oirc
[18:59] halfhalo: *irc as a hello world
[18:59] jpick: also rhino themed http://flusspferd.org/ (flasspferd is german for rhino)
[18:59] stagas: and cursors on web pages
[18:59] sechrist: it would be funny if people start labeling node.js as a "hackers language"
[18:59] gilesgoatboy has joined the channel
[18:59] sechrist: just like "linux is a hacker's operating system"
[18:59] isaacs: sechrist: it kinda already is
[19:00] isaacs: i mean, it's written in c and javascript
[19:00] halfhalo: I R H4CK3R I R US3NG NODE 4 HACKY TH1NG5
[19:00] SubStack: rasputin!
[19:00] sechrist: no I mean in the early 00s TV shows were like
[19:00] sechrist: he uses linux
[19:00] sechrist: HE IS A HACKER
[19:00] jpick: N0D3.JS
[19:00] isaacs: i see
[19:00] sechrist: http://www.adequacy.org/stories/2001.12.2.42056.2147.html
[19:00] tokumine: hey there - can anyone recommend a postgres library? I've tried ryans (slow) and node-postgres (can't deal with concurrent connections)....
[19:01] brianc: tokumine: i'm finishinig up connection pooling today
[19:01] sechrist: Quake is an online virtual reality used by hackers. It is a popular meeting place and training ground, where they discuss hacking and train in the use of various firearms. 
[19:01] sechrist: ACTION falls over
[19:01] tokumine: brianc: I saw your commit ;)
[19:01] sechrist: "BSD, Lunix, Debian and Mandrake are all versions of an illegal hacker operation system, invented by a Soviet computer hacker named Linyos Torovoltos"
[19:01] brianc: tokumine: sweet. should be good to go tomorrow morning.  got all the tests passing now, just need to do code cleanup & npm publish
[19:01] tokumine: brianc: that's great news. Thanks a lot.
[19:03] isaacs: hahahahah  "Hackers tend to dress in bright, day-glo colors."
[19:03] isaacs: sechrist: this is themost hilarious thing i've seen all morning
[19:03] halfhalo: I  know I do!
[19:03] halfhalo: I havent seen that site in ages
[19:04] SubStack: Deirdre_: seems to just be rasputin on a loop
[19:04] SubStack: not that I am complaining
[19:04] jpick: updated https://github.com/ry/node/wiki/Hosting
[19:05] brianc: tokumine: I'd be interested in any other feedback on node-postgres if you take it out for a test-drive.  Feel freel to get in touch on github if you run into any snags.  I'm behind on the documentation.
[19:05] halfhalo: ACTION has a new way of blocking most people from his website without actually blocking them
[19:05] sechrist: "If your son spends more than thirty minutes each day on the computer, he may be using it to DOS other peoples sites. DOSing involves gaining access to the "command prompt" on other people's machines, and using it to tie up vital internet services."
[19:05] jewgonewild has joined the channel
[19:05] strmpnk has joined the channel
[19:05] micheil: hmm, no felixge?
[19:06] SubStack: what about nodejitsu @ that list?
[19:06] isaacs: sechrist: the sheer insanity-per-sentence density of this thing is intense
[19:06] halfhalo: and here I thought DOSing was a way of doing drugs...
[19:06] chapel: the part about amd... cmon, this has to be fake
[19:06] SubStack: I remember reading that article in like 2003
[19:06] sechrist: it is satire
[19:07] SubStack: perhaps before
[19:07] sechrist: but damn it's good
[19:07] tokumine: brianc: sure - It's currently holding it's own in a standoff against java and php in a map tile rendering contest so it's doing pretty good. I guess the main thing you want to do in the future is add C for speed in certain areas?
[19:08] chapel: halfhalo << how do you block most people?
[19:08] JimBastard has joined the channel
[19:08] halfhalo: self signed ssl certs :p
[19:08] halfhalo: scares most people away with the big scary looking error message
[19:08] chapel: but any hacker worth his salt will bypass that with one click
[19:08] chapel: :P
[19:08] halfhalo: ACTION doesn't care about hackers
[19:09] brianc: tokumine: yeah, would like to do that in the not too distant future. 
[19:09] MikhX has joined the channel
[19:09] halfhalo: ACTION just doesn't want random people clicking through his site without a reason
[19:09] mjr_: brianc: you have a postgres module that is fast, good, and well-maintained?
[19:09] tokumine: brianc: I'll certainly file anything I spot. About the docs, which way are you heading? client.connect()/query.on event style, or the direct embedding of callbacks as per the code example?
[19:10] halfhalo: although theoretically I could make it require a client side ssl cert as well
[19:10] isaqual has joined the channel
[19:10] jpick: added Nodejitsu to the wiki page too. it would be nice to separate the PaaS type hosting systems from the VPS style things
[19:11] creationix has joined the channel
[19:12] hamcore has joined the channel
[19:12] InsDel has joined the channel
[19:12] hamcore: v8: a = ['a','b','c']; console.log(a.joins('. '))
[19:12] v8bot: hamcore: TypeError: Object a,b,c has no method 'joins'
[19:12] hamcore: v8: a = ['a','b','c']; console.log(a.join('. '))
[19:12] v8bot: hamcore: CONSOLE: ["a. b. c"], OUTPUT: undefined
[19:14] hamcore: I'm getting: TypeError: Object a,b,c has no method 'joins' while trying a = ['a','b','c']; a.joins('. ') -- What could be it?
[19:14] hamcore: no, join*
[19:15] hamcore: nah, typo, nm.
[19:17] GasbaKid has joined the channel
[19:19] hoeru has joined the channel
[19:19] Yuffster has joined the channel
[19:21] ShinMei has joined the channel
[19:21] mraleph: mjr_: ping
[19:21] mjr_: hey
[19:22] mraleph: hey. i was playing around with your node_redis
[19:22] mraleph: and noticed unexpected behavior: if callback which I pass to node_redis method like get throws exception
[19:23] mraleph: it might leave the whole parser in bad state
[19:23] mjr_: uh oh
[19:23] mjr_: Hmm, yeah, I guess I can see how that would happen
[19:23] mraleph: this results in misterious Redis reply parser error: Error: didn't see LF after NL while reading bulk length
[19:23] mjr_: Lemme wrap this other conversation up, and I'll look at that.
[19:24] mraleph: mjr_: no problem, well I tracked that down myself. just wanted to let you know
[19:24] jchris has joined the channel
[19:25] mies_ has joined the channel
[19:26] brianc: tokumine: direct embedding of callbacks
[19:26] delapouite has joined the channel
[19:27] brianc: tokumine: I was thinking of leaving "new Client()" as a way to bypass the connection pool. But connection pooling will be done within pg.connect(constring, callback) for now
[19:27] brianc: tokumine: ofcourse I'm open to suggestions & contributions as well. :)
[19:27] mjr_: mraleph: thanks for tracking that down.  I can't believe I'd never noticed this.
[19:27] bartt has joined the channel
[19:28] mjr_: mraleph: now can you help me figure out why lrange queries seem to degrade at an O(n^2) rate?  :)
[19:29] mraleph: mjr_: if you show me the place and the test I can try :-)
[19:29] tokumine: brianc: ah cool - understood. The event style cleaner does seem cleaner to my novice eye, but is perhaps a bit less idiomatic nodejs I guess. Good to know which way you're heading!  This is my first node project, so I'd possibly only contribute work for you :)
[19:30] mjr_: mraleph: OK, well if you are serious, I'll distill it down to a simple test and show it to you.   I was going to sit down with ryah sometime soon to see if we could track it down.
[19:31] jherdman has joined the channel
[19:31] mraleph: mjr_: I am serious. 
[19:32] mjr_: I will take you up on that then.
[19:32] mjr_: But first I need to clean up this exception thing.
[19:33] mraleph: mjr_: I will take a look how you handle lrange command
[19:33] jameshome has left the channel
[19:34] mjr_: https://github.com/mranney/node_redis/blob/master/lib/parser/javascript.js#L188
[19:34] mjr_: mraleph: the short description is that if you have a small list, things are really fast.  But as the "multi bulk" reply gets a larger number of elements, it gets slower and slower.
[19:36] mjr_: mraleph: it doesn't seem to matter if the elements are large or small, just how many elements there are.
[19:36] mjr_: You can repro by running multi_bench.js, and note how slow the two lrange tests are if you use the JavaScript parser.
[19:37] mjr_: If you use hiredis, they do great on the lrange ones, and are about the same on the small ones.
[19:38] mikedeboer has joined the channel
[19:42] yozlet has joined the channel
[19:42] V1 has joined the channel
[19:43] maushu has joined the channel
[19:44] saschagehlich: mscdex: I'm writing my own smtp client now - can you tell me how I have to encode the body to send umlauts correctly?
[19:46] altamic has joined the channel
[19:46] micheil: okay, so a set of traffic lights just arrived at the office :D
[19:47] mraleph: mjr_: I see at least one point of optimization https://github.com/mranney/node_redis/blob/master/lib/parser/javascript.js#L136, replace [] with new Array(this.multi_bulk_length). should become faster. let me try play with your benchmark 
[19:47] tjholowaychuk: micheil: CI ? haha, I always wanted that
[19:47] mjr_: mraleph: oh, cool.  Does that help V8 avoid expensive Array growth?
[19:47] siculars has joined the channel
[19:48] micheil: tjholowaychuk:  yep. the boss order it
[19:48] tjholowaychuk: micheil: sweet :)
[19:48] mraleph: mjr_: and replace push with assigment by index... 
[19:48] mraleph: mjr_: yeah. push is da killer
[19:49] mjr_: I wonder if that was it
[19:49] mraleph: mjr_: I will try locally
[19:49] brianc: tokumine: yeah I started w/ the evented style but added the callback style to be in line w/ other node.js libraries.  You can actually mix & match them and I intend to provide examples of that and an explination of when to use each one.
[19:50] brianc: I am gould at sphelling
[19:50] mjr_: brianc: people ask me all the time what postgres library they should use.  Should I start telling them to use yours?
[19:50] brianc: mjr_: that would be lovely
[19:50] mjr_: I will do it
[19:50] brianc: mjr_: it's tested pretty heavily
[19:51] mjr_: awesome
[19:51] brianc: mjr_: it's even powering this awesome site: http://www.explodemy.com/
[19:51] mjr_: Wow, how do you handle the ORM for that site?
[19:51] mjr_: Must be hairy.
[19:52] brianc: mjr_: just as a proof of concept.  And I hit that site w/ ab to test connection pooling & so on
[19:52] stephenjudkins has joined the channel
[19:52] tokumine: mjr_: also handling 6k points from PostGIS for these live map tile renders: http://109.74.206.82:3000/?x=0&y=0&z=0
[19:53] mjr_: cool
[19:53] josephhitchens has joined the channel
[19:53] stride: ACTION would like to hire the awesome designer brianc used for the site
[19:53] brianc: stride: hahaha *shame*
[19:53] stride: :)
[19:53] ibolmo has joined the channel
[19:53] aubergine has joined the channel
[19:54] ibolmo: Is there a connect-js channel or can I get some help understanding the compiler middleware?
[19:54] josephhitchens: Greetings all.  I have a client wanting to know if node is being used in any REALLY large-scale, enterprise class environments.  Anyone know?  So i can try to convince them to use it?
[19:55] msilverman2 has joined the channel
[19:55] josephhitchens: mjr_ ? 
[19:55] josephhitchens: ryah ?
[19:56] mjr_: josephhitchens?
[19:56] SubStack: joyent, yahoo, plurk
[19:56] josephhitchens: mjr_ care to comment?
[19:56] SubStack: palm
[19:56] mjr_: oh, sorry, too many conversations at once.
[19:56] creationix has joined the channel
[19:56] halfhalo: speaking of palm...
[19:57] mjr_: I think right now it is too early to have a big list.  There are a lot of things in the works.  
[19:57] brianc: josephhitchens: I think yahoo http://developer.yahoo.com/blogs/ydn/posts/2010/07/multicore_http_server_with_nodejs/
[19:57] creationix: ACTION hides
[19:57] mjr_: I know Yahoo is working on some node stuff.
[19:57] josephhitchens: i want your input too tim, don't hide.
[19:57] chrislgibson has joined the channel
[19:57] mjr_: As you know, Palm/HP are using node in their new mobile OS.
[19:57] josephhitchens: i know now.
[19:57] mjr_: Plurk was the big name that used to get thrown around, but I'm not sure what their node situation is these days.
[19:57] mraleph: mjr_: just doing a preallocation thingy improves bench result by a factor of ~3.5 for 100 elements
[19:57] springmeyer: tokumine: fyi: https://github.com/mapnik/node-mapnik
[19:58] mjr_: mraleph: nice!
[19:58] mraleph: mjr_:  without preallocation LRANGE (100 elements): 20000 ops 707.39 ops/sec 100/99/70.603
[19:58] creationix: https://github.com/palm/node/
[19:58] mraleph: mjr_: with LRANGE (100 elements): 20000 ops 2545.18 ops/sec 0/955/11.818
[19:58] BillyBreen has left the channel
[19:58] mjr_: mraleph: That's awesome.
[19:58] mraleph: I will play around a little more
[19:59] jchris has joined the channel
[19:59] mjr_: mraleph: I know there's a big cost for doing the toString in there.  I wish there were a good way to build up a JavaScript a byte at a time.  I haven't tried Ryan's "string decoder" thing.
[19:59] mjr_: er, a JavaScript String.
[20:00] linnk has joined the channel
[20:00] josephhitchens: creationix: fyi, our entire game server is about to become 100% node - already about 20%.
[20:01] msilverman2: question for the javascript illuminati.... do having a lot of setTimeouts cause memoryBloat?  we have a request that makes a LOT of api requests, we throttle these requests to the api by using setTimeouts.. it seems that it runs for a while but then craps out somewhere.  This is without doing any writes to a database, simply making web requests.  By looking at the node memory profiler it starts getting 
[20:01] msilverman2: up to 100% cpu and 1.4 gigs of ram used pretty quickly which seems weird since we're not doing anything but making web requests and creating javascript objects locally
[20:01] tilgovi has joined the channel
[20:02] linnk: Hey, does anyone know if raphaeljs has an irc chan?
[20:02] halfhalo: msilverman2: depends on how ya do it
[20:02] teemow has joined the channel
[20:02] msilverman2: it uses https, but I think i fixed the memory leak issue by using a global credentials object
[20:02] mjr_: josephhitchens: I've heard of a lot of internal projects using node at different places that people aren't talking about yet.  I believe that in the next few months some large and interesting ones will be revealed.
[20:03] msilverman2: meaning depends on how we're using setTimeout's?
[20:03] josephhitchens: mjr_ (maybe ours as well, I hope)
[20:03] mjr_: cool
[20:03] halfhalo: msilverman2: I know that it your store the setTimeouts in a variable an never clear them it will be... interesting in the long run
[20:03] mraleph: mjr_: another small recommendation avoid using delete. when you delete a property JS object in V8 goes to so called slow-mode. I am not sure that matters here, but better avoid it at all 
[20:03] josephhitchens has left the channel
[20:04] mjr_: mraleph: great, keep the V8 pro tips coming.
[20:04] tokumine: springmeyer: hey! thanks :) I did spot that, but am wanting to generate tiles based on custom postgis queries. From what I could tell node-mapnik currently is reading data from shp and a mapnik xml format rather than via postgis?
[20:04] tokumine: springmeyer: basically I'm trying to duplicate fusion tables on a budget VPS :)
[20:04] EyePulp: what's the status of tls/ssl server under say... express?
[20:04] mjr_: mraleph: ErikCorry already told m to use numbers as the parser state.  I changed that, but it didn't seem to make a difference.
[20:04] stride: mraleph: is that a general recommendation? is setting foo[bar] = undefined; (+ checking if it's undefined where you need it) generally better than delete foo[bar] for object properties?
[20:05] springmeyer: tokumine: sure you could read from postgis just as well as shapefile
[20:05] mraleph: stride: well. it is recommendation for objects that you intend to use like objects, not (poor man) associative-arrays.
[20:06] tilgovi_ has joined the channel
[20:06] msilverman2: halfhalo: https://gist.github.com/b896f879807782bdc2ef
[20:06] msilverman2: I have this pattern a bunch of places
[20:06] stride: mraleph: hmkay, I asked because of a poor man scenario, thanks ;)
[20:06] msilverman2: index would be the number of the item coming in from the api.. it lets us do some nesting without hammering the api too hard
[20:06] tokumine: ahah - interesting - so, for example, pass in search parameters, retrieve results from postGIS and hand off to mapnik for tile rendering is a possiblity?
[20:07] mjr_: mraleph: is setting to undefined or null faster than delete in this case?
[20:07] msilverman2: but it just dies somewhere, and we're having a hard time debugging because all the debugging tools aren't very good for tracking down things in this context
[20:07] isaqual has joined the channel
[20:07] tokumine: springmeyer: pass in search params via something like expressjs for example
[20:07] mraleph: stride: it is both faster and keeps access to other properties fast. but let me check if that matters for your code.
[20:07] mraleph: sorry
[20:08] springmeyer: tokumine: pass in params, use to build up postgis sql, pass sql to mapnik...
[20:08] mraleph: mjr_:  that was for you ^
[20:08] mjr_: I only use delete when switching from multi-bulk to nested multi-bulk, and I could easily use null or undefined.
[20:09] springmeyer: tokumine: I plan to expose all map constructors (styles, layer, etc) in js, but right for now only able to read in xml, but it can be read from a string you build up dynamically
[20:09] halfhalo: msilverman2: I posted on the gist what I would do to see if I could keep the memory down, at least for the timeouts accumulating
[20:09] tokumine: springmeyer: ah ok, gotcha. So mapnik would get data from postgis outside of node. 
[20:09] msilverman2: thanks halfhalo
[20:10] halfhalo: there may be another variable that keeps getting written to elsewhere in your code as well
[20:10] tilgovi has joined the channel
[20:10] msilverman2: so it's better to collect/null out to clear 'space'
[20:10] msilverman2: is the general idea
[20:10] springmeyer: tokumine: yep, I plan to allow passing data directory to a mapnik::memory datasource as well, so you could push data directly, but honestly I've benchmarked that from python and the direct to postgres is much faster
[20:10] halfhalo: thats what I would do since not dealing with it isn't working
[20:11] msilverman2: let me try that out, thanks
[20:11] tokumine: springmeyer: probably be a fair amount faster without the node step too. I guess you could use node just to provide the geojson for the tile overlay UI
[20:11] springmeyer: tokumine: which node step are you thinking?
[20:12] Yuffster_ has joined the channel
[20:12] mraleph: mjr_: it does not matter. but now after I reverted change I started getting even better result for some reason :-)
[20:12] mraleph: mjr_: LRANGE (100 elements): 20000 ops 5571.03 ops/sec 0/979/5.710
[20:12] mraleph: mjr_: should I clean redis database across runs?
[20:13] mjr_: shouldn't matter
[20:13] mjr_: The amount of work redis does is hardly anything
[20:13] tokumine: springmeyer: the demo url I pasted above I'm retrieving points from postgis into node, then rendering the tile in cairo. Going the node-mapnik route that step is missed entirely - node just is used to hand over a sql string to mapnik (same as your python experience)
[20:13] mjr_: mraleph: you can change it to do lrange 500 if you really want to see the effect in action.
[20:14] tilgovi_ has joined the channel
[20:15] mraleph: mjr_: there is something fishy there it improves with every run
[20:15] springmeyer: tokumine: k, thx for clarifying. ya, my gut would be that you incur the penalty of at least an extra loop around geometries by handling in memory in node. and in mapnik usage at least antigrain rendering is faster than cairo.
[20:15] mraleph: mjr_: now LRANGE (100 elements): 20000 ops 10282.78 ops/sec 0/940/3.550
[20:15] mjr_: mraleph: CPU coming out of auto-scaling?  :)
[20:16] mraleph: mjr_: might be. hmm. then need a loop inside benchmark
[20:16] mjr_: If you set redis.debug_mode = true; you can see the wire protocol.  It might not be returning anything.
[20:16] tokumine: springmeyer: Interesting - is node-mapnik where I should be looking, or should I be looking at tilelive?
[20:16] springmeyer: tokumine: however, I really like the look of your approach! and it may be really fast too, not saying i know, but interested to learn more
[20:17] mjr_: mraleph: I've never seen anything like 10K ops/sec on that test with the JS parser.  That's how fast the hiredis C parser does it.
[20:17] springmeyer: tokumine: good question, I've not played with tilelive yet, so I can't say. but it has ported over the mercator tile logic, etc
[20:17] dguttman_ has joined the channel
[20:17] tokumine: springmeyer: :) basically I've been pulled into a mexican standoff between php/gd, java & node/cairo to see who can render a tile of points like fusion tables the fastest.
[20:17] springmeyer: tokumine: ah, interesting!
[20:17] mraleph: mjr_: at least with preallocation it is consistently better then without it :-)
[20:17] mjr_: tokumine: in the end, does everybody die anyway?
[20:18] mjr_: mraleph: yeah, totally.
[20:18] tokumine: mjr_: basically - so far it's a draw :)
[20:18] springmeyer: tokumine: cool, well when is the standoff? high noon? ;)
[20:18] EyePulp: anything obvious about this error that I should be trying to fix?  started coming up after my last pull/build from trunk a few days ago.  http://pastie.textmate.org/private/v8vl1mahzeravr0yvgbrrg
[20:19] springmeyer: tokumine: certainly would be cool to compare node-mapnik vs pure cairo approach, so I could try to work on the former
[20:20] tokumine: springmeyer: node's bottleneck is it's postgres connection (though it's early days, and brianc is doing a great job), Java eats memory for breakfast, and PHP/GD's image quality sucks
[20:20] springmeyer: tokumine: facinating
[20:20] EGreg has joined the channel
[20:20] EGreg: hey guys
[20:20] EGreg: anyone here use socket.io?
[20:20] EGreg: would you recommend DNode?
[20:21] frodenius: they serve a different purpose
[20:21] tokumine: springmeyer: sure - that would be totally great. If you want I can give you access to the test server we're using and DB details?
[20:21] springmeyer: tokumine: I've recently benchmarked node-mapnik and it performs nearly on par with pure C++ async server for rendering WMS requests
[20:21] springmeyer: tokumine: sure, sounds fund
[20:21] HAITI has joined the channel
[20:21] frodenius: err, unless i am wrongly implicating you choosing between them
[20:22] tokumine: springmeyer: great! I'll drop you a mail
[20:23] techwraith has joined the channel
[20:23] robtmr has joined the channel
[20:26] EGreg: frodenius: I thought one uses the other
[20:26] EGreg: doesn't DNode use socket.io for the message passing? I hope so
[20:26] Phyllio has joined the channel
[20:27] tlrobinson has joined the channel
[20:27] frodenius: indeed it does
[20:27] frodenius: silly me
[20:28] murz has joined the channel
[20:28] yonkeltron: wow, i just got my ass handed to me by process.nextTick
[20:29] nefD has joined the channel
[20:30] javajunky has joined the channel
[20:32] aubergine has joined the channel
[20:33] Oliv_Oil has joined the channel
[20:33] V1: Why would you use DNode instead of regular socket.io message handling EGreg 
[20:35] jvolkman__ has joined the channel
[20:35] ajpiano has joined the channel
[20:37] wao: w goto #linode
[20:37] wao: shh
[20:40] softdrink: with mongoose/mongodb, what's the best way to store relationships?  for example i have a task, and i want that task's owner to reference someone in my users list...
[20:41] tjholowaychuk: oh noes, victim of hoisting for the first time ever
[20:41] tjholowaychuk: damn you non block scopes
[20:41] halfhalo: DUNDUNDUN
[20:42] deepthawtz has joined the channel
[20:44] felixge has joined the channel
[20:44] felixge has joined the channel
[20:45] Oliv_Oil has left the channel
[20:46] felixge: ryah: the next-tick-ordering test seems to fail for me on osx, is this a known issue? https://gist.github.com/739572
[20:46] xla has joined the channel
[20:46] felixge: it's actually not failing consistently, just sometimes
[20:48] Ezku\: softdrink: mongo documents should have identifiers just as table rows would, it's just that referential integrity isn't guaranteed for you and joining can be tough
[20:48] mraleph: mjr_: I can't spot any other low hanging fruits so I am returning back to my own toy server :-)
[20:49] mjr_: mraleph: thanks.  I just pushed a fix for the exceptions in a callback thing.  Can you give ti a try?
[20:50] mraleph: mjr_: I am currently using one installed by npm. How can I update that?
[20:50] mjr_: one sec, I'll publish a new one
[20:50] jacobolus has joined the channel
[20:51] mjr_: mraleph: published v0.4.2 just now with the fix.
[20:51] EGreg: V1: I don't know, I guess DNode just makes everything javascript oriented and it's super cool
[20:51] EGreg: it makes one feel as if the front end and back end are just one javascript environment.
[20:51] EGreg: No?
[20:52] jspiros has joined the channel
[20:52] V1: The Socket.io framework is simular build on the serverside as on the clientside. Where you would do io.on("connection") on the server, you would do the same on the client. Which makes it feel more event driven i guess.
[20:53] V1: But i guess it all comes down to personal preference in the end
[20:54] mjr_: mraleph: can you send me a patch with your changes?
[20:54] mraleph: mjr_: parser seems to survive exceptions thrown from callbacks. thanks.
[20:55] mjr_: mraleph: it turns out that this exception thing only happens when you have more pipelined replies waiting after the one with the exception, and the test suite runs serially.  Whoops.
[20:55] V1: \o/! Just reached 20k connected clients on a private Node.js app that I manage \o/
[20:56] mjr_: V1: that's cool.  Wha'ts your memory usage?
[20:56] mraleph: mjr_: the change is one liner ([] replaced with new Array(this.multi_bulk_length)) Everything else does not matter.
[20:56] mjr_: mraleph: oh, OK.  Thanks.  :)
[20:56] V1: mjr_: I don't have access to metrics atm, but it's a few gig
[20:57] dgraunke has joined the channel
[20:57] V1: Before I left work it was on 2.1 gig
[20:58] mjr_: I thought V8 had some sort of heap limit that was less than that?
[20:58] felixge: mjr_: are you guys working on that performance issue from that blog post?
[20:58] mjr_: 2GB RSS is pretty huge for a node process.
[20:58] felixge: mjr_: I think the v8 heap limit is 1.7 GB on x64
[20:58] mjr_: felixge: yes, but I'm waiting to see what happens when he fixes the issue that mraleph found.
[20:58] felixge: mjr_: * 64 bit
[20:58] V1: mjr_: Yes V8 has a heat limit of 1.7 gig we are using multiple processes
[20:59] markwubben has joined the channel
[20:59] felixge: mjr_: but buffers don't count towards the heap of course
[20:59] felixge: (at least afaik)
[20:59] mjr_: felixge: his code kept adding event listeners and never removing them.
[20:59] felixge: mjr_: his code was also full of globals :)
[20:59] halfhalo: globals ftw
[21:00] felixge: STOP GLOBALIZATION
[21:00] felixge: :)
[21:00] V1: Node is full globals to.. ;)
[21:00] dguttman has joined the channel
[21:00] dguttman has joined the channel
[21:00] halfhalo: ACTION votes using globals named by bashing on the kb
[21:00] felixge: V1: really? Only Buffer and process are globals afaik
[21:01] terite: I prefix every variable I use with process.*
[21:01] altamic has joined the channel
[21:01] V1: felixge: console, require, and a few more are globals ;)
[21:01] felixge: V1: console yes, require no
[21:01] EGreg: V1: Well I am curious. You used both, right?
[21:01] EGreg: Does the socket.io have more capabilities? Does it choose more transports? Or is DNode built on top of it?
[21:02] EGreg: V1: A few gigs eh? Wow
[21:02] V1: EGreg: DNode is build ontop of Socket.io
[21:02] V1: EGreg: Yeh, the code I'm using isn't optimized yet :p
[21:02] EGreg: If DNode is built on top of Socket.io, then why not have this cool interface where I just call remote javascript functions as if it's local
[21:02] felixge: V1: require is a parameter to the function wrapping the modules
[21:02] EGreg: I'm just asking. I mean what are the downsides?
[21:02] tjholowaychuk: V1: likewise with __dirname etc
[21:02] EGreg: How much bigger is the data that goes through?
[21:03] V1: tjholowaychuk: Yeah they are also globally available :P
[21:03] felixge: src/node.js makes me cringe
[21:03] yonkeltron: any favorites for data arithmetic?
[21:03] tjholowaychuk: V1: not really
[21:03] yonkeltron: sorry
[21:04] yonkeltron: date arithmetic
[21:04] mraleph: i am also dying to see update from @roder. because deeeep inside I want node to perform better than erlang :-)
[21:04] V1: tjholowaychuk: They are global to the file huh
[21:04] tjholowaychuk: V1: well they only appear that way, they are not global variables though
[21:04] pedrobelo has joined the channel
[21:05] V1: EGreg: Socket.io doesn't contain a remote JavaScript functions, it's pure event passing. You can build anything you want on top of it.
[21:07] justin has joined the channel
[21:08] felixge: mraleph: it would be fun to try building a more light-weight process construct within node
[21:08] felixge: mraleph: I mean the ability of having tons of small processes is what makes erlang sexy
[21:08] felixge: but I'm afraid v8 contexts might be too heavy for this, right?
[21:09] brianc: felixge: do you have connection pooling in node-mysql?
[21:09] felixge: brianc: no, that's outside the scope of the module
[21:09] felixge: brianc: but there is a library I recommend, let me find it
[21:09] jpick has joined the channel
[21:10] felixge: brianc: https://github.com/coopernurse/node-pool this one
[21:10] felixge: brianc: seems really elegant and well done
[21:10] brianleroux has joined the channel
[21:11] admc_ has joined the channel
[21:11] MikhX has joined the channel
[21:11] felixge: brianc: but I have not used it yet
[21:11] brianc: felixge: hmmm yes that IS nice. perhaps I should recommend that instead of implementing internal connection pooling
[21:12] c4milo has left the channel
[21:12] sschuermann has joined the channel
[21:12] felixge: brianc: well, what I like is that it's not transparent. It makes it very clear that you might end up with a different client for each query, and thous guarantees made by an individual client (i.e. ordering) no longer apply
[21:12] felixge: * that it's very transparent
[21:13] langworthy has joined the channel
[21:13] deirdre_ has joined the channel
[21:13] sebs: Anyone used zappa a little bit ? 
[21:13] dilvie has joined the channel
[21:13] mraleph: felixge: isolates should help with that. (they are not very lightweight though)
[21:14] deirdre_ has joined the channel
[21:14] sebs: I am strugling in adding a global construct that I need. What kind of magic is in zappa regarding variables? 
[21:14] felixge: mraleph: can you quantify that? I think anything that can be created and destroyed in < 1ms would be a good start
[21:15] felixge: 10x faster would be even better
[21:15] msilverman2: ahhh.. found our problem.. restler stinks :).. moved over to request and it works much better
[21:15] msilverman2: yippie
[21:16] mraleph: felixge: whoa. 1 ms is unreachable for current isolates. 
[21:16] felixge: mraleph: well, anything slower than that would be somewhat unfeasible to isolate each incoming connection
[21:16] dguttman_ has joined the channel
[21:17] felixge: mraleph: but as far as isolation goes, the only requirements I have are: a) Has it's own global object b) Exceptions can be isolated
[21:18] dguttman_ has joined the channel
[21:18] felixge: not sure if that requires the isolates you are talking about, I'm not familiar with them
[21:18] dgathright has joined the channel
[21:18] yonkeltron: is there really no good way to do date arithmetic in JS?
[21:18] steadicat: back
[21:19] felixge: yonkeltron: http://www.datejs.com/ ?
[21:19] steadicat: back
[21:19] yonkeltron: felixge: not updated since 07 afaict
[21:19] ajpiano has joined the channel
[21:19] felixge: yonkeltron: :(
[21:19] yonkeltron: wait
[21:20] felixge: yonkeltron: FWIW, I ended up implementing the (minimal) date handling I needed myself
[21:20] rauchg_ has joined the channel
[21:20] yonkeltron: interesting
[21:20] felixge: because everything out there seemed like crap more focused on syntax sugar than basic correctness
[21:21] yonkeltron: sigh
[21:23] mikedeboer has joined the channel
[21:26] felixge: yonkeltron: what do you need in particular?
[21:26] yonkeltron: let's say i've got a deal which expires
[21:27] yonkeltron: and the deal has a pre-expiration review
[21:27] techwraith has left the channel
[21:27] yonkeltron: and i need to start looking at the deal 30 days in advance
[21:27] yonkeltron: so
[21:27] yonkeltron: i need to check
[21:27] bingomanatee: I want to track new mail that comes in and send it out with node - is it better to have self-contained node scripts that fire off based in icrontab, or a server that icrontab sends messages to every time there is a new email file?
[21:27] broofa: isaacs: can npm be configured to work with multiple repositories?  E.g. if I wanted to set up a corporate repo behind our company firewall...?
[21:27] yonkeltron: so if (deal.expiration - deal.pre_exp_review - 30 days) { do_something(); }
[21:27] kkaefer: is there a way to set the origin address of IP/UDP packets I send with node?
[21:27] V1: just because something isn't updated in a few years doesn't mean it's not good 
[21:27] yonkeltron: felixge: how does that look?
[21:28] isaacs: broofa: yes.  it's a couchapp.
[21:28] bingomanatee: or is there an icrontab - like module in node that does filesystem diff-based events?
[21:28] yonkeltron: kkaefer: haha. naughty boy.
[21:28] kkaefer: yonkeltron: not naughty; DHCP discovery requires IP 0.0.0.0
[21:28] felixge: yonkeltron: seems easy enough by casting date objects into numbers
[21:28] isaacs: broofa: https://github.com/isaacs/npm/blob/master/doc/registry.md#readme
[21:28] yonkeltron: felixge: i am seriously considering that
[21:28] felixge: yonkeltron: var day = 24 * 60 * 60 * 1000;
[21:29] yonkeltron: yeah
[21:29] felixge: yonkeltron: nothing wrong with for your use case
[21:29] yonkeltron: i've been there
[21:29] yonkeltron: lol
[21:29] yonkeltron: i agree
[21:29] yonkeltron: i'll do it i guess
[21:29] isaacs: ew typo in that doc... whoops
[21:29] xla has joined the channel
[21:29] yonkeltron: function months(n) { return n * days(30); }
[21:29] ajpiano has joined the channel
[21:29] broofa: isaacs: perfect, thx!
[21:30] tjholowaychuk: yonkeltron: plenty of libraries have all that jazz
[21:30] isaacs: broofa: that'll be in `npm help registry` in the next version
[21:30] felixge: yonkeltron: now that's the part where it might get tricky. 1 month !== 30 days :)
[21:30] V1: isaacs: Keywords and destription are optional destription ;)?
[21:30] yonkeltron: felixge: agreed!
[21:30] cjm has joined the channel
[21:30] yonkeltron: tjholowaychuk: your fav for node?
[21:30] isaacs: V1: where's that?  (ahtoer tyepo)
[21:30] isaacs: :)
[21:30] felixge: yonkeltron: but if you can ignore the inconveniences of our sun-focused calendar system, you'll be fine :)
[21:30] isaacs: oh, i see it
[21:31] V1: isaacs: After you PUT example block at the bottom
[21:31] yonkeltron: felixge: i'm a jew. i'm down with some of the lunar calendar bits!
[21:31] isaacs: yep
[21:31] isaacs: fixed, thanks :)
[21:32] felixge: yonkeltron: this reminds me. I was once working for a customer who had lots of stuff in isreal. Turns out daylight savings time over there was decided upon by religious leaders for quite a while
[21:32] yonkeltron: yeah it blows
[21:32] yonkeltron: they lobby to have it move around basically to keep the fast of yom kippur short
[21:32] felixge: http://en.wikipedia.org/wiki/Israel_Summer_Time :)
[21:32] yonkeltron: indeed.
[21:33] yonkeltron: which is an admirable goal, to keep the fast short
[21:33] yonkeltron: but
[21:33] yonkeltron: no way to run a country
[21:33] yonkeltron: so
[21:33] yonkeltron: i need to look at my date issue
[21:33] BillyBreen has joined the channel
[21:33] isaacs: i thot all that fasting stuff was based on the sunrise/set anyway, no?
[21:34] felixge: that section on the Darwin Award is awesome :).
[21:34] felixge: "The drivers had already switched to standard time, and the cars were still en-route when the explosives detonated, killing them but no one else."
[21:35] felixge: yonkeltron: well, sounds like 30 days will work in your case
[21:35] yonkeltron: indeed
[21:35] yonkeltron: it does
[21:36] yonkeltron: isaacs: yes.
[21:36] yonkeltron: felixge: it is very funny.
[21:36] Phyllio has joined the channel
[21:38] yozlet has joined the channel
[21:38] matt_c_ has joined the channel
[21:39] bingomanatee: <-- amped about SF node camp
[21:39] micheil: you're going?
[21:41] bingomanatee: ayeh
[21:41] bingomanatee: got a lot of Q's about queues
[21:42] bingomanatee: okay rephrasing question: is there an easy way to send a message to a working node server using the command line?
[21:42] isaacs: that reminds me...
[21:43] isaacs: ACTION twists his own arm to get back to preparing an npm demo...
[21:43] isaacs: just hate preparing talks so much.  giving them is fine, i don't mind that.  it's the prep that is boring and annoying.
[21:43] jamesarosen has joined the channel
[21:43] bingomanatee: I find a good prep makes for a good talk. 
[21:43] isaacs: bingomanatee: indeed.
[21:43] bingomanatee: Mike Turgeton is big on the "show me the code!" style of talks. 
[21:43] isaacs: it's an npm demo.  i can (and sometimes do) do that in my sleep.
[21:43] isaacs: and since it's at 8am...
[21:44] isaacs: ;)
[21:44] bingomanatee: the odds are that is what is going to happen ? :D
[21:44] twoism has joined the channel
[21:44] isaacs: bingomanatee: so, for sending signals, you could use signals
[21:44] bingomanatee: thanks. 
[21:44] isaacs: like kill -SIGUSR1 my-program-pid
[21:44] bingomanatee: I'm not wanting to kill a process - just trigger a node event in it 
[21:44] isaacs: and then have a process.on("SIGUSR1", function () { doSomething() })
[21:44] isaacs: right
[21:44] isaacs: not all kill signals are fatal :)
[21:45] bingomanatee: ah. 
[21:45] isaacs: and if you listen to the signal on the process, it's never fatal
[21:45] isaacs: you can even process.on("SIGHUP"...) and SIGINT and SIGKILL and make it very difficutl to shut your program down ;)
[21:45] isaacs: oh, and you need SIGTERM, too
[21:45] bingomanatee: so "kill" the command can send messages to a pid?
[21:45] isaacs: bingomanatee: that's actually all it does
[21:45] bingomanatee: oh. 
[21:45] tjholowaychuk: bingomanatee: awesome name hey
[21:45] isaacs: it just sends SIGKILL by default, i believe.
[21:45] tjholowaychuk: haha
[21:46] bingomanatee: yes, now let me drag my CD into the trash to eject it...
[21:46] tjholowaychuk: isaacs: i dont think it does actually
[21:46] tjholowaychuk: I always have to kill -9
[21:46] boaz has joined the channel
[21:46] tjholowaychuk: i think it defaults to TERM
[21:46] isaacs: tjholowaychuk: ah, ok
[21:46] isaacs: i thought -9 is special.
[21:46] tjholowaychuk: which is kinda odd with the name kill
[21:46] isaacs: like "DIE MOFO NOW I SAID!!"
[21:47] isaacs: bingomanatee: note: on linuxes and bsd's, "killall" is to send a signal to all instances of a program.  on solaris, "killall" forcibly terminates all user processes.
[21:47] tjholowaychuk: haha :D
[21:47] tjholowaychuk: a lady I worked with back in the day got a kick out of php's die() and all this kill jazz
[21:47] yonkeltron: haha
[21:47] jspiros has joined the channel
[21:47] yonkeltron: isaacs: that's kind of a big difference
[21:47] bingomanatee: so I can send an arbitrary event via "kill" -ArbitraryEvent pid?
[21:47] isaacs: yonkeltron: yeah
[21:48] kkaefer: is there an API to get the mac address of the computer node is running on?
[21:48] isaacs: bingomanatee: there are only certain signals you can send
[21:48] isaacs: bingomanatee: man kill has them
[21:48] tjholowaychuk: bingomanatee: you can use the signal names or numbers so kill -9 or kill -KILL
[21:48] yonkeltron: i hated working on solaris because it had very little convenience
[21:48] yonkeltron: like vts and such
[21:48] yonkeltron: alt-f2 => wait what?
[21:48] bingomanatee: so then, can I create an on(9) handler in node? 
[21:49] tjholowaychuk: bingomanatee: i think its process.on('SIG<WHATEVER>' so SIGTERM
[21:49] tjholowaychuk: etc
[21:49] tjholowaychuk: i think isaacs mentioned that already up there
[21:49] isaacs: bingomanatee: process.on("SIGKILL", ...)
[21:49] bingomanatee: Not that this isn't informative - but is there any command I can use to send an event name of my own choosing to a PID?
[21:50] tjholowaychuk: bingomanatee: i think that is what you use the USR ones for
[21:50] tjholowaychuk: I havent personally needed them
[21:51] isaacs: bingomanatee: USR1 and USR2 are your friends.
[21:51] isaacs: use those
[21:51] jonaslund: if you need something more advanced then use named pipes
[21:52] jonaslund: or sockets or whatever
[21:53] dgraunke has joined the channel
[21:55] eddanger has joined the channel
[21:56] bingomanatee: I think named pipes are what I will need as I have to drive traffic from icrontab to my node server. 
[21:56] eddanger: Hi, how do I create event listeners and event emitters? Any tutorials would be helpful.
[21:57] bingomanatee: though it is not a server as such - more a process that sends traffic out to rest / amqp tartges. 
[21:57] eee_c has joined the channel
[21:57] themiddleman has joined the channel
[21:57] Throlkim has joined the channel
[21:59] aschw has joined the channel
[22:02] xla has joined the channel
[22:04] [[zz]] has joined the channel
[22:04] bingomanatee has joined the channel
[22:04] jacobolus has joined the channel
[22:05] pedrobelo has joined the channel
[22:10] techwraith has joined the channel
[22:12] dnolen_ has joined the channel
[22:13] trentm has joined the channel
[22:13] timmorgan has joined the channel
[22:13] dnolen_: any tips for load testing multipart form uploads to a node.js app? links on how to do this with ab?
[22:14] timmorgan: Noob q: Is there an equivalent to Python's dir(obj) or Ruby's obj.methods()?
[22:14] yonkeltron: in es5
[22:14] yonkeltron: Object.keys(obj)
[22:14] timmorgan: yonkeltron: thanks
[22:15] yonkeltron: all good
[22:17] jamesarosen has joined the channel
[22:18] ossareh has joined the channel
[22:18] dgraunke has joined the channel
[22:19] tilgovi has joined the channel
[22:19] springify has joined the channel
[22:19] creationix has joined the channel
[22:20] v8bot has joined the channel
[22:22] v8bot has joined the channel
[22:23] tlrobinson has joined the channel
[22:23] v8bot has joined the channel
[22:25] ShiZWeaK has joined the channel
[22:25] eddanger has joined the channel
[22:25] xslashxr has joined the channel
[22:28] felixge: dnolen_: are you using formidable?
[22:29] Aikar has joined the channel
[22:29] Aikar has joined the channel
[22:30] creationix: has anyone seen pgreiss lately?
[22:30] creationix: or used his msgpack library?
[22:31] Aikar: i msged him on github the other day and he responded
[22:31] Aikar: he said i can take over the C++ lib
[22:32] creationix: I wasn't able to get the C++ lib to compile
[22:32] Aikar: so soon as i get time i guess ima learn how to get it setup for npm
[22:32] Aikar: for 3.x?
[22:32] Aikar: yeah i updated it to work on 3.x
[22:32] creationix: I want to compare my pure-js against his c++ and pure-js versions
[22:32] creationix: https://github.com/creationix/msgpack/
[22:32] Aikar: i dont have the diff atm tho, but if you access my github public gists its in there somewhere
[22:33] Aikar: /aikar of course
[22:33] altamic has joined the channel
[22:33] Aikar: but he said his pure js was about 90% of json decode
[22:33] Aikar: and that c++ was 60ish %
[22:34] Aikar: he posted the times on his node-strtok page
[22:34] Aikar: so just compare your purejs version to json.parse and see if its less than 90% the time
[22:34] dnolen_: felixge: yeah
[22:35] Aikar: imo ima continue using the C++ one as thats a huge performance upgrade
[22:35] felixge: dnolen_: at this point there isn't much of a point in benchmarking it. I mean it's bound by disk
[22:36] felixge: dnolen_: so you'd be testing the speed of your disk for most parts
[22:36] felixge: (that is unless there is a defect in the module that I'm not aware of yet)
[22:36] dnolen_: felixge: I'm just using formidable for the form processing, I'm actually streaming directly to s3
[22:36] creationix: Aikar: hmm, seems my version is way slower than even the strtok version
[22:36] msilverman2: anyone use mikeal's request library for making api requests?
[22:36] felixge: When I find some time I also want to add the option of of buffering data into memory if more stuff comes in than the disk can handle
[22:36] dnolen_: felixge: this mostly just to demo to my team.
[22:36] Aikar: considering in the design of my applications network that 1 section of code will be ran for almost everything it does networking wise... yeah ill take a huge perf boost
[22:36] mikeal: i use it :)
[22:37] kenbolton has joined the channel
[22:37] mikeal: what api?
[22:37] felixge: dnolen_: well, I have done some benchmarks on the parser itself
[22:37] felixge: dnolen_: http://debuggable.com/posts/parsing-file-uploads-at-500-mb-s-with-node-js:4c03862e-351c-4faa-bb67-4365cbdd56cb
[22:37] Aikar: yay 30 mins until my flight
[22:37] creationix: Aikar: have fun, where are you heading?
[22:37] Aikar: ready to get out of tennesee :(
[22:38] tim_smart has joined the channel
[22:38] Aikar: kansas city, we got stranded here last night due to snow
[22:38] felixge: dnolen_: otherwise I guess I would use curl and xargs
[22:38] Aikar: they cancelled our flight
[22:38] dnolen_: felixge: yeah we've read over that, that's why we're using formidable :)
[22:38] Aikar: had a layover
[22:38] felixge: dnolen_: make a folder with a bunch of big files, then: find . -type f | xargs -P20 -j % curl ... %i
[22:38] Aikar: thankfully nashville has 4G WiMax
[22:39] Aikar: so im wifi tethering some fast net :)
[22:39] felixge: (not sure about the exact syntax, but the idea being that you have 20 curl processes firing in parallel)
[22:39] felixge: should be good enough for a rough throughput test
[22:39] dnolen_: felixge: thx
[22:40] felixge: dnolen_: one more tip: S3 is unbelievably slow, don't expect to get more than 0.5-1 mb/sec on a single connection
[22:40] Hello71 has joined the channel
[22:40] Hello71 has joined the channel
[22:40] felixge: S3 also seems to be very slow initially and it gets faster after the connection has been open for a while
[22:40] felixge: so experiment with different file sizes
[22:40] creationix: ACTION votes for msgpack going in node core
[22:41] dnolen_: felixge: thx for those pointers as well. total throughput is not a goal, how many clients we can handle is.
[22:41] Aikar: creationix: lol
[22:41] Aikar: i think it would be nice too
[22:42] creationix: Aikar: it's more than a faster JSON.* replacement
[22:42] Aikar: i know
[22:42] creationix: it's got it's own framing built-in
[22:42] namelessnotion has joined the channel
[22:42] creationix: which is freaking awesome for working on top of tcp streams
[22:42] mikeal: creationix: what is the parse time compared to v8's JSON
[22:42] mikeal: ?
[22:42] felixge: dnolen_: if you are fine with 1 byte / sec, I'm sure you can have 65k connections / network interface :)
[22:42] Aikar: hmm? how would you use the framing 
[22:42] creationix: mikeal: depending on which implementation, up to twice as fast
[22:42] Aikar: mikeal: 60%~ the time
[22:43] Aikar: !google node-msgpack pgriess
[22:43] creationix: Aikar: I guess JSON has framing too as long as your top-levels are always objects
[22:43] mjr_: creationix: I ran into pgreiss the other day.
[22:43] creationix: mjr_: yeah, I heard he's back in town
[22:43] mjr_: He's no longer at Yahoo, in case you hadn't heard.
[22:43] Aikar: creationix: yeah but msgpack expects a full buffer obj of the entire buffer, if its large and gets chunked on the tcp level you still gotta handle that
[22:44] creationix: Aikar: then node should have a parser like the strtok one
[22:44] creationix: but fast like the C++ one
[22:44] creationix: (that's what I'm trying to make)
[22:44] dnolen_: felixge: heh, we've handled file uploading with Rails and we want to break that part out to Node.
[22:44] Aikar: so im implementing a 0xFF0x0F32bitLength 6 byte header followed by the buffer to know when i got full buffer
[22:44] jameshome has joined the channel
[22:44] felixge: dnolen_: there is this service called transloadit.com :)
[22:45] mikeal: i wonder this would look like in C
[22:45] Aikar: doing the 0xFF0x0F to know its the start of a frame and not get screwed up by junk
[22:45] felixge: dnolen_: I guess you don't do any processing on the files?
[22:45] creationix: mikeal: which?
[22:45] mikeal: msgpack
[22:45] Aikar: ok time to packup laptop boarding starting soon
[22:45] creationix: mikeal: it's very c friendly, most the parsing can be done with zero-copy
[22:45] jonaslund: msgpack seems to be a quite used protocol actually
[22:45] Aikar: mikeal: node-msgpack is a C++ lib that uses rthe official msgpack lib
[22:45] dnolen_: felixge: there's some interest now in just handling it internally, we used to use drop.io.
[22:45] jonaslund: i wouldn't mind a sane binary protocol
[22:46] jonaslund: ACTION wonders why people just couldn'tve picked up erlang binaries from start though :)
[22:46] mikeal: Aikar: and thats' the 60% benchmark?
[22:46] felixge: dnolen_: we are actually helping a few drop.io customers migrate right now
[22:46] creationix: the only problem I have with the protocol is you can't tell the difference between raw buffers and strings
[22:46] Aikar: mikeal: yea
[22:46] creationix: they both go in as raw
[22:46] stagas has joined the channel
[22:46] Aikar: ok detaching bbl tonight hopefully
[22:46] felixge: dnolen_: can I pm you?
[22:47] mikeal: does it scale linearly with larger objects?
[22:47] creationix: mikeal: memory or cpu?
[22:47] mikeal: time
[22:47] sepehr has joined the channel
[22:47] creationix: I think it's linear
[22:47] jonaslund: mikeal: nothing is ever linear apart from binary byte buffers
[22:47] mikeal: JSON.parse and JSON.stringify get's dramatically slower with larger objects
[22:47] creationix: at least I'm sure it's possible with a good implementation
[22:48] jonaslund: creationix: node-msgpack does check for cycles
[22:48] jonaslund: cycle-checking larger objects -> slower
[22:48] dmcquay has joined the channel
[22:48] dnolen_: felixge: no need, but I'll definitely keep that it in mind and bring it up with the team.
[22:48] creationix: jonaslund: JSON doesn't do cycle checking either
[22:48] creationix: unless it's hijacking the js parser
[22:48] jonaslund: creationix: node-msgpack checks for cycles
[22:48] jonaslund: ACTION is looking at the code right now
[22:48] felixge: dnolen_: alright, let me know. Also feel free to email me if you have any more questions about formidable
[22:48] mikeal: can you at least stream to node-msgpack?
[22:48] creationix: jonaslund: I guess I don't know what you mean by cycles
[22:49] creationix: mikeal: I believe so
[22:49] creationix: I know you can to the pure-js version
[22:49] creationix: and it's even faster than JSON.parse
[22:49] jonaslund: creationix: var x={a:123}  x.b=x;
[22:49] dnolen_: felixge: will do and thx again, you've been very helpful.
[22:49] creationix: jonaslund: oh, on encoding
[22:49] jonaslund: x={a:123,b:{a:123,b:{.....}}}
[22:49] creationix: I was talking about decoding
[22:49] mikeal: JSON.parse on > 1mb is absurb
[22:49] heavysixer has joined the channel
[22:49] mikeal: it's like, make a cup of coffee long
[22:50] creationix: mikeal: a properly written msgpack parser should take in a tcp stream and emit value events
[22:50] mikeal: i'm just wondering if this would be a good exchange format for this new "botnet" thing
[22:50] jonaslund: actually i'd vote myself not to include msgpack
[22:50] mikeal: we need a new name, soon
[22:51] creationix: mikeal: probably
[22:51] creationix: it is binary
[22:51] jonaslund: what node would need is a solid library for doing writing objects in binary formats
[22:51] creationix: not sure if that matters
[22:51] softdrink: anyone using msgpack?
[22:51] creationix: jonaslund: like arbitrary js objects?
[22:52] jonaslund: creationix: if you want to write a number to disk, right now you need to do the binary encoding of the IEEE number yourself eventhough it only is 8 bytes in memory
[22:52] mikeal: if we could find a way to natively serialize and deserialize
[22:52] mikeal: from v8's internal binary format
[22:52] mikeal: we could dramatically reduce the serialization time
[22:53] mikeal: but that's kind of a pipe dream
[22:53] jonaslund: ACTION thinks anything not "possible" from JS code is a problem.. everything else should be implemented in JS itself
[22:53] creationix: mikeal: isn't that a moving target / private api
[22:53] quest88 has joined the channel
[22:53] micheil: anyone know about a facebook module for node?
[22:53] mikeal: i'm thinking something along the lines of BERT
[22:53] jonaslund: in the long run it'll be better to be able to do most stuff in JS if google keeps improving V8
[22:54] micheil: ACTION guesses he may be missing important discussions
[22:54] mikeal: it's close enough to the native representation that serialize is fast and easy when you can assume the transmission is safe
[22:54] micheil: mikeal: BERT? as in RPC?
[22:54] quest88: Is there any API documentation for node? I'm wondering how all of the listed plugins know what functions exists.
[22:54] mikeal: erlang changes it's internal representation as well, but it's still close enough to BERT than the translation is simple
[22:54] creationix: quest88: nodejs.org
[22:54] mikeal: BERT == Binary ERlang Term
[22:54] Jezek has joined the channel
[22:54] techwraith: Mikeal you mean for authentication, or working with the social graph API?
[22:55] mikeal: neither
[22:55] Jezek: hey anyone get socket.io working?
[22:55] mikeal: i'm talking about an exchange format between node.js processes
[22:55] quest88: creationix: been there, nothing helpful besides and http example
[22:55] techwraith: lol, Jezek, nope, no one ;)
[22:55] Jezek: :(
[22:55] softdrink: i can't even seem to build msgpack anyway
[22:55] techwraith: Jezek: I can help if you'd like :)
[22:55] mikeal: something with as little serialization overhead as possible
[22:55] creationix: quest88: http://nodejs.org/docs/v0.2.5/api.html
[22:55] quest88: nevermind
[22:55] Jezek: swf file is returning a 404
[22:55] micheil: techwraith: I've just been working on a realtime apiu client
[22:55] Jezek: WebSocketMain.swf
[22:56] Jezek: js file loads fine though
[22:56] mikeal: and unlike JSON and msgpack we have a secured connection and can assume the data is safe
[22:56] creationix: mikeal: yeah, msgpack binary terms are native C values
[22:56] creationix: so deserializing is super fast
[22:56] rauchg_: Jezek: the swf is served by socket.io
[22:56] trotter has joined the channel
[22:56] rauchg_: are you serving the client through /socket.io/socket.io.js ?
[22:56] Jezek: yeah
[22:56] rauchg_: check out the chat example
[22:56] Jezek: i had to change the port
[22:56] rauchg_: also, are you using npm ?
[22:56] jonaslund: mikeal: erlang binaries makes sense to programmers, what's under the hood is something i'd rather not worry about too much :)
[22:56] Jezek: yes
[22:56] rauchg_: k
[22:57] creationix: mikeal: how is it more secure, it's just data in the end right?
[22:57] Jezek: http://domain.com/:8080/socket.io/lib/vendor/web-socket-js/WebSocketMain.swf
[22:57] Jezek: that works
[22:57] mikeal: i don't want BERT, i want whatever BERT is to erlang to v8 js
[22:57] Jezek: i mean domain.com:8080/...
[22:57] jonaslund: that's JSON :)
[22:57] Jezek: i can't set it to listen on port 80, because apache is using that port
[22:57] jonaslund: but yeah.. a binary format would be good :)
[22:58] creationix: there is always bson, but I wouldn't recommend that
[22:58] softdrink: creationix:  why not?  (just curious)
[22:58] mikeal: bson is AWEFUL
[22:58] mikeal: it doesn't have float
[22:58] mikeal: for one thing
[22:58] creationix: heh, float is hard
[22:59] mikeal: the format is really inconsistent and it's mostly not documented
[22:59] creationix: and it's JS's ONLY native type according to the spec
[22:59] creationix: *native number
[22:59] softdrink: let's do like everyone else and write our own :D
[22:59] softdrink: heh
[22:59] jonaslund: uhh
[22:59] jonaslund: eh
[22:59] mikeal: someone who knows v8 really well should think on this
[22:59] jonaslund: bson seems to have float
[22:59] creationix: we could write our own and make it close to v8's internal structure, and node would provide js apis
[22:59] creationix: or we could get a really good msgpack implementation
[23:00] tonymilne has joined the channel
[23:00] Jezek: socket.io doesnt check for different ports? :/
[23:00] jonaslund: the only thing we REALLY need
[23:00] jonaslund: is a SANE way to write a double to a buffer
[23:00] jonaslund: and read it out again
[23:00] stephenjudkins has joined the channel
[23:00] felixge: anybody interested in reviewing this patch real quickly (change to the module loading system): https://github.com/felixge/node/commit/1452f80035ed1b2b1398c784b6e4cd51767be93a
[23:00] creationix: jonaslund: toString ;)
[23:00] creationix: with a binary header defining the type of course
[23:00] tjholowaychuk: felixge: no objections from me
[23:01] jonaslund: *mumbles*
[23:01] jonaslund: seriously though
[23:01] mikeal: my only concern wtih msgpack is that because it's a transmission protocol as well as a data format if we adopt it widely for this inter-node.js protocol that we wouldn't be able to swap out the data format later because we'd have to ditch the tranmission protocol too
[23:01] jonaslund: if we could write out doubles we could invent whatevr formats we wanted
[23:01] felixge: ryah: what do you think? https://github.com/felixge/node/commit/1452f80035ed1b2b1398c784b6e4cd51767be93a
[23:01] creationix: jonaslund: but, yes, I agree https://github.com/creationix/msgpack/blob/master/msgpack.js#L27
[23:01] jonaslund: and we could have a JS-only msgpack implementation for example
[23:01] creationix: jonaslund: there is a reason I skipped that for now
[23:01] softdrink: OOH I know! We could use XML!!!1!  *duck*
[23:02] creationix: softdrink: if it's text based, it's JSON for sure
[23:02] softdrink: (was being silly… i hate xml SO MUCH)
[23:02] mikeal: softdrink: then we'd be properly ENTERPRISE
[23:02] softdrink: hehe
[23:03] Jezek: WHAT
[23:03] techwraith: softdrink, mikeal: At least we aren't trying to run node on a coldfusion server :P
[23:03] jonaslund: creationix: exactly.. implement the double r/w and you could've done that :)
[23:04] jonaslund: msgpack has a specified endian ?
[23:04] softdrink: big-endian
[23:04] jonaslund: network style :)
[23:04] softdrink: http://redmine.msgpack.org/projects/msgpack/wiki/FormatSpec
[23:05] jonaslund: well
[23:05] jonaslund: i could chat all day
[23:05] jonaslund: gotta finish my xml parser/writer :P
[23:05] jashkenas has joined the channel
[23:05] jonaslund: (need to process that html.. :P)
[23:06] hober: jonaslund: you want to use an xml toolchain to work with html?
[23:06] trotter has joined the channel
[23:06] jonaslund: well xhtml
[23:06] jonaslund: same thing.. slightly less messy
[23:07] hober: generally speaking, xhtml-in-the-wild isn't processable as xml
[23:07] jonaslund: i'm talking about templating stuff
[23:07] jakehow has joined the channel
[23:08] hober: you might consider using https://github.com/aredridel/html5
[23:08] aschw has joined the channel
[23:08] bingomanatee has joined the channel
[23:09] aubergine has left the channel
[23:09] pquerna: udp would be alot cooler if we exposed multicast stuff
[23:09] pquerna: sigh
[23:09] NBCGoesSocial has joined the channel
[23:09] jonaslund: hober: i'm mostly finished, only need to implement processing instructions and doctype parsing
[23:09] Jezek: http://pastebin.com/nYMSyUrj
[23:10] Jezek: whats the correct format for that?
[23:10] trotter has joined the channel
[23:10] sh1mmer: pquerna: I thought someone had done tht
[23:10] Jezek: it says new io.Socket(host, [options]);
[23:11] softdrink: brackets mean that options is not required
[23:11] jonaslund: hober: and as for doctype parsing i'm only gonna implement as much as needed to ignore/copy the default DTD specs that ends up to identify the documents
[23:11] Jezek: oh
[23:11] Jezek: is it an array though?
[23:11] softdrink: object
[23:11] softdrink: {port: 1234}
[23:12] NBCGoesSocial: http://static.businessinsider.com/~~/f?id=49c9458c14b9b91b00abf5e9&maxX=254&maxY=190
[23:13] Jezek: thanks
[23:13] jamesarosen has joined the channel
[23:13] NBCGoesSocial: What's the best postgresql module for no.js?
[23:13] NBCGoesSocial: *node
[23:14] pquerna: sh1mmer: well, its easy to send, but don't think anyone did stuff to join the mcast groups?
[23:15] pquerna: sh1mmer: ie, grep o code base turns up zero IP_ADD_MEMBERSHIP
[23:15] sh1mmer: ACTION looks for citation
[23:15] lowik has left the channel
[23:16] jegade has left the channel
[23:16] Durl has joined the channel
[23:17] pquerna: hmm
[23:17] pquerna: setBroadcast
[23:17] Jezek: i set my swf location using WEB_SOCKET_SWF_LOCATION but it still won't load the right file
[23:17] sh1mmer: hm. I'm sure I remember something someone was doing froma while back
[23:17] sh1mmer: when I was actually working on the dns server
[23:17] dgathright_ has joined the channel
[23:19] sh1mmer: pquerna: if I find it I'll pass it on
[23:21] omygawshkenas has joined the channel
[23:21] Jezek: i think socket.io is broken
[23:21] mjr_: sh1mmer: I added the setsockopt for TTL and pquerna suggested we do a generic socket options setter, which sounds awesome, but was too hard.
[23:22] mjr_: sh1mmer: but you could pretty easily add in the multicast options right next to the ones for ttl.
[23:22] jashkenas has joined the channel
[23:22] sh1mmer: that would be cool
[23:22] sh1mmer: although I'd still like to see a 0MQ implementation
[23:23] sh1mmer: I suspect I'd use that in preference
[23:23] pquerna: yes, multicast options would be a 10-20 line patch tops
[23:23] mjr_: NBCGoesSocial: check out this one:  https://github.com/brianc/node-postgres
[23:23] castral has joined the channel
[23:24] sh1mmer: does Tim's game do anything other than let you move the pieces around?
[23:25] Jezek: scratch that, almost got it working now
[23:26] unomi has joined the channel
[23:26] cafesofie has joined the channel
[23:26] mikew3c has joined the channel
[23:27] Jezek: just cant get messages to send
[23:27] NBCGoesSocial: Hmm, sounds like there are at least three node.js module implementations for postgresql. That makes me nervous
[23:27] wilmoore has joined the channel
[23:27] Jezek: http://pastebin.com/mgdDcup4
[23:27] Jezek: isn't that the way to do it
[23:28] NBCGoesSocial: This one looks like the best
[23:28] mscdex: node.js rules!
[23:29] Jezek: the callback for connect works fine
[23:30] springmeyer has joined the channel
[23:30] softdrink: Jezek:  in my little test thingie, i have socket.on('message'...
[23:31] Jezek: bleh
[23:31] Jezek: i was wrong actually.. swf file still isn't loading.
[23:31] Jezek: so that is probably the problem
[23:31] dguttman_ has joined the channel
[23:31] softdrink: try it in chrome
[23:32] Jezek: nothing
[23:33] Jezek: ohhh it has to go over the first js file
[23:33] Jezek: flash file loads.. still no alert though
[23:33] Jezek: socket.on('message', function(){ alert('test1'); }) 
[23:33] cferris has joined the channel
[23:33] jamesarosen has left the channel
[23:34] softdrink: are you for sure sending a message to the browser?
[23:35] Jezek: socket.send('some data'); right?
[23:35] softdrink: on the server side yeah
[23:35] Jezek: er?
[23:35] altamic has joined the channel
[23:36] Jezek: i just want to broadcast a message initiated from the clientside
[23:37] softdrink: http://jocafa.com:9876/   <— go here with two windows and click around… if you see dots, it's working
[23:37] techwraith: jezek, have you taken a look at node-boilerplate? it's a great example of a socket.io app
[23:38] Jezek: bleh
[23:38] Jezek: just trying to set up a simple app
[23:38] techwraith: Here's my fork of it (just added underscore and hbs support) https://github.com/Techwraith/node-boilerplate-hbs
[23:39] Jezek: i'd rather not add more files than i have to
[23:39] techwraith: Yeah, I was just saying you should take a look at it as an example
[23:39] techwraith: not use it as a base
[23:40] Jezek: hrm
[23:40] sudoer has joined the channel
[23:40] quest88 has joined the channel
[23:41] Jezek: not sure where to even look in that project
[23:41] BillyBreen has left the channel
[23:42] derferman has joined the channel
[23:43] springify has joined the channel
[23:47] yarinb has joined the channel
[23:47] tonymilne: Has anyone implemented an OAuth provider with DB persistence?
[23:47] Hello71 has joined the channel
[23:51] trotter has joined the channel
[23:51] omygawshkenas has joined the channel
[23:52] Jezek: i'm following the code exactly though
[23:58] zomgbie has joined the channel
[23:59] Druide_ has joined the channel
