[00:00] robotarmy has joined the channel
[00:00] Figaroo has joined the channel
[00:01] zomgbie has joined the channel
[00:01] micheil: TheEmpath: htracr?
[00:01] Figaroo: I woke up at 2:12 today
[00:01] Figaroo: I have Node.js to blame for that...
[00:01] TheEmpath: micheil: wat
[00:02] micheil: "TheEmpath: im monitoring all http/socket req/resp and queues"
[00:02] JusticeFries_ has joined the channel
[00:03] Figaroo: That's 2:12 pm...
[00:12] noahcampbell has joined the channel
[00:15] terite has left the channel
[00:16] jacobolus has joined the channel
[00:19] alek_br_ has joined the channel
[00:20] saikat has joined the channel
[00:20] Figaroo: Why in the Node.js documentation it mentions classes when js has no classes?
[00:23] Figaroo: Ehem.
[00:24] confused: I'm confused.
[00:24] jherdman has joined the channel
[00:24] isaacs has joined the channel
[00:25] jashkenas has joined the channel
[00:26] confused: I'm really not understanding the terminology in the documentation. How can all streams be an instance of EventEmitter?
[00:26] pedrobelo has joined the channel
[00:27] TheEmpath: i've definitely hit a point where if i say var a = b, by changing b, i change a
[00:27] TheEmpath: its high level and hard to reproduce, but im totally getting it
[00:28] TheEmpath: is this standard behavior in javascript?
[00:28] Pilate: confused: by copying the prototype of EventEmitter
[00:32] altamic has joined the channel
[00:32] skohorn has joined the channel
[00:34] dnolen has joined the channel
[00:34] sprout has joined the channel
[00:34] mjr_: confused: there is a Stream constructor function, and it changes its prototype to be EventEmitter by using util.inherits.
[00:35] mqt has joined the channel
[00:35] mjr_: Which is a really common pattern in node, to make your own objects inherit from EventEmitter.
[00:35] mjr_: So then you can do this.emit("something")
[00:37] confused: But in a classical language, doesn't an instance of a class mean an object from that class, not a class that inherits from another class?
[00:38] mjr_: well, don't get hung up on the terminology.
[00:38] aurynn: javascript is not like you think it is.
[00:38] confused: For example, "x is an instance of Klass" is like saying "var x = new Klass();" not "x.prototype = Klass"
[00:39] rwaldron has joined the channel
[00:39] ossareh has joined the channel
[00:39] confused: aurynn, I think javascript is a prototypical OOP language and class really shouldn't be in its terminology
[00:39] aurynn: It's still kind of a class.
[00:40] confused: type maybe, but not class because it's an object.
[00:40] iFire: anyone here use jasmine and knows of a more exampled guide? their offical docs don't work for me
[00:41] confused: mjr_, and it's hard to not get mixed up in the terminology when I'm learning/starting-out with node while reading the documentation.
[00:42] mjr_: confused: Take a look at what util.inherits() does.  When the docs say, "instance of EventEmitter", they mean that something calls util.inherits(EventEmitter);
[00:42] mjr_: And then manually invokes the EventEmitter constructor.
[00:42] jashkenas: confused: the "class really shouldn't be in its terminology" thing is a red herring. Call a rose a rose.
[00:43] jashkenas: String, EventEmitter, RegExp, Function, Object ... all of these are classes.
[00:43] confused: So you mean that all Streams inherit from EventEmitter?
[00:43] jashkenas: prototypes are the implementation detail.
[00:43] aconbere has joined the channel
[00:43] maushu has joined the channel
[00:43] jashkenas has left the channel
[00:43] jashkenas has joined the channel
[00:43] jashkenas has left the channel
[00:43] jashkenas has joined the channel
[00:44] quest88 has joined the channel
[00:44] mjr_: confused: when you read that in the docs, it means something like this:  https://github.com/mranney/node_redis/blob/master/index.js#L155-157
[00:44] confused: jashkenas, you know of any good articles that explain this. I always thought that using the word "class" in a prototypical language was a no-no.
[00:44] mjr_: And finding that example made me notice a bug, so thanks.
[00:44] mscdex: ryah: ping
[00:45] tjholowaychuk: jashkenas: yeah I agree with you
[00:45] jashkenas: confused: yes, there's certainly a lot of fud that gets thrown around to make it more difficult than it needs to be.
[00:45] tjholowaychuk: it really depends on the document I suppose, but I think its fine to call them that, its still a classification of something
[00:46] JusticeFries has joined the channel
[00:46] jashkenas: the basic explanation is simple, though: you have many of the same kind of thing. That kind of thing is a class. In philosophy, as in JavaScript.
[00:46] confused: tjholowaychuk, true. I think it does make sense to call them something other then constructors. Maybe types.
[00:46] confused: jashkenas, you make a good point.
[00:46] jashkenas: JavaScript just chooses to implement this behavior by having "constructor functions" (read, classes), with a property called "prototype", that points at the parent class, from which it inherits behavior.
[00:47] confused: I guess what JS developers were trying to say is that they're not classes in the classical sense.
[00:47] tjholowaychuk: plus if js was "purely" prototypal we would not really have constructors anyway
[00:47] jashkenas: tj: Bingo.
[00:47] tjholowaychuk: so it doesnt make things any cooler by mentioning that over a class
[00:47] ilpoldo has joined the channel
[00:47] jashkenas: But "purely" prototypal sucks to work with. So we're lucky.
[00:47] jashkenas: You don't want to have Adam and Eve objects that everyone has to clone from, in a giant chain.
[00:48] confused: why does purely prototypal suck to work with?
[00:48] jashkenas: Because you have to have a concrete instance of an object before you can inherit behavior from it ... this is sort of the case in JavaScript.
[00:48] jashkenas: 99% of all class-mimicking JS libraries' code is working around this.
[00:49] confused: jashkenas, give me an example
[00:49] jashkenas: So you end up with "classes" one way or the other ... they're just made more awkward because you have to be careful about treating them specially, and wiring them up. "This object is the prototype."
[00:49] jashkenas: an example of which bit?
[00:51] confused: An example of how you'd do things completely prototypical
[00:51] jashkenas: In JS, it's awkward without the new ECMA5 extensions... but:
[00:51] jashkenas: parent = {key: 100};
[00:51] jashkenas: child = function(){};
[00:52] jashkenas: child.prototype = parent;
[00:52] jashkenas: instance = new child();
[00:52] jashkenas: instance.key == 100;
[00:52] torvalamo: child.prototype.constructor = child
[00:52] jashkenas: right, there are more gotchas.
[00:52] jashkenas: And that still only works for a single level.
[00:52] jashkenas: If you want to inherit from child again, you have to be more sophisticated.
[00:52] tjholowaychuk: confused: if it was not for perf reasons, you would just clone something, and stick props on it
[00:53] tjholowaychuk: thats it
[00:53] jvolkman_ has joined the channel
[00:53] jashkenas: which is effectively the same as   new Thing().
[00:53] jashkenas: Even if it were all just .clone(), you'd still have an object that is the thing being cloned, and that thing can be called a class.
[00:54] tjholowaychuk: yeah its just liek how we view a constructor
[00:54] tjholowaychuk: its just a function
[00:54] tjholowaychuk: but we usually capitalize it
[00:54] tjholowaychuk: and call it a constructor
[00:54] tjholowaychuk: sorta the same argument
[00:54] confused: like you said, a class is something that has multiple instances.
[00:54] herbySk: jashkenas: no, that thing is actually the thing that should be properly called prototype
[00:54] jashkenas: uyeah.
[00:55] confused: Constructor is a function but we distinguish it form just a function like we distinguish methods form being just a function.
[00:55] jashkenas: herbySk: if it's not an object that you use for any purpose other than creating more copies (instances) of it, you can call it either, but "class" is quite correct.
[00:56] heavysixer has joined the channel
[00:56] herbySk: "prototype" is exactly the word for "a thing you do copies from to get more objects"
[00:56] isaacs has joined the channel
[00:56] herbySk: jashkenas: ^^^
[00:56] torvalamo: hasn't someone written an article about this yet so we can stop discussing it over and over?
[00:56] confused: herbySk, then what's the difference between a prototype and a class?
[00:56] jashkenas: apologies ... pet peeve of mine.
[00:57] confused: torvalamo, I would like to read that article ;)
[00:57] torvalamo: there are several from as far back as 2006
[00:58] herbySk: confused: a prototype is "prototypical instance of a class", a class is "a group of similar objects / something that describes and helps to creates such objects"
[00:58] confused: torvalamo, link me to the good one! :D
[00:58] torvalamo: "javascript inheritance" in google
[00:58] herbySk: javascript got it wrong when they use the word "prototype" for what they used it, then there is lot of confusion
[00:58] torvalamo: though i find it odd to treat js as an OO language
[00:59] altamic has joined the channel
[00:59] herbySk: confused: to see more real prototypical system, you may try to look at research.sun.com/self but I don't know if it's still working
[01:00] confused: I looked into self a bit
[01:00] herbySk: confused: then you know what a prototype is: the
[01:00] herbySk: , well, prototype, the thing the other objects are created from
[01:00] confused: it's sort of like javascript, I guess, without the 'new' keyword
[01:00] confused: operator*
[01:01] EnginA has joined the channel
[01:01] confused: herbySk, aren't other objects created from the 'this' object in the constructor?
[01:01] chrisdickinson: (it's also a lot like python's type system)
[01:02] herbySk: the crucial difference is that in real prototypical system, the canoncical way to create an object is to copy a protypical object, in javascript it is not so, the object is populated by code in constructor function (in a way, only a parent link is copied)
[01:03] ben_alman has joined the channel
[01:03] herbySk: confused, not calling the constructor does this: look at constructor.prototype, use it as a parent for newly created empty object, pass this object to the function as :this:
[01:03] herbySk: s/:this:/"this"
[01:04] saschagehlich: does a httpclient download files even if there is no onData callback?
[01:04] herbySk: I would not call javascript prototypical, but more like "classless constructor based"
[01:04] inimino: jashkenas ⋱ "class" in Java is part of the type system, and JavaScript doesn't have any of that machinery.
[01:04] very_confused: I give up. The terminology with JS is all over the place
[01:05] jashkenas: yeah, I give up too. Good luck navigating the misinformation.
[01:06] herbySk: very_confused: well, it's not that hard, just give it a try and read the section that in ES5 specs a few times over, until you get it
[01:06] delapouite: very_confused: good luck with this page dealing with prototype vs __proto ([[prototype]]) : http://joost.zeekat.nl/constructors-considered-mildly-confusing.html
[01:06] very_confused: someone just needs to point me to a good, correct article on this. I could google for it, but then there's a chance I might be missinformed.
[01:06] very_confused: miss-informed. :P
[01:07] very_confused: herbySk, which section?
[01:07] jashkenas has left the channel
[01:07] jashkenas has joined the channel
[01:08] herbySk: very_confused: I think the description of inheritance system is at the very beginnning, with a diagram showing the process
[01:10] herbySk: also, look for [[Construct]] string and read every section that contains it
[01:11] herbySk: it is the internal name used in the specs for the process of calling a function as a constructor
[01:11] zentoooo has joined the channel
[01:11] inimino: jashkenas ⋱ I know it's popular in the node community to just pretend that "these are just classes like any other", and that not calling them that is just pedantry and FUD, but there are good arguments for not using that term.
[01:11] bingomanatee_ has joined the channel
[01:12] paulrobinson has joined the channel
[01:13] inimino: very_confused ⋱ If you aren't afraid of jargon you can read the spec as herbySk suggests.
[01:13] jashkenas: inimino: I've found it to be the opposite. The Node community has a lot of folks who tell you: "forget everything you know about classes, JavaScript isn't object oriented, lol", and leave it at that.
[01:13] herbySk: inimino: why? In fact, they are very akin to classical notion of class: they have constructor function that are named the same as a class, which create instances, and these instances have shared behaviour (well, in js it can be a state, too) plus their own properites
[01:13] jashkenas: inimino: The implementation details are different, but the patterns of use are absolutely identical.
[01:14] herbySk: jashkenas++
[01:14] v8bot:  herbySk has given a beer to jashkenas. jashkenas now has 1 beers.
[01:14] tlrobinson has joined the channel
[01:15] very_confused: I want a beer. :D
[01:15] jashkenas: very_confused++
[01:15] v8bot:  jashkenas has given a beer to very_confused. very_confused now has 1 beers.
[01:15] very_confused: Yay!
[01:15] inimino: jashkenas ⋱ I don't think I've even seen "JavaScript isn't object oriented" from anyone here.
[01:15] very_confused: You just gave a underager a beer. ;P
[01:16] jashkenas: inimino: to wit.
[01:16] jashkenas: [00:39] confused: aurynn, I think javascript is a prototypical OOP language and class really shouldn't be in its terminology
[01:16] aconbere has joined the channel
[01:16] inimino: jashkenas ⋱ Right, that's not "isn't object oriented", anyway it's not important.
[01:17] SubStack: javascript is not a beautiful and unique snowflake
[01:17] tjholowaychuk: hahaa
[01:17] EnginAy has joined the channel
[01:17] Dreamer3_ has joined the channel
[01:18] inimino: jashkenas ⋱ I've found it helpful to explain things without using the word "class", and just describe the features the language actually has, without using analogies.
[01:18] very_confused: Can't we make up new terms? I'd much rather call these "classes" or "prototypes"..."popsicles"
[01:18] jashkenas: [10:25] ryan[WIN]: javascript isn't an OOP language 
[01:18] jashkenas: [10:32] blaines: it's almost easier not to even try oop
[01:18] jashkenas: etc.
[01:18] inimino: Well, I didn't see that :-)
[01:19] inimino: I might have agreed with what blaines may have been getting at, though.
[01:19] jashkenas: Sure, and like you say, it's not important. I think we agree -- by all means, explain the details. 
[01:19] tjholowaychuk: if you can do a foo.bar = 'baz' id call it OOP
[01:19] tjholowaychuk: unless you are bound to a struct
[01:19] tjholowaychuk: even then
[01:19] jashkenas: foo.bar = function(){}; is the real hallmark.
[01:20] inimino: yes
[01:20] jashkenas: objects that carry code as well as data.
[01:20] inimino: or foo.bar()
[01:20] jashkenas: right.
[01:20] SubStack: classifying languages into static groups isn't very useful
[01:20] inimino: you can do OOP in C with some hoop-jumping; it's not like there's a sharp line
[01:20] tjholowaychuk: yeah not really
[01:20] SubStack: especially when a language might have objects and first-class functions and prototypes
[01:20] inimino: It's probably more interesting to classify them according to their design.
[01:21] inimino: JavaScript was designed, intended, described, document, and specified to be an OOP languages.
[01:21] inimino: s/s//
[01:21] SubStack: javascript was not designed
[01:21] tjholowaychuk: ahaha
[01:21] inimino: Cute, but it's doing a disservice to Eich's work (under extreme constraints of time and otherwise) to say that.
[01:22] jashkenas has left the channel
[01:22] skm has joined the channel
[01:22] very_confused: I don't think javascript exists...
[01:22] Lorentz has joined the channel
[01:22] jashkenas has joined the channel
[01:23] SubStack: I wouldn't consider "that's great, but now rewrite it to have java syntax" to be "designed"
[01:23] tjholowaychuk: spidermonkey was the first right?
[01:23] SubStack: evolved is a better term
[01:23] inimino: I doubt many of us could design a better language under the circumstances, even knowing the history...
[01:23] tjholowaychuk: that brendan wrote
[01:23] tjholowaychuk: ?
[01:23] tjholowaychuk: I dig how small it is
[01:23] very_confused: javascript was evolved from spidermonkeys? :S
[01:23] isaacs has joined the channel
[01:24] tjholowaychuk: i wish Narcissus ran on node well
[01:24] tjholowaychuk: very_confused: that was the first js engine haha
[01:24] tjholowaychuk: a small c library
[01:24] jashkenas has left the channel
[01:24] jashkenas has joined the channel
[01:24] very_confused: so it did come from monkeys
[01:24] tjholowaychuk: "(originally called Mocha, then called LiveScript)"
[01:24] tjholowaychuk: mocha?
[01:24] tjholowaychuk: wtf
[01:25] inimino: very_confused ⋱ It was designed and implemented at the same time Netscape and then became called JavaScript around the time it was first released.
[01:25] very_confused: I wish it was still mocha
[01:25] very_confused: livescript and javascript are kinda lame names IMO, eve jScript sucks.
[01:25] very_confused: mocha sounds so much more delicious
[01:25] tjholowaychuk: anything "script" is kinda lame
[01:25] delapouite: ECMAscript is event prettier
[01:26] very_confused: tjholowaychuk, word
[01:26] very_confused: ECMAScript is a pain to type.
[01:26] very_confused: mocha just rolls of the keys
[01:41] tlrobinson has joined the channel
[01:42] kawaz_air has joined the channel
[01:43] brianc: uggg...having another problem with npm....anyone care to help out?  I installed it and can install packages but when I require the package in my programs it crashes saying "cannot find module 'npm'" or whatever
[01:43] sprout has joined the channel
[01:48] brianc: read a majority of the docs, have published my own package, still can never remember how to "set it up" to work with require... :/
[01:48] herbySk: very_confused: 13.2.2 is exact definiction of what new Foo(...) does
[01:49] brianc: all the dude ever wanted was to write a new session store for connect.
[01:49] ossareh has joined the channel
[01:51] mscdex: brianc: how are you requiring them?
[01:51] ryah: http://nodejs.org/dist/node-v0.3.2.tar.gz please test
[01:51] Wyverald has joined the channel
[01:51] brianc: require('npm') <-- doesn't throw error
[01:52] brianc: require('should') <--- boom, error
[01:52] ryah: % md5 node-v0.3.2.tar.gz 
[01:52] ryah: MD5 (node-v0.3.2.tar.gz) = 6ab47dab1b0cee84abebf7905b7c9562
[01:52] very_confused: herbySk, I think I'd be best just ignorantly using whatever term people agree to use. I have no need to understand all this...
[01:52] mscdex: ryah: you get my patch?
[01:53] ryah: mscdex: yes, it's in
[01:53] herbySk: very_confused: as you like, but it's good to understand to be able to read/write code in js; that terms are off is another matter
[01:54] ryah: http://nodejs.org/docs/v0.3.2/api/all.html
[01:54] trotter has joined the channel
[01:55] mscdex: no, not the os module. i sent a patch a little bit ago
[01:55] ryah: mscdex: for the repl
[01:55] mscdex: yeah
[01:55] ryah: yeah, it's in
[01:55] mscdex: oh ok
[01:56] very_confused: I understand that when I call a constructor (e.g. new Constructor()) that the 'new' operator creates a new object and then passes a reference to that object as 'this' while calling the constructor. The constructor does stuff with 'this' then the new object/this is returned by the entire 'new Contructor()' expression.
[01:56] brianc: very_confused: correct
[01:57] very_confused: then that's all I need to know for now. I don't need to know about the internal [[Prototype]] and stuff.
[01:57] brianc: very_confused: techincally it doesn't "pass a reference to that object as 'this'" the constructor executes "in the scope of the new object" which means "this" references the new object
[01:57] herbySk: very_confused: ok, then; plus a few gotchas (like, when constructor issues a return statement, or if a Constructor.prototype is not an object; but they are details, for majority of cases it's as you said)
[01:58] brianc: in javascript you can make "this" in a function be a reference to anything you want (generally).  basically "this" refers to the scope of the function
[01:58] brianc: var boom = function() { alert(this.location) }
[01:58] wasabist has joined the channel
[01:59] brianc: boom(); //in a browser i believe this will alert the url
[01:59] herbySk: brianc: well, I would agree with "pass an object as 'this'" (no need to stress it's a reference), in fact, this is not much more than an implicitly defined, hidden parameter to a function
[01:59] very_confused: oh so new basically does obj.apply(Constructor, arguments); where obj is the new object created
[01:59] brianc: boom.call({location: "i like to eat bananas"}); //now "this" references the object passed via the first argument of the call method
[01:59] herbySk: very_confused: yes, the new object is Object.create(Constructor.prototype) to be more exact
[02:00] mscdex: ryah: it fails compiling on openbsd
[02:00] herbySk: very_confused: well, you wrote it badly, in fact it's Constructor.apply(obj, arguments), but you probably meant it right
[02:00] just_confused: But there really are no classes right.
[02:01] dgathright has joined the channel
[02:01] isaacs has joined the channel
[02:01] cjm has joined the channel
[02:01] herbySk: just_confused: no, they aren't, there are really just an objects inheriting from objects but the way how new is implemented lets you think of it that way
[02:02] just_confused: exactly.
[02:02] mscdex: ryah: and fails on freebsd too, but different error
[02:03] just_confused: So what is meant by "All streams are instances of EventEmitter"?
[02:03] mscdex: just_confused: they inherit all of its properties and methods
[02:03] just_confused: I see.
[02:04] herbySk: That all objects that deserve to be entitled as "stream" have EventEmitter.prototype in their inheritance chain
[02:04] just_confused: how about "Raw data is stored in instances of the Buffer class"?
[02:04] muk_mb has joined the channel
[02:06] herbySk: just_confused: the same, "Raw data are stored in  objects that have Buffer.prototype in their inheritance chain (and, very probably were created as such b y calling new Buffer(...), though there are other ways to achieve it)
[02:07] herbySk: in other words, "foo instanceof Bar"
[02:07] herbySk: means "foo has Bar.prototype in its inheritance chain"
[02:07] herbySk: (well, .prototype was very unhappily chosen, it should be called instance_trait or shared_part or something like that)
[02:08] just_confused: chosen by the standard, you mean?
[02:08] herbySk: chosen by Mr. Eich
[02:08] herbySk: the standard just followed
[02:08] pHcF: ryah: 0.3.2 compiling in mac os x snow leopard 10.6.3 and on leopard (latest version)
[02:09] ryah: mscdex: freebsd, openbsd - not supporting unless someone patches me
[02:09] mscdex: i'm working on it
[02:09] ryah: mscdex: is it in v8 or node that it's broken?
[02:10] mscdex: freebsd is a v8 issue, openbsd a c++ issue
[02:10] stepheneb has joined the channel
[02:10] ryah: mscdex: you might want to look at https://github.com/ry/node/commit/c9d3a81db0e795f67ae478fe2e910c7c429dff60
[02:11] tmzt: is faye supposed to work with express/connect using attach on the app object?
[02:11] sonnym has joined the channel
[02:12] pHcF: tmzt: yeah
[02:13] bstahlhood has joined the channel
[02:13] tmzt: so nginx must be eating the posts or something, thanks
[02:13] pHcF: tmzt: is it working locally?
[02:14] jvolkman_ has joined the channel
[02:15] herbySk: just_confused: it may be helpful to change points of view and to see Foo not as a constructor function, but as a class (or, description of a class), forgetting for a while that it's a constuctor. Then. you can say, Foo is a class, the things that the instance share is the Foo.prototype and the constructing function of the instances is the actual body of Foo (since Foo is a function).
[02:15] herbySk: (or maybe it just creates more confusion, I don't know)
[02:16] trotter has joined the channel
[02:17] confused: I'm sure you could look at it that way, but in reality it's not the way it is. Unless officially, the standard approves those terms or something.
[02:18] ryah: mscdex: how's it look
[02:19] herbySk: confused: it's just another point of view at the actual state; in fact, nothing breaks if you see it that way (you just see at it from "classy" view of the user, not from the "it is implemented this way and so-called class is only a side-effect" low-level view)
[02:19] mscdex: ryah: the freebsd needed a patch that included similar things that your solaris patch has, there's also a change needed for openpty support on freebsd
[02:19] ryah: mscdex: ok
[02:20] ryah: i guess i'll hold off on the release
[02:22] pHcF: how much memory does an express process with external http requests, database and session should use?
[02:24] unomi has joined the channel
[02:26] Esherido has joined the channel
[02:27] confused: so the only way to run multiple scripts is for each of them to have a process?
[02:35] herbySk: confused: why, not, if they do some i/o activity like filesystem or net, they are always preempted by node so they can coexist happily. This is only true for script that do hold the processor (like long series of computation in loops)
[02:35] gbot2 has joined the channel
[02:36] heavysixer has joined the channel
[02:36] SubStack: rpc!
[02:37] SubStack: there are webworkers for computationally intensive stuff too
[02:38] gbot2 has joined the channel
[02:38] confused: herbySk, seems like a lot of work to get an app running. I'd have to call every script with node or node-dev
[02:40] herbySk: now I am confused :-) never mind
[02:40] confused: no I AM confused
[02:41] confused: your herbySk, you can't be confused.
[02:41] CIA-18: node: 03Brian White 07master * r6d75c06 10/ lib/repl.js : Add os module to repl's built-in lib list - http://bit.ly/eiT0UQ
[02:41] herbySk: ah, ok :-)
[02:41] dguttman_ has joined the channel
[02:42] CIA-18: node: 03Jorge Chamorro Bieling 07master * re530507 10/ test/pummel/test-next-tick-loops-quick.js : Add failing test for GH-511 - http://bit.ly/fB5BKO
[02:42] CIA-18: node: 03Ryan Dahl 07master * rd0beac7 10/ (deps/libev/ev.c deps/libev/ev.h src/node.cc): 
[02:42] CIA-18: node: Revert "Simplify next tick logic by looping around ev_loop"
[02:42] CIA-18: node: This reverts commit 241ea7e5954e4a049af85cd8d51b84202cf0ea3a.
[02:42] CIA-18: node: Fixes GH-511: https://github.com/ry/node/issues/issue/511 - http://bit.ly/fU3d8m
[02:43] confused: Is trying to use node to replace PHP a bad idea?
[02:43] mscdex: hmmm, it compiles fine on freebsd, but getting: call_and_retry_0 allocation failed - process out of memory
[02:43] mscdex: :\
[02:43] gbot2 has joined the channel
[02:43] ryah: mscdex: i have to go. letting the release slip until tomorrow 
[02:43] ryah: let me know if you got a patch
[02:43] mscdex: ok
[02:45] gbot2 has joined the channel
[02:46] gbot2 has joined the channel
[02:47] gbot2 has joined the channel
[02:53] meso has joined the channel
[02:54] alek_br has joined the channel
[02:56] gbot2 has joined the channel
[02:58] jamescarr has joined the channel
[03:00] gbot2 has joined the channel
[03:02] rburhum has joined the channel
[03:02] alexfner has joined the channel
[03:03] brianc: I <3 node.js
[03:04] brianc: I love it when you hit the zone, look up after an hour, and are like "whoah I just wrote a self hosting web app"
[03:04] brianc: I also love pizza.
[03:04] brianc: https://github.com/brianc/jade-mode
[03:08] mjr_ has joined the channel
[03:09] sechrist has joined the channel
[03:10] dgathright has joined the channel
[03:13] heavysixer_ has joined the channel
[03:16] confused: brianc, that's wonderful
[03:17] chapel: does ilovenodejs.com exist?
[03:17] chapel: :P
[03:17] SubStack: I like it when I hack on some ancillary module and look back at the main codebase later and think "hah now I can delete 50% of this"
[03:17] sechrist: ^
[03:17] sechrist: sys.pump did a lot of that for me
[03:18] SubStack: spin-off modules rock productivity and motivation-wise
[03:19] WealthyNewYorker has joined the channel
[03:19] WealthyNewYorker: How do I install node.js with Spidermonkey?
[03:19] sechrist: is this april fools?
[03:19] chapel: why would you want to? haha
[03:20] halfhalo: slightly
[03:20] chapel: no slight against spidermonkey, but v8 is awesome
[03:20] WealthyNewYorker: Someone said Spidermonkey was better
[03:20] WealthyNewYorker: ok
[03:20] sechrist: There is absolutely no case where Spidermonkey is better
[03:20] sechrist: it's quite the opposite
[03:21] chapel: just because firefox's arewefastyet.com has some comparable tests, that doesn't mean its faster or going to be faster in node
[03:21] WealthyNewYorker: Hmm, this might be good for some things I still need to do in Apache: http://code.google.com/p/v8cgi/
[03:21] sechrist: WealthyNewYorker: ...what?
[03:22] SubStack: I want a javascript DSL for writing node c++ modules
[03:22] chapel: dsl?
[03:22] sechrist: domain specific language
[03:22] WealthyNewYorker: sechrist: lIt looks like a good solution
[03:22] chapel: ah
[03:22] chapel: yes
[03:22] chapel: just looked it up
[03:22] chapel: :)
[03:23] sechrist: WealthyNewYorker: No, Node.JS is a good solution
[03:23] sechrist: why do you need cgi?
[03:23] chapel: honestly I dont see why you wouldn't use node.js if you want to do js serverside
[03:23] WealthyNewYorker: v8cgi is good for simple stuff
[03:23] SubStack: something like perl's Inline::C would rock too
[03:23] SubStack: HMMMMM
[03:23] chapel: node.js is great for simple stuff :P
[03:24] chapel: in fact, simple stuff is all I have made with node.js (haven't tackled any big projects yet)
[03:24] sechrist: ok yeah i'll use a one-off project with hardly any community support instead of this awesome v8-backed ecosystem called node.js
[03:24] sechrist: that does everything this does, and a hell of a lot more
[03:25] mbrochh has joined the channel
[03:25] sechrist: Anyway, has anybody in here done any CEP type stuff in node?
[03:25] sechrist: That whole domain seems to be pretty dominated by java and esper
[03:26] bruse: CEP?
[03:26] sechrist: Complex event processing / Event stream processing
[03:26] chapel: have any examples?
[03:27] sechrist: yeah, esper
[03:27] sechrist: http://esper.codehaus.org/
[03:27] sechrist: it's used a lot in like stock analysis and stuff
[03:29] chapel: I dont see why node couldn't be used
[03:29] sechrist: of course it can, but CEP is really complex
[03:29] sechrist: I can't justify writing a CEP system myself, so I have to use java
[03:29] confused: Should I use another server along with Node, or can I just use Node completely for everything? :D
[03:30] dannycoates has joined the channel
[03:31] sechrist: ESP/CEP is pretty hardcore enterprise stuff though
[03:31] sechrist: your average startup isn't even going to know wtf that is
[03:31] chapel: confused: you can use node for everything
[03:31] chapel: it really depends on what you want to do
[03:31] sh1mmer has joined the channel
[03:32] sechrist: chapel: http://www.espertech.com/images/products_esp_cep.jpeg
[03:32] sechrist: I see redis being really good at doing this but I'm not sure conceptually how to achieve it
[03:32] chapel: yeah, honestly most of what I saw about it goes over my head
[03:33] sechrist: basically the idea is, you feed a bunch of info into this stream
[03:33] confused: chapel, I want to make a realistic virtual world were computer users can plug in via USB and enter a completely detailed graphic world and fly!
[03:33] chapel: I think the problem is they have a lot of their own 'language' about it, if you got to the core of what was needed, it would be easier/make mor sense
[03:33] sechrist: and when things you define happens, events are triggered
[03:33] chapel: but you see, that in itself is fine, even I could whip something up to do that
[03:33] confused: And they can eat anything they want, and not get fat or sick.
[03:34] chapel: though do you have to match some predefined method or terminology in your design?
[03:34] confused: can i do that with node?
[03:34] sechrist: eh it's a bunch of corporate buzzwords
[03:35] chapel: hmm confused, well the virtual world part requires more than node
[03:35] chapel: at least at this point in time
[03:35] chapel: but the serverside of things can be handled by node
[03:35] sechrist: ThirdLife.JS
[03:35] chapel: heh
[03:35] sechrist: instead of LUA
[03:35] sechrist: you write JS
[03:35] confused: oh, you mean it requires apache
[03:35] skm has joined the channel
[03:36] chapel: no
[03:36] chapel: I dont know where you get that from
[03:37] chapel: node atm doesn't have OS gfx bindings, meaning it would be hard to make a 3d game all in node
[03:37] confused: no, I'm just trolking (trolling/joking
[03:37] chapel: yeah I figured
[03:37] yozlet has joined the channel
[03:37] chapel: but I was just being nice
[03:37] confused: But how would I get the USB ports on the back of peoples heads?
[03:37] chapel: some people have ernest requests
[03:38] chapel: well node is great for that
[03:38] confused: chapel, I appreciate you not flaming me with GTFO requests.
[03:38] Spion_ has joined the channel
[03:39] confused: really? Node can add ports to the back of peoples heads? O.o
[03:39] shinmei has joined the channel
[03:40] dgathright has joined the channel
[03:40] shinmei has joined the channel
[03:40] chapel: why do you think its called node
[03:42] confused: chapel, because I've seen other people incorrectly call it that. :P
[03:45] confused: should I not call it Node?
[03:46] paparent has joined the channel
[03:47] paparent has joined the channel
[03:47] chapel: well you can call node.js node if you want
[03:48] confused: You call it node.js?
[03:49] chapel: not sure if serious
[03:50] noahcampbell has joined the channel
[03:50] confused: It's a serious question; I don't want to sound like an idiot amoung other node.js users. :\
[03:51] torvalamo: are you saying you're not?
[03:51] torvalamo: zing
[03:52] confused: torvalamo, not what?
[03:52] torvalamo: just reading the last page i see at least three misunderstandings between the two of you, which is weird because it doesn't take much to get those right
[03:52] chapel: confused: node / node.js I really dont see an issue calling it either, in 'mixed company' though you might want to call it node.js so they know what you are referring to (mixed being non- node.js users)
[03:54] confused: chapel, got it. ;)
[03:54] confused: torvalamo, my nick isn't confused for nothing. 
[03:57] confused: So with Node.js I run js scripts using the node command. Now, are these scripts running in some kind of environment until I ctrl+c to exit them?
[03:58] torvalamo: yes they run in the matrix
[03:58] confused: Wow, Node gets more awesome as I go!
[03:59] torvalamo: with node, you too can learn kung-fu
[03:59] cjm has joined the channel
[04:00] eboyjr has joined the channel
[04:01] eboyjr: I need a way to restart node from within node, what's the best way to do that?
[04:01] confused: torvalamo, I know what you mean. After I make installed I was like, "I know jujitsu."
[04:01] mscdex: nodejitsu!
[04:02] hobodave has joined the channel
[04:02] SubStack: eboyjr: forever + process.exit()
[04:02] torvalamo: eboyjr, you probably want nodemon
[04:02] torvalamo: or forever
[04:02] confused: there should be a lanaguage called jujitsu
[04:02] torvalamo: so make it
[04:02] torvalamo: but make sure it has a unique purpose
[04:02] mscdex: ./configure && make jujitsu
[04:03] eboyjr: SubStack: Whats forever? A library?
[04:03] confused: It will, torvalamo. I'm going to make a language with the explicit purpose to drive people insane. XP
[04:03] mscdex: forever is an indefinite period of time :p
[04:03] eboyjr: Written in js?
[04:03] jvolkman_ has joined the channel
[04:03] chapel: someone needs to make an npm bot for here
[04:03] torvalamo: forever is the opposite of vapor
[04:04] chapel: its sole purpose would be to list info from modules
[04:04] chapel: :P
[04:04] mscdex: chapel: you mean http://npm.mape.me ?
[04:04] confused: there's a rape.me domain?
[04:04] eboyjr: Oh its a command program
[04:04] chapel: well more a bot mscdex
[04:04] SubStack: MAPE ME...
[04:04] torvalamo: mape needs to make a bot out of it then
[04:05] confused: oh right, my bad.
[04:05] chapel: so you could do npm: forever
[04:05] mscdex: no need for a bot when you have that site
[04:05] mscdex: ;-)
[04:05] chapel: and it would liste the info for forever
[04:05] confused: I wonder if rape.me is avaible though.
[04:05] torvalamo: who the fuck needs browsers when you have bot commands!
[04:05] SubStack: mape me my friend!
[04:05] eboyjr: SubStack: torvalamo: Ill just use spawn("node", __filename); process.exit(0);
[04:05] chapel: by that logic mscdex, no need for yoursite, could hit up npm's couchdb directly
[04:05] chapel: :P
[04:05] SubStack: eboyjr: :(
[04:05] torvalamo: i wouldn't do that
[04:05] eboyjr: How come? I can't really install forever
[04:05] confused: SubStack, yes yes. But now I wonder if the other one exists.
[04:06] SubStack: eboyjr: what if your script crashes?
[04:06] torvalamo: you should use forever or nodemon
[04:06] torvalamo: they're both available if you google
[04:06] eboyjr: SubStack: Then it will crash, its an irc bot and I need a restart command
[04:06] torvalamo: and include node.js in the search
[04:06] MikhX has joined the channel
[04:06] SubStack: or hell just while true; do node script.js; done is better than spawning from inside node
[04:06] torvalamo: and you should really install npm
[04:06] torvalamo: you won't regret it
[04:06] torvalamo: you'll need it later
[04:06] SubStack: eboyjr: restart commands suck for bots
[04:06] SubStack: just do rpc
[04:06] eboyjr: rpc?
[04:07] SubStack: and then you can hot-swap your modules at runtime
[04:07] chapel: eboyjr: is the only reason you want to restart it is because of code changes?
[04:07] SubStack: that's what I do for rowbit
[04:07] SubStack: http://github.com/substack/rowbit 
[04:07] eboyjr: chapel: Yes it makes it really easy
[04:07] chapel: check out node-dev
[04:07] chapel: it automatically restarts your script if you make a change in the file
[04:07] SubStack: chapel: but it's really annoying to see bots part and join
[04:08] torvalamo: well that's life
[04:08] SubStack: no it doesn't need to be
[04:08] torvalamo: so make it in erlang
[04:08] chapel: SubStack: well as much as I agree, its only during development
[04:08] eboyjr: chapel: That's really neat I'll keep that in mind, however I can't install anything else
[04:08] SubStack: torvalamo: but you can already do it the correct way in node.js
[04:08] SubStack: hell, just fork rowbit
[04:08] torvalamo: actually i don't think you can hotload code which already uses a specific socket and listener and all that stuff
[04:08] matt_c has joined the channel
[04:08] chapel: but I saw your stuff before SubStack and agree it is a good way of handling it
[04:08] SubStack: chapel: development for irc bots is continuous in my experience
[04:08] torvalamo: so you'd still need to reconnect
[04:08] confused: so what exactly happens when I call the node command? Does the script get loaded into some kind of environment, similar to how the browser loads a script. And does this script stay "alive" as long as I don't close it, sort of like a browser tab?
[04:08] eboyjr: spawn() exit() it is, thanks though for the useful solutions that i will keep in mind
[04:08] eboyjr: :)
[04:09] SubStack: lame!
[04:09] chapel: couldn't he also watch for errors and just restart it if an error happens?
[04:09] torvalamo: netsplits will happen more often than you need to restart your bot
[04:09] chapel: maybe logging the stack
[04:10] torvalamo: after the initial dev
[04:10] mscdex: confused: execution of a script with node will continue until there is nothing left to do. in other words, whenver there are no other listeners listening for events
[04:10] ysynopsis has joined the channel
[04:10] eboyjr: SubStack: It's only temporary :)
[04:10] eboyjr: temporary lameness
[04:10] shripadk has joined the channel
[04:11] SubStack: but it's easy to do it the right way!
[04:11] confused: Oh I see. Thanks mscdex.
[04:11] Insanity5902 has joined the channel
[04:11] confused: Another thing with Node, is that it's not a *server* rather you're scripts *create* servers.
[04:12] torvalamo: SubStack, so make a module for it
[04:12] torvalamo: so people won't have to rewrite it in all different shapes and sizes
[04:13] chapel: torvalamo: dnode
[04:15] torvalamo: that's similar, but not quite the same
[04:16] torvalamo: i'm thinking more erlang type hot loading, or that on file change thing
[04:16] torvalamo: where in your script you override the require or something
[04:17] eboyjr has left the channel
[04:18] chapel: well node-dev really is what I use for that functionality
[04:18] WealthyNewYorker: SubStack: Would you use v8cgi to replace PHP?
[04:18] chapel: I think you would have to rewrite node's internals to have hot loading, and I know not enough to do that
[04:19] chapel: WealthyNewYorker: why not just use node.js?
[04:19] chapel: if you want js on the serverside, you're not going to get better elsewhere
[04:19] torvalamo: cgi is so limiting that it's awesome for noobs
[04:20] WealthyNewYorker: SubStack: I need it running inside Apache :/
[04:20] torvalamo: no you don't
[04:21] sechrist: nothing needs to be inside apache
[04:21] WealthyNewYorker: I am using node.js for the message queuing part of the web app, but I just need basic server-side including
[04:21] WealthyNewYorker: In a few pages
[04:21] sechrist: and you've seen express / jade?
[04:22] torvalamo: server side .js files aren't executed per request
[04:22] torvalamo: at least that's not the intention
[04:22] halfhalo: saying you need it in apache is saying you need this unnecessarily large wrench up your ass.  A horrible, horrible idea
[04:22] SubStack: WealthyNewYorker: I don't have any php to replace.
[04:22] chapel: I would gladly replace vbulletin with a node solutions, but as of yet I haven't built one
[04:23] brianc: tj: you there?
[04:23] jamescarr: egads
[04:23] chapel: though for an interrum solution I was thinking of hijacking vbulletins built in db functions and have it interface with redis for reading and mysql standard for writing
[04:23] confused: I heard firefox and opera have disabled websockets because of security issues involved with the spec. Does this mean I should wait out development with websockets until this issue gets resolved?
[04:23] jamescarr: got to keep in mind not to copy and paste bash scripts blindly from sites that hand them out to install their apps
[04:23] jamescarr: the guy made me do sudo -s
[04:23] SubStack: torvalamo: well rowbit does already have a package.json
[04:23] torvalamo: chapel, i'm sure there are some ancient C bulletin board systems out there
[04:23] torvalamo: :P
[04:23] jamescarr: everything I've been doing the last hour was as root
[04:24] halfhalo: hah
[04:24] chapel: torvalamo: the only reason I use vbulletin is because I came into the project and the users expect it :(
[04:24] halfhalo: ACTION only uses one account on linux systems. root or GTFO
[04:24] torvalamo: just running vbulletin isn't bad
[04:24] torvalamo: it's bad if you have to fix shit
[04:24] mbrochh has joined the channel
[04:24] mbrochh has joined the channel
[04:25] chapel: I hate vb's templating, despise it
[04:25] sechrist: fix as in bugs or scalability?
[04:25] sechrist: 1. beef up mysql
[04:25] sechrist: 2. more webapp nodes with haproxy
[04:25] sechrist: done
[04:25] chapel: vbulletin is easily scaleable
[04:25] chapel: but I dont want to spend money where I dont need to
[04:25] sechrist: scalesabalez
[04:26] chapel: anyways not an issue for here
[04:26] chapel: :)
[04:26] torvalamo: if you want easy templating i guess there's phpbb
[04:27] torvalamo: though that's probably also subjective
[04:27] jamescarr: fuck...
[04:28] skm has joined the channel
[04:29] chapel: again, I use vb for the users, any other choice, be it phpbb, or whatever, I would have to heavily hack to work the way I need it to work, and is not worth it at this time :P
[04:31] mikeal has joined the channel
[04:31] torvalamo: making a forum in node would be cool though
[04:33] torvalamo: i can see a lot of ajax happening
[04:33] torvalamo: :p
[04:33] skohorn has joined the channel
[04:35] paulrobinson has joined the channel
[04:36] chapel: well my thought would be use use a couchapp for the client
[04:36] chapel: and use node for everything behind the scenes
[04:37] cjm has joined the channel
[04:37] chapel: since forums are just heavy database applications, interfacing directly with the database would speed it up considerably
[04:41] beta has joined the channel
[04:41] TheEmpath: what does this mean? "Error: You are trying to call recursively into the Flash Player which is not allowed. In most cases the JavaScript setTimeout function, can be used as a workaround."
[04:44] saschagehlich_ has joined the channel
[04:48] iFire: so what happened to require.async? node plugin jasmine fails with it
[04:56] jamescarr: oh man
[04:56] jamescarr: $($(this).attr('href')).val(1);
[04:56] chapel: wow, gotta love jquery
[04:57] micheil has joined the channel
[04:58] herbySk: TheEmpath: As I read it, the flash called javascript in a page, and hhat called Flash back, which Flash does not like, and instruct you to just put the flash call in a setTimeout
[04:59] dragunov11: chapel, try fluxbb ?
[04:59] herbySk: (not that I know what you're doing)
[05:00] chapel: dragunov11: honestly I want to get away from php in general
[05:00] chapel: my site is fine as it is with vb atm
[05:01] chapel: no pressing need to move
[05:01] iFire: what unit testing / bdd frameworks do you guys use?
[05:02] brianc: wrote my own in literally 10 lines of code
[05:02] brianc: expresso & vows are popular
[05:02] brianc: "should" is a really really nice little extension for more expressive tests, regardless of what framework you use
[05:02] iFire: spend time on trying to figure out why jasmine doesn't work on node js >= 0.3.0
[05:02] torvalamo: chapel: i wouldn't use couch/mongo for it though.. a forum is pretty straight forward plain sql
[05:02] brianc: https://github.com/visionmedia/should.js
[05:03] brianc: iFire: yeah i spent too much time trying to learn a test framework
[05:03] brianc: so I wrote this:
[05:03] brianc: test = function(name, fn) { fn() };
[05:04] brianc: haha
[05:04] iFire: brianc I'm new to javascript is there a command that prints all the functions in a function?
[05:04] brianc: iFire: all the functions in a function? no comprendo.
[05:04] iFire: hmm
[05:05] micheil: ryah: just found out I don't need to write a C binding for the phidget
[05:05] torvalamo: jasmine is pretty cool for bdd.. it's been renamed and rewritten to something else though that i can't remember
[05:05] torvalamo: or maybe jasmine was the rewrite
[05:05] chapel: torvalamo: well initially I would agree, but knowing enough about vb and forums in general, couchdb with mapreduce and views is perfect for forums
[05:06] torvalamo: so is sql and views...
[05:07] chapel: sure, but can you render the forum directly on mysql or any other sql based db?
[05:07] chapel: nope, you have to use another platform/language/whatever to be able to deal with the data
[05:08] torvalamo: well that depends on the library
[05:08] brianc: exit
[05:08] torvalamo: some libraries do it well and return json for either the complete set or each part
[05:08] torvalamo: as one would want in this situation
[05:08] iFire: torvalamo can you load it up on npm [jasmine] which is really jasmine-tools and figure out why it doesn't work on the latest version of node?
[05:09] iFire: ah
[05:09] iFire: that's why
[05:09] torvalamo: it's jasmine-node, isn't it?
[05:09] iFire: hmm?
[05:09] torvalamo: misko hevery's node version of jasmine
[05:10] iFire: it's not on npm :/
[05:10] torvalamo: it's on github
[05:10] iFire: I'll have to manually install it
[05:10] torvalamo: it's not hard
[05:10] iFire: and jasmine-tools has a server
[05:10] torvalamo: just download the tar or zip
[05:10] chapel: torvalamo: I am not gonna say sql isn't good for forums, but I really think a document based store could be better, or at least as comparable
[05:11] iFire: torvalamo talking about 0.3.1
[05:11] chapel: one thing that sql suffers with forums is large threads, of course you can design around that, there is only so much you can do before it becomes a performance issue
[05:12] torvalamo: what?
[05:13] torvalamo: in a forum you have thousands, if not hundred thousands of posts... whether or not they are in the same thread or spread over several threads should make no difference
[05:13] chapel: oh it makes a different in vb at least
[05:13] torvalamo: if vbulletin gets slower with large threads it's doing something wrong
[05:14] chapel: probably is
[05:14] torvalamo: also probably has something to do with it using mysql
[05:14] chapel: one large forum I frequent actually restricts threads to 20k posts, after which they have to make a new thread to replace it
[05:14] chapel: anyways
[05:15] chapel: I am not saying sql is bad, just that I think nosql can be just as good or better depending on implementation
[05:15] marienz has joined the channel
[05:15] torvalamo: yeah it's probably because they join all the data (user, thread, post, privileges, session, etc) before limiting the post set
[05:15] torvalamo: to the specific page
[05:15] iFire: torvalamo I realized why I didn't use the default jasmine, because it doesn't show what was tested, just that it was tested
[05:15] chapel: yeah probably torvalamo
[05:15] torvalamo: the default jasmine is for browser js
[05:16] iFire: default as in jasmine-node rather than jasmine-tools
[05:18] mikew3c has joined the channel
[05:20] torvalamo: ah
[05:20] torvalamo: no idea about that
[05:20] torvalamo: never used jasmine for node
[05:20] torvalamo: i do unit testing with nodeunit in node
[05:20] torvalamo: bdd only for browser
[05:20] torvalamo: not sure why
[05:21] torvalamo: just feels right i guess
[05:23] Spion__ has joined the channel
[05:24] googol has joined the channel
[05:24] iFire: right now I'll downgrade to v0.2.5 to see what actually displays so I can decided whether or not I should bug him
[05:25] torvalamo: http://www.youtube.com/watch?v=u404SLJj7ig
[05:25] iFire: decide*
[05:25] torvalamo: netscape documentary from 1999
[05:25] confused: why does sys.puts(sys.inspect(sys)) output 2?
[05:27] TheEmpath: what happens in socket.io (this.sessionid = message) when message is an object?
[05:27] torvalamo: try it
[05:27] rpflo has joined the channel
[05:28] MikhX has joined the channel
[05:28] shajith has joined the channel
[05:28] jchris has joined the channel
[05:31] galaxywatcher has joined the channel
[05:33] quirkey has joined the channel
[05:34] iFire: torvalamo jasmine-tools runs a mini web server
[05:34] torvalamo: ok
[05:34] iFire: and the author missed a dependency
[05:35] iFire: but it worked on 0.2.5
[05:35] torvalamo: yeah but does it run node tests? or browser tests?
[05:36] iFire: well it's a node app...
[05:38] iFire: torvalamo the javascript tests is included in the html file
[05:38] iFire: are(
[05:38] iFire: are*
[05:39] torvalamo: yeah it's a node app because the server part runs on node, but the testing is done in the browser i presum
[05:39] torvalamo: e
[05:39] torvalamo: since it does start a server
[05:40] WealthyNewYorker: Rhino?
[05:41] chapel: why are you against node.js WealthyNewYorker
[05:42] torvalamo: maybe he prefers mozillaJS over googleJS
[05:42] WealthyNewYorker: I'm not, just can't afford a separate server yet for node.js
[05:43] noahcampbell has joined the channel
[05:43] shajith has joined the channel
[05:43] torvalamo: you don't need a separate machine to run a separate server
[05:43] torvalamo: just use a different port
[05:43] halfhalo: you do if its apache
[05:43] halfhalo: because thats sloooow
[05:43] chapel: I honestly dont think it matters when it comes to js on the server, at this point in time, v8 seems to be the more robust option and there is a reason node is popular
[05:44] torvalamo: halfhalo, that's what multicore is for
[05:44] halfhalo: bah, multicore
[05:44] halfhalo: BACK IN MY DAY,  WE HAD HALF A CORE AND LEARNED TO LOVE IT
[05:45] torvalamo: back in my day we didn't even have cores
[05:45] torvalamo: we had tubes
[05:45] WealthyNewYorker: OH NO more MONTY
[05:45] ewdafa has joined the channel
[05:45] torvalamo: (ok, technically that was like 20 years before i was born, but still)
[05:46] iFire: torvalamo they might have the js just because it's easier to parse the structure though
[05:46] torvalamo: the what now?
[05:46] Lorentz has joined the channel
[05:46] iFire: jasmine-tools
[05:46] torvalamo: i think you're misunderstanding
[05:46] torvalamo: if it starts a server it's obviously for testing browser js
[05:47] torvalamo: by loading a page in the browser
[05:47] iFire: or it could be to show a nice graphical webpage?
[05:47] iFire: report?
[05:47] iFire: admin console (rerun tests)
[05:47] torvalamo: doesn't make sense to do it that complicated
[05:48] iFire: it's like 13 lines of html...
[05:48] torvalamo: is it a frameset?
[05:49] iFire: it's not in the html, not sure if you can make on in js though
[05:49] torvalamo: misko hevery is also the author of jstestdriver, which is an engine for deploying tests into multiple browsers (local and remote) by one command
[05:50] torvalamo: i had started making that in node, but it sort of died off
[05:50] iFire: well this needs to be in node because I want to test a app on redis
[05:50] iFire: and redis is a native extension
[05:51] iFire: hmm I guess I can test it by making it look at native stuff
[05:52] cnus8n has joined the channel
[05:52] torvalamo: if you need to test node code you probably have to use unit tests instead of beaviour tests
[05:52] torvalamo: unless that thing that was mentioned earlier
[05:52] torvalamo: is bdd
[05:52] torvalamo: nodeunit is unit (obv)
[05:53] iFire: what's the difference?
[05:53] torvalamo: difference between behaviour and unit tests?
[05:54] iFire: well difference as in unit tests doing what bdd can't
[05:54] torvalamo: behaviour tests specific actions the user (or other agents) perform and only check for the end result after all the subroutines are called, whereas unit testing is testing each and every routine (that is accessible) for correct and bad input and ouput
[05:55] torvalamo: regardless of their order in any behaviour
[05:56] WealthyNewYorker: We need a Sarbanes-Oxley compliance module for node.js
[05:56] torvalamo: unit testing is appropriate for APIs, behaviour is appropriate for specific end products
[05:57] iFire: I've read that bdd and unit are exchangable
[05:57] torvalamo: generally behaviour frameworks include unit testing capabilities, but not the other way around
[05:58] torvalamo: i'm not too sure though
[05:58] iFire: well behaviour is supposed to a evolved unit testing
[05:58] torvalamo: yeah it's more higher level and doesn't care so much about the details
[05:58] iFire: unit testing merged with domain modelling
[05:58] Dreamer3_ has joined the channel
[05:58] WealthyNewYorker: ok
[05:59] slloyd has joined the channel
[05:59] WealthyNewYorker: what about just end product testing?
[06:01] iFire: not sure, but one blog posts says they can do the same things except from another view
[06:01] iFire: gah typos
[06:02] iFire: Having used both Test::Unit and RSpec, I have to agree with Jim Weirich: the difference between the two is primarily semantics. It seems to me that functionally, they are both equally capable of verifying and specifying code. However, the way in which you write the tests—the semantics—is the primary difference between the two http://teachmetocode.com/articles/rspec-vs-testunit/
[06:02] WealthyNewYorker: Does node.js have a framework comparable to Django?
[06:03] torvalamo: well think of it like this: unit tests test units (that is, something that takes an input and gives an output based on that, and generally has no side effects), behaviour tests test that the actions you perform give the desired side effects (or returns the desired data)
[06:03] stepheneb has joined the channel
[06:03] torvalamo: so it's more of a process test vs state test
[06:03] torvalamo: that's how i think of it anyways
[06:04] arrty has joined the channel
[06:04] fangel has joined the channel
[06:05] iFire: WealthyNewYorker I'm new, I have no idea [just saying this because silence is annoying]
[06:05] torvalamo: express
[06:06] danking has joined the channel
[06:07] themiddleman has joined the channel
[06:08] iFire: oh yeah I'm going to test the __filename command
[06:08] iFire: well name
[06:08] danking: Hey, any idea what this error might be caused by: https://gist.github.com/744556
[06:08] alexfner has joined the channel
[06:09] danking: Apparently one of the streams' `write' function is removed somehow.  I'm invoking node.js as a subprocess from another language and writing a (rather lengthy) script to its stdin.
[06:09] mtodd has joined the channel
[06:09] danking: The node.js repl, that is to say.
[06:14] skm has joined the channel
[06:14] yozlet has joined the channel
[06:16] brianc: just got started on this: https://github.com/brianc/postgres-session
[06:17] brianc: it's session middleware for express (via connect session middleware) storing session object in PostgreSQL server. ;)
[06:18] nsyee has joined the channel
[06:22] bruce has joined the channel
[06:25] yyamano has joined the channel
[06:29] mbrochh has joined the channel
[06:29] mbrochh has joined the channel
[06:37] yyamano has joined the channel
[06:42] termie has joined the channel
[06:44] alek_br has joined the channel
[06:45] shachaf has joined the channel
[06:50] yyamano: /msg nickserv help
[06:52] sivy has joined the channel
[06:54] langworthy has joined the channel
[06:57] sudoer has joined the channel
[06:57] bingomanatee_ has joined the channel
[06:58] CIA-93 has joined the channel
[06:58] admc has joined the channel
[06:59] iFire: torvalamo vows has a impressive webpage 
[07:00] AAA_awright_ has joined the channel
[07:00] skm: is there a way to stop a loop programatically
[07:00] skm: e.g. script.runInNewContext is stuck in a loop - how to i stop it
[07:00] bingomanatee_ has joined the channel
[07:00] skm: or can i stop script.runInNewContext at all
[07:00] torvalamo: no
[07:00] SubStack: process.exit()
[07:01] skm: process is undefined in the context
[07:01] SubStack: only way to be sure
[07:01] torvalamo: you need to run the script as a separate process and then kill that process
[07:01] torvalamo: of course that costs more
[07:01] torvalamo: just don't make endless loops
[07:01] MikhX has joined the channel
[07:02] skm: im executing functions provided by users
[07:02] skm: it's a data manipulation app where the users can upload js functions to change the data
[07:02] skm: sandboxing works fine the only issue i have is endless looops
[07:04] SubStack: spawning a separate process is pretty easy for that
[07:04] SubStack: spawn() and set a timeout
[07:04] mbrochh has joined the channel
[07:04] SubStack: and check for the proc's 'end' event
[07:05] SubStack: you could read the code from stdin in the sandbox script and do the Script sandboxing
[07:06] Garo_: is it just me or is the node github repository somehow broken? I can't clone it due to this error: error: The requested URL returned error: 502 (curl_result = 22, http_code = 502, sha1 = 41c1563584bfb018a444e92f01f8cff87ccda30b)
[07:08] skm: so i would have to spawn('node') then pass the code to stdin
[07:09] skm: would there be much of a performance hit? currently returning the data from sql takes 0.7 seconds then the manipulation takes 0.005 seconds
[07:10] skm: i migth be better off doing a regex and denying any function for 'for' or 'while' in it
[07:10] micheil: ryah: look what I found: http://beej.us/guide/bgnet/output/html/multipage/index.html
[07:10] skm: to keep the speed as fast as it currently is
[07:10] micheil: '
[07:10] micheil: :D
[07:10] iFire: skm or do some sort of keep alive / ping and kill the process
[07:11] skm: spawning the processes and passing back the data would have a big performance hit though wouldnt it
[07:11] SubStack: skm: regex is silly since people can just eval() or write a recursive function
[07:11] SubStack: skm: try it and see
[07:12] SubStack: no use speculating about something that is easy to test
[07:13] SubStack: if you're worried about node startup time you can queue up a node instance in anticipation of a user request
[07:14] iFire: a node instance pool
[07:14] skm: passing the data from the spawned processes to the current process i would have to JSON.parse from stdout of the spawnned process yeah?
[07:15] iFire: that's slow?
[07:15] iFire: test it
[07:16] skm: yeah im trying atm
[07:16] skm: v new to node
[07:16] confused has joined the channel
[07:16] SubStack: intuition about performance sucks
[07:16] skm: 'easy to test' isnt the case for me
[07:16] skm: lol
[07:16] SubStack: eh? just write a tiny test app
[07:16] derren13 has joined the channel
[07:16] SubStack: prototypes!
[07:17] SubStack: it's easier to draw conclusions in isolation anyway
[07:19] mscdex: node.js rules! *BSD sucks!
[07:19] mscdex: :p
[07:19] saikat has joined the channel
[07:19] skm: err Error: ENOTTY, Inappropriate ioctl for device
[07:20] skm: how would i pass the code into the spawned node process
[07:20] mscdex: i got an error for BSD: ENOTY, No Thank You
[07:20] mscdex: :D
[07:20] mscdex: oh well, at least node compiles now on BSD
[07:20] googol has joined the channel
[07:20] mscdex: just doesn't work on freebsd
[07:21] Throlkim has joined the channel
[07:21] mscdex: at least amd64
[07:21] aaronblohowiak has joined the channel
[07:22] aaronblohowiak: mscdex: thanks for the note about dox
[07:22] SubStack: skm: var node = spawn('node') and then you can node.stdin.write()
[07:22] SubStack: or what-have-you
[07:22] aaronblohowiak: mscdex: i struggled with it, but it was a bit too unstable.  i ended up forking/fixing some pycco 
[07:23] skm: SubStack: i am doing that - but i get an error
[07:23] skm: Error: ENOTTY, Inappropriate ioctl for device
[07:23] skm: echo "console.log('hi');" | node
[07:23] skm: that doesnt work either
[07:23] SubStack: node doesn't like pipes
[07:24] skm: both node.stdin.write() and the above in terminal produce the same error
[07:24] SubStack: try setTimeout before writing
[07:28] beawesomeinstead has joined the channel
[07:29] GasbaKid has joined the channel
[07:29] iFire: anyone know what's a good way to find out what require.* has?
[07:29] iFire: i.e. a java script thing I can run to see
[07:29] iFire: rather than reading node.js
[07:29] iFire: the file in the git repo
[07:30] aaronblohowiak: i want to hack on node full time
[07:30] aaronblohowiak: :-)
[07:30] SubStack: iFire: Object.getOwnPropertyNames(require)
[07:31] SubStack: or just `require` actually since there aren't any hidden attributes
[07:34] mikeal: did this today
[07:34] mikeal: http://jsregistry.mikeal.couchone.com/
[07:34] hdxsfbr has joined the channel
[07:34] iFire: mikeal looks like a simple version of http://npm.mape.me/
[07:35] mape: mikeal: Yeah, where are the gradients?! ;)
[07:35] mikeal: i did some search stuff with couchdb
[07:35] mape: mikeal: Is it suppose to autocomplete?
[07:35] mikeal: and this is a couchapp, so if we stick it in the registry it can replicate around with the npm mirrors
[07:35] mikeal: no, it's search as you type
[07:36] mikeal: for now :)
[07:36] mikeal: npm.mape is way prettier
[07:36] skm: SubStack: settimeout doesnt work
[07:36] mape: hmm it does do the xhr req but doesn't populate anything
[07:36] skm: seems you cant pass code to stdin on a node process
[07:36] mikeal: umn....
[07:37] mikeal: might be a trailing console.log i left out
[07:37] mikeal: which browser
[07:37] SubStack: skm: oh right, you should spawn('node', ['yourscript.js']) too
[07:37] SubStack: and then process.openStdin() inside of that
[07:37] mape: firefox, but I have firebug up so shouldn't break because of console.log
[07:37] mape: Does work in Chrome
[07:37] SubStack: skm: your conclusion is a bit premature
[07:37] mikeal: i haven't looked at npm.mape in a while, we have too may packages nowadays for a single page site
[07:37] mikeal: it's actually kinda awesome :)
[07:38] mikeal: i remember when there were like 5
[07:38] mape: Jup, it just gets slower and slower, hehe
[07:38] aaronblohowiak: mikeal: well done!!
[07:39] SubStack: mikeal: sweet app
[07:39] mikeal: mape: is it still not loading results for your?
[07:39] mikeal: i probably need some feedback when there are no results
[07:39] mape: mikeal: Object.keys isn't supported in FF
[07:39] aaronblohowiak: mikeal++
[07:39] v8bot:  aaronblohowiak has given a beer to mikeal. mikeal now has 3 beers.
[07:39] mikeal: are you fuckin serious?
[07:39] mikeal: no way
[07:39] mape: Yup
[07:40] mikeal: it's ECMA5
[07:40] mape: Fight the good fight and get it in there :)
[07:40] mikeal: it's probably some bullshit __ property
[07:40] mikeal: i ran it in the beta
[07:40] mikeal: and it works
[07:40] mape: mikeal: just use $.each since you have jQuery? Or screw the FFers 
[07:41] adambeynon has joined the channel
[07:41] marienz has joined the channel
[07:41] mikeal: man, $.each is different
[07:41] mikeal: also, that keys call I really do need an array of keys
[07:41] mape: they swap the args
[07:41] SubStack: you could do something like this http://github.com/substack/dnode/tree/master/lib/web/compat.js 
[07:41] mscdex: aaronblohowiak: dox?
[07:41] aaronblohowiak: mscdex: pure-js docco
[07:41] Torgan has joined the channel
[07:41] mscdex: what's that? :S
[07:42] aaronblohowiak: mscdex: you ircretary'd it to me
[07:42] micheil: anyone good with C socket programming about?
[07:42] mscdex: i did?
[07:42] aaronblohowiak:  <ircretary> At 2010-12-13T06:59:26.859Z, in #Node.js, mscdex said: tell aaronblohowiak it is dox
[07:42] mscdex: oh that haha
[07:42] mscdex: i said that after you said it ;-)
[07:42] aaronblohowiak: ah
[07:42] aaronblohowiak: :-)
[07:43] Torgan: hello
[07:43] mscdex: hola
[07:43] aaronblohowiak: micheil: are you working on a simple little service that receives an fd over a unix domain socket and then writes the contents of a file to that fd ?
[07:43] Torgan: I had a node.js configuration that worked with cron contrib
[07:43] Torgan: flawlessly
[07:43] Torgan: but...
[07:44] Torgan: yesterday, I saw it didn't worked anymore
[07:44] SubStack: npm sure does break symlinks an awful lot when I npm link
[07:44] Torgan: and that on two different servers
[07:44] SubStack: possibly I'm doing it wrong™
[07:44] SubStack: feature request: remove packages from the listings when they fuck up
[07:44] Torgan: just to test, I tried only the example script
[07:44] mikeal: ok, should be fixed for ff
[07:44] mikeal: mape: ^^
[07:45] Torgan: and the verdict : cron doesn't cron anything
[07:45] mikeal: i just added Object.keys and Array.prototype.forEach
[07:45] SubStack: also it should be possible to remove a broken package
[07:45] micheil: I have https://gist.github.com/744633 and I get /PCK/Heartbeat/192.168.0.33 /60122
[07:45] mape: mikeal: jup :)
[07:45] Torgan: does anyone had similar issues ?
[07:45] SubStack: I hate that soooooo much when a package breaks and I can't `npm rm` it because it's broken
[07:45] micheil: when connecting from 192.168.0.33:60122
[07:45] micheil: aaronblohowiak: ^^
[07:46] micheil: I'm trying to figure out the phidgets source code
[07:46] iFire: anyone here use vows [playing with it] or jasmine or any sort of bdd?
[07:46] mikeal: mape: i was talking with isaacs about this
[07:46] Dreamer3_ has joined the channel
[07:46] mikeal: and he suggested adding an "i use this" kinda vote
[07:47] aaronblohowiak: iFire: i use expresso, dunno if it is bdd, but you can write tests with it
[07:47] mikeal: where everyone who has a login to the registry says they use a module
[07:47] mikeal: and it can increase it's rank
[07:47] iFire: aaronblohowiak expresso is unit testing I think
[07:47] SubStack: that would be super nifty
[07:47] mikeal: oh shit, i can also do most depended on
[07:47] aaronblohowiak: mikeal: you could also visualize the dep graph
[07:47] mikeal: because i have the dep information
[07:48] aaronblohowiak: =)
[07:48] mikeal: the graph would be neat, but what i really want it to make the ranking more relevant
[07:48] aaronblohowiak: i really, really, really want someone to port graphviz to canvas
[07:48] mikeal: and show "most used" and "most depended on"
[07:48] SubStack: heh my modules depend on each other a lot
[07:48] SamuraiJack has joined the channel
[07:48] aaronblohowiak: mikeal: force-based graph layout will do that for you
[07:48] SubStack: count them lower when the author wrote the deps
[07:48] mikeal: i already have ranking code for search
[07:49] aaronblohowiak: mikeal: or the gh api for watcher counts
[07:49] mikeal: that ranks name, tags and description differently along with terms vs full text
[07:49] aklt has joined the channel
[07:49] aaronblohowiak: micheil: oooh, phidgets looks fun
[07:49] mikeal: if they give a github url I can grab that in the page with their jsonp api
[07:49] skm: SubStack: node cant read code from stdin - that conclusion isn't premature its fact
[07:49] micheil: aaronblohowiak: they are, I'm trying to write a binding for them
[07:49] skm: it can read data from stdin tho
[07:50] SubStack: code === data
[07:50] micheil: I don't know enough C todo so, but I can write a network based binding
[07:50] SubStack: lisp taught us that
[07:50] mikeal: skm: it's like 5 lines of code to listen to stdin and eval it
[07:50] aaronblohowiak: SubStack: von nueman taught us that
[07:50] micheil: also, who wants to call out to C for everything when node's network module can do it? it's only talking with ascii data anyway
[07:50] aaronblohowiak: ACTION loses spelling
[07:51] skm: yeah - i know - that's what im doing
[07:52] mape: mikeal: I spoke ot isaacs about that but I think he said it was a bad idea, to easy to game. Or at least that was download count, guess use this could be better. But then again I doubt a lot of people would take the time to do that
[07:53] mscdex: libzzt!
[07:53] mikeal: it's actually really easy to enforce if it's in the same db as the regisry
[07:53] AAA_awright has joined the channel
[07:53] SubStack: I would totally game the system if only to prove mape wrong :p
[07:54] mikeal: you just namespace the vote id with the project and username, and enforce it in a validation function :)
[07:54] mikeal: it does mean that mirrors will need an admin account or a special role if they wanna replicate votes around
[07:55] mscdex: what's the status of npm package categories/tags?
[07:55] peritus_ has joined the channel
[07:56] mikeal: i'm indexing .keys and .tags of the "latest" tagged dist
[07:57] Guest52176: some news in node.js community? 
[07:57] AAA_awright_ has joined the channel
[07:58] mscdex: there's always news in the node.js community!
[07:59] ivanfi has joined the channel
[07:59] SubStack: we make the news!
[07:59] SubStack: see here I will make some news right now
[07:59] Guest52176: SubStack: =)
[07:59] SubStack: pow just pushed 'recon' to npm
[08:00] Guest52176: lol
[08:00] Guest52176: SubStack just generated some news in #node.js channel
[08:00] SubStack: now up to 14 modules on npm ^_^
[08:00] isaacs has joined the channel
[08:01] SubStack: SPEAKING OF NPM
[08:01] mscdex: ooooo
[08:01] isaacs: ACTION heads for the logs..
[08:01] mscdex: hah
[08:01] isaacs: mscdex: keywords.  put keywords in your package.json
[08:02] isaacs: those are searchable with npm ls
[08:02] isaacs: done and done.
[08:02] mscdex: that's what i was wondering about
[08:02] mscdex: just an array of strings i assume?
[08:02] isaacs: yep :)
[08:02] isaacs: the "showing keywords in ls" just landed in the last version or two
[08:02] isaacs: but still: use it.
[08:03] mikeal: so keywords i the proper property
[08:03] mikeal: isaacs: on that site I'm indexing keywords and tags
[08:03] mikeal: http://jsregistry.mikeal.couchone.com/
[08:03] isaacs: mikeal: i'd like to not call them "tags"
[08:03] isaacs: unless people are already doing that
[08:03] isaacs: in which case, we should pick one, and normalize to it
[08:04] mikeal: i just noticed that people were doing it
[08:04] isaacs: but, npm already has this "tag" thing as in a tagged version
[08:04] isaacs: i see...
[08:04] mikeal: the code all prefers keywords
[08:04] isaacs: ok
[08:04] isaacs: i'll make read-json.js convert "tags" to "keywords" and warn on it.
[08:04] isaacs: that actually is a really effective way to encourage consistency.
[08:04] mikeal: it's basically all (dist.keywords || dist.tags || [])
[08:05] isaacs: mikeal: DUDE THIS IS FUCKING AWESOME AND I LOVE IT A LOT.  that is all.
[08:05] mikeal: haha
[08:05] mikeal: need to add voting, looking at users, some other stuff
[08:05] mikeal: the IRC channel just gave me some good ideas
[08:05] mikeal: like indexing the number of times a package is depended on
[08:05] SubStack: this shit should go up on npmjs.org when you're done
[08:06] mikeal: that's easy
[08:06] mikeal: REPLICATION!
[08:06] isaacs: mikeal: can you make it respond to search.npmjs.org?
[08:06] isaacs: i'll point the dns there now
[08:07] mikeal: yeah
[08:07] mikeal: i can do it actually
[08:07] mikeal: i'm admin on that db
[08:07] SubStack: rock
[08:07] isaacs: wait, where is this?
[08:07] isaacs: it's not in the actual npm registry already, is it?
[08:08] mikeal: oh wait
[08:08] mikeal: i'm not
[08:08] mikeal: isaacs: not, it was on my couchdb, i replicated from jsregistry 
[08:09] mikeal: IS on my couchdb
[08:09] isaacs: i see.
[08:09] isaacs: same ip address, though
[08:09] mikeal: yes
[08:09] isaacs: yeah, i figured you'd just replicate
[08:09] mikeal: yeah, i'm not admin
[08:09] mikeal: so i can't push this ddoc
[08:09] isaacs: actually, you are an admin on my couch, i believe
[08:10] mikeal: i think we removed it
[08:10] isaacs: oh, yeah, i removed that
[08:10] isaacs: anyway, search.npmjs.org is pointing at you.  seize it!
[08:11] mikeal: ok, working
[08:11] mikeal: http://search.npmjs.org/
[08:12] isaacs: i am in <3 with this site.
[08:12] isaacs: now we need docs, and CI buildbots.
[08:12] isaacs: build/test bots
[08:13] marlun: What is the best way to see all the available packages isntallable by npm? is http://npm.mape.me/ something official?
[08:13] mikeal: i think under the search box, before you do searches it should be filled with the top projects
[08:13] mape: npm ls ?
[08:13] mikeal: yeah, `npm ls` for sure
[08:14] mscdex: npm ls -lisa
[08:14] mscdex: :D
[08:14] isaacs: -lisa?
[08:14] iFire: torvalamo vows has three different outputs and the spec one is pretty 
[08:14] marlun: Ah, thanks :)
[08:14] iFire: [uses a unicode checkmark even]
[08:14] mscdex: isaacs: plain ls arguments ;-)
[08:15] mscdex: does npm ls have arguments like that?
[08:15] mscdex: to change the output and stuff
[08:15] mikeal: isaacs: the code is also push to github/mikeal/js-registry
[08:15] marlun: There are no place to go to see updates to packages in the npm list? :) 
[08:16] marlun: ah
[08:16] marlun:  :)
[08:16] isaacs: mscdex: no, it doesn't
[08:16] mscdex: that would be neat to have
[08:16] isaacs: mscdex: i guess it's more like `npm grep`
[08:17] isaacs: mscdex: the args are all greps
[08:17] isaacs: so: npm ls installed latest connect
[08:17] isaacs: etc.
[08:18] mscdex: what about adding formatting arguments like with ls -l ?
[08:18] mscdex: would give a "long format"
[08:18] simme has joined the channel
[08:18] mscdex: and would default to a short format
[08:19] sriley has joined the channel
[08:20] mAritz has joined the channel
[08:21] isaacs: mscdex: meh
[08:21] markwubben1 has joined the channel
[08:21] isaacs: there's "npm view" if you want to dive in deeper.
[08:21] isaacs: and you can do fancy stuff like `npm view npm contributors.email` even
[08:21] sudoer has joined the channel
[08:21] mscdex: but that's for individual packages ;-)
[08:22] zomgbie has joined the channel
[08:22] isaacs: it's not a strict 1:1 parity with unix.  that's why "ls" was originally called "list", just to avoid the assumption, but i couldn't stop myself from typing "ls"
[08:24] isaacs: mikeal: dude, you know what would be awesome?  on the package page, it should link to the packages that it depends on, and that depend on it
[08:24] MikhX has joined the channel
[08:24] mikeal: yeah, i'm doing some formatting tweaks
[08:24] mikeal: then i'm handing dep indexing
[08:25] mikeal: do we want to only do it for "latest"?
[08:26] fangel has joined the channel
[08:26] isaacs: hm... good point
[08:27] isaacs: that's probably fine
[08:27] isaacs: honestly, deps dont' change much
[08:30] mAritz: btw: i think i'm still having the issue where i have conductor v0.1 as a dependency and no package that has v0.2 as a dependency. doing "npm update" always updates conductor to v0.2 and i have to manually activate 0.1 again. :(
[08:31] isaacs: mAritz: so, why don't those dependent packages still pick up the v0.1 when they do require("conductor"?
[08:31] mAritz: don't know :(
[08:31] mAritz: should they?
[08:31] matjas has joined the channel
[08:31] torvalamo has joined the channel
[08:32] isaacs: yes.  yes, they should.
[08:33] isaacs: if they don't, it is a bug, and should be investigated.
[08:33] T-Co: /usr/local/src/node/deps/v8/src/utils.h:752: internal compiler error: in expand_expr_addr_expr_1, at expr.c:6336
[08:33] [AD]Turbo has joined the channel
[08:33] T-Co: gcc (GCC) 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)
[08:33] T-Co: I know, I know. Legacy system :)
[08:34] dgathright has joined the channel
[08:34] mAritz: last i checked they didn't. i'll check again in a few days and open an issue if it's still not working
[08:37] amerine has joined the channel
[08:37] augustl has joined the channel
[08:38] micheil: pquerna: hey man, congrats on the acquisition
[08:38] mscdex: T-Co: fwiw i use gcc 4.4.x
[08:39] T-Co: mscdex, I'd have to backport build-essential. I'm not sure I want to do that in that machine....
[08:39] mscdex: compile it ;-)
[08:40] virtuo has joined the channel
[08:40] T-Co: Ah, no. I have one lenny I can use :)
[08:40] mscdex: hehe
[08:40] Gruni has joined the channel
[08:41] Torgan: ah !
[08:41] d0k has joined the channel
[08:41] Torgan: there's a bug in node-cron !
[08:42] Torgan: a month is [1-12] and not [0-11]
[08:44] derren13 has joined the channel
[08:45] aaronblohowiak: What is the best way to de-dupe a list of 100 functions?
[08:46] aaronblohowiak: use an object as a hash?
[08:46] stagas has joined the channel
[08:47] iFire: aaronblohowiak so different names but same contents?
[08:48] cardona507 has joined the channel
[08:48] mikedeboer has joined the channel
[08:48] aaronblohowiak: iFire: yes.  but two functions can have the same .toString() contents but have different lexically-bound variables, so we need to keep that in mind
[08:51] aaronblohowiak: iFire: Function objects don't have a publicly exposed id so we have no useful comparator to do an insertion sort
[08:52] dguttman has joined the channel
[08:52] Jonasbn_ has joined the channel
[08:54] iFire: aaronblohowiak wait just hash .toString then?
[08:54] iFire: hmm
[08:54] iFire: convert the contents to a single format and then hash it
[08:55] aaronblohowiak: iFire: you can't do that because of the lexical binding
[08:55] aaronblohowiak: that is the problem with doing that strategy
[08:55] iFire: hmm
[08:56] iFire: right now I'm going to search google for tree/dag similarity algos
[08:57] aaronblohowiak: iFire: you need to be able to ordinally sort things to establish tree/dag
[08:57] aaronblohowiak: like is a < b
[08:58] aaronblohowiak: you can't do that with Functions
[08:58] iFire: well it occupies a place in the tree
[08:58] aaronblohowiak: right, but how would you know if you should move left or right to the leaves
[08:58] iFire: does it matter?
[08:59] mraleph has joined the channel
[08:59] Wizek has joined the channel
[09:00] Wizek: hi there
[09:00] Wizek: What is the difference between new Date().toJSON() and new Date().toISOString()?
[09:00] Wizek: Also, how can I make it to leave out some of the less specific parts as ISO 8601 allows me to do so? Like, the millisecond at the end, or even the second?
[09:00] aaronblohowiak: iFire: how else would a tree algo work?
[09:01] iFire: that's why I'm searching google to see if someone solved it first
[09:02] iFire: it seems like this is a problem in computational biology 
[09:02] teemow has joined the channel
[09:02] aaronblohowiak: Wizek: http://www.w3schools.com/jsref/jsref_obj_date.asp you have to do it manually or get a strftime library
[09:03] aaronblohowiak: iFire: i am thinking that just using the functions as the properties of an object might be the way to go
[09:04] Wizek: aaronblohowiak: Well, okay, will not be hard... And what's the difference between them?
[09:05] glenngillen has joined the channel
[09:05] aaronblohowiak: Wizek: i dont know if there is a difference.  toJSON() might be there for convienence.
[09:07] aaronblohowiak: Is there a version of jslint that will fix the obvious things?
[09:08] tyfighter has joined the channel
[09:08] aklt has joined the channel
[09:08] mikeal: deps! http://search.npmjs.org/#/crawler
[09:08] quest88 has joined the channel
[09:09] iFire: aaronblohowiak got acm?
[09:09] iFire: can you read this? http://portal.acm.org/citation.cfm?id=1474894
[09:09] aaronblohowiak: mikeal: the link to download is borked
[09:10] aaronblohowiak: iFire: no, and sadly no. 
[09:11] mikeal: which link?
[09:12] aaronblohowiak: mikeal: whoops, it is only broken for shit that has been deleted
[09:12] aaronblohowiak: interesting
[09:13] aaronblohowiak: mikeal: i wonder about having download links for packages.  maybe a copy/paste-able thing would be easier.  npm install pckgname
[09:14] lstrojny has joined the channel
[09:15] iFire: aaronblohowiak apparently an application of graph similarity is to find where two people in a social network are related
[09:16] aaronblohowiak: iFire: and for code analysis if you want to compare if two blocks of code are similar enough to combine =)
[09:17] iFire: I learned a new word Homophily
[09:17] aaronblohowiak: same-loving
[09:17] peutetre has joined the channel
[09:17] aaronblohowiak: iFire: did you take sociology ;)
[09:17] iFire: Homophily (i.e., love of the same) is the tendency of individuals to associate and bond with similar others. 
[09:17] iFire: aaronblohowiak naw this is google searching
[09:17] iFire: :)
[09:19] aaronblohowiak: iFire: niiice.  you can also get into transitive closures, data dependency, &c
[09:19] aaronblohowiak: iFire: i actually want this so i can make my Propagate-JS library more efficient
[09:20] matjas has joined the channel
[09:20] aaronblohowiak: http://aaronblohowiak.github.com/Propagate-JS/ it builds a dependency graph for your functions at runtime, and then re-evaluates functions when the data they reference has changes
[09:20] killfill has joined the channel
[09:21] stagas: Homophily means gay
[09:21] stagas: it's a greek word and I'm greek :)
[09:24] peritus_ has joined the channel
[09:25] iFire: aaronblohowiak found this though http://www.perlmonks.org/?node_id=459398
[09:26] iFire: aaronblohowiak found http://stackoverflow.com/questions/761520/fastest-way-to-compare-two-data-structures-in-java
[09:26] iFire: this might be helpful
[09:26] iFire: really helpful
[09:26] aaronblohowiak: iFire: :-) 
[09:27] iFire: I think you don't need to compare rank i.e. left or right for a tree i.e. inheritance child thing
[09:27] aaronblohowiak: iFire: that would be if i was comparing trees
[09:27] iFire: just equality
[09:27] aaronblohowiak: iFire: i just want to see if two functions are the same
[09:27] iFire: I thought functions were a dag
[09:27] aaronblohowiak: iFire: rather, i have an array of say 100 function objects.  i want all of the unique ones
[09:28] aaronblohowiak: iFire, their source can be, but you can't introspect function variable bindings at runtime in JS (you can in smalltalk!)
[09:28] iFire: I wonder what's the complexity of picking one and going through 100 others then picking another and doing 100-1
[09:28] iFire: hmm
[09:28] iFire: eek
[09:30] TomY has joined the channel
[09:31] masahiroh has joined the channel
[09:33] mikew3c has joined the channel
[09:33] aaronblohowiak: iFire: n^2, basically
[09:34] aaronblohowiak: iFire: 0.5 * n^2, which is asymptotically similar to n^2 
[09:34] SubStack: but if you only have 100, that's only 5000
[09:35] SubStack: computers are fast
[09:35] aaronblohowiak: SubStack: is 5000 array loops and identity comparrisons slower than 100 object insertions + 100 for..ins ?
[09:36] spetrea_ has joined the channel
[09:36] killfill has joined the channel
[09:36] aaronblohowiak: ie: at what array length is C*N < 0.5 * D * N
[09:36] aaronblohowiak: cross-browser
[09:36] SubStack: aaronblohowiak: I mean that 5000 of anything non-looping and compute-bound is going to be pretty fast
[09:37] aaronblohowiak: SubStack: what do you mean by compute-bound ?  i am actually thinking about ie7 here =(
[09:37] SubStack: I mean not IO or event-loop limited
[09:37] aaronblohowiak: SubStack: ah yes, true.
[09:38] aaronblohowiak: fuck it, we'll do it live =)
[09:38] SubStack: yep!
[09:38] aaronblohowiak: <3
[09:38] aaronblohowiak: SubStack++
[09:38] v8bot:  aaronblohowiak has given a beer to SubStack. SubStack now has 1 beers.
[09:38] SubStack: tasty
[09:39] SubStack: it is too bad that JS doesn't support non-string hash keys
[09:39] mscdex: what does that mean, "to disconnect websockets?!"
[09:39] aaronblohowiak: SubStack: too bad JS doesn't have hashes
[09:40] SubStack: well whatever they actually are behind the scenes
[09:41] aaronblohowiak: SubStack: just warning that there are forbidden key names
[09:41] SubStack: look I maked a uniq:
[09:41] SubStack: v8: [1,2,3,1,0].reduce(function (acc,x) { if (acc.indexOf(x) < 0) acc.push(x); return acc }, [])
[09:41] v8bot: SubStack: [1, 2, 3, 0]
[09:41] aaronblohowiak: SubStack: ie7 would *love* that.
[09:41] SubStack: a naive one but one nonetheless
[09:42] SubStack: ah right those pesky things like __proto__
[09:42] SubStack: I have an indexOf kicking around
[09:42] SubStack: https://github.com/substack/dnode/blob/master/lib/web/compat.js#L78-L83
[09:44] SubStack: oh hah that uniq is wrong
[09:45] SubStack: no wait, it works properly
[09:45] SubStack: but how!
[09:45] SubStack: oh right it starts empty, nevermind >_<
[09:45] bzinger has joined the channel
[09:45] romeo_ordos has joined the channel
[09:46] chapel: v8: [1,2,3,1,0,2,0,1,3,10,3,4,5,10,0,2,8].reduce(function (acc,x) { if (acc.indexOf(x) < 0) acc.push(x); return acc }, [])
[09:46] v8bot: chapel: [1, 2, 3, 0, 10, 4, 5, 8]
[09:48] SubStack: v8: function uniq (xs_) { var xs = xs_.slice(); var acc = []; while (xs.length > 0) { var x = xs.shift(); if (acc.indexOf(x) < 0) acc.push(x) } return acc } uniq([1,2,3,4,2,1,4,5])
[09:48] v8bot: SubStack: [1, 2, 3, 4, 5]
[09:48] romainhuet has joined the channel
[09:48] SubStack: moar fastar version
[09:49] iFire: aaronblohowiak I'm trying to figure wtf intesection non emptiness problem means http://research.microsoft.com/pubs/78382/upmail0133.pdf
[09:49] chapel: well is it advisable to use a while?
[09:49] iFire: which is proved by the pdf as EXPTIME
[09:50] killfill has joined the channel
[09:50] iFire: well for particular types of automata
[09:50] SubStack: chapel: well an index isn't really useful there
[09:50] romeo_ordos has left the channel
[09:51] SubStack: since mutating the input array avoids having to do a slice for every iteration
[09:51] SubStack: of course, shift() could be really slow for all I know
[09:51] chapel: well maybe you should do some tests :P
[09:51] SubStack: yeah but it's not even my problem so :p
[09:52] chapel: :)
[09:53] SubStack: right I was hacking on some ui thing
[09:53] SubStack: and I wrote and released a module to npm instead
[09:55] aaronblohowiak: iFire: sorry, i went for nested for-loops.  i'm a hack, and SubStack is a good influence =)
[09:55] peritus_ has joined the channel
[09:56] SubStack: I'm not so sure about that last one!
[09:57] aaronblohowiak: SubStack: for varying values of "good"
[09:57] iFire: aaronblohowiak did it work?
[09:57] iFire: what's the performance
[09:57] aaronblohowiak: iFire.. writing tests now
[09:57] aaronblohowiak: iFire: *shrug* SubStack makes me not care
[09:57] aaronblohowiak: lol
[09:57] aaronblohowiak: that, and it being 2 am
[09:57] iFire: aaronblohowiak does it free the browser causing it to crash?
[09:58] iFire: freeze
[09:58] SubStack: \o/
[09:58] SubStack: not caring is the best
[09:58] aaronblohowiak: iFire: for low values of n ? no.
[09:58] aaronblohowiak: i probably shouldnt be performing this de-duping anyway. it is no gauruntee that a function wont be evaluated twice.
[09:58] aaronblohowiak: probably not worth the extra code to debug
[09:59] SubStack: you could also chunk the job up into batches and then use setInterval to keep from tieing up the cpu for too long at a time if it comes to that
[10:00] altamic has joined the channel
[10:00] aaronblohowiak: SubStack: i am thinking that batches will be n<100
[10:01] SubStack: should be fast then
[10:01] aaronblohowiak: SubStack: this deduplication is actually an optimization, so i am thinking now that maybe i shouldnt be optimizing at all.  why add more code to maintain/explain?
[10:01] SubStack: here, I will test it!
[10:01] SubStack: oh ok
[10:02] SubStack: v8: Date.now()
[10:02] v8bot: SubStack: 1292580164942
[10:02] SubStack: oh sweet
[10:03] SubStack: v8: var xs = []; for (var i = 0; i < 100; i++) xs.push(Math.floor(Math.random()*20)); var t0 = Date.now(); xs.reduce(function (acc,x) { if (acc.indexOf(x) < 0) acc.push(x); return acc }, []); Date.now() - t0
[10:03] v8bot: SubStack: 1
[10:03] SubStack: pretty fast
[10:03] aaronblohowiak: 1 second?
[10:03] SubStack: 1 ms
[10:03] aaronblohowiak: LOL
[10:03] SubStack: it's 0 on my laptop
[10:04] aaronblohowiak: i wonder if that is .ciel()'d
[10:04] aaronblohowiak: errr
[10:04] aaronblohowiak: .round() or .floor()
[10:04] SubStack: well it is the lowest amount of resolution that Date.now() can do
[10:05] SubStack: and here is the faster one
[10:05] SubStack: v8: function uniq (xs_) { var xs = xs_.slice(); var acc = []; while (xs.length > 0) { var x = xs.shift(); if (acc.indexOf(x) < 0) acc.push(x) } return acc } var zs = []; for (var i = 0; i < 100; i++) zs.push(Math.floor(Math.random()*20)); var t0 = Date.now(); uniq(zs); Date.now() - t0
[10:05] v8bot: SubStack: 1
[10:06] iFire: However, most previous works have focused
[10:06] iFire: on exact graph or subgraph matching, i.e. graph or subgraph
[10:06] iFire: isomorphism. Subgraph isomorphism was proved to be NPcomplete
[10:06] iFire: in [5].
[10:06] SubStack: yeah entirely doesn't matter
[10:06] killfill has joined the channel
[10:06] iFire: http://pages.cs.wisc.edu/~jignesh/publ/tale.pdf
[10:06] iFire: this one is actually readable
[10:06] iFire: and has source code
[10:08] iFire: http://www.springerlink.com/content/287n123k0n760x73/
[10:08] iFire: oooh 2010
[10:08] aaronblohowiak: JavaScript is a nice blend of FP and Structs
[10:10] SubStack: I wonder if slice() strictly copies the array or just sets a taint on the range
[10:11] SubStack: copy-on-write style
[10:12] SubStack: ACTION experiments
[10:13] aaronblohowiak: ACTION sets a taint on the range. if you know what i mean
[10:13] aaronblohowiak: ACTION has nothing to do with SubStacks' experiments
[10:14] SubStack: v8: var a0 = Date.now(); var xs = []; for (var i = 0; i < 5000000; i++) xs.push('a'); var a = Date.now() - a0; var b0 = Date.now(); xs.slice(); var b = Date.now() - b0; [ a, b ]
[10:14] v8bot: SubStack: [210, 168]
[10:14] SubStack: it copies them needlessly :/
[10:15] mikeal: why is mtime on all the packages in the registry messed up?
[10:15] mikeal: if they weren't this would look a lot cooler
[10:15] mikeal: http://search.npmjs.org/
[10:17] mies has joined the channel
[10:18] webben has joined the channel
[10:18] iFire: aaronblohowiak I can't access the 2010 problem but the second best one is http://vorlon.case.edu/~jiong/research/papers/gaddi.pdf
[10:18] iFire: problem paper
[10:19] aaronblohowiak: iFire: can you really read these that fast?
[10:19] iFire: gave up on the like 5 really technical papers :(
[10:20] iFire: aaronblohowiak this is the one I'm looking for http://www.springerlink.com/content/287n123k0n760x73/
[10:20] iFire: tale is the 3rd place one
[10:21] iFire: aaronblohowiak look at abstract, intro and conclusion?
[10:21] aaronblohowiak: iFire: what is your application for this?
[10:21] iFire: :)
[10:22] aaronblohowiak: iFire: actually
[10:22] aaronblohowiak: that paper *does* look interesting
[10:22] iFire: the gaddi one is actually readable
[10:23] tahu has joined the channel
[10:23] markwubben has joined the channel
[10:24] zorzar has joined the channel
[10:25] aaronblohowiak: does anyone know of a great way to get the AST of a javascript source file?
[10:26] SubStack: no ast libs on npm yet, lame sauce
[10:26] InsDel has joined the channel
[10:27] zomgbie has joined the channel
[10:29] aaronblohowiak: SubStack: jison is a parser generator
[10:33] iFire: aaronblohowiak 
[10:33] iFire: http://books.google.com/books?id=yn8Bmi7zVaEC&pg=PA140&lpg=PA140&dq=NOVA:+A+Novel+and+Efficient+Framework+for+Finding+Subgraph+Isomorphism+Mappings+in+Large+Graphs&source=bl&ots=hRYjq0QFjf&sig=0bP4d_hwjL8H2AlRuS9jhl_mEoc&hl=en&ei=pTcLTeqPKo2-sAPorKyTCg&sa=X&oi=book_result&ct=result&resnum=5&ved=0CCMQ6AEwBA#v=onepage&q=NOVA%3A%20A%20Novel%20and%20Efficient%20Framework%20for%20Finding%20Subgraph%20Isomorphism%20Mappings%20in%20Large%20Graphs&f=false
[10:33] iFire: nova
[10:33] iFire: the best method
[10:33] aaronblohowiak: yes!
[10:34] iFire: Polblog is a graph showing links between politican blogs there are 1490 vertices GADDI ran for 36hours
[10:35] iFire: and was killed
[10:35] pdelgallego has joined the channel
[10:35] aaronblohowiak: iFire: ooooo. the compression looks like a waste of effort, though
[10:36] aaronblohowiak: (for cnova)
[10:36] iFire: 90mb to 4 mb?
[10:36] iFire: for the index?
[10:37] aaronblohowiak: iFire: in terms of execution speed
[10:37] aubergine has joined the channel
[10:37] iFire: 13mb to 4mb
[10:37] iFire: aaronblohowiak it's probably only the index size that it affects
[10:37] pietern has joined the channel
[10:37] aaronblohowiak: yea, so why bother with the extra code =)
[10:38] JimBastard has joined the channel
[10:39] aaronblohowiak: iFire: this is very readable. great find
[10:39] beawesomeinstead has joined the channel
[10:39] beawesomeinstead has joined the channel
[10:39] hellp has joined the channel
[10:39] iFire: aaronblohowiak notice how they only used nested for loops ;)
[10:40] iFire: actually just a single for loop
[10:40] iFire: hmm
[10:40] iFire: for each is a for loop too
[10:41] iFire: for all*
[10:42] ph^ has joined the channel
[10:42] JimBastard: im sending out nodejitsu invites
[10:42] JimBastard: do i owe anyone one 
[10:42] JimBastard: lol
[10:42] JimBastard: >.<
[10:42] JimBastard: the list is too big
[10:42] JimBastard: aaronblohowiak did you get one yet?
[10:43] stagas: me
[10:43] aaronblohowiak: JimBastard: get one what?
[10:43] JimBastard: stagas: who are you again?
[10:43] JimBastard: kidding!
[10:43] JimBastard: im on it
[10:43] JimBastard: lol
[10:43] stagas: :P
[10:43] JimBastard: whats your username and email again
[10:43] aaronblohowiak: oh
[10:43] JimBastard: pm me
[10:43] aaronblohowiak: no i didnt
[10:43] JimBastard: you want one aaronblohowiak ?
[10:43] aaronblohowiak: JimBastard: i dont have any projects for nodejitsu at the moment
[10:43] JimBastard: we are slowing increasing the size of the cluster
[10:44] JimBastard: aaronblohowiak: okay. well i can send one whenever you want
[10:44] aaronblohowiak: thanks
[10:45] chapel: JimBastard
[10:45] chapel: did you get archive support up?
[10:46] JimBastard: chapel: naaah, but i disabled the UI for the moment and added a message
[10:46] JimBastard: so at least it shouldnt crash out
[10:47] JimBastard: its a ticket, just needs to get done
[10:47] SubStack: nodejitsu might be a good home for hexhack as soon as I decide to take a break for a week and hack it into shape
[10:47] JimBastard: SubStack: you got an account right?
[10:47] SubStack: nope not yet
[10:47] SubStack: should I make one?
[10:47] JimBastard: naaah just pm me your username and email
[10:47] peritus_ has joined the channel
[10:48] SubStack: tehe ok
[10:48] chapel: JimBastard: well I want to use nodejitsu, but no archive uploading means I cant
[10:48] chapel: :(
[10:48] JimBastard: chapel: ill get on it i promise
[10:48] JimBastard: i bet its easy peasy
[10:49] JimBastard: the backend already does it, just no client api for uploads
[10:49] JimBastard: how big are your zips gonna be
[10:49] marienz_ has joined the channel
[10:51] chapel: small, just a few js files
[10:51] chapel: :P
[10:51] JimBastard: yeah i mean journey should like handle that
[10:51] chapel: I mean, I am somewhat of an oddity since I dont want to publish my code to github atm
[10:51] SubStack: now writing a tiny webapp for testing purposes
[10:51] SubStack: chapel: !!
[10:52] JimBastard: SubStack: id try deploying helloworld from the marketplace maybe
[10:52] JimBastard: then you can clone that
[10:52] SubStack: ok
[10:52] JimBastard: i need to automate that whole process
[10:52] JimBastard: but the package.json in hellonode should like, work
[10:52] JimBastard: its all turtles
[10:52] SubStack: c/,,\
[10:52] JimBastard: c/,,\
[10:52] SubStack:     c/,,\
[10:53] SubStack:       ... (all the way down)
[10:53] chapel: SubStack: !!
[10:54] chapel: !_!
[10:54] SubStack: not wanting to publish!
[10:54] SubStack: I do not understand this sentiment.
[10:54] chapel: eh, its more my code is sloppy and hackish
[10:54] SubStack: I push halfway functional, sloppy hack jobs all the time
[10:54] chapel: provides nothing to anyone, but is just my learning pains
[10:55] SubStack: people don't remember you for your mistakes, only your greatest hits
[10:55] chapel: sure, but again it provides nothing to anyone, more noise if you will
[10:55] SubStack: nah
[10:55] SubStack: if you have a problem then someone, somewhere might have the same problem
[10:55] SubStack: no use in duplicating effort needlessly
[10:56] chapel: atm, the code Im working on isn't anything new, just some express mumbo jumbo
[10:56] JimBastard: yeah we need private repos
[10:56] JimBastard: or zips
[10:56] JimBastard: one offs
[10:58] SubStack: JimBastard: hooray it works
[10:58] JimBastard: lol for real?
[10:58] JimBastard: whats the subdomain?
[10:58] SubStack: http://hexhack.nodejitsu.com/ 
[10:58] JimBastard: im amazed
[10:58] SubStack: just the hello world thing you said to do
[10:58] chapel: :)
[10:58] JimBastard: ahaha
[10:58] chapel: though JimBastard
[10:59] chapel: you need a way to handle private info, lets say I wanted to setup an irc bot, but need to send a password to connect to a network, I couldn't put that on github
[11:00] SubStack: truth
[11:00] SubStack: oh but
[11:00] SubStack: you could contact the bot as it runs
[11:00] JimBastard: for sure
[11:00] SubStack: with the private data in the meanwhile
[11:00] chapel: sure, but if the bot cant get on the network without a password, how are you going to pass it?
[11:00] JimBastard: we usually put the private data as arguments to the script start
[11:00] chapel: youd have to make a back door
[11:01] JimBastard: or put it in the package.json
[11:01] SubStack: have a dnode control interface
[11:01] JimBastard: naah
[11:01] JimBastard: basic configuration
[11:01] chapel: well package.json is still public on github
[11:01] JimBastard: totally
[11:01] JimBastard: there are custom fields in the configuration though
[11:01] iFire: JimBastard are you doing redis?
[11:01] mr_daniel has joined the channel
[11:01] JimBastard: the package.json you see in the repo isn't 1:1 of what gets deployed
[11:01] JimBastard: we modify it
[11:02] JimBastard: iFire: yeah, for sure
[11:02] richardhodgson has joined the channel
[11:02] chapel: sure, just saying you should give some way to handle private data, or something
[11:02] chapel: lets use twitter as an example
[11:02] chapel: wouldn't want to put my api keys out in the open
[11:03] iFire: JimBastard how long is the lineup? can I try it?
[11:03] JimBastard: iFire: 1300+ lol
[11:03] chapel: you say your client doesn't have zip support
[11:03] chapel: what if I curl it in?
[11:03] JimBastard: stick around though, you'll get one eventually
[11:04] JimBastard: chapel: you are chrooted, but you have somewhat full systems access
[11:04] SubStack: JimBastard: does it load dependencies yet?
[11:04] JimBastard: SubStack: yeah
[11:04] SubStack: sweet
[11:04] JimBastard: SubStack: npm deps 
[11:04] JimBastard: indexzero swears it works
[11:04] SubStack: testing
[11:04] JimBastard: i need to hire two more developers yesterday
[11:04] JimBastard: there is soo many fucking pieces
[11:04] JimBastard:  /s/is/are
[11:04] chapel: heh
[11:05] chapel: JimBastard: you know what would stop someone from making a shell emulator
[11:05] chapel: and just running that and have full access to the system
[11:05] doup has joined the channel
[11:05] JimBastard: chapel: you do have full access to your server
[11:05] SubStack: awesome sauce
[11:05] JimBastard: you are chrooted into a folder
[11:05] JimBastard: so like, you should have to stay there in theory
[11:05] JimBastard: if it works
[11:05] JimBastard: you might be running as root though, its beta
[11:05] chapel: okay
[11:06] SubStack: does it load balance nicely?
[11:06] JimBastard: thats a relative question
[11:06] SubStack: hopefully ulimited the crap out of
[11:06] JimBastard: lets hit it with some load and see what happens
[11:06] SubStack: heh
[11:06] JimBastard: im sure there are adjustments that need to be made
[11:06] JimBastard: the LB might be at 2096 atm
[11:06] chapel: heh, I have a script that hits ulimit on my personal machine
[11:06] SubStack: I mean if I do for (;;) {} it won't kill everything forever
[11:07] SubStack: that or a fork bomb or whatever
[11:07] SubStack: that shit is annoying to get right
[11:08] SubStack: and I can more than identify with "too many moving pieces"
[11:08] SubStack: shit gets complex quickly
[11:08] JimBastard: there is a lot of test coverage
[11:09] JimBastard: but reading the tests is a full-time job
[11:09] JimBastard: like, when every library you use is home brewed
[11:09] JimBastard: you can understand, im sure
[11:09] JimBastard: lol
[11:09] c4milo has joined the channel
[11:09] chapel: well JimBastard since you did give me an account early, I am going to make a script just to run on there :P
[11:09] SubStack: yes very much
[11:09] fly-away has joined the channel
[11:09] JimBastard: chapel: yeaaah!
[11:09] chapel: cause I really want to use it
[11:10] richardhodgson: JimBastard: I wouldn't mind an invite if you've got any free?
[11:10] JimBastard: richardhodgson: have you signed up @ nodejitsu.com yet?
[11:11] SubStack: I am making a web interface for hexhack now just for you!
[11:11] richardhodgson: think so - I would have received a confirm email or something right?
[11:11] SubStack: not that I have much content or anything
[11:11] tekky has joined the channel
[11:12] SubStack: holy crap this is so easy with dnode
[11:12] JimBastard: naah, no confirmation email
[11:12] chapel: you know something I want to beta test, damn chrome notebook, google better send me one
[11:12] JimBastard: richardhodgson: do you have a github?
[11:12] richardhodgson: yeap, same username
[11:12] SubStack: all I have to do is tack on an extra .listen(web)
[11:12] SubStack: ACTION is awesome like that
[11:13] JimBastard: richardhodgson: stick around a bit more, i'll get one to ya
[11:13] richardhodgson: cheers
[11:13] chapel: hmm
[11:13] JimBastard: these guys have been asking me for months :-D
[11:13] chapel: so SubStack
[11:13] JimBastard: gotta be fair
[11:13] richardhodgson: lol, no worries. I am british, so know how to queue :p
[11:13] chapel: using dnode, could I have private data on my personal machine and interface with the hosted code, making changes on the fly?
[11:13] chapel: haha richardhodgson
[11:13] chapel: americans like to cut in lines
[11:13] SubStack: sure
[11:14] SubStack: I mean you could just as well have some kind of file upload admin interface thing too
[11:14] SubStack: but you could just DNode(fs).listen(31337)
[11:15] chapel: yeah, well dnode sounds more attractive :P
[11:15] chapel: more professional
[11:15] chapel: leas easy to hack
[11:15] chapel: less
[11:15] SubStack: well not if you do what I just told you to
[11:15] chapel: haha, yeah, I wouldn't do that
[11:15] chapel: Ill play around with dnode before I deploy it anywhere
[11:15] SubStack: oh but you can just hard-code a hash that only you know the plaintext of into the code
[11:16] SubStack: that's reasonably secure
[11:16] iFire: JimBastard I don't suppose you can run redis-benchmark of redis 2.2.0rc1
[11:16] JimBastard: iFire: where?
[11:17] iFire: https://github.com/antirez/redis/tree/2.2.0-rc1
[11:17] aubergine has joined the channel
[11:17] iFire: the master is close enough to 2.2.0rc1 though
[11:17] chapel: oh SubStack not sure if you heard, but you couchdb deploys with nodejitsu too
[11:18] SubStack: super great
[11:18] JimBastard: *coming soon
[11:18] JimBastard: lol
[11:18] JimBastard: thats pretty close
[11:18] chapel: yeah
[11:18] SubStack: integrating with a db out of the box seems a smart move
[11:18] chapel: soon enough to be announced :)
[11:18] SubStack: that shit is hassles
[11:19] JimBastard: im emailing the redis and mongo guys this morning
[11:19] JimBastard: ;-)
[11:19] chapel: having redis installs would be awesome
[11:19] SubStack: JimBastard: if you need footage of cranes for another rap I can provide
[11:19] chapel: easy deploy redis would be the bees knees
[11:20] iFire: JimBastard are binary node js extensions planned?
[11:20] richardhodgson: chapel: having choice between db's is cool
[11:21] JimBastard: iFire: sup?
[11:21] JimBastard: iFire: npm is supported
[11:21] JimBastard: so like, if npm install foo works, it should deploy right from the package.json
[11:21] chapel: well I dont see redis as solely a db, I prefer couchdb for db stuff :P
[11:21] JimBastard: me and isaacs go way back, like peanut butter and jelly
[11:22] SubStack: or like socrates and plato
[11:22] SubStack: they go further back since peanut butter is pretty recent
[11:23] JimBastard: c/,,\
[11:24] chapel: and wasn't invented by George Washington Carver
[11:24] SubStack: apocryphal!
[11:24] chapel: c/_\
[11:24] SubStack: but then so is socrates
[11:25] SubStack: The perfect analogy? Perhaps.
[11:25] stride: ö/,,\  c/,,\  /,,\
[11:25] SubStack: see also: ##turtles
[11:26] SubStack: /,,\ɔ
[11:26] chapel: did you guys see that iphone app that can translate text on the fly using the camera?
[11:26] SubStack: yes holy crap that makes me want to get an iphone
[11:26] chapel: I hope google buys them tbh
[11:26] SubStack: too bad I'm poor as fuck
[11:26] chapel: if apple buys them, it would be locked up in apple land
[11:26] webr3: it's the AR bit that really impresses me
[11:27] chapel: if google bought them, everyone could enjoy it
[11:27] chapel: yeah webr3
[11:27] chapel: replacing text on the fly
[11:27] chapel: imagine using a powerful gpu/cpu
[11:27] chapel: faster camera processing
[11:27] SubStack: it reminds me of ghostwriter
[11:27] webr3: coupled to a digital eye / glasses ...
[11:27] SubStack: remember that show?
[11:28] chapel: yeah webr3
[11:28] webr3: world going to get pretty amazing over the next decade
[11:28] chapel: heh ghostwriter, classic
[11:28] chapel: webr3: I agree, meta reality
[11:28] webr3: ever see sizth sene from pranav mistry and the team at mit?
[11:28] webr3: sixth*
[11:28] webr3: ACTION nudges at http://www.ted.com/talks/pranav_mistry_the_thrilling_potential_of_sixthsense_technology.html
[11:28] SubStack: quick somebody whip up node-augmented-reality and throw it up on npm
[11:29] chapel: I was thinking, how hard would it be to wire up some glasses with clear oled screens in the lenses, then just use them to display gfx onto the world you see
[11:29] stalled has joined the channel
[11:29] webr3: chapel, you can already get them iirc
[11:29] chapel: I meant personally :P
[11:29] SubStack: yeah lots of companies have made them but nobody buys them
[11:30] chapel: I meant something real, that hooked into your phone or something
[11:30] webr3: -> http://hubpages.com/hub/Augmented-Reality-Glasses
[11:30] chapel: and were useful
[11:30] chapel: those are for watching media
[11:31] SubStack: I want kill and health stats in my heads-up display wolfenstein-style as I'm walking down the street
[11:31] chapel: Im talking for overlaying on what you see irl
[11:31] chapel: well there is the app that shows your heartrate
[11:31] chapel: could hook that up and show a heads up heart pumping as yours does
[11:33] kb has joined the channel
[11:42] iFire: JimBastard who's working on kyuri?
[11:42] JimBastard: iFire: i dont understand the question
[11:44] iFire: just wondering if they'll do vows coffeescript syntax
[11:45] JimBastard: why not
[11:45] JimBastard: should be easy to implement
[11:45] hendrik_ has joined the channel
[11:46] aubergine has joined the channel
[11:47] hendrik_ has left the channel
[11:48] hendrikcdn has joined the channel
[11:51] fermion has joined the channel
[11:52] chapel: JimBastard
[11:52] unomi has joined the channel
[11:52] JimBastard: yo
[11:52] chapel: https://gist.github.com/744826
[11:52] isaqual has joined the channel
[11:53] chapel: just tried to start an app
[11:53] JimBastard: chapel: whats the code you are running that caused that?
[11:53] chapel: https://github.com/chapel/Avatar-Rotator
[11:53] mnot has left the channel
[11:53] chapel: works locally fine
[11:53] chapel: I based the package file off of your hello world one
[11:54] JimBastard: chapel: hrmmm
[11:55] mraleph has joined the channel
[11:55] chapel: do I have to put the repo code?
[11:55] everzet has joined the channel
[11:55] JimBastard: chapel: https://github.com/Marak/hellonode/blob/master/package.json
[11:55] JimBastard: i think so yeah
[11:56] chapel: okay, let me add that
[11:56] JimBastard: we have different types of repos 
[11:56] JimBastard: git, file, marketplace, etc
[11:56] JimBastard: that might do it
[11:56] JimBastard: ..
[11:56] JimBastard: if thats the case, we need better error checking
[11:56] JimBastard: i have a feeling its a couple of things 
[11:56] JimBastard: we'll see
[11:57] Duncan_ has joined the channel
[11:58] chapel: didnt fix it JimBastard
[11:58] stagas: hellnode.git
[11:58] JimBastard: same error?
[11:58] stagas: :P
[11:58] chapel: yeah
[11:59] hendrikcdn has joined the channel
[11:59] stagas: maybe it's the dash
[11:59] peritus_ has joined the channel
[11:59] JimBastard: stagas: err, fixed
[11:59] JimBastard: https://github.com/Marak/hellonode/blob/master/package.json
[11:59] stagas: on Avatar-Rotator, if you're running it through a regexp or something
[12:00] JimBastard: chapel: let me try it locally
[12:00] JimBastard: and see if it runs here
[12:01] chapel: yeah idk
[12:02] JimBastard: chapel: first, i see Error: Cannot find module 'jade'
[12:02] JimBastard: so i'll add that dep
[12:02] chapel: oh
[12:02] chapel: yeah, forgot I added jade
[12:02] chapel: sorry could be my fault
[12:02] stagas: it should be on express deps I think
[12:03] JimBastard: npm install express didnt get that
[12:04] chapel: now if I update my git repo, do I have to re-deploy?
[12:04] JimBastard: chapel: im going to ssh into your apps server
[12:04] stagas: chapel: also don't put a slash on ('db/'), just ('db')
[12:04] JimBastard: chapel: i think you might need to delete app and recreate
[12:04] JimBastard: maybe restart will work, unsure
[12:04] JimBastard: prob not
[12:04] chapel: okay, mind you, thats from your code somewhere
[12:04] stagas: chapel: because it adds it and will become db//key
[12:05] whyme has joined the channel
[12:06] Wyverald has joined the channel
[12:06] JimBastard: chapel: im gonna delete your app and try again, okay?
[12:06] chapel: okay
[12:06] chapel: fine with me
[12:06] JimBastard: brb one sec
[12:06] chapel: I was going to do it, but didnt want to since you said you were doing something
[12:07] chapel: locally stagas I had no issues with it btw
[12:09] crohr has joined the channel
[12:11] JimBastard: chapel: lol it hates your app
[12:11] chapel: haha
[12:11] stalled has joined the channel
[12:11] JimBastard: i think maybe stagas is right about regex
[12:11] chapel: hmm, well couldnt you just take the local files and reproduce it locally to see if its the code?
[12:11] JimBastard: could you maybe try renaming the repo without a dash? just to try?
[12:11] chapel: yeah sure I dont care
[12:11] JimBastard: lol thanks
[12:12] JimBastard: if it doesnt work ill take a look locally
[12:12] JimBastard: it just doesnt want to add the app now
[12:12] chapel: renamed git://github.com/chapel/AvatarRotator.git
[12:12] JimBastard: and then can you update https://github.com/chapel/AvatarRotator/blob/master/package.json
[12:13] chapel: hmm
[12:13] stagas: or it could be that space in the "name" too :)
[12:14] chapel: well I removed it
[12:14] chapel: but eh, now the edit interface doesn't want to load
[12:14] chapel: Im gonna redo the repo completely
[12:14] JimBastard: sure
[12:14] altamic has joined the channel
[12:16] stagas: the repo corrupted it still shows the dash, on package.json. The dash broke two servers already :P
[12:16] chapel: haha
[12:17] stagas: and this will be the day remembered as the day chapel broke the internet
[12:17] stagas: :P
[12:17] JimBastard: it could be something else entirely
[12:18] JimBastard: all i want to know, is where the french toast at
[12:18] JimBastard: im hungry like the wolf
[12:19] JimBastard: chapel: you were able to add this application on the first try?
[12:19] JimBastard: its hating on me for some reason
[12:20] chapel: uhh, when it asks me to confirm
[12:20] chapel: it seems to not respond, but goes through after like 30 seconds
[12:20] JimBastard: got ya
[12:20] chapel: https://github.com/chapel/AvRotate
[12:20] JimBastard: yeah, im trying
[12:21] JimBastard: it might be all those deps
[12:21] JimBastard: they might take a while to resolve
[12:21] JimBastard: i havent actually gotten it to add
[12:21] JimBastard: but like, i dont think it even does that until it tries to start
[12:21] chapel: maybe some way of showing something is happening :P
[12:21] chapel: cause on my end, it just sits there
[12:22] chapel: no response that I clicked the button
[12:22] JimBastard: yeah, it hates your app
[12:22] JimBastard: hrmmm
[12:22] JimBastard: i wish i had better logging, we are working on that
[12:22] chapel: well it should work though, I mean my app doesn't do anything odd, :(
[12:23] chapel: just a straight up express app
[12:23] JimBastard: yeah, its something else i think
[12:23] JimBastard: not the app 
[12:24] MattJ has joined the channel
[12:24] stagas: it could be chaos accessing the fs I haven't tested on many places
[12:24] chapel: if you keep pressing go it makes the confirm page goto the dashboard
[12:24] altamic has joined the channel
[12:24] chapel: well the app isn't running
[12:24] JimBastard: im trying a few more things
[12:24] chapel: its setting up the app that is the problem
[12:24] JimBastard: something wierd is going on
[12:24] stagas: try also: require('chaos')(__dirname + '/db')
[12:25] JimBastard: its not that at all
[12:25] JimBastard: its not even getting to the deployment step
[12:25] chapel: could it be AvRotate should I do avrotate?
[12:26] chapel: is my package json fine? maybe an extra character or something its getting stuck on?
[12:27] wasabist has joined the channel
[12:28] JimBastard: okay got it created, trying to start
[12:28] JimBastard: boom
[12:28] chapel: I made some changes to package.json
[12:28] JimBastard: http://avatar3.nodejitsu.com/
[12:28] JimBastard: working
[12:28] chapel: it was missing a few commas
[12:28] JimBastard: maybe there is an issue with deleted app names getting cached or something
[12:28] JimBastard: ahhh
[12:28] JimBastard: word
[12:29] JimBastard: that should have given a better error message
[12:29] chapel: yeah
[12:29] JimBastard: you wanna try starting it uop?
[12:29] chapel: sure
[12:29] chapel: but this is a good thing
[12:29] chapel: giving you more stuff to do
[12:29] JimBastard: :-D
[12:29] JimBastard: so is getting your app to work 
[12:30] davidc_ has joined the channel
[12:30] chapel: well I have an older version running on personal hosting, but as I said, i want to use your service and not have my exclusive beta account going to waste
[12:30] JimBastard: yeah man
[12:30] JimBastard: any apps you make that can go into the marketplace will be huge
[12:30] chapel: how long should it take to add it?
[12:30] JimBastard: you could get a lot of deploys
[12:31] JimBastard: chapel: it should be instant, try a new name or subdomain
[12:31] Ori_p has joined the channel
[12:31] chapel: ok
[12:31] JimBastard: i was getting weird stuff and the client was crashing
[12:31] JimBastard: im adding some tickets now so at least the client doesnt crash
[12:31] JimBastard: for real
[12:32] wasabist has joined the channel
[12:32] aklt: Hi, it seems that the crypto module has some bugs and I have searched for a solution, but not found anything recent. Does anyone knwo something about this?
[12:32] JimBastard: aklt: the dev mailing list?
[12:32] aklt: I am using node v0.3.2-pre
[12:33] chapel: tried a new subdomain, and its still sitting at confirm
[12:33] JimBastard: one sec
[12:33] aklt: JimBastard: Hmm, didn't look there, I'll take a look
[12:33] chapel: hmm
[12:33] chapel: I logged out
[12:33] chapel: logged back in
[12:33] chapel: and it showed up
[12:34] JimBastard: yeah, bad UI
[12:34] JimBastard: added ticket
[12:34] chapel: no error trying to start it
[12:34] JimBastard: i see it here
[12:34] chapel: but its spinning
[12:34] chapel: started!
[12:34] chapel: yay
[12:34] JimBastard: yeaaaah
[12:35] stephank has joined the channel
[12:35] JimBastard: i think im gonna go find food and wake up indexzero
[12:35] chapel: so if I make changes
[12:35] chapel: do I just restart?
[12:36] chapel: or do I have to redeploy?
[12:36] JimBastard: chapel: i think you might have to actually delete the whole thing and redeploy
[12:36] JimBastard: >.<
[12:36] JimBastard: open up a support ticket
[12:36] GasbaKid has joined the channel
[12:36] chapel: okay, will do
[12:36] JimBastard: lots of things we are still getting done
[12:36] JimBastard: be back in a bit
[12:36] zentoooo has joined the channel
[12:37] jmar777 has joined the channel
[12:41] flashingpumpkin has joined the channel
[12:43] torvalamo has joined the channel
[12:48] chapel: someone want to do an ab or siege test for me?
[12:49] cloudhead has joined the channel
[12:52] hellp has joined the channel
[12:53] mrduncan has joined the channel
[12:54] zemanel has joined the channel
[12:56] a-priori has joined the channel
[12:56] a-priori has joined the channel
[12:56] bartmax has joined the channel
[12:56] bartmax has joined the channel
[13:05] sriley has joined the channel
[13:07] wasabist has joined the channel
[13:09] vineyard has joined the channel
[13:11] SubStack: hmm nodejitsu does not like my package.json deps it seems
[13:12] SubStack: maybe the npm install stuff is in a queue and I just need to be patient :/
[13:13] dguttman has joined the channel
[13:14] mies has joined the channel
[13:15] SubStack: adding auto numification to optimist
[13:15] SubStack: that has been bothering me for a while
[13:15] Wyverald has joined the channel
[13:20] chapel: SubStack: yeah it didn't like mine
[13:20] chapel: but I missed a few commas
[13:25] ivanfi has left the channel
[13:25] viirya has joined the channel
[13:26] stagas has joined the channel
[13:32] emerleite has joined the channel
[13:33] bzinger has joined the channel
[13:35] simme has left the channel
[13:35] jmar777: chapel: way late, but you still need an ab test done?
[13:36] chapel: eh if you want heh
[13:36] chapel: http://avrotate.nodejitsu.com/chapel/avatar.jpg
[13:36] chapel: all it does it redirect to a random url (well there is a collection or urls to images)
[13:37] chapel: they are small images
[13:37] jmar777: what kind of rate and concurrency do you want?
[13:37] jmar777: I guess concurrency and number would be more correct
[13:38] chapel: umm, idk maybe 1000/10 just to see how fast it goes through
[13:40] jmar777: 64 req/sec, none failed, average time of 156ms, 15.6sec total
[13:40] chapel: kk, try http://wastingyourlife.co/avatar/chapel/avatar.jpg
[13:40] chapel: :P
[13:40] chapel: I would do it here, but I am on my 3g phone connection
[13:41] cloudhead has joined the channel
[13:42] jmar777: 86 req/sec, none failed, average time of 115ms, 11.51sec total
[13:43] fermion has joined the channel
[13:44] chapel: interesting
[13:44] chapel: mind upping the amount and connections
[13:44] stagas has joined the channel
[13:44] chapel: maybe 10k and 100
[13:44] skm has joined the channel
[13:45] jmar777: just ran 1000/500: 233 req/sec, none failed, average time of 4.29ms, and 4.29 seconds total
[13:45] chapel: on nodejitsu?
[13:45] jmar777: chapel: wastingyourlife
[13:46] chapel: ah
[13:47] SubStack: now optimist converts arguments that look like numbers into numbers properly
[13:47] jmar777: wastingyour life again at 10000/500: 6989 req/sec, none failed, average time of 1.45ms, and 14.495 seconds total (about to try that at nodejitsu)
[13:47] SubStack: I was getting tired of having to parseInt() that stuff by hand
[13:48] chapel: hmm, seems like my hosting at wyl handles node pretty good
[13:48] chapel: hardly even 1% cpu usage
[13:48] chapel: then again, I did setup in memory caching :P
[13:49] jmar777: chapel: wyl tells me the host is nginx, but nodejitsu doesn't. i wonder if there's some extra caching going on at wyl
[13:49] dguttman has joined the channel
[13:49] chapel: well, webfaction has a nginx proxy handling external requests
[13:50] chapel: but it just directs them to my node app
[13:50] chapel: nothing special
[13:50] jmar777: running 10000/500 at nodejitsu: 199 req/sec, none failed, average time of 5ms, and 50sec total
[13:51] chapel: webfaction also has me on a pretty hefty machine, and its late at night so there is no load on the machine
[13:51] jmar777: ahh - definitely performed well
[13:51] chapel: thanks jmar777
[13:51] jmar777: np
[13:52] chapel: the requests should be fast, since all it is doing is computing a random number and sending a 302 redirect
[13:52] HAITI has joined the channel
[13:53] saschagehlich has joined the channel
[13:53] cloudhead has joined the channel
[13:56] zentoooo has joined the channel
[13:56] aubergine has joined the channel
[14:00] everzet has joined the channel
[14:00] frodenius: 2/win 24
[14:03] Somebi has joined the channel
[14:03] Somebi: hey everyone
[14:04] maqr has joined the channel
[14:04] proppy has joined the channel
[14:04] proppy: is there some node.js module that provide equivalent of jquery.extend ?
[14:04] proppy: with optional deepCopy argument
[14:04] yonkeltron: is there a preferred way to clone an object?
[14:05] kenbolton has joined the channel
[14:05] proppy: yonkeltron: did you read object graph series on howtonode.org ?
[14:05] yonkeltron: i will do this thing
[14:06] yonkeltron: gosh darn
[14:06] yonkeltron: what can't creationix do?
[14:06] torvalamo: rest
[14:06] stalled has joined the channel
[14:06] ysynopsis has joined the channel
[14:06] yonkeltron: torvalamo: gooooood one.
[14:09] desaiu has joined the channel
[14:09] davidsklar has joined the channel
[14:09] stagas has joined the channel
[14:11] ysynopsis has joined the channel
[14:12] Somebi: I was looking into node-static module, everything is understandable except the part about fs.createReadStream where for all files is set 'binary' encoding type
[14:12] Somebi: Is this ok for all files?
[14:12] Somebi: And for text files?
[14:12] Somebi: just a moment i'll link
[14:12] Somebi: https://github.com/cloudhead/node-static/blob/master/lib/node-static.js
[14:13] Somebi: ctrl + f -> createReadStream
[14:13] Somebi: node.js is automatically detects the proper encoding?
[14:13] Somebi: when it should be binary and when utf8
[14:14] Somebi: if i'm serving .swf or .txt
[14:14] whyme: Somebi: if you just send all the bytes over the wire, no decoding is needed.
[14:14] omni5cience has left the channel
[14:15] kriszyp_ has joined the channel
[14:15] Somebi: hmm thanks didn't knew =)
[14:15] chrischris has joined the channel
[14:15] stagas has joined the channel
[14:15] whyme: np
[14:16] tg has joined the channel
[14:17] chrischr_ has joined the channel
[14:17] stagas_ has joined the channel
[14:18] proppy has joined the channel
[14:21] cjm has joined the channel
[14:22] statik has joined the channel
[14:22] statik has joined the channel
[14:23] tisba has joined the channel
[14:23] chrischris has joined the channel
[14:24] nihique has joined the channel
[14:25] nonnikcam has joined the channel
[14:26] wink_ has joined the channel
[14:27] chapel: jmar777: you there?
[14:27] broofa has joined the channel
[14:27] jmar777: chapel: yep
[14:27] chapel: mind running one last test for me?
[14:27] jmar777: sure
[14:28] chapel: http://wastingyourlife.co/avatar/chapel/avatar.jpg
[14:28] chapel: 10k/500
[14:30] trotter has joined the channel
[14:30] jmar777: 715 req/sec, none failed, average time of 1.397ms, 13.972 secs total
[14:30] Spion has joined the channel
[14:31] chapel: hmm
[14:31] jmar777: the network that I'm on is getting more congested now, so times won't be as stable on my end
[14:31] chapel: yeah
[14:31] jmar777: i ran it a second time and it dropped to around 500 req/sec
[14:31] chapel: well I changed some code, but thanks
[14:31] chapel: I appreciate it
[14:31] jmar777: np
[14:31] derren13 has joined the channel
[14:32] jmar777: chapel: my guess is with an operation as trivial as that, your bottleneck is almost always going to be infrastructure and connection setup/teardown times, rather than code
[14:32] chapel: yeah
[14:33] chapel: I was mostly curious, but I can always test when I get home in an hour or so
[14:33] aheckmann has joined the channel
[14:34] pHcF has joined the channel
[14:36] ewdafa has joined the channel
[14:37] tisba has joined the channel
[14:38] stagas has joined the channel
[14:38] ceej has joined the channel
[14:40] ceej has left the channel
[14:41] tisba has joined the channel
[14:41] wasabist has joined the channel
[14:45] Ori_p has joined the channel
[14:51] boaz has joined the channel
[14:52] beta has joined the channel
[14:52] herbySk has joined the channel
[14:53] isaqual has joined the channel
[14:55] malkomalko has joined the channel
[14:56] everzet has joined the channel
[14:56] dipser has joined the channel
[14:57] GasbaKid has joined the channel
[15:01] matt_c has joined the channel
[15:01] akahn has joined the channel
[15:03] davidwalsh has joined the channel
[15:04] googol has joined the channel
[15:05] sonnym has joined the channel
[15:11] JimBastard has joined the channel
[15:11] JimBastard: reporting in from general assembly 
[15:12] kenbolton has joined the channel
[15:13] jamund has joined the channel
[15:14] okuryu has joined the channel
[15:14] yonkeltron: JimBastard: which one?
[15:14] JimBastard: yonkeltron: http://generalassemb.ly/
[15:14] sth: How do I catch errors from within events?
[15:17] yonkeltron: awesome
[15:18] daniellindsley has joined the channel
[15:18] Alex-SF has joined the channel
[15:18] roder has joined the channel
[15:18] JimBastard: yonkeltron: you here too?
[15:18] roder has left the channel
[15:19] yonkeltron: in spirit, my friend
[15:19] yonkeltron: in spirit
[15:19] sth: I'm throwing new errors in the response event from a http client, how do I 'catch' them?
[15:20] cjm has joined the channel
[15:20] yonkeltron: i wrote an actor-like library for node...i'm a little embarrased to show it off, though. would someone like to look at it?
[15:20] yonkeltron: sth: what do you mean?
[15:21] sth: So I have my request.on('response' function(response) { ... }); event setup, but inside I throw new Error objects, how do I catch them?
[15:21] sth: So I can tell my app there's been an error
[15:22] yonkeltron: they don't bubble up properly?
[15:22] sth: response.connection.on('error', function(e) {}); doesn't seem to catch them
[15:22] sth: yonkeltron: no, because they're in an exception
[15:22] sth: s/exception/event/
[15:22] femtoo has joined the channel
[15:23] sth: The only thing that catches them is the unhandled Exception event handler
[15:23] sth: But by then, it's too late
[15:28] malkomalko: anybody here use node to make 1k's of api requests at a time? Seeing my process just freeze somewhere when making 5k requests, and just wondering if somebody has been down this road before
[15:30] jmar777: malkomalko: have you tried smaller amounts, to see at what point you're getting bogged down?
[15:30] mikew3c has joined the channel
[15:30] sth: yonkeltron: any idea?
[15:31] malkomalko: yah, been trying out a bunch of different things, but it's just really tough figuring out what's going on heh
[15:32] sth: I found that at around 1k requests (at the same time) to a node server starts to go wrong :)
[15:33] malkomalko: yah, we shoot off about 5k api requests, and I think it usually gets to around 2k-ish responses and just freezes at 100% cpu
[15:33] yonkeltron: malkomalko: you might want to throttle those a little bit
[15:33] davglass has joined the channel
[15:33] yonkeltron: so them 1k at a time
[15:34] tisba has joined the channel
[15:34] malkomalko: yah, that's what I'm doing right now, waiting for X requests to send/return, then batch out another
[15:34] yonkeltron: sth: what happens when you throw the error?
[15:34] malkomalko: just wondering if anybody ever went through this type of situation before
[15:34] yonkeltron: sth: inside the callback, i mean
[15:34] yonkeltron: malkomalko: have a dispatcher emitter which waits for "finished" events and incs a counter by 1
[15:34] sth: I get an uncaught exception error
[15:34] yonkeltron: when the counter reaches 1k
[15:34] yonkeltron: sth: oh, well...
[15:35] yonkeltron: sth: have a listener which has a handler for an 'error' event
[15:35] malkomalko: yah yonkeltron, gonna try something like that
[15:35] malkomalko: brb
[15:35] a-priori has joined the channel
[15:35] a-priori has joined the channel
[15:35] sth: yonkeltron: Yeah, I just resulted to that :X
[15:35] yonkeltron: sth: so you can use it to send the error
[15:35] yonkeltron: that sounds reasonable to me
[15:36] sth: I don't really like it, but it'll have to do 
[15:36] yonkeltron: why? that's actually great
[15:36] yonkeltron: then you can have the handler do the right thing
[15:36] yonkeltron: log the error, etc.
[15:36] JimBastard has joined the channel
[15:36] cjm has joined the channel
[15:37] malkomal_ has joined the channel
[15:38] emerleite has joined the channel
[15:38] sth: I guess, thanks
[15:40] yonkeltron: hope it helps some
[15:42] sth: It does :)
[15:42] BillyBreen has joined the channel
[15:43] strixv has joined the channel
[15:43] maqr has joined the channel
[15:43] maqr has joined the channel
[15:47] JusticeFries has joined the channel
[15:50] MikhX has joined the channel
[15:54] m32311 has joined the channel
[15:55] dnolen has joined the channel
[15:59] kenbolton has joined the channel
[16:01] quest88 has joined the channel
[16:04] JimBastard_ has joined the channel
[16:06] cnus8n has joined the channel
[16:06] matt_c has joined the channel
[16:09] dmcquay has joined the channel
[16:11] softdrink has joined the channel
[16:12] AAA_awright has joined the channel
[16:12] kjeldahl has joined the channel
[16:13] ncb000gt has joined the channel
[16:17] bingomanatee_ has joined the channel
[16:18] charlenopires has joined the channel
[16:22] Test has joined the channel
[16:22] ajpiano has joined the channel
[16:25] liar has joined the channel
[16:27] stagas has joined the channel
[16:27] kenbolton has joined the channel
[16:27] JusticeFries has joined the channel
[16:30] JimBastard_: whats the npm bundle command
[16:30] ncb000gt: npm bundle?
[16:31] JimBastard_: yeah
[16:31] JimBastard_: i must have bad deps syntax
[16:31] JimBastard_:        "socket.io": ">=", is no good
[16:31] JimBastard_: how do you specify to use the latest version
[16:31] ncb000gt: need to havea version
[16:31] ncb000gt: =*
[16:31] ncb000gt: ?
[16:31] JimBastard_: that might be it
[16:32] bentruyman has joined the channel
[16:32] ncb000gt: tho that will use any version that's available at the time of install i'd exprect
[16:32] ncb000gt: expect*
[16:32] ncb000gt: which can cause problems with api changes
[16:33] jakehow has joined the channel
[16:35] sudoer has joined the channel
[16:38] sprout has joined the channel
[16:39] UHMA has joined the channel
[16:40] desaiu has joined the channel
[16:41] saschagehlich: how can I render a partial in jade?
[16:41] MikhX has joined the channel
[16:41] Alex-SF has joined the channel
[16:41] wasabist has joined the channel
[16:41] statik has joined the channel
[16:41] ysynopsis has joined the channel
[16:41] fermion has joined the channel
[16:41] davidc_ has joined the channel
[16:41] mraleph has joined the channel
[16:41] ph^ has joined the channel
[16:41] danking has joined the channel
[16:41] micheil has joined the channel
[16:41] thear has joined the channel
[16:41] zilt has joined the channel
[16:41] devinus has joined the channel
[16:41] jameshome has joined the channel
[16:41] Aikar has joined the channel
[16:41] freeformz has joined the channel
[16:41] aconran has joined the channel
[16:41] tanepiper has joined the channel
[16:41] franck34 has joined the channel
[16:41] zedas has joined the channel
[16:41] Mulleteer has joined the channel
[16:41] rudebwoy has joined the channel
[16:41] bruse has joined the channel
[16:41] kloeri has joined the channel
[16:41] phiggins has joined the channel
[16:41] dispalt has joined the channel
[16:41] jwm has joined the channel
[16:41] sid3k has joined the channel
[16:41] Vertice: does expresso support file uploads with assert.response ?
[16:42] kjeldahl has joined the channel
[16:42] tjholowaychuk has joined the channel
[16:43] saschagehlich: tjholowaychuk: can I render partials with jade?
[16:43] tjholowaychuk: saschagehlich: not with jade itself
[16:44] ncb000gt: tjholowaychuk: that's only supported in express yea?
[16:44] Vertice: tjholowaychuk: can assert.response in expresso do file uploads ?
[16:44] tjholowaychuk: yup
[16:44] stepheneb has joined the channel
[16:44] tjholowaychuk: Vertice: if you have a multipart body string yeah, but not in a fancy way like passing filenames nope
[16:44] sixtus42 has joined the channel
[16:44] tjholowaychuk: Vertice: maybe check out connect-form, my test has multipart tests
[16:45] Vertice: k
[16:45] tjholowaychuk: but it would be cool to have a cleaner way to do this
[16:45] Vertice: cool.
[16:46] saschagehlich: tjholowaychuk: okay, can it handle partials if I use express.js?
[16:46] Vertice:         'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryMfJEpQcCbybb6A8U'
[16:46] Vertice: mmmm
[16:46] Vertice: i think i need to know more about multi-part =P
[16:46] ncb000gt: saschagehlich: http://expressjs.com/guide.html#View-Partials
[16:46] saschagehlich: ah I see. sorry, I should read the documentation *g
[16:46] tjholowaychuk: saschagehlich: yes
[16:46] ncb000gt: :)
[16:47] jchris has joined the channel
[16:47] tjholowaychuk: saschagehlich: just keep in mind those docs are for the 1.x branch
[16:47] tjholowaychuk: although most apply to master too
[16:47] saschagehlich: tjholowaychuk: yup
[16:51] strixv: What does it mean to "hydrate a model?"
[16:51] yonkeltron: strixv: context?
[16:52] Insanity5902 has joined the channel
[16:52] strixv: mongoose, during a query on a model, has a "hydrate" option
[16:52] strixv: I've been assuming it means, "make another query to be sure that this local model actually matches the database"
[16:52] strixv: But I want to be sure that's what
[16:52] oal has joined the channel
[16:57] cardona507 has joined the channel
[17:01] codelotus has joined the channel
[17:02] derren13 has joined the channel
[17:04] lifecoder has joined the channel
[17:05] banjiewen has joined the channel
[17:05] mies_ has joined the channel
[17:06] dgathright has joined the channel
[17:06] aconbere has joined the channel
[17:06] stagas_ has joined the channel
[17:07] spolu has joined the channel
[17:07] tapwater has joined the channel
[17:08] spolu: hi everyone, I have a little question that require posting 5 lines of code, is that ok to do so here?
[17:08] tjholowaychuk: spolu: use gist.github.com
[17:08] spolu: ok
[17:09] jtoy has joined the channel
[17:09] alek_br has joined the channel
[17:11] spolu: hi,  i have this behavior that I find odd. I am not an expert in ECMAScript specification but could someone have a look and give me an opinion? https://gist.github.com/745289
[17:11] CIA-93: node: 03Brian White 07master * r9eaf232 10/ (5 files in 4 dirs): 
[17:11] CIA-93: node: Fix compilation on OpenBSD and FreeBSD
[17:11] CIA-93: node: While it compiles fine on FreeBSD, at least on amd64 node dies with:
[17:11] CIA-93: node: "CALL_AND_RETRY_0 allocation failed - process out of memory" - http://bit.ly/hM0neA
[17:12] spolu: It has to do with calling function asynchronously whose closure contain variable  created with a for in construction
[17:12] MikhX has joined the channel
[17:13] sixtus42: spolu: i is not "frozen" in time
[17:13] tjholowaychuk: spolu: you have to wrap that in an anonymous function and pass i in
[17:13] sixtus42: spolu: pass in i into the inner function
[17:13] simme has joined the channel
[17:13] rauchg_ has joined the channel
[17:14] spolu: sixtus42, tjholowaychuk : ok so the function does not capture the variable as it is but only a reference to it?
[17:14] gnagno has joined the channel
[17:14] gnagno: hello all
[17:14] JimBastard_: sup gnagno 
[17:14] gnagno: sup ?
[17:14] sixtus42: spolu: yes, it's a closure, not a block
[17:15] InsDel has joined the channel
[17:15] spolu: sixtus42: ok. fair enough, thanks a lot!
[17:15] hobodave has joined the channel
[17:16] sixtus42: spolu: https://gist.github.com/745296
[17:16] MikhX has joined the channel
[17:17] spolu: sixtus42: yep that's something close to what I did
[17:17] spolu: sixtus42: thanks again!
[17:17] sixtus42: spolu: no prob, had the same questions on entering js land
[17:18] wilmoore has joined the channel
[17:18] robotarmy has joined the channel
[17:18] spolu: sixtus42: yup
[17:19] spolu: sixtus42: p.39 of 'Javscript the Good parts' and I red it!
[17:20] tjholowaychuk: im not a fan of bind
[17:20] tjholowaychuk: you can just pass that i to the setTimeout() no?
[17:20] tjholowaychuk: after the ms
[17:20] sixtus42: tjholowaychuk: no
[17:20] sixtus42: tjholowaychuk: or can you? I don't think so
[17:20] tjholowaychuk: yeah i think you can
[17:20] tjholowaychuk: I dont use it often but yeah
[17:20] tjholowaychuk: try i
[17:20] tjholowaychuk: t
[17:20] spolu: tjholowaychuk: What you can for sure, is avoid creating function in loops
[17:21] spolu: tjholowaychuk: got bitten once... hope I'll remember :)
[17:21] skampler has joined the channel
[17:22] tjholowaychuk: LL(*) is magical
[17:22] tjholowaychuk: makes me happy
[17:22] spolu: LL(*) ?
[17:23] sudoer has joined the channel
[17:23] tjholowaychuk: infinite lookahead, working on a parser
[17:23] tjholowaychuk: I usually just need LL(1)
[17:23] spolu: hmmm remembers me some classes of CS
[17:23] Spion_ has joined the channel
[17:23] tjholowaychuk: dunno
[17:23] tjholowaychuk: lol
[17:23] mrduncan has joined the channel
[17:23] tjholowaychuk: school !== me
[17:24] spolu: :)
[17:24] spolu: good to review the concepts anyway!
[17:24] tjholowaychuk: certainly
[17:25] altamic has joined the channel
[17:26] sixtus42: tjholowaychuk: setTimeout(func, ms, param) actually works. interesting, I never saw that documented...
[17:27] chapel: wwhat can you do with the param?
[17:27] tjholowaychuk: sixtus42: :)
[17:27] wilken_ has joined the channel
[17:27] tjholowaychuk: all excess ones should be passed to the function
[17:28] sixtus42: chapel: https://gist.github.com/745296
[17:28] sixtus42: and the outer "i" is passed in to the inner "ii"
[17:29] chapel: oh interesting
[17:29] chapel: v8: var test = { a: 'a',b: 'b',c: 'c' };for(var i in test) {setTimeout(function(ii) {console.log(ii + ' ' + test[ii]); }, 500, i);};
[17:29] fritze71 has joined the channel
[17:29] UHMA has joined the channel
[17:30] chapel: hmm
[17:30] sixtus42: try 0 instead of 500
[17:30] chapel: no v8 bot
[17:30] sixtus42: v8: 1+1
[17:30] tjholowaychuk: you can still just call it "i"
[17:30] sixtus42: yup, it's gone
[17:30] slloyd has joined the channel
[17:30] chapel: :)
[17:30] sixtus42: tjholowaychuk: DON'T
[17:30] tjholowaychuk: haha
[17:31] slloyd has joined the channel
[17:31] Wyverald1 has joined the channel
[17:32] sixtus42: tjholowaychuk: "Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live."
[17:32] sixtus42: - Martin Golding
[17:32] herbySk: spolu: freeze it manually: for(var i in test) { setTimeout((function(frozenI) {return function() {console.log(frozenI + ' ' + test[frozenI]); };})(i), 500); }
[17:32] tjholowaychuk: sixtus42: ahaha words to live by
[17:32] spolu: herbySk: yep that's what I did
[17:32] tjholowaychuk: I had to maintain some code once that was in a language I didnt even speak, that was really weird
[17:32] sixtus42: herbySk: spolu: that's just a very bloated way of using bind()
[17:33] sixtus42: much harder to read
[17:33] spolu: sixtus42: using bind is harder to read when you have other arguments to the function riht?
[17:33] spolu: right?
[17:33] tjholowaychuk: bind is a bit of a mess
[17:34] sixtus42: if you only create a function to pass in parameters (or "this"), then please use bind() instead
[17:34] herbySk: sixtus42:well, yes, you're probably true. but for people doing js a lot, it is probably a known idiom (that is, not that unreadable), bind is relatively new thing
[17:34] herbySk: siztus42: and I don't like that it binds this as well, if I only want to bind an arg
[17:35] tjholowaychuk: this is why I dont use bind
[17:35] tjholowaychuk: https://gist.github.com/745333
[17:35] tjholowaychuk: pretty large, for not much gain
[17:35] sixtus42: but every function call is an implicit call of bind
[17:35] mischief: powerdns works great
[17:36] tjholowaychuk: sixtus42 ?
[17:36] mischief: oh that kind of bind ^^
[17:36] spolu: tjholowaychuk, herbySk, sixtus42: well even if less readable, bind is still much more elegant
[17:36] tjholowaychuk: spolu: you dont need bind there, just pass it to setTimeout() :p
[17:37] tjholowaychuk: I dont know if I have ever needed bind
[17:37] tjholowaychuk: very rarely at least
[17:37] spolu: tjholowaychuk: my actual issue was not with setTimeout but an callback passed to function that execute async
[17:37] sprout has joined the channel
[17:37] spolu: tjholowaychuk: bind is really useful when you use prototypes and inheritance
[17:37] tjholowaychuk: spolu: isnt your issue the "i" thing?
[17:37] tjholowaychuk: or is this a new issue
[17:37] tlrobinson has joined the channel
[17:38] sixtus42: tjholowaychuk: it really depends. I was thinking the same when I started js, now I use apply() call() and bind() all the time
[17:38] heavysixer has joined the channel
[17:38] tjholowaychuk: sixtus42: apply/call of course, bind not so much
[17:38] herbySk: well, after I get used to it, I probably _will_ use it (it is part of a spec, as a built-in currying, which is fine, just, I'm not used yet) (and I don't care what the implementation is; it can change for better if there is need for it)
[17:38] spolu: tjholowaychuk: I started using pure functional inheritance... my world has been rocked
[17:39] spolu: tjholowaychuk: no same issue but my real issue was not with setTimeout but some other async function
[17:39] broofa has joined the channel
[17:39] sixtus42: and I am late for the company xmas party… laters!
[17:39] tjholowaychuk: spolu: ah ok that makes more sense
[17:39] ryah: should 'string'.toJSON() work?
[17:39] ryah: mraleph: seems broken in 3.0.3 --^
[17:39] saschagehlich has joined the channel
[17:41] kawaz_home has joined the channel
[17:44] pifantastic_ has joined the channel
[17:45] tjholowaychuk: ryah: there is a toJSON() method?
[17:45] fermion has joined the channel
[17:45] mscdex: ryah: maybe they removed it recently?: http://codereview.chromium.org/5896001/
[17:45] kawaz_air has joined the channel
[17:46] gf3 has joined the channel
[17:46] herbySk: v8: 'string'.toJSON
[17:46] mscdex: v8bot is gone :o
[17:46] herbySk: that's bad :-(
[17:46] c4milo: mscdex++ 
[17:46] c4milo: ahhh
[17:46] c4milo: where is v8bot ? 
[17:47] c4milo: ACTION sad
[17:47] ryah: mscdex: thanks. yeah it seems toJSON is gone.
[17:47] sivy_ has joined the channel
[17:47] mape: Hmm that was neat..
[17:47] mape: {}.toJSON() would be ever nicer
[17:49] mape: And wouldn't it be '{}'.toObject() ?
[17:49] CrypticSwarm has joined the channel
[17:49] tek has joined the channel
[17:50] aguynamedben has joined the channel
[17:51] CIA-93: node: 03Ryan Dahl 07master * r7d425a0 10/ (159 files in 21 dirs): Upgrade V8 to 3.0.3 - http://bit.ly/fFVrRK
[17:51] CIA-93: node: 03Ryan Dahl 07master * rd1f36ac 10/ test/simple/test-fs-write.js : Remove toJSON usage - it was removed from V8 - http://bit.ly/fSiHzk
[17:52] jchris has joined the channel
[17:52] slaskis has joined the channel
[17:52] tjholowaychuk: crazy, good thing I didnt use that, didnt even know it was there
[17:52] cognominal has joined the channel
[17:54] Nevtus has joined the channel
[17:54] Nevtus has joined the channel
[17:57] msekimura has joined the channel
[17:58] JimBastard has joined the channel
[17:58] JimBastard: does anyone remember malte's irc nick?
[17:59] TheEmpath: so damned close to making the beginning of an MMORPG serveri n node.js!!!
[18:00] TheEmpath: i got movement broadcasting to the server accurately
[18:00] TheEmpath: now i just need the LOS data to broadcast to the client
[18:00] TheEmpath: oooooooooo so crose!
[18:02] noahcampbell has joined the channel
[18:03] AAA_awright: TheEmpath: And... something blocked you?
[18:03] yozlet has joined the channel
[18:04] mjr_ has joined the channel
[18:05] unlink has joined the channel
[18:05] rauchg_ has joined the channel
[18:08] jameshome: an ssh client in node.js. given that this doesn't exist I take that its very difficult?
[18:08] chapel: why not replicate linux and all its apps in node
[18:08] chapel: sounds like a challenge to me
[18:08] tjholowaychuk: jameshome: just large, take a look at the ruby implementation lol its quite huge
[18:08] chapel: zzz off to dream of node dreams
[18:08] jameshome: yeah
[18:08] AAA_awright: Just make a compiled module
[18:09] jameshome: I like the idea of being able to run vim on my CR-48
[18:09] gkatsev: and there are already javascript terminal frontends, like uni.xkcd.com
[18:09] gkatsev: jameshome: ctrl-alt t
[18:09] gkatsev: it opens a terminal
[18:10] jameshome: oh, it has an accessible CLI?
[18:10] jameshome: sweet!
[18:10] mscdex: how about multiplayer coop wolf3d using node.js and the browser?!
[18:10] mscdex: :p
[18:10] gkatsev: it is limited though
[18:10] jameshome: (I haven't actually gotten it yet)
[18:10] jameshome: yeah
[18:10] gkatsev: jameshome: but it does have ssh and probably vim-tiny
[18:10] jameshome: that's great news
[18:10] gkatsev: and you could probably hack it to install full vim and whatever else
[18:10] CIA-93: node: 03Ryan Dahl 07master * r4bb914b 10/ (AUTHORS ChangeLog doc/index.html src/node_version.h wscript): Bump version to v0.3.2 - http://bit.ly/dILlB4
[18:10] CIA-93: node: 03Ryan Dahl 07master * ra8f666e 10/ src/node_version.h : Now working on v0.3.3-pre - http://bit.ly/hSI9II
[18:10] jameshome: although it robs me of my ssh node.js excuse
[18:10] sechrist has joined the channel
[18:10] jameshome: *grin*
[18:11] gkatsev: you can still work on that
[18:11] jameshome: I'll look at Net::SSH on Ruby and get scared
[18:11] AAA_awright: Is there some CLI frontend that has a tab-completion library and all that?
[18:11] mrduncan has joined the channel
[18:12] dgathright has joined the channel
[18:12] tjholowaychuk: jameshome: haha :)
[18:12] msekimura has joined the channel
[18:13] bingomanatee: I have a question about expressjs/flash. It looks like it always sends out a message on the NEXT page that loads - is there any way to force it to show right now?
[18:13] tjholowaychuk: bingomanatee: it will flush as soon as it can
[18:13] bingomanatee: ex: I have a login script. When the user submits the post, they are logged in. but its only the NEXT page that visits that shwos "congrats you are logged in". 
[18:13] BrianTheCoder has joined the channel
[18:13] tjholowaychuk: bingomanatee: so you render the template in the POST ?
[18:14] tjholowaychuk: instead of res.redirect('back') or similar?
[18:14] bruce has joined the channel
[18:14] bingomanatee: i will gest the handler. using MVC.
[18:15] bingomanatee: https://gist.github.com/745415
[18:16] tjholowaychuk: bingomanatee: looks ok, like I said any call to req.flash() or req.flash('info') will flush that
[18:17] tjholowaychuk: so it depends what your template is doing i guess
[18:17] unlink: I'm using formidable and uploading some large files to it. Should it be consuming 400MB handling a single file upload?
[18:17] fcheslack has joined the channel
[18:18] herbySk: tjholowaychuk: as for should.js, why (if lengthOf is alias of length) make "an" an alias for "a"?
[18:18] herbySk: s/why/why not/
[18:19] TheEmpath: AAA_awright: yeah
[18:19] Nomon: since rewriting our backend in javascript node.js replasing our old php backend I have shutdown  2 of our 5 ouf our webfronts n the cloud. and will turn of 3. in a second. Reduced our processing needs like 300% :) Next up downgrading our mongodb instances due to in process caching.
[18:19] tjholowaychuk: herbySk: "a" right now is for typeof, foo.should.be.a('string') etc
[18:20] bingomanatee: tjholowaychuk: nm my mistake - left out the messages partial
[18:20] bingomanatee: sorry - should have caught that myself. 
[18:20] tjholowaychuk: np
[18:21] TheEmpath: AAA_awright: im puttign clients in an array and sometimes, the sessionId gets overwritten
[18:21] herbySk: tjholowaychuk: i know for what it is, I asked why "an" is not an alias for "a"
[18:21] herbySk: foo.should.be.an('object')
[18:21] tlrobinson has joined the channel
[18:21] tjholowaychuk: herbySk: foo.should.be.an.instanceof(Foo);
[18:22] AAA_awright: TheEmpath: For a web program or what? What's it getting overwritten with?
[18:22] fcheslack has left the channel
[18:22] tjholowaychuk: herbySk: it could be
[18:22] tjholowaychuk: herbySk: or it could be foo.should.be.type('object') or something
[18:22] TheEmpath: AAA_awright: The sessionIds are getting over written with other sessionIds :(
[18:23] TheEmpath: for example
[18:23] AAA_awright: In what storage?
[18:23] TheEmpath: when a user established a connection to the server with the GameApi.newPlayer command (custom)
[18:23] herbySk: tjholowaychuk: well, I see it's a wip yet...
[18:23] tjholowaychuk: herbySk: of course
[18:23] eee_c has joined the channel
[18:23] TheEmpath: i make a socket call to the GameApi.js function newPlayer where the socket.io client is the parameter
[18:24] tjholowaychuk: hence 0.0.4 :p
[18:24] sprout has joined the channel
[18:24] TheEmpath: i then this.list.push(new Player(client.sessionId)) in that command
[18:24] rauchg_ has joined the channel
[18:24] TheEmpath: when i do it again, for whatever reason, the original player in the array's sessionId gets overwritten with the new guys sessionId
[18:24] TheEmpath: but here's the killer
[18:24] TheEmpath: it gets overwritten sporatically
[18:25] TheEmpath: and sometimes it gets set back to the original correct sessionId
[18:25] TheEmpath: i was digging around in socket.io code and I saw one line that bothered me
[18:25] TheEmpath: this.sessionId = message
[18:25] TheEmpath: what if message is an object?
[18:25] TheEmpath: that means it gets passed by reference
[18:25] TheEmpath: which can screw up things theoretically
[18:25] TheEmpath: and i think i just hit it
[18:25] AAA_awright: Aren't you supposed to JSON-encode that stuff?
[18:26] TheEmpath: my assumption is that something in socket.io does the json encoding
[18:26] AAA_awright: Check
[18:27] TheEmpath: i see many calls for json stringify in socket.io source
[18:27] TheEmpath: at least 100
[18:28] TheEmpath: but i dunno whats going on, ik have a pretty elaborate system of queues to keep requests and serve loads light
[18:28] TheEmpath: hard to trace
[18:29] twoism has joined the channel
[18:29] TheEmpath: i just never seen the sessionId overwrite itself and then set itself back randomly before
[18:30] TheEmpath: damn it i found it
[18:30] TheEmpath: lol
[18:30] TheEmpath: i had this thought when i was in the car yesterday
[18:30] TheEmpath: what if i was using = in an if check and not ==?
[18:30] TheEmpath: sure enough, i found it and that was exactly the case
[18:33] unlink: aha. formidable has trouble with files posted as binary (i.e. its memory usage explodes)
[18:34] tmpvar has joined the channel
[18:35] malkomalko has joined the channel
[18:36] AAA_awright_ has joined the channel
[18:42] augustl has joined the channel
[18:45] lifecoder has joined the channel
[18:51] JimBastard has joined the channel
[18:54] JusticeFries has joined the channel
[18:55] richcollins has joined the channel
[18:56] cjm has joined the channel
[19:02] ajpiano has joined the channel
[19:02] heavysixer has joined the channel
[19:10] langworthy has joined the channel
[19:11] admc has joined the channel
[19:12] arpegius has joined the channel
[19:13] malkomalko has joined the channel
[19:14] wink_ has joined the channel
[19:14] jherdman has joined the channel
[19:18] lifecoder has joined the channel
[19:20] mies has joined the channel
[19:22] themiddleman has joined the channel
[19:23] cjm has joined the channel
[19:23] v8bot has joined the channel
[19:24] davglass_ has joined the channel
[19:25] murz has joined the channel
[19:27] mattpodwysocki has joined the channel
[19:27] Tobias| has joined the channel
[19:28] skm has joined the channel
[19:28] mattpodwysocki: Having problems with the latest v0.3.2 build via Cygwin. Seems to have a problem with the CygwinMutex in platform-cygwin.cc
[19:28] mattpodwysocki: anyone else see this?
[19:29] jdg969 has joined the channel
[19:29] jdg969 has left the channel
[19:30] yyamano has joined the channel
[19:31] charlenopires has joined the channel
[19:33] ceej has joined the channel
[19:35] aconbere has joined the channel
[19:39] ryah: mattpodwysocki: that seems likely
[19:39] dgathright has joined the channel
[19:42] strmpnk has joined the channel
[19:43] quest88_ has joined the channel
[19:44] jpick has joined the channel
[19:45] romainhuet has joined the channel
[19:47] bingomanatee_ has joined the channel
[19:47] mattpodwysocki: ryah: k, just making sure it was known
[19:48] micheil: ryah: so we now have an os module? neat. I'll patch you up with the old os module stuff I was working on
[19:48] mattpodwysocki: ryah: get my email re:support?
[19:48] micheil: user/group dictionary accces
[19:50] tanepiper: ACTION is going to have to spend the weekend fixing people's package.json files to work through his OCD
[19:50] mattc has joined the channel
[19:51] sechrist: Are there any event systems, like resque, that let you set an event to be triggered in x time?
[19:51] sechrist: can't seem to find something exactly like that
[19:51] micheil: umm.. delayed job does it; but that's not like redis
[19:52] micheil: but delayed job's a thing from ruby; you could always write a port of it
[19:53] sechrist: which would be the same thing as me having a node service and doing a setTimeout i'm assuming
[19:53] sechrist: which doesn't give me any kind of distribution or fault tolerance on the event broker level
[19:54] fritze71 has left the channel
[19:56] LeastWeasel has joined the channel
[19:57] Tobsn has joined the channel
[19:57] BrianTheCoder has joined the channel
[19:58] rburhum has joined the channel
[19:59] Insanity5902 has joined the channel
[20:00] akahn has left the channel
[20:02] statik has joined the channel
[20:02] statik has joined the channel
[20:02] LeastWeasel: I'm having a problem where using script.runInNewContext with a function in the sandbox argument freezes the script. Does anyone know what the problem might be?
[20:02] EyePulp has joined the channel
[20:04] yonkeltron: LeastWeasel: i just used runInNewContext the other day
[20:04] yonkeltron: LeastWeasel: can you give more detail?
[20:07] Twelve-60` has joined the channel
[20:08] amerine has joined the channel
[20:11] romainhuet has joined the channel
[20:13] mattc has joined the channel
[20:24] aconbere has joined the channel
[20:30] splashs has joined the channel
[20:31] admc has joined the channel
[20:32] bronb_ has joined the channel
[20:41] sekistner has joined the channel
[20:43] matt_c has joined the channel
[20:44] matt_c_ has joined the channel
[20:49] stbuehler has joined the channel
[20:51] TheEmpath: is there a value in socket.io that allows me to measure the amount of data going in and out of the sockets?
[20:52] creationix has joined the channel
[20:53] stbuehler: hi.. somehow in node.js context i can't bind functions: function xxx() {...} (xxx.bind())(); doesn't work
[20:53] stbuehler: TypeError: Object function xxx() {...} has no method 'bind'
[20:54] eazyigz has joined the channel
[20:54] creationix: stbuehler: type process.versions in the node repl
[20:55] stbuehler: hm, maybe a little bt old
[20:56] creationix: mainly I'm interested in the V8 version
[20:56] stbuehler: 2,2,24
[20:56] creationix: some builds of node have an older v8
[20:56] stbuehler: debian
[20:56] creationix: yep
[20:56] stbuehler: any known reason why debian doesn't have newer packages?
[20:56] creationix: debian like to link against their existing libv8.  Normal node staticly links against a newer v8
[20:57] creationix: getting into debian stable takes months or years
[20:57] stbuehler: i think they are right not to link static :)
[20:57] stbuehler: i'm not using debian stable :)
[20:57] creationix: well, there are pros and cons to static linking, ryah prefer static
[20:58] creationix: you can try to find a newer libv8 for your system, not use newer v8 features, or compile node from source getting the newer static linked v8
[20:58] stbuehler: i'd prefer building better debian packages :)
[20:58] stbuehler: or "newer"
[20:58] ryah: static linking ftw
[20:58] stbuehler: shouldn't be too difficult
[20:59] creationix: stbuehler: go for it, I get bug reports in my various libraries pretty often from people using the debian node
[20:59] eazyigz: can anybody point me to a good resource about installing node.js on android?
[21:00] creationix: eazyigz: not sure about android specifically, but I head the cmake patches for node help a lot with cross-compiling
[21:00] creationix: there are a few threads on the node mailing list
[21:00] creationix: s/head/hear/
[21:00] eazyigz: thanks
[21:00] creationix: ACTION went to the eye doctor this morning, so things are still blurry
[21:01] creationix: ryah: how do I dlopen arbitrary libraries from node
[21:02] creationix: I'm find with manually specifying all the args in a huge config
[21:02] torvalamo has joined the channel
[21:02] creationix: the dlopen used to open .node files seems to assume a certain format
[21:03] sandymahalo has joined the channel
[21:04] stepheneb has joined the channel
[21:04] eddanger has joined the channel
[21:05] eddanger: When running node script... as a script, how do I exit?
[21:05] creationix: eddanger: process.exit()
[21:05] creationix: or wait for all events to end
[21:05] creationix: you's have to cancel any intervals and stop any listening servers
[21:05] eddanger: perfect.
[21:06] eddanger: creationix: ah, that was it. I had a mysql process open that I hadn't closed.
[21:07] creationix: that will do it
[21:07] bruce_ has joined the channel
[21:08] MattJ has joined the channel
[21:08] sekistner has left the channel
[21:09] AAA_awright_ has joined the channel
[21:13] ossareh has joined the channel
[21:13] broofa has joined the channel
[21:17] BrianTheCoder has joined the channel
[21:18] yozlet has joined the channel
[21:18] Hello71 has joined the channel
[21:21] brianleroux has joined the channel
[21:22] blowery_zzz has joined the channel
[21:22] mikew3c_ has joined the channel
[21:22] tmitchell has joined the channel
[21:23] strmpnk has joined the channel
[21:23] tprice: Problem at line 15 character 26: Missing '()' invoking a constructor.
[21:23] tprice: var emitter = new Emitter;
[21:23] tprice: should it be var emitter = new Emitter()
[21:24] alexfner has joined the channel
[21:25] SubStack: pfft no either way works
[21:25] SubStack: is that jslint being prescriptivist or some such?
[21:25] bruce has joined the channel
[21:28] creationix has joined the channel
[21:28] jesusabdullah: jslint has a huge stick up its ass :(
[21:28] jesusabdullah: Possibly log-sized
[21:29] sriley: not really, its how you should really write it
[21:29] tjholowaychuk: pff
[21:29] sriley: its like leaving ; off works, but its a terrible terrible way to write code
[21:29] tjholowaychuk: no its not lol
[21:29] tjholowaychuk: its a language
[21:29] tjholowaychuk: it can do whatever it wants
[21:29] tjholowaychuk: and its there, so use it
[21:32] sriley: yes you can write however you want, but if you want to limit the number of bugs and make it easier to maintain then you should follow some common coding standards
[21:32] herbySk has joined the channel
[21:32] tjholowaychuk: how does that lead to bugs lol
[21:32] tjholowaychuk: ive never come across a bug related to omitting ()
[21:33] tjholowaychuk: thats stupid
[21:33] ryah: creationix: dlopen arbitrary libraries?:
[21:33] tjholowaychuk: even worse is new (Foo)()
[21:33] ryah: creationix: ffi?
[21:33] tjholowaychuk: ive seen that around
[21:34] bruce has joined the channel
[21:36] BillyBreen has joined the channel
[21:36] unomi has joined the channel
[21:39] reid has joined the channel
[21:40] creationix has joined the channel
[21:40] kersny has joined the channel
[21:42] creationix has left the channel
[21:42] strmpnk has joined the channel
[21:43] hellp has joined the channel
[21:45] slaskis: anyone here who uses no.de?
[21:46] skampler has joined the channel
[21:47] eddanger has joined the channel
[21:48] sudoer has joined the channel
[21:50] altamic has joined the channel
[21:52] aconbere has joined the channel
[21:54] alek_br has joined the channel
[21:57] CIA-93: node: 03Ryan Dahl 07master * r24aded0 10/ (doc/api/streams.markdown lib/stream.js): Add optional filters to stream.pipe() - http://bit.ly/f2liOX
[21:57] SubStack: filters!
[21:58] ryah: :)
[21:58] SubStack: I like those.
[21:58] maushu has joined the channel
[21:59] pHcF has joined the channel
[22:00] sechrist: filters
[22:00] herbySk: ryah: aren't you planning on somehow unifying streaming behaviour over all streamable objects? I don't know if it's possible, but all the events/callbacks, that or this kind of stream, plus inability to streamread/streamwrite buffers, string and arrays makes things, at least for me, but maybe for others, a little confusing
[22:01] ryah: herbySk: it's basically unified
[22:01] ryah: pipe is working more or less
[22:02] jacobolus has joined the channel
[22:02] broofa has joined the channel
[22:02] cjm has joined the channel
[22:03] sh1mmer has joined the channel
[22:03] Nohryb has joined the channel
[22:03] ryah: not sure what you mean about buffers
[22:04] herbySk: well, i meant to have the same API to read from / write to net, file, but also in-memory objects like buffers, strings and, probably arrays, too
[22:04] Nohryb has joined the channel
[22:04] fangel has joined the channel
[22:05] herbySk: (though writing in the case of strings is probably impossible, since they're immutaqble)
[22:06] Prometheus: hmm, would it be plausible to implement a git-daemon replacement using node? :)
[22:06] Prometheus: it seems like it could be a fun project
[22:06] tanepiper: filter looks interesting, could be good for hooking in metadata to a stream
[22:07] iFire: Prometheus use libgit2
[22:07] ryah: what's cool is filter still has all the proper throttling
[22:08] SubStack: rock
[22:08] ryah: so that chat example is actually perfect
[22:08] ryah: if there is a slow client - they're not going to destroy the server
[22:08] SubStack: herbySk: for fancy streaming stuff you can use lazy from npm
[22:08] Prometheus: iFire: seems like a good library, thanks :)
[22:09] Prometheus: iFire: are there node bindings for it?
[22:09] iFire: :)
[22:09] iFire: Prometheus you could write one
[22:10] tanepiper: it's one of my weekend projects :)
[22:10] tjholowaychuk: ryah: its not backed up in memory anymore? (havent been following 0.3.x)
[22:10] tanepiper: mind you my twitter bot that broke in october, i;ve only fixed now
[22:10] tanepiper: so expect it in a weekend some time in 2011 :p
[22:11] ryah: tjholowaychuk: no
[22:11] tjholowaychuk: awesome
[22:12] sechrist: Has anybody done any projects with sound processing in node?
[22:12] Prometheus: iFire: yeah, it'd be great, if I had a clue as to how to do that ;)
[22:12] torvalamo: wouldn't put money on it
[22:12] torvalamo: unless you write some c++ libraries for doing the actual processing
[22:13] sechrist: well bind rather than write
[22:13] tanepiper: not so much sound processing, but someone wrote an icecast server, you could maybe look at DSP plugins
[22:14] herbySk: ryah: looking at filters, wasn't it cleaner (than to complicate pipe function) to create transformation stream instread, you could then use the old primitive one-task pipe to pipe to transformation stream and from it pipe to destination stream?
[22:15] herbySk: (not to mention this should be testable much better)
[22:15] indexzero has joined the channel
[22:16] ryah: maybe - i was thinking of this as a kind of one off thing
[22:16] ryah: like - adding the remoteAddress in the chat..
[22:17] rauchg_ has joined the channel
[22:18] Yuffster has joined the channel
[22:19] mikeal has joined the channel
[22:20] herbySk: a generic transformation stream creator that you pass very similar (or the same) function and the result then just transform all its input using the function into its output would be similarly one off, but would be the testable unit itself and pipe would stay simple
[22:21] eddanger has joined the channel
[22:24] ryah: yeah - maybe you're right
[22:26] tg has joined the channel
[22:28] eddanger: anyone recommendations for a mongodb driver module?
[22:30] ben_alman has joined the channel
[22:30] stagas: forEach blocks right?
[22:31] tjholowaychuk: it does nothing async
[22:31] tjholowaychuk: so i guess?
[22:32] micheil has joined the channel
[22:33] chapel: .some is async friendly right?
[22:34] chapel: tjholowaychuk: your partials stuff, I could never get it to work right
[22:35] tjholowaychuk: chapel: there are more than a few examples that come with express
[22:35] tjholowaychuk: like 7
[22:35] BrianTheCoder has joined the channel
[22:36] altamic has joined the channel
[22:36] cafesofie has joined the channel
[22:37] chapel: hmm, well which of the examples uses partials, is there a way to grab the index of the partial command?
[22:38] tjholowaychuk: chapel: http://expressjs.com/guide.html#View-Partials
[22:38] tjholowaychuk: read docs please lol
[22:38] tjholowaychuk: "indexInCollection"
[22:39] herbySk: chapel: ??? why would .some be more async friendly than .forEach, I believe they are the same (as well as .every, .reduce, .reduceRight etc)
[22:39] JusticeFries has joined the channel
[22:40] chapel: tbh I dont know, someone said to use it over forEach for asyc
[22:41] niklasfi has joined the channel
[22:42] herbySk: chapel: it's no friendlier than forEach, only it allows for early break (as every does, too). But all of them block
[22:43] chapel: tjholowaychuk: I guess I never understood how to use partial() right because I never saw it in context, does it have to be inside of res.render? every time I used it, it gave an error, so I just gave up on it and used jades partial support
[22:43] tjholowaychuk: chapel: jade doesnt have partial support
[22:43] Floxxx has joined the channel
[22:43] chapel: hmm, is there a way to iterate asyc then?
[22:44] herbySk: chapel: nextTick
[22:44] chapel: well I mispeak then, not partial but allows to send an array and produce 'comments' lets say in a similar fashion as partials
[22:46] chapel: hmm, any examples of nextTick being used? if you dont mind, other wise I can look it up when I have time
[22:48] herbySk: chapel: Array.prototype.asyncForEach = function (f) { var i = 0; function processElement() { f(this[i], i, this); i++; if (i < this.length) { nextTick(processElement); } } nextTick(processElement); };
[22:48] wilken_ has joined the channel
[22:48] herbySk: s/nextTick/process.nextTick/g
[22:48] eddanger has joined the channel
[22:49] JuicyJuuce has joined the channel
[22:49] altamic has joined the channel
[22:49] chapel: ah I see
[22:49] chapel: makes sense
[22:49] chapel: thanks herbySk
[22:50] chapel: honestly, you gave me insight that I needed
[22:50] JuicyJuuce: hello, i'm a first time irc user and I have a node.js compiler error I'm looking for help on. Can someone help me?
[22:50] herbySk: np
[22:50] Floxxx: hey guys, is ther any way to force garbage collection?
[22:50] Floxxx: *there
[22:51] tjholowaychuk: Floxxx: I think you have to expose it first
[22:51] tjholowaychuk: Floxxx: $ node --v8-options | grep gc
[22:51] sechrist: Yeah it's not exposed by default
[22:51] Floxxx: let's see
[22:51] sechrist: forcing a gc doesn't seem useful except for debugging
[22:52] sechrist: unless you make the gc call asynchronous which is a catch 22
[22:52] Floxxx: sechrist: something is gobbling up my memory in a recursive function, i'm trying to get it to behave
[22:52] sechrist: so you're debugging
[22:52] sechrist: gotcha
[22:52] Floxxx: so, with gc enabled
[22:53] sechrist: Floxxx: heap analysis is probably more useful
[22:53] Floxxx: i can do something like sys.gc()?
[22:53] sechrist: have you looked at heap snapshots?
[22:53] Floxxx: nop
[22:53] Floxxx: e
[22:53] sechrist: I've hit issues like this and it was references being recursively grabbed
[22:53] sechrist: like the next loop iteration had a reference to everything in the previous
[22:53] Floxxx: hmm
[22:53] Floxxx: could be something like that
[22:53] sechrist: so it memleaked but the GC was technically doing it's job
[22:54] Floxxx: how do i snapshot the heap?
[22:54] sechrist: v8-profiler and node-inspector
[22:54] sechrist: I hope you're running node 3
[22:54] Floxxx: hmm, nope
[22:54] Floxxx: 2.5
[22:54] sechrist: nvm
[22:54] aconbere has joined the channel
[22:54] Floxxx: both those only work with 3.0?
[22:55] sechrist: yeah
[22:55] Floxxx: bugger
[22:56] JuicyJuuce: can someone help me with an error i get while building node.js under cygwin?
[22:56] Floxxx: guess i'll have to use 0.3 for the debugging then
[22:57] BrianTheCoder has joined the channel
[22:58] desaiu has joined the channel
[22:59] JuicyJuuce: in cygwin, i'm getting an "unable to map to same address as parent" when i build node.js, even though I ran rebaseall
[23:01] mies_ has joined the channel
[23:01] eddanger: does anyone know if mongoose will support dynamic properties for a document?
[23:03] Yuffster has joined the channel
[23:04] lifecoder has joined the channel
[23:06] Blackguard has joined the channel
[23:07] MikhX has joined the channel
[23:10] eee_c has joined the channel
[23:10] EyePulp: eddanger: good question
[23:12] niklasfi has joined the channel
[23:12] sechrist: mana mana
[23:12] eddanger: do doo do do do
[23:13] sechrist: mana mana
[23:14] sechrist: eddanger: that's the point of an orm
[23:14] sechrist: to add a structure
[23:14] sechrist: people that have mongoose's use case should probably just be using sql
[23:14] sechrist: cough
[23:14] ph^ has joined the channel
[23:15] eddanger: sechrist, I need something like an odm (d for document).
[23:16] sechrist: you're unlikely going to have that AND dynamic properties
[23:16] sechrist: makes no sense
[23:16] kevwil has joined the channel
[23:17] eddanger: sechrist, what doesn't make sense?
[23:20] wilken_: can any of you get the couchdb npm package to work? i get an error when i require couchdb
[23:22] jvolkman_ has joined the channel
[23:23] Throlkim has joined the channel
[23:25] BrianTheCoder has joined the channel
[23:26] JuicyJuuce: can someone help with an error i get while building node.js in cygwin?
[23:28] mscdex: JuicyJuuce: gist it
[23:29] micheil: hmm.. no tim_smart :(
[23:29] JuicyJuuce: gist it? i get a "unable to remap to same address as parent". the walkthrough i'm looking at says to do a rebaseall in dash, but that didn't fix it.
[23:30] JuicyJuuce: i get the error while running configure
[23:31] mscdex: JuicyJuuce: run this in cygwin: /bin/rebaseall -v
[23:31] mscdex: then retry
[23:31] MrWarGames1 has joined the channel
[23:31] JuicyJuuce: i did that under dash
[23:31] JuicyJuuce: should i do it in cygwin as well?
[23:32] mscdex: i always run it under bash
[23:32] JuicyJuuce: ok, let me give it a shot
[23:32] JuicyJuuce: do i need to shut down cygwin and restart it when done?
[23:32] mscdex: shouldn't need to
[23:32] mscdex: iirc
[23:33] aheckmann has joined the channel
[23:33] aconbere: tjholowaychuk: express kindly turns query params like "x.y=10" into {x: { y: 10 } }
[23:33] aconbere: if I want to pass up a query key with a dot in it
[23:33] aconbere: is there a way?
[23:33] aconbere: that is... if I want
[23:33] tjholowaychuk: aconbere: that is node's old querystring parser
[23:33] aconbere: ahhh
[23:33] aconbere: it's true
[23:34] JuicyJuuce: oh, it doesn't like running rebaseall. it says "rebaseall: only ash or dash processes are allowed during rebasing"
[23:34] aconbere: I'm on 2.x still
[23:34] aconbere: cool
[23:34] tjholowaychuk: you can swap the querystring parser out in express though
[23:34] tjholowaychuk: to whatever you want
[23:34] aconbere: sure
[23:34] aconbere: or upgrade node :)
[23:34] aconbere: (this is just my dev environment, I've just been putting it off)
[23:34] tjholowaychuk: your not the only on
[23:34] tjholowaychuk: e
[23:34] tjholowaychuk: i havent touched it yet :p
[23:35] aconbere: heh
[23:36] creationix has joined the channel
[23:36] trotter has joined the channel
[23:38] cjm has joined the channel
[23:40] prettyrobots has joined the channel
[23:41] somnium has joined the channel
[23:43] mscdex: JuicyJuuce: post the error to gist.github.com
[23:43] MikhX has joined the channel
[23:43] mscdex: JuicyJuuce: `rebaseall -v` (under ash/dash) should have fixed it
[23:45] eee_c1 has joined the channel
[23:45] marcostoledo has joined the channel
[23:47] [[zz]] has joined the channel
[23:49] eddanger_ has joined the channel
[23:52] cjm has joined the channel
[23:54] mies has joined the channel
[23:59] WarriorSl has joined the channel
[23:59] WarriorSl: anyone can help me with geddy framework?
