[00:00] tjholowaychuk: pyrotechinck: yeah they are merged with anything passed to res.render() for options
[00:00] pyrotechinck: cool
[00:00] isaacs: piscisaureus: backslashes?
[00:00] creationix: isaacs: sorry, I was afk
[00:00] tjholowaychuk: something liek app.set('view options', { bodyLocal: 'yield' }) i dunno
[00:00] piscisaureus: ryah: the problem is that on windows there are real relative paths and 'drive-relative paths' like "\program files\somedir"
[00:00] pyrotechinck: bodyLocal
[00:00] pyrotechinck: done.
[00:01] pyrotechinck: where do i set the default
[00:01] piscisaureus: isaacs: on windows paths are separated by backslashes
[00:01] tjholowaychuk: pyrotechinck: sadly it should probably be something __body__ so that it is never globbered haha
[00:01] isaacs: piscisaureus: right
[00:01] tjholowaychuk: but that is ugly
[00:01] isaacs: piscisaureus: seems like the path lib needs to be updated to handle that, then
[00:01] meandi2 has joined the channel
[00:01] pyrotechinck: yeah filthy
[00:01] isaacs: piscisaureus: fs.realpath just uses the path.split, right?
[00:01] isaacs: andpath.join?
[00:01] pyrotechinck: im gunna make mine yeild
[00:01] bmizerany has joined the channel
[00:01] pyrotechinck: :p
[00:01] pyrotechinck: oh you said that
[00:02] pyrotechinck: damn
[00:02] piscisaureus: isaacs: yep. but is also looks at the start of a path to see if it is relative or absolute
[00:02] pyrotechinck: stole my joke
[00:02] pyrotechinck: my funny rails joke
[00:02] isaacs: piscisaureus: ok.  so, it sounds like we need to abstract out the path stuff so that it works on windows.
[00:02] isaacs: piscisaureus: Cygwin uses backslashes, right?
[00:02] piscisaureus: isaacs: cygwin uses forward slashes
[00:03] isaacs: er, right, Cygwin uses Correct Slashes.
[00:03] pyrotechinck: tjholowaychuk wheres the defaults
[00:03] piscisaureus: isaacs: it does really crazy path mapping stuff that breaks if you look the other way
[00:03] isaacs: ok.
[00:03] tjholowaychuk: pyrotechinck: I can patch it, just kinda lazy right now
[00:03] tjholowaychuk: its like a one word thing but then I gotta back-port n crap
[00:04] pyrotechinck: im almost done just need to know where to put 'body' back in
[00:04] piscisaureus: isaacs: currently you can't tell if you're on windows or posix when you're in javascript
[00:04] isaacs: piscisaureus: it sounds like the proper solution is to make fs.realpath work on windows, not to remove the realpath from module loading.
[00:04] pyrotechinck: oh true
[00:04] pyrotechinck: well i wanna just hack mine now anyway
[00:04] isaacs: piscisaureus: yeah.
[00:04] tjholowaychuk: pyrotechinck: haha k
[00:04] isaacs: piscisaureus: so, there are issues.
[00:04] pyrotechinck: where do i put body back in
[00:04] isaacs: piscisaureus: if path.join doesn't work properly, i mean, you're gonna have issues anyhow
[00:04] piscisaureus: isaacs: I already hacked that more or less
[00:04] isaacs: it's not like you can do require("..\foo\bar.js"), even on windows, right?
[00:05] piscisaureus: isaacs: but it needs some thorough review 
[00:05] isaacs: piscisaureus: i'd like a path.isAbsolute()
[00:05] pyrotechinck: tjholowaychuk: where do i set the default
[00:05] piscisaureus: isaacs: yeah!!!
[00:05] isaacs: piscisaureus: since our usual technique is just path.charAt(0) === "/
[00:05] isaacs: piscisaureus: and that'll clearly fail on C:\foo
[00:05] tjholowaychuk: pyrotechinck: you cant change it until I patch
[00:05] isaacs: ACTION never stops hating windows.
[00:05] pyrotechinck: no i mean
[00:05] isaacs: it's just such a completely crap operating system.
[00:05] pyrotechinck: im hacking mine
[00:06] isaacs: i mean, seriously, completely awful.
[00:06] pyrotechinck: tjholowaychuk:     options[viewOptions['bodyLocal']] = str;
[00:06] isaacs: it's like, every antipattern you could imagine, all in one place.
[00:06] pyrotechinck: but where do i set the default
[00:06] isaacs: windows is proof that marketing is more important than quality.
[00:06] isaacs: i would call it shit, but that would be an insult to fecal material.
[00:06] echosystm has joined the channel
[00:06] SubStack: windows wasn't designed, it evolved
[00:06] tjholowaychuk: pyrotechinck: viewOptions.bodyLocal || 'body'
[00:06] tjholowaychuk: :p
[00:06] pyrotechinck: ok so hardcode it in there?
[00:06] pyrotechinck: right
[00:06] tjholowaychuk: yeah
[00:06] pyrotechinck: thought you might have somewhere
[00:06] pyrotechinck: thats cool
[00:06] echosystm: does anyone know of an RMI system other than Java RMI ?
[00:06] isaacs: SubStack: evolution is a terrible way to build software.  software should be intelligently designed.
[00:06] pyrotechinck: all in good time
[00:06] SubStack: or else, they found it in a swamp
[00:07] pyrotechinck: cheers
[00:07] piscisaureus: SubStack: the problem is that natural selection didn't do a proper job 
[00:07] isaacs: SubStack: otherwise its retinas get screwed on backwards.
[00:07] pyrotechinck: works
[00:07] SubStack: isaacs: creationist!
[00:07] echosystm: basically what i want is an RPC system that has some concept of objects
[00:07] SubStack: reptillian optics aren't actually so bad
[00:07] SubStack: echosystm: :D
[00:07] SubStack: echosystm: http://github.com/substack/dnode 
[00:07] piscisaureus: isaacs: I'm currently doing something like:
[00:07] piscisaureus:       if ('/\\'.indexOf(process.argv[1].charAt(0)) < 0
[00:08] piscisaureus:           && process.argv[1].charAt(1) != ':') { 
[00:08] piscisaureus:             // is relative
[00:08] SubStack: EXACTLY what you are searching for
[00:08] SubStack: better even
[00:08] isaacs: piscisaureus: yikes.
[00:08] jimt_ has joined the channel
[00:08] isaacs: piscisaureus: i'd much prefer something that didn't add complexity to non-windows machines.
[00:08] piscisaureus: isaacs: should be done
[00:08] pyrotechinck: tjholowaychuk: you dont actually have any viewOptions lol
[00:08] piscisaureus: isaacs: but it will still add complexity to realpath
[00:09] tjholowaychuk: pyrotechinck: it is merged into options
[00:09] pyrotechinck: blah
[00:09] SubStack: echosystm: the fun part is you can embed functions arbitrarily into your data structures and they turn into rpc calls back to the other side of the connection, as if by magic
[00:09] isaacs: piscisaureus: maybe like a: absoluteRegexp = isBullshitStupidAwfulHorribleExcuseForAnOSCalledWindows ? /^[A-Za-z]:/ : /^\//
[00:09] isaacs: piscisaureus: and a pathSeparator character would be easy enough.
[00:10] isaacs: just set to either "/" or "\\" depending on the above flag.
[00:10] isaacs: getting that flag set properly is the hard part.
[00:10] piscisaureus: isaacs: yeah. but forward slashes are also allowed on windows usually. we should support them  
[00:10] SubStack: sufficiently advanced magic is indistinguishable from technology
[00:10] isaacs: piscisaureus: yeah
[00:11] isaacs: piscisaureus: maybe it could always *write* correct slashes, but *respect* broken slashes if using the Broken OS
[00:12] ryah: enough windows bashing, we all realize it sucks :)
[00:12] isaacs: hahah
[00:12] piscisaureus: isaacs: the thing is:
[00:12] piscisaureus: if (path.charAt(0) === (back)slash && on windows) {
[00:12] piscisaureus:   prepend_the_first_two_characters_of_cwd();
[00:12] piscisaureus: } else if (path.charAt(1) === ':' || ( path.charAt(0) === '/' && on_posix)) {
[00:12] piscisaureus:   prepend_full_cwd();
[00:12] piscisaureus: }
[00:12] ryah: piscisaureus is doing god's work
[00:12] SubStack: the complexity, it hurts
[00:12] isaacs: ryah: that is true.  piscisaureus is indeed 2 parts saint for every part scholar.
[00:13] isaacs: piscisaureus: you know, it's actually quite a bit like the url parsing logic, isn't it?
[00:13] SubStack: if anything, piscisaureus is doing the work of apologists
[00:13] SubStack: solving the problem of evil, in this case
[00:13] piscisaureus: ryah: isaacs: we need to expose something like require('os').isPosix, and it must be available for built-in libs
[00:13] isaacs: piscisaureus: but without a hostname
[00:13] isaacs: piscisaureus++
[00:13] v8bot:  isaacs has given a beer to piscisaureus. piscisaureus now has 1 beers.
[00:14] isaacs: wait, i forget, is it C:\\foo or just C:\foo
[00:14] piscisaureus: Thanks for all the feathers :-) 
[00:14] isaacs: C:\Windows\System\System32\win32\oh\mommy\make\the\bad\thing\stop
[00:15] isaacs_ has joined the channel
[00:15] chapel: pyrotechinck: you want the script?
[00:16] pyrotechinck: im in link room
[00:16] isaacs: piscisaureus: so, from there, if you did cd \foo\bar, you'd end up at C:\foo\bar, right?
[00:16] pyrotechinck: #linkinus
[00:16] piscisaureus: isaacs: yeah
[00:16] piscisaureus: isaacs: more fun 
[00:17] isaacs: piscisaureus: so... it sounds like what we need is like a path.resolve() which is smart about windows as well as posix.
[00:17] piscisaureus: isaacs: you mean realpath?
[00:17] isaacs: piscisaureus: no, i mean just semantic stuff.
[00:17] isaacs: piscisaureus: like, path.resolve("C:\foo\bar", "\baz") --> C:\baz
[00:17] ryah: piscisaureus: sure
[00:18] piscisaureus: isaacs: like realpath minus symlink handling?
[00:18] isaacs: piscisaureus: but on posix, path.resolve("/foo/bar", "/baz") --> /ba
[00:18] ryah: piscisaureus: i think process.platform is broken at the moment
[00:18] isaacs: baz
[00:18] ryah: but that's probably a good place
[00:18] piscisaureus: ryah: what is wrong with it?
[00:18] isaacs: piscisaureus: more like just a parallel to url.resolve
[00:18] ryah: although, i'd like to move that to the os module...
[00:18] ryah: *shrug* became broken
[00:18] ryah: :)
[00:18] piscisaureus: isaacs: okay. Yeah we need that. I'd like to have it available in C as well :-)
[00:19] echosystm: SubStack: i'm looking at your dnode example
[00:19] isaacs: piscisaureus: why do you need it in C?
[00:20] piscisaureus: isaacs: because I'm also path munging in the child process implementation for windows
[00:20] isaacs: (not saying it couldn't be done in C, just curious)
[00:20] echosystm: when host A sends a function as a parameter in a call to host B, how does that happen?
[00:20] piscisaureus: isaacs: maybe later tho
[00:20] isaacs: ah
[00:20] isaacs: yeah, js is more cozy to dev in
[00:20] echosystm: is the function literally sent to host B and executed by host B, or is a reference sent and executed by host A ?
[00:20] liar has joined the channel
[00:21] piscisaureus: isaacs: on windows I need to manually scan the path environment variable because there is no api call for it
[00:21] isaacs: piscisaureus: wait, what?
[00:21] isaacs: piscisaureus: there's no execvp on windows??
[00:21] piscisaureus: isaacs: there is
[00:21] elijah-mbp has joined the channel
[00:21] isaacs: then why do you need to scan the path?
[00:21] piscisaureus: isaacs: but no fork() thus no way to redirect stdin/stdout
[00:21] ryah: pkrumins: yt?
[00:22] isaacs: piscisaureus: whoa.
[00:22] isaacs: piscisaureus: ok.
[00:22] piscisaureus: isaacs: it can be done with CreateProcessEx but it will not scan the path
[00:22] isaacs: right, forgot about that bit
[00:22] SubStack: echosystm: it's a json protocol that keeps references to each of the callbacks
[00:22] SubStack: echosystm: so the callbacks execute on the side they were defined on, but you can call them remotely
[00:22] xla has joined the channel
[00:23] pyrotechinck: tjholowaychuk: i think the whole "rails" vs express "metal" kinda just clicked to me
[00:23] tjholowaychuk: haha
[00:24] pkrumins: ryah: i am here
[00:24] pyrotechinck: tjholowaychuk: it just occured to me how it it was to hack express to use .coffee's instead of .js
[00:24] pyrotechinck: to do that in rails youd need an entire plugin
[00:24] pyrotechinck: it wouldnt be easy
[00:24] ryah: pkrumins: how do you test your node-png ?
[00:25] tjholowaychuk: pyrotechinck: haha dont even get me started about rails plugins :p
[00:25] pkrumins: i run the example programs manually
[00:25] ryah: pkrumins: ok
[00:25] pyrotechinck: im a fan
[00:25] pkrumins: and see if the output matches what i expect.
[00:25] pyrotechinck: tjholowaychuk++
[00:25] v8bot:  pyrotechinck has given a beer to tjholowaychuk. tjholowaychuk now has 5 beers.
[00:25] pkrumins: i dont have it automated.
[00:25] echosystm: are there any nodejs databases?
[00:25] echosystm: as in, databases that only depend on nodejs
[00:26] tanepiper: dirty, nStore
[00:26] aschw has joined the channel
[00:26] tanepiper: https://github.com/felixge/node-dirty
[00:26] echosystm: are they any good?
[00:27] tanepiper: basically they are good for testing and throwing away
[00:27] piscisaureus: I'm having problems following realpath logic (the async version)
[00:27] tanepiper: you could run couchdb since it's not node, but only need HTTP to communicate with it
[00:28] tanepiper: which nodejs is very good at doing
[00:28] echosystm: the file format seems a bit weird... i would have thought it would be better to have each value in its own file, with the key being the file name
[00:28] tanepiper: you can even sign up for a free hosted instance at http://couchone.com which means no setup
[00:31] pyrotechinck: textmate needs to thread its searches
[00:31] pyrotechinck: really
[00:31] pyrotechinck: really badly
[00:31] pyrotechinck: textmate needs to be async
[00:32] pyrotechinck: ry you need to show textmate the light
[00:32] kschzt: there is no saving TextMate
[00:33] kschzt: it's over
[00:33] pyrotechinck: you're too old, let go, it's over
[00:33] kschzt: next editor pls
[00:34] pyrotechinck: *waits 5 minutes for next editor to walk in the door* hello my name is aptana
[00:34] kschzt: aptana has loads of issues too, running in Eclipse, that's just not gonna fly for me
[00:35] kschzt: cd <project>; mate .
[00:35] pyrotechinck: hence the waiting 5 minutes
[00:35] pyrotechinck: for it to start
[00:35] kschzt: :( rip mate
[00:35] pyrotechinck: rm -Rf /Applications/Textmate.app
[00:35] pyrotechinck: do it
[00:35] pyrotechinck: i dare you
[00:35] kschzt: ahh such a great editor. 
[00:36] pyrotechinck: such a lousy everything else
[00:36] thebigbad: clocking in at 20Mb, vim is a little bit of a fatty. but you do get to join the ranks of crazed neckbeards if you use it.
[00:36] thebigbad: ACTION is still waiting for his neckbeard to grow in
[00:36] piscisaureus: what again was the env var I have to set to see debug(....) messages from builtin libs?
[00:36] kschzt: yah, the boys is using vim
[00:36] alathon has joined the channel
[00:36] alathon: Hi
[00:37] prettyrobots_ has joined the channel
[00:37] thebigbad: piscisaureus: NODE_DEBUG             Print additional debugging output.
[00:37] thebigbad: is that it?
[00:38] kschzt: NODE_DEBUG=8
[00:38] piscisaureus: thebigbad: hmm I just tried that but it didn't work. Maybe something else is worng
[00:40] kschzt: macvim + dotfiles .. maybe
[00:40] ryah: pkrumins: im porting node-png to v0.3
[00:40] echosystm: does anyone here use npm with homebrew?
[00:40] ryah: almost done, i think
[00:40] pkrumins: that's very cool ryah!
[00:40] echosystm: node doesnt seem to be able to find anything i install
[00:40] pkrumins: SubStack tired porting it too, but it was crashing.
[00:40] SubStack: yeah, it was hard
[00:40] ryah: piscisaureus: in latest NODE_DEBUG=module,net,http
[00:40] SubStack: I got it to compile at least
[00:41] ryah: piscisaureus: the bit flags went away
[00:41] SubStack: I ported those other modules ok though
[00:41] mjr_: echosystm: I don't think npm works with homebrew node yet, sadly.  I hear this is nearing a resolution, however.
[00:41] piscisaureus: ryah: what if I want node.js?
[00:42] mjr_: echosystm: at the moment, if you want npm to work right, you need to install node from source.
[00:42] piscisaureus: I mean debugging statements in node.js
[00:42] echosystm: damn
[00:42] ryah: piscisaureus: 'module'
[00:43] piscisaureus: ryah: ah! thnx
[00:43] echosystm: why is npm on homebrew then mjr_ ?
[00:43] echosystm: doesnt really make much sense
[00:43] mjr_: echosystm: wishful thinking?  Sad, I know.
[00:43] bmizerany has joined the channel
[00:43] SubStack: it sort of works I thought?
[00:43] mjr_: echosystm: it should really be removed until this stuff gets fixed.
[00:43] SubStack: just npm upgrade npm didn't work I thought
[00:44] SubStack: ACTION doesn't use a mac, so this is all hearsay
[00:45] mjr_: I'm pretty sure npm is completely broken if you install node from homebrew.
[00:46] mjr_: You'll install a package with npm, it'll look like it works, and then node won't be able to find it.
[00:46] isaacs has joined the channel
[00:46] SubStack: ah
[00:46] mjr_: Which is dumb, right isaacs?
[00:49] skm has joined the channel
[00:51] echosystm: apparently i have a non-brew pkg-config in my path... which happens to be in my homebrew...
[00:51] echosystm: wtf
[00:52] zemanel has joined the channel
[00:52] echosystm: is homebrew largely just some random crap a bunch of tards cooked up or what?
[00:52] ryah: pkrumins: how do i know if it worked?
[00:52] ryah: pkrumins: the tests?
[00:52] pkrumins: 1 sec
[00:53] MikhX has joined the channel
[00:54] pkrumins: ryah: the examples/png-example.js - when you run it, it produce png.png with a 800x600 terminal png image
[00:54] SubStack: pkrumins: is it the same binary output each time?
[00:54] ryah: Error: ENOENT, No such file or directory './rgba-terminal.dat'
[00:54] SubStack: if so you could make an expresso test to check the md5 hash
[00:55] pyrotechinck: tjholowaychuk: is this where locals are passed into views?
[00:55] pyrotechinck: https://github.com/visionmedia/express/blob/master/lib/express/view.js#L258
[00:55] pkrumins: ryah: cd into examples/ dir
[00:55] ryah: pkrumins: does that look familar?
[00:55] mjr_: echosystm: homebrew has a lot of smart folks behind it, but it has a few things that aren't quite right.  Probably still better than macports.
[00:55] CrypticSwarm has joined the channel
[00:55] pkrumins: SubStack: no the binary output depends on libpng version
[00:55] piscisaureus: ryah: any chance that we might hack os.isPosix (or os.isWindows) quickly
[00:55] softdrink has joined the channel
[00:55] ryah: pkrumins: okay works
[00:55] pkrumins: sweet.
[00:55] SubStack: oh annoying!
[00:55] ryah: pkrumins: want the diff?
[00:55] tjholowaychuk: pyrotechinck: yup
[00:55] pkrumins: sure!
[00:56] tjholowaychuk: in 2.0.0-pre the options ARE the locals
[00:56] ryah: pkrumins: should i test something else before i send it to you?
[00:56] tjholowaychuk: they serve as both
[00:56] ryah: and while im in the mood?
[00:56] ryah: :)
[00:56] pyrotechinck: tjholowaychuk: when i log them out there's no 'body'
[00:56] pkrumins: ryah: actually, cd tests/
[00:56] tjholowaychuk: pyrotechinck: only the layout gets body
[00:56] piscisaureus: ryah: realpath uses lstat which doesn't work on windows, have to skip it
[00:56] pkrumins: ryah: and run `node dynamic-png-stack.js`
[00:56] tjholowaychuk: pyrotechinck: v
[00:56] tjholowaychuk: https://github.com/visionmedia/express/blob/master/lib/express/view.js#L267
[00:56] ryah: piscisaureus: just revert that patch, we can do it later
[00:56] pkrumins: ryah: it should produce dynamic.png which is like 112x13 or something
[00:56] ryah: piscisaureus: realpath changes were the last commit today
[00:57] softdrink: ok i'm thoroughly confused.  i can sync my iphone at home, but not at work… using the same machine.
[00:57] ryah: pkrumins: 
[00:57] ryah: ryan@ryan-laptop:.../projects/node-png/tests% node dynamic-png-stack.js 
[00:57] ryah: 4 Jan 16:56:59 - PNG located at (80,386) with width 112 and height 13
[00:57] ryah: ryan@ryan-laptop:.../projects/node-png/tests% file dynamic.png 
[00:57] ryah: dynamic.png: PNG image, 112 x 13, 8-bit/color RGBA, non-interlaced
[00:57] ryah: look good?
[00:57] pkrumins: looks cool
[00:57] pkrumins: ryah: and then `node fixed-png-stack.js` which will produce 800x600 image which will contain stuff dynamic.png has, only at the bottom
[00:57] dgathright has joined the channel
[00:58] ryah: % file fixed.png 
[00:58] ryah: fixed.png: PNG image, 720 x 400, 8-bit/color RGBA, non-interlaced
[00:58] pkrumins: oh 720x400, hmm..
[00:58] ryah: the image doesn't look very good
[00:58] pkrumins: ryah: put it on imgur
[00:58] pkrumins: put dynamic.png on imgur too
[00:59] piscisaureus: ryah: ok, merge done
[00:59] ryah: pkrumins: http://imgur.com/ND5ve&UoKex
[01:00] micheil: pyrotechinck: fwiw, kod when it's working fully :D
[01:00] micheil: pyrotechinck: that's re text-editors
[01:01] alek_br has joined the channel
[01:01] CrypticSwarm has joined the channel
[01:02] teemow has joined the channel
[01:03] pkrumins: ryah: http://imgur.com/ND5ve looks good - dynamic.png
[01:03] pkrumins: sweet
[01:03] pkrumins: ryah: UoKex also looks cool
[01:03] pkrumins: all great
[01:03] ryah: pkrumins: good
[01:03] ryah: piscisaureus: okay. im landing it.
[01:04] piscisaureus: ryah: did you test it on linux?
[01:04] pkrumins: ryah: is there a way to make module work both, if compiled on 0.2.x and 0.3.x?
[01:04] ryah: piscisaureus: yes
[01:04] pkrumins: or should i just put the path in 0.3.x branch
[01:04] piscisaureus: ryah: phew :-)
[01:04] ryah: piscisaureus: good job :)
[01:04] CrypticSwarm has joined the channel
[01:04] robrighter has joined the channel
[01:04] pkrumins: s/path/patch/
[01:05] ryah: pkrumins: you'll need to #ifdef it
[01:05] pkrumins: roger
[01:05] ryah: pkrumins: i can do that.
[01:05] pkrumins: :D
[01:05] pkrumins: thanks
[01:05] possibilities has joined the channel
[01:05] ryah: pkrumins: will you review my changes first?
[01:06] pkrumins: i will
[01:06] pkrumins: oh did you send a pull already
[01:06] pkrumins: didnt check github yet
[01:06] CrypticSwarm has joined the channel
[01:06] ryah: pkrumins: https://gist.github.com/765761
[01:06] pkrumins: ah, looking
[01:07] ryah: i haven't figured out how to do the whole github fork thing yet
[01:08] pkrumins: really easy, fork my repo, then git clone it locally, apply the patch, git push it back to your repo, then go to your repo, push pull button.
[01:08] piscisaureus: brb
[01:08] pkrumins: press button, get bacon. it's that simple ;)
[01:08] CrypticSwarm has joined the channel
[01:08] CrypticSwarm has joined the channel
[01:08] CIA-121: node: 03Bert Belder 07master * r3c330b0 10/ (23 files in 7 dirs): 
[01:08] CIA-121: node: Merge branch 'master' of git://github.com/ry/node
[01:08] CIA-121: node: Conflicts:
[01:08] CIA-121: node:  src/node.cc
[01:08] CIA-121: node:  src/node.js - http://bit.ly/hYQydW
[01:08] CIA-121: node: 03Bert Belder 07master * rb7b0c92 10/ src/node.cc : Don't attempt to capture SIGUSR1 - http://bit.ly/hPxIqD
[01:08] CIA-121: node: 03Bert Belder 07master * rfe6f363 10/ src/node.js : 
[01:08] CIA-121: node: Revert "realpath files during module load"
[01:08] CIA-121: node: This reverts commit 131546e7339d6960ea91629915468c6f04a33cf7.
[01:08] CIA-121: node: Doesn't work on windows, coming back soon. - http://bit.ly/fJkcLF
[01:09] pkrumins: ryah: why is there `Local<Value> buf_val = handle_->GetHiddenValue(String::New("buffer"));` in `Png::PngEncodeSync` but nowhere else?
[01:10] ryah: i probably should have done that --no-ff
[01:10] ryah: but whatever
[01:10] ryah: pkrumins: there's a SetHiddenValue in there too
[01:11] pkrumins: what are those for?
[01:11] ryah: pkrumins: you can't store Buffer objects in the Png object
[01:11] ryah: because Buffers are js objects now
[01:11] ryah: so you need to mke js references
[01:11] pkrumins: oic
[01:11] KrisJordan has joined the channel
[01:11] pkrumins: ryah: patch looks ok!
[01:12] pkrumins: add the ifdefs now :)
[01:12] ryah: pkrumins: okay
[01:13] isaacs: mjr_: actually, if you install node from homebrew, current npm works by default.
[01:13] pkrumins: SubStack's patch was almost the same, except for Hidden Values.
[01:13] isaacs: mjr_: if you install npm from homebrew, that's still broken
[01:13] davidwalsh has joined the channel
[01:13] mjr_: isaacs: well, at least that's some progress
[01:14] isaacs: echosystm: i have no comment on why npm is in homebrew.  what i can say is that "brew install npm" should function properly soon.
[01:14] echosystm: no worries
[01:14] piscisaureus: ryah: now we need to `make plans`
[01:15] echosystm: does anyone know if there are any plans for websocket to support binary data?
[01:15] echosystm: (without base encoding)
[01:15] Squax has left the channel
[01:15] rpbertp13 has joined the channel
[01:16] dgathright has joined the channel
[01:16] isaacs has joined the channel
[01:17] sveimac has joined the channel
[01:17] alek_br has joined the channel
[01:18] sveimac_ has joined the channel
[01:19] sprout has joined the channel
[01:19] CrypticSwarm has joined the channel
[01:20] paulrobinson has joined the channel
[01:21] KrisJordan has joined the channel
[01:22] CrypticSwarm has joined the channel
[01:22] CrypticSwarm has joined the channel
[01:23] CrypticSwarm has joined the channel
[01:24] CIA-121: node: 03Ryan Dahl 07master * r468042f 10/ src/node_buffer.h : Add C++ Buffer migration tips - http://bit.ly/dPCn5O
[01:24] CrypticSwarm has joined the channel
[01:24] ph^ has joined the channel
[01:24] paulrobinson has joined the channel
[01:25] creationix: do we have zlib for node (or in node hidden)?
[01:25] creationix: I want to write a node program that generated debian packages without shelling out to the command line
[01:27] ryah: not yet
[01:28] ryah: piscisaureus: have you looked at cmake?
[01:28] piscisaureus: ryah: not really, no
[01:28] ryah: supposedly it can generate the files for msvc
[01:28] ryah: so can scons
[01:28] Tprice has joined the channel
[01:28] isaacs: yikes.  npm view tobi dist.tarball | xargs curl -s | tar zt
[01:29] isaacs: ryah: this is why bundling can be problematic ^
[01:29] piscisaureus: ryah: will look into it
[01:30] piscisaureus: ryah: but garrett tells me he has a tool that will do the same by monitoring the build process
[01:30] ryah: piscisaureus: ok
[01:30] creationix: isaacs: now that I think about my question, if there was tar and zlib for node nativly, you would probably use it for npm
[01:30] ryah: isaacs: ?
[01:31] ryah: piscisaureus: let's open a thread on the ML
[01:31] ryah: i know tom hughes at palm has some opinions on build things
[01:31] piscisaureus: ryah: okay. about what?
[01:32] isaacs: ryah: everything is bundled in that package, resulting in there being multiple copies of node binaries, compiled addons, and a bunch of other stuff.
[01:32] isaacs: cloud9 is way worse
[01:32] Blackguard has joined the channel
[01:32] piscisaureus: ryah: but it's not like msvc will compile node just like that
[01:33] banjiewen_ has joined the channel
[01:33] Blackguard has joined the channel
[01:33] creationix: isaacs: have you looked into being to create .tar.gz files with node without shelling out?
[01:34] isaacs: creationix: well, the first step would be to write a tar module in js.
[01:34] creationix: right, but that's not hard is it
[01:34] isaacs: creationix: i got about 3 hours into that, and then got distracted.
[01:34] paulrobinson has joined the channel
[01:34] piscisaureus: ryah: the last time I tried (well quite some time ago) it complained about syntax
[01:34] creationix: I mean tar seems like a really simple format
[01:34] isaacs: creationix: it is.
[01:34] isaacs: creationix: but *reading* tarballs is tricky, because it's also a very old format.
[01:34] creationix: and I think zlib would be a good thing to bundle with node, maybe as an optional compile flag
[01:34] isaacs: creationix: adn different systems do things differently.
[01:35] isaacs: creationix: yes, then the next step would be to have a streaming zlib (de)compression thing in node
[01:35] creationix: isaacs: well, then my case is easier, I'm only interested in creating debian archives
[01:35] isaacs: creationix: npm would still have to be able to install a tarball from github, or a tarred up folder on your machine, or on a mac, or whatever.
[01:35] isaacs: creationix: bsdtar and gnutar can do that
[01:35] SubStack: binary parsing!
[01:35] creationix: SubStack: feel like making a tar module
[01:35] creationix: pretty please?
[01:36] SubStack: maybe
[01:36] isaacs: creationix: in which case, i mean, you might as well write node-tar.js and just setting the npm "tar" config to point at it
[01:36] SubStack: I can just throw node-binary at it
[01:36] creationix: the thing is I can't use a binary extension, I'd much rather it be built into the node binary
[01:36] creationix: or be pure js
[01:37] creationix: but I need this cross-platform (even windows)
[01:37] SubStack: node-binary is pure js
[01:37] creationix: SubStack: nice
[01:37] creationix: what all does it do?
[01:37] bentruyman has joined the channel
[01:37] arpegius has joined the channel
[01:37] SubStack: it makes writing binary parsers not so hard
[01:38] meso has joined the channel
[01:38] SubStack: like bufferlist but with a static buffer
[01:38] tjholowaychuk: isaacs: what was bundled with tobi?
[01:38] SubStack: keeps track of all that pesky multibyte endianness business
[01:38] SubStack: and asynchronous reading from a buffer stream
[01:38] tjholowaychuk: I just added .npmignore a second ago
[01:39] creationix: SubStack: oh, so kinda like pgriess's strtok library
[01:39] piscisaureus: ryah: I think cmake is broken now, it doesn't define __POSIX__
[01:39] SubStack: yeah
[01:39] isaacs: tjholowaychuk: npm view tobi dist.tarball | xargs curl -s | tar zt | grep support
[01:39] paulrobinson_ has joined the channel
[01:39] hornairs has joined the channel
[01:39] tjholowaychuk: ah fun
[01:39] tjholowaychuk: lol
[01:39] SubStack: creationix: except node-binary has a niftier chainable interface
[01:39] isaacs: tjholowaychuk: express, which has jade bundled, which has expresso bundled, which has jscoverage bundled, and express also has expresso bundled, which has...
[01:39] tjholowaychuk: that is why you should use .gitignore as well :p
[01:39] tjholowaychuk: but now I know about .npmignore
[01:40] isaacs: tjholowaychuk: except that there are cases where people (here, in this office, who are my coworkers and boss) need to *not* npm ignore things that *are* part of the git ignore.
[01:40] tjholowaychuk: yeah
[01:40] tjholowaychuk: maybe you should warn about large sizes on publish
[01:40] isaacs: yeah, planning on it
[01:40] creationix: I always wondered why sometimes npm publish would take a long time
[01:40] isaacs: i'm also gonna warn on un-controlled publish
[01:40] creationix: maybe a progress meter showing the bytes uploaded
[01:41] dspree has joined the channel
[01:41] creationix: isaacs: ok, so I just create a file called .npminclude and put the files I want, one per line?
[01:42] isaacs: creationix: yeah, same format as .npmignore
[01:42] creationix: ACTION is still trying to fix nvm's file size
[01:42] isaacs: creationix: see "man tar" for an explanation of --exclude and --include files
[01:42] creationix: hmm, npm publish takes ages and my cpu is stuck in the gzip process
[01:42] creationix: how can I make npm echo the tar line it's using?
[01:42] isaacs: creationix: -vv
[01:42] creationix: ok
[01:42] isaacs: creationix: or --loglevel verbose
[01:42] jimt has joined the channel
[01:43] creationix: it's trying to download the --loglevel file over http
[01:44] creationix: npm -vv publish . ?
[01:44] isaacs: creationix: weird...
[01:44] isaacs: oh, wait, it's -dd, not -vv
[01:44] eric_f has joined the channel
[01:44] isaacs: whoops
[01:44] isaacs: creationix: also, what version of npm?
[01:45] isaacs: 0.2.13-3?
[01:45] creationix: 0.2.12-1
[01:45] isaacs: oh, ok, update first
[01:45] creationix: says there is nothing to update
[01:45] creationix: I tried that already
[01:45] creationix: "npm update" and "npm update npm"
[01:45] isaacs: creationix: npm i npm
[01:45] sudoer has joined the channel
[01:45] isaacs: creationix: then update will work
[01:46] creationix: so it needs install to update itself?
[01:46] eric_f: I ran into an error when installing something with a dependency on base64: npm ERR! Error: base64@1.0.1 install: `node-waf configure build`
[01:46] isaacs has joined the channel
[01:46] isaacs: creationix: no, not normally.  only when there's a bug in update in the version you're using ;)
[01:46] eric_f: not totally sure what to do…
[01:47] creationix: isaacs: fair enough
[01:47] aho has joined the channel
[01:47] marcab has joined the channel
[01:47] creationix: isaacs: hmm, still trying to include everything
[01:47] creationix: did I spell it right ".npminclude"
[01:47] isaacs: creationix: yeah.
[01:48] isaacs: creationix: it's possible you're using a version of tar without --include file support or something?
[01:48] paulrobinson_ has joined the channel
[01:50] creationix: isaacs: yep, I guess .npmignore it is
[01:50] isaacs: creationix: weird.
[01:50] creationix: I would have though ubuntu 10.10's tar would have it
[01:51] bingomanatee__: <--- proud owner of ordinography.com
[01:51] creationix: tar (GNU tar) 1.23
[01:51] cafesofie has joined the channel
[01:51] creationix: isaacs: is it evil to remove the old versions of nvm
[01:51] creationix: I'm pretty sure nothing depends on them
[01:51] gabeh has joined the channel
[01:51] creationix: I don't want to bloat the registry
[01:52] creationix: and I didn't tag the versions, so I can't go back and re-publish them
[01:52] siong1987 has joined the channel
[01:53] pyrotechinck has joined the channel
[01:54] pyrotechinck: did tj go?
[01:55] seangrove has joined the channel
[01:55] heavysixer has joined the channel
[01:55] paulrobinson has joined the channel
[01:56] isaacs: creationix: not at all
[01:56] creationix: hmm, unpublish doesn't seem to do anything
[01:56] jchris has joined the channel
[01:56] creationix: caches maybe?
[01:56] isaacs: creationix: yeah
[01:56] isaacs: creationix: npm cache clean
[01:57] isaacs: creationix: unpublish works, it just doesn't show up in ls right away as being gone.
[01:57] isaacs: ls is lazy
[01:57] isaacs: so, apparently .npminclude doesn't work like i think it does
[01:57] montylounge has joined the channel
[01:57] creationix: ok, after clearing caches it's gone
[01:57] isaacs: it includes those files, but then *also* includes everything.
[01:57] creationix: isaacs: that's less useful
[01:57] chapel: pyrotechinck: did you try my script?
[01:57] seangrove: hmm, I can't seem to get the home directory in node...
[01:57] isaacs: creationix: indeed
[01:57] isaacs: i mean, it definitely does include it
[01:57] seangrove: fs.readdirSync('~/') seems to not work
[01:57] isaacs: man, screw this noise.  i just need a "files" array.
[01:57] isaacs: that'd be so much nicer.
[01:58] creationix: isaacs: how often does howBigIsYourPackage get updated
[01:58] SubStack: ACTION wishes npm ls worked for local packages without network
[01:58] creationix: seangrove: ~ is a bash thing
[01:58] isaacs: SubStack: it doesn't?
[01:58] creationix: you're not in bash
[01:58] creationix: though you do have process.env.HOME
[01:58] seangrove: creationix: Fair enough, happy to learn
[01:58] isaacs: creationix: every time any of the documents change.
[01:58] seangrove: Great
[01:58] seangrove: Thank you
[01:58] creationix: so it's just a couch view thingy
[01:58] SubStack: isaacs: is there some magic flag I can pass?
[01:58] SubStack: I didn't see anything in the man page about it
[01:58] mikeal has joined the channel
[01:59] ajpiano has joined the channel
[01:59] isaacs: creationix: yeah.  looks like the attachments didn't get detached tho.  i'll take a look
[01:59] skm has joined the channel
[01:59] creationix: isaacs: cool
[01:59] creationix: I take pride in my stuff being lightweight, in software a big package isn't a good thing
[01:59] isaacs: creationix: ok, you're way down on the list now :)
[02:00] creationix: sweet, much better
[02:00] isaacs: creationix: they're lying when they say that the size doesn't matter, but bigger is only better up to a point.
[02:02] seangrove: What's the best way to load json from a local file?
[02:02] siculars_ has joined the channel
[02:03] JojoBoss has joined the channel
[02:03] creationix: seangrove: JSON.parse(fs.readFile(filename, 'utf8'))
[02:03] creationix: err, ignore that
[02:03] creationix: readFile is async
[02:03] isaacs: readFileSync
[02:03] SubStack: but only do readFileSync at startup
[02:03] creationix: or if you want full streaming, you can try my new jsonparse stuff
[02:03] isaacs: fs.readFile(filename, "utf8", function (er, data) { JSON.parse(data) }) if you wanna be async
[02:03] themiddleman has joined the channel
[02:03] Yuffster has joined the channel
[02:04] gkatsev: async ftw
[02:04] SubStack: probably data.toString()
[02:04] SubStack: 'cause you get a buffer otherwise
[02:04] SubStack: oh wait utf8 >_<
[02:04] montylounge has joined the channel
[02:04] creationix: stream = fs.createReadStream('file'); p = new Parser(); stream.pipe(p); p.onValue = ...
[02:04] MikhX has joined the channel
[02:04] seangrove: I'm just doing a cli tool, don't need to worry too much about async stuff right now (I think)
[02:04] seangrove: It'll come I'm sure
[02:05] creationix: yeah, if performance doesn't matter and it's cli, then sync is a lot easier if you're not used to the async stuff
[02:05] seangrove: Getting more used to it
[02:05] SubStack: s/if you're not used to/than/
[02:06] paulrobinson_ has joined the channel
[02:06] SubStack: async requires more thinking, but it's worth it for server code
[02:06] creationix: SubStack: lol
[02:06] creationix: I'm starting to think it's worth is for local stuff too
[02:07] creationix: at least when performance matters
[02:07] SubStack: well when multiple things are going on at once
[02:07] mikeal: i use sync in my tests
[02:07] creationix: it orders of magnatude, disks are about the same as a good net connection
[02:07] mikeal: cause like, who cares!
[02:07] piscisaureus: ryah: still here?
[02:07] creationix: mikeal: if your tests took 5 minutes to run you would care
[02:08] ben_alman has joined the channel
[02:08] mikeal: it's only in the setup phase
[02:08] mikeal: network tests are still run in parallel :P
[02:08] creationix: if it's 500ms vs 300ms and it's cli, then right, who cares
[02:08] ryah: piscisaureus: yes
[02:08] SubStack: and there's flow control libs if you're feeling lazy :p
[02:09] twoism has joined the channel
[02:09] creationix: ACTION knows a flow control library or two...
[02:09] SubStack: everybody should write one!
[02:10] creationix: though I haven't used them in a while
[02:10] piscisaureus: ryah: isaacs: path handling really needs to be fixed
[02:10] creationix: piscisaureus: how so?
[02:11] piscisaureus: we need an api to detect windows (os.isWindows) and maybe path.isAbsolute and path.resolve as isaacs proposed
[02:11] paulrobinson has joined the channel
[02:11] ryah: pkrumins, SubStack: can you please test this https://gist.github.com/765827
[02:11] SubStack: I usually write it the regular nested way first then when it looks ugly I normalize it or rewrite it with seq
[02:11] ryah: piscisaureus: ok
[02:11] SubStack: ryah: on it
[02:12] ryah: piscisaureus: in node_os.cc you can define that isWindows
[02:12] jamesarosen has joined the channel
[02:13] piscisaureus: ryah: okay, then that will be the api :-)
[02:13] creationix: so are we getting a native windows port soon?
[02:13] sveimac_ has joined the channel
[02:14] creationix: just wondering because I want to deploy some stuff on windows, and it would be nice to be able to use node
[02:14] piscisaureus: what is the proposition for path.resolve?
[02:14] piscisaureus: and where are paths handled apart from the path module and fs.realpath?
[02:15] pkrumins: ACTION checking, oh i dont have node-0.3.x
[02:15] pkrumins: installing 0.3.x
[02:15] piscisaureus: I can think of module loading 
[02:15] piscisaureus: it is all quite opaque to me
[02:16] piscisaureus: creationix: there's a lot to be done before the windows port is stable, but it's coming along
[02:16] SubStack: oh pkrumins you got this?
[02:16] JojoBoss: I would love a native windows port.
[02:16] pkrumins: no just started
[02:16] creationix: ok, that's what I last heard, just wondering if there was some breakthrough I hadn't heard of
[02:16] pkrumins: are you checking it already?
[02:16] creationix: piscisaureus: keep up the good work
[02:17] SubStack: I don't have 0.3 either >_<
[02:17] pkrumins: cuz i just wgetted 0.3.3
[02:17] SubStack: kk
[02:17] isaacs has joined the channel
[02:17] pkrumins: ok i'll handle this from here
[02:17] SubStack: acknowledged
[02:17] paulrobinson has joined the channel
[02:18] smtlaissezfaire has joined the channel
[02:19] hdon has joined the channel
[02:20] JojoBoss: anyone know if v0.3.2 or v0.3.3 will run in cygwin? the last one i was able to get working was v0.3.1
[02:21] tlrobinson has joined the channel
[02:22] paulrobinson has joined the channel
[02:22] ryah: pkrumins: check on v0.2 too
[02:23] ezmobius has joined the channel
[02:23] creationix: ryah: Do you think it will be possible some day for fs.createReadStream(someFile).pipe(response) to use sendfile or other optimizations under the hood
[02:24] pkrumins: ryah: yep
[02:24] pkrumins: 0.3 just finished compiling, checking.
[02:24] creationix: cool, that's what I'm using for my new static file server
[02:24] piscisaureus: ryah: isWindows or isWindows()
[02:24] creationix: creationix.com is now a streaming server running v0.3.3
[02:25] jimt has joined the channel
[02:25] paulrobinson_ has joined the channel
[02:25] ryah: piscisaureus: target->Set(String::New("isWindows"), True())
[02:27] pkrumins: isaacs: got a suggestion, put that one-liner string of how to install npm on npmjs.org website as well :)
[02:27] pkrumins: isaacs: cause each time i upgrade my node.js, i have to go looking for it, and it always takes one more click to get to github's npm page
[02:27] pkrumins: OH!
[02:27] pkrumins: it's there
[02:27] pkrumins: isaacs: good job ;)
[02:28] esigler has joined the channel
[02:28] ryah: i think i requested that already :)
[02:29] mgutz has joined the channel
[02:30] ezmobius has joined the channel
[02:30] matt_c has joined the channel
[02:31] creationix: pkrumins: also isaacs showed me a neat trick where you install node and npm at use/local and then install specific node versions on $HOME
[02:31] creationix: and the global npm will work against the local node's
[02:31] seangrove: Heh, if I want to prompt the user for input from the cli, am I going to have to go all out async?
[02:31] ryah: pkrumins: oh, you need a node_version.h in buffer_compat.cpp
[02:31] ryah: pkrumins: osrry
[02:32] langworthy has joined the channel
[02:32] SubStack: seangrove: npm install prompt
[02:32] MattDiPasquale has joined the channel
[02:32] piscisaureus: ryah: https://gist.github.com/765839
[02:34] SubStack: seangrove: or else require('lazy')(process.openStdin()).lines.take(1).join(function (lines) { var line = lines[0]; /* ... */ })
[02:34] SubStack: or there are a few more line-buffering modules
[02:34] creationix: oh the joys of chaining
[02:34] seangrove: SubStack: Thank you very much :)
[02:34] creationix: makes async look sync
[02:34] pkrumins: chain or die
[02:34] sprout has joined the channel
[02:34] creationix: for some reason, I never got into chaining, I just like taking functions as arguments
[02:35] SubStack: pkrumins: chain().or(function () { /* ... */ }).die(), you mean
[02:35] pkrumins: /o\
[02:35] creationix: and using LOTS of composition
[02:35] pkrumins: hahahaha.
[02:35] pkrumins: creationix: i see, well chaining is cool
[02:35] pkrumins: tias!
[02:35] pkrumins: i bet you have tried, but you have to try more
[02:35] SubStack: chaining appeals to my aesthetics so much
[02:35] SubStack: must be all the haskell
[02:35] creationix: chaining it cool, I guess I just worry about the overhead (it's an irrational fear)
[02:35] SubStack: it warps your brains
[02:35] elijah-mbp1 has joined the channel
[02:35] creationix: haskell is a good warp
[02:36] creationix: java is a bad warp
[02:36] SubStack: creationix: I just tell myself: "cpu is fast, disk is slow"
[02:36] elijah-mbp1 has joined the channel
[02:36] creationix: s/cpu is fast/cpu is fast unless youre running an interpreted language on a phone!/
[02:37] SubStack: hah, silly phones
[02:37] creationix: course, I'm sure phone disks aren't very fast either
[02:37] SubStack: I dunno, they're mostly flash ram
[02:37] creationix: yep
[02:37] creationix: some flash is fast, some, not so much
[02:37] SubStack: yeah true
[02:37] creationix: my eeepc 701 was pretty slow
[02:37] creationix: my mbp I7 with ssd was fast
[02:38] SubStack: ACTION will get a phone someday
[02:38] SubStack: not to call people with, of course, but for mobile internet
[02:38] creationix: SubStack: http://developer.palm.com/index.php?option=com_content&view=article&id=2129
[02:38] creationix: comes with node preinstalled ;)
[02:38] pkrumins: i'll get an iphone
[02:38] pkrumins: when i get back to latvia
[02:38] creationix: meh, you can't hack those
[02:38] pkrumins: i dont really want to mess with my phone too much
[02:39] pkrumins: that's why i have laptop now!
[02:39] CIA-121: node: 03Bert Belder 07master * r9e31e08 10/ (doc/api/os.markdown lib/os.js src/node_os.cc): Implement os.isWindows - http://bit.ly/hCPV1K
[02:39] ryah: piscisaureus: thanks
[02:39] SubStack: neat
[02:39] creationix: wow, that was fast
[02:39] SubStack: creationix: oh it'd be cool to have webos running in browserling too
[02:40] pkrumins: hah cool.
[02:40] creationix has left the channel
[02:40] SubStack: left!
[02:40] creationix has joined the channel
[02:40] SubStack: oh there he is
[02:40] pkrumins: he didnt like what you said haha
[02:41] creationix: playing with my cr48 all christmas really warped my keybinding memory
[02:41] springmeyer: so "standard modules" are compiled into the node binary? like 'util.js' ?
[02:41] creationix: keep closing the wrong windows today
[02:41] ryah: springmeyer: yes
[02:41] ryah: ACTION away
[02:41] springmeyer: ryah: thx
[02:42] pydroid has joined the channel
[02:42] springmeyer: ACTION thinking about packaging an addon as binary
[02:42] springmeyer: whether to bundle it with a specific node version or provide the addon compiled against several node versions
[02:43] springmeyer: hmmm
[02:47] pyrotechinck: jquery is down
[02:47] pyrotechinck: JQUERY IS DOWN
[02:47] pyrotechinck: http://code.jquery.com/jquery-1.4.3.min
[02:49] bentruyman has joined the channel
[02:51] pkrumins: ryah: ok so i now applied the patch, but how do i make the node-png package, does it use cmake now? do i need a new makefile?
[02:52] pkrumins: i mean how do i compile it
[02:52] andrewfff has joined the channel
[02:52] SubStack: node-waf went away?
[02:52] pkrumins: oh sorry
[02:52] pkrumins: i was trying waf
[02:53] SubStack: pkrumins: just npm link it :p
[02:53] pkrumins: ah!
[02:53] piscisaureus: my brain stopped working. going to bed.
[02:54] pkrumins: tried turning it off, and... oh wait.
[02:55] skm has joined the channel
[02:56] jamesarosen has joined the channel
[02:57] AAA_awright_ has joined the channel
[02:57] softdrink has joined the channel
[02:58] chapel: hmm
[02:59] chapel: pyrotechinck: you there?
[03:01] evanmeagher has joined the channel
[03:02] siong1987 has joined the channel
[03:02] rwaldron_ has joined the channel
[03:04] funkatron has joined the channel
[03:04] arlolra has joined the channel
[03:05] springmeyer has joined the channel
[03:06] pkrumins: i have no idea how i got node-png installed the previous time, i cant get libpng installed on osx
[03:07] arlolra: homebrew?
[03:07] pkrumins: unlikely, cause then i'd have it installed on the system.
[03:07] tlrobinson has joined the channel
[03:08] pkrumins: i have it installed locally but i have no idea how to pass the path to node-waf in easy way
[03:08] pkrumins: i have it at /Users/pkrumins/src/libpng-1.4.4/
[03:09] falconair: path.exists takes a callback, does that mean that it is an async method?
[03:09] pkrumins: that's correct
[03:10] falconair: is there a higher level file system library which allows more synchronous functionality?
[03:10] pkrumins: try fs.statSync if you want it sync.
[03:10] falconair: pkrumins, thanks i'll look at it
[03:10] pkrumins: yw
[03:11] pkrumins: a combinator library would be cool that would turn arbitrary async calls into sync ones
[03:12] pkrumins: not sure how useful but cool.
[03:12] pkrumins: somewhat useful.
[03:12] falconair: am i reading this right that fs.statSync retuns an object on which I can call isFile() to see if the file exists?
[03:12] pkrumins: try it and see!
[03:12] pkrumins: tias.
[03:13] falconair: hm...then why would anyone call me lazy? kidding, i'm in the middle of a few hundred lines of fragile code :) I'll try it though
[03:15] RockShox has joined the channel
[03:17] falconair: ok, just found out about the REPL! when I do require('fs').statSync("xyz").isFile(), i get an error (xyz doesn't exist)
[03:17] falconair: is there something that returns a simple "no" to signify that the file doesn't exist?
[03:20] c4milo1 has joined the channel
[03:21] aho: falconair, there is path.exists
[03:21] jherdman has joined the channel
[03:22] falconair: aho: that's what I looked at earlier, i need to synchronous call
[03:22] falconair: the result of path.exists will determine how i execute rest of the code, and putting all the code in path.exists' callback will make the code extremely messy
[03:23] markstory has joined the channel
[03:23] chapel: has anyone used http://www.telehash.org/?
[03:24] derferman has joined the channel
[03:26] iFire has joined the channel
[03:27] SubStack: falconair: there's path.existsSync
[03:27] falconair: SubStack: I don't see it in http://nodejs.org/docs/v0.2.6/api.html
[03:27] SubStack: falconair: and you can always use a flow control module to make it pretty
[03:28] falconair: where can I read about flow control module?
[03:28] SubStack: there are lots of flow control libs on http://github.com/ry/node/wikis/modules 
[03:29] SubStack: but if you're just starting out it's good to get a feel for organizing your code asynchronously without libs first
[03:30] falconair: is there a version of node that supports path.existsSync?
[03:30] SubStack: falconair: try require('path').existsSync in the repl
[03:30] jakehow has joined the channel
[03:31] falconair: SubStack: wow, it is there! is it undocumented for a reason? is it safe to use or did I just not search it correctly in the docs?
[03:31] SubStack: it's probably not in the docs because you shouldn't use it :p
[03:31] SubStack: at least, shouldn't use it in code where performance matters
[03:31] jimt has joined the channel
[03:33] admc has joined the channel
[03:34] KyleXY has joined the channel
[03:35] sveimac has joined the channel
[03:39] joelklabo has joined the channel
[03:40] Slartan has joined the channel
[03:41] eric_f: Was curious if someone had a direction to point me in to fix this issue with base64 package when installing it via npm? https://gist.github.com/765894
[03:41] bmizerany has joined the channel
[03:45] pkrumins: eric_f: seems like you're using my base64, and the problem is it only works on node 0.2.x
[03:46] SubStack: i had a patch for that
[03:46] SubStack: for 0.3
[03:46] pkrumins: oh sweed, did the tests pass
[03:46] SubStack: pretty sure
[03:46] pkrumins: cool, i'll merge it in
[03:46] pkrumins: via ry's buffer_compat thing.
[03:46] pkrumins: so it works on both node versions
[03:46] SubStack: yep, commits say it all passes
[03:47] pkrumins: eric_f: if you can waitlike 2hrs, i'll have it in.
[03:47] SubStack: but no ifdefs for the old 0.2 style
[03:47] SubStack: https://github.com/substack/node-base64 
[03:47] SubStack: so it only works on 0.3
[03:47] pkrumins: eric_f: yeah or use Substizzy's 0.3 patch
[03:47] eric_f: pkrumins SubStack excellent!
[03:48] eric_f: pkrumins: you plan to merge in SubStack's changes onto a 0.3 branch then?
[03:48] pkrumins: sure, in 2hrs
[03:48] SubStack: oh yeah and I wrote more tests ^_^
[03:48] SubStack: forgot about those
[03:48] pkrumins: :D
[03:48] SubStack: uses perl's base64 module to test
[03:48] SubStack: as a reference
[03:48] pkrumins: i think i used that already
[03:49] pkrumins: use MIME::Base64 qw(encode_base64);
[03:49] pkrumins: checking your stuff out
[03:49] chrischris has joined the channel
[03:49] SubStack: pkrumins: yes but I bundled it all up into an expresso test
[03:50] SubStack: so you don't have to have perl installed or anything
[03:50] eric_f: SubStack: cool, using your fork worked, installed and built without issue for me
[03:50] TheEmpath2 has joined the channel
[03:50] TheEmpath2: hail nodites
[03:50] pkrumins: SubStack: got it.
[03:50] pkrumins: eric_f: nice.
[03:50] SubStack: \o/
[03:50] pkrumins:  `-/
[03:50] pkrumins:  |
[03:50] TheEmpath2: i need to make a raw/custom socket connection to a node.js server using socket.io.  anyone ever walk that lonely path before?
[03:50] pkrumins: hyaaaaaaaa
[03:51] SubStack: TheEmpath2: you mean a websocket client?
[03:51] TheEmpath2: websocket infers http overhead, ya?   im interested in a low-level or near-low-level  socket
[03:52] SubStack: what
[03:52] TheEmpath2: :(
[03:52] SubStack: between what kinds of clients?
[03:52] SubStack: are they both node.js processes?
[03:52] TheEmpath2: naw
[03:53] TheEmpath2: node.js server w/ socket.io -> custom client in any language
[03:53] SubStack: also socket.io is pretty fast
[03:53] TheEmpath2: it is
[03:53] SubStack: ACTION uses it to push out base64 encoded image data in realtime
[03:53] TheEmpath2: which is why i wanna learn how to make agnostic clients
[03:53] chapel: hmm
[03:54] TheEmpath2: i figured the easiest way is to just open up abasic  host/port socket call and go from there
[03:54] SubStack: TheEmpath2: how about, what are you trying to solve?
[03:54] SubStack: instead of how you are trying to solve it
[03:54] jimt has joined the channel
[03:54] TheEmpath2: but i am unsure how to negotiate with the socket.io port listeners
[03:54] TheEmpath2: sure
[03:54] TheEmpath2: i got a node.js server
[03:54] chapel: question, if I were to have a couchdb based couchapp could I use node and socket.io for specific features in the couchapp?
[03:54] TheEmpath2: and i got some guy using WebGL
[03:54] mikew3c has joined the channel
[03:55] TheEmpath2: i want WebGL to connect to a node.js server
[03:55] TheEmpath2: ACTION is a forward-thinking tyrant.
[03:55] SubStack: TheEmpath2: I am not sure why you find socket.io unacceptable for that task
[03:56] TheEmpath2: i dont
[03:56] TheEmpath2: its just WebGL doesn't use javascript
[03:56] TheEmpath2: so i can't use the javascript client
[03:56] SubStack: oh
[03:56] TheEmpath2: and that be my conundrum
[03:57] SubStack: I bet there is a way to call javascript from inside webgl
[03:58] TheEmpath2: :/
[03:58] pkrumins: WHAT ARE YOU TRYING TO DO
[03:59] TheEmpath2: :O
[03:59] TheEmpath2: I want a WebGL client to just open connections to a socket.io server
[03:59] SubStack: from what I read webgl is javascript
[04:00] TheEmpath2: what about standalone clients that use DirectX?
[04:00] SubStack: and it's just another DOM element like canvas
[04:00] SubStack: standalone... webgl?
[04:00] TheEmpath2: no.. different client
[04:01] TheEmpath2: say some game writetn in DirectX wants to leverage a socket.io server
[04:01] pkrumins: well try it
[04:01] pkrumins: try hacking it up
[04:01] SubStack: so you want different types of clients hitting the same server?
[04:01] TheEmpath2: thats what im asking
[04:01] pkrumins: no one has tried that before
[04:01] pkrumins: i guarentee you
[04:01] TheEmpath2: ah
[04:01] TheEmpath2: damn it
[04:01] pkrumins: just try it yourself
[04:01] pkrumins: like hack it up
[04:01] TheEmpath2: if i can hack it, i can also create stand alone load  testing of a server
[04:01] falconair: as far as I can tell, if I want to clone an object in node.js/javascript, I pretty much have to do it manually...no built in function...correct?
[04:01] SubStack: just pass the socket.io data through the same interface that regular network sockets go to for standalone clients
[04:01] pkrumins: falconair: require('traverse/hash').Hash
[04:01] TheEmpath2: falconair: I tend to json the object, then unJSON it to something new
[04:02] bart2 has joined the channel
[04:02] pkrumins: falconair: use SubStack's traverse module.
[04:02] TheEmpath2: is that faster than JSON stringify/parse?
[04:02] pkrumins: it doesnt matter.
[04:02] SubStack: actually you can just require('traverse').clone
[04:02] pkrumins: ah
[04:02] TheEmpath2: k i'll just try to find out how sockiet.io clients establish connections
[04:02] sechrist has joined the channel
[04:03] TheEmpath2: JS lacks a native deep copy, and its a crucial part of my Imhotep project, so im open to the best and fastest object deep copy ever found
[04:04] falconair: pkrumins: traverse doesn't seem to be at https://github.com/ry/node/wiki/modules, are you referring to this: https://github.com/substack/js-traverse?
[04:04] pkrumins: falconair: yes I am. also see what SubStack said above
[04:04] SubStack: falconair: yes, it's listed as 'traverse' on npm
[04:04] SubStack: npm install traverse
[04:04] pkrumins: falconair: < SubStack> actually you can just require('traverse').clone
[04:04] SubStack: and traverse.copy() for shallow copies
[04:04] falconair: cool, thanks!
[04:06] SubStack: pretty much everything I write depends on traverse
[04:06] SubStack: useful grab-bag of hash functions
[04:06] TheEmpath2: SubStack: ever jsperf your traverse vs. json stringify/parse?
[04:06] SubStack: and occasionally I actually use it to traverse data structures
[04:06] SubStack: TheEmpath2: nope
[04:07] SubStack: I don't really care about performance until I can demonstrate that something is actually slow
[04:07] TheEmpath2: i use JSON for my deepcopies, and its slow
[04:07] TheEmpath2: im trying to find efficient replacements
[04:07] SubStack: but here I can make a quick test
[04:09] jchris has joined the channel
[04:09] SubStack: > var clone = require('traverse').clone; var t0 = Date.now(); for (var i = 0; i < 1000; i++) clone({ a : 1, b : [ 2, 3, { c : [ 4, 5, 6 ] } ], d : [ 7, 8 ], e : 9 }); Date.now() - t0
[04:09] SubStack: 24
[04:09] SubStack: now doing JSON.{stringify,parse}
[04:09] pkrumins: JSON will be slower
[04:10] wapcaplet has left the channel
[04:10] pkrumins: 5x slower i predict.
[04:10] TheEmpath2: ACTION npm's traverse
[04:10] SubStack: > var t0 = Date.now(); for (var i = 0; i < 1000; i++) JSON.parse(JSON.stringify({ a : 1, b : [ 2, 3, { c : [ 4, 5, 6 ] } ], d : [ 7, 8 ], e : 9 })); Date.now() - t0
[04:10] SubStack: 53
[04:10] TheEmpath2: hrmmm
[04:10] SubStack: hah!
[04:10] pkrumins: 2x!
[04:10] SubStack: only 2x slower
[04:10] pkrumins: umpossible
[04:11] SubStack: hooray I win the performance test without caring about performance
[04:11] pkrumins: haha.
[04:11] SubStack: that is the best way to win: without caring
[04:11] pkrumins: so much win!
[04:12] AAA_awright: Oh wow, is that a faster way to check the type of an object? "".constructor===String
[04:12] SubStack: oh hah, I scaled up to 100000 and it's a bit wider of a gap: 1781 to 4644
[04:12] SubStack: ACTION wins
[04:12] SubStack: AAA_awright: typeof s === 'string'
[04:12] SubStack: v8: typeof 'moo'
[04:12] v8bot: SubStack: "string"
[04:12] AAA_awright: But that's a string comparison
[04:12] AAA_awright: I doubt it's faster
[04:12] AAA_awright: v8: "".constructor===String
[04:12] v8bot: AAA_awright: true
[04:13] AAA_awright: v8: "".constructor===Array
[04:13] v8bot: AAA_awright: false
[04:13] SubStack: it's going to be crazy fast no matter what you do
[04:13] AAA_awright: Is it optimized down?
[04:13] SubStack: best to not optimize that kind of thing
[04:13] AAA_awright: ACTION writes a test
[04:13] AAA_awright: Well not unless it's 50% of your logic
[04:13] Moominpapa has joined the channel
[04:13] SubStack: check this:
[04:13] SubStack: v8: var t0 = Date.now(); for (var i = 0; i < 100000; i++) typeof 's' === 'string'; Date.now() - t0
[04:13] v8bot: SubStack: 0
[04:14] SubStack: blazing fast
[04:14] jimt has joined the channel
[04:14] SubStack: I wouldn't worry about it
[04:14] SubStack: oh hah
[04:14] SubStack: > var t0 = Date.now(); for (var i = 0; i < 100000; i++) typeof 's' === 'string'; Date.now() - t02
[04:14] TheEmpath2: wow.. at 1e6 iterations, traverse is at 12847ms... json is at 30656ms :O
[04:14] hobodave has joined the channel
[04:14] SubStack: whoops, that is a 2
[04:14] muk_mb: does anyoen know why my node can find it's views directory just fine locally, but when I run it on the server it crashes and can't find it?
[04:14] pkrumins: 2 :D
[04:14] SubStack: and with 's'.constructor === String it takes 25 ms
[04:15] SubStack: so typeof s wins by like 12x
[04:15] pkrumins: muk_mb: how do we know what is your 'views directory'?
[04:15] chapel: v8: var t0 = Date.now(); for (var i = 0; i < 10e10; i++) typeof 's' === 'string'; Date.now() - t0
[04:15] SubStack: AAA_awright: so probably .constructor is much slower because it does a property lookup
[04:16] v8bot: chapel: Error: Timeout
[04:16] chapel: :)
[04:16] chapel: v8: var t0 = Date.now(); for (var i = 0; i < 10e5; i++) typeof 's' === 'string'; Date.now() - t0
[04:16] v8bot: chapel: 10
[04:16] echosystm: are people mainly using 2.6 or 3.3 now?
[04:16] echosystm: i see 3.3 is not "stable" 
[04:16] SubStack: whereas typeof can cheat and check v8's object struct directly
[04:17] AAA_awright:   - string.constructor===String: 4845591 Hz
[04:17] AAA_awright:   - typeof(String)=='string': 23376410 Hz
[04:17] AAA_awright: SubStack: Huh guess you're right
[04:18] SubStack: ==='string' might be a little faster still
[04:18] AAA_awright:   - typeof(String)==='string': 32457777 Hz
[04:18] SubStack: since === has less silly boundary cases
[04:18] SubStack: surprising!
[04:18] TheEmpath2: traverse integrated into my elaborate project seemlessly
[04:18] SubStack: \o/
[04:18] TheEmpath2: i can feel its speediness uplift my spirit
[04:19] AAA_awright: Actually it's not typeof(String) it's typeof(string) where string="some string"
[04:19] AAA_awright: but yeah
[04:19] SubStack: v8 does all sorts of crazy stuff under the hood
[04:19] SubStack: it's hard to predict performance without testing
[04:20] SubStack: AAA_awright: also you can clone structures with functions in them with traverse
[04:20] SubStack: although those references are kept the same3
[04:20] pkrumins: v8bot: [2] == "2"
[04:20] v8bot: pkrumins: Use v8: <code> to evaluate code or "`v commands" for a list of v8bot commands.
[04:20] SubStack: I can't remember if it checks function prototypes or not
[04:20] SubStack: s/prototypes/attributes/
[04:21] jimt_ has joined the channel
[04:21] joelklabo has joined the channel
[04:21] SubStack: right, supposed to be integrating this new payment code I wrote
[04:22] AAA_awright: Wow typeof()==="" is actually /faster/ than i++
[04:22] echosystm: SubStack: with DNode, what happens when a client is disconnected? are object references held by the server automatically purged?
[04:22] AAA_awright: hmm something isn't right here
[04:22] AAA_awright: with my test
[04:22] SubStack: echosystm: yep, v8's GC takes care of all that for the most part
[04:23] SubStack: I've had dnode servers running for months and haven't had memory issues
[04:23] echosystm: nah i mean like
[04:23] echosystm: hang on, i think im missing something
[04:23] TheEmpath2: echosystem: i tend to do manual cleanups of resources from clients that disconnect since the GC is stop-the-world
[04:23] skm has joined the channel
[04:23] echosystm: can a server have a reference to an object held on the client?
[04:23] TheEmpath2: espeically in my queues
[04:24] SubStack: echosystm: yes, you can get really crazy with it
[04:24] Tprice: anyone know how the "Readline" works?
[04:24] TheEmpath2: ACTION pokes TheEmpath.  Clearly, someone forgot to logout at work.:X
[04:24] SubStack: I don't even know what side of the connection a lot of my functions are on anymore
[04:24] SubStack: it all just magically works
[04:24] echosystm: ok
[04:25] echosystm: lets say i have object Y on the server, with a function x()... which returns object A
[04:25] echosystm: client goes Y.x() and gets a remote object reference, correct?
[04:25] arrty has joined the channel
[04:25] SubStack: echosystm: well in dnode you don't return, you call a callback supplied in the arguments list
[04:25] SubStack: continuation-passing style
[04:26] muk_mb: pkrumins: the one that express uses to find my template files
[04:26] echosystm: ok, well i mean regardless of how the object reference comes back
[04:26] echosystm: the client actually gets a remote object reference, right?
[04:26] SubStack: echosystm: but sure, Y.x() gets an object with wrapped functions
[04:26] SubStack: so you can call A's functions and they turn into RPC requests back to the side that defined them
[04:27] echosystm: right
[04:27] echosystm: ok, now say the connection dies
[04:27] echosystm: how does the client/server know which remote objects are now dead?
[04:27] echosystm: it wont know until it tries to do something with them, right?
[04:27] SubStack: echosystm: dnode does this: delete clients[conn.id]
[04:28] SubStack: and then the GC culls the remote once all the ref counts hit 0
[04:28] echosystm: ok
[04:28] SubStack: or whenever the GC feels like it because that is how GCs roll
[04:28] SubStack: in practice it's really not a problem
[04:29] SubStack: also you can conn.on('end', function () { /* ... */ }) if you want to clean up some structures with client functions in them
[04:29] SubStack: echosystm: this article might be useful: http://substack.net/posts/9bac3e/Roll-your-own-PubSub-with-DNode 
[04:29] perezd has joined the channel
[04:29] echosystm: ok, thanks
[04:30] perezd: pyrotechinck: yo!
[04:31] echosystm: i'm trying to build node 3.3, how can i get it to install in my home/
[04:31] SubStack: --prefix=...
[04:31] SubStack: ./configure --prefix=... I should say
[04:35] echosystm: ah, ok i see it now
[04:35] echosystm: thanks
[04:36] andrewfff has joined the channel
[04:38] technoweenie has joined the channel
[04:43] ajpiano has joined the channel
[04:45] AAA_awright: SubStack: Actually it could just be my testing method:
[04:45] AAA_awright:   - typeof(list[i%s])==='string': 11196825.396825397 Hz (0.17499976372743598)
[04:45] AAA_awright:   - list[i%s].constructor===String: 12536676.38483965 Hz (0.17499976744618706)
[04:46] yozlet has joined the channel
[04:47] SubStack: well here are my results: https://gist.github.com/765939
[04:48] alexfner has joined the channel
[04:48] pkrumins: here are mine https://gist.github.com/765940
[04:48] pkrumins: they match SubStack's
[04:49] SubStack: well, using the same test
[04:49] SubStack: not sure what AAA_awright's tests are on about with that Hz business
[04:50] AAA_awright: SubStack: How many times the loop can be run in half a second, or rather, it calculates how many runs will be about half a second, then calculates the s^-1 from that
[04:50] Aria has joined the channel
[04:51] AAA_awright: SubStack: It's probably optimizing typeof s === 'string' down because it's known before runtime
[04:51] SubStack: possible
[04:52] AAA_awright: SubStack: That's why I have it iterating through an Array, only one of eight of which is a String
[04:52] echosystm: anyone know how to install npm somewhere in home?
[04:52] AAA_awright: (that's what the 0.175 is, the percentage of strings it finds)
[04:52] AAA_awright: I have it add to a variable so I know it's not skipping the statement entirely
[04:52] pkrumins: echosystm: just copy the string from npmjs.org and run it
[04:52] pkrumins: echosystm: it will put npm in the same place your node is.
[04:52] AAA_awright: SubStack: Working around the optimizer like that is important
[04:53] echosystm: ok
[04:53] echosystm: i thought it only does that if it is in ~/local
[04:53] pkrumins: why is it important
[04:53] SubStack: AAA_awright: check this then: https://gist.github.com/765944 
[04:53] SubStack: pkrumins: no idea!
[04:53] SubStack: at any rate it doesn't matter because it's crazy fast
[04:54] AAA_awright: SubStack: `typeof("string")=="string"` is as fast as `true`!
[04:54] bingomanatee_ has joined the channel
[04:54] AAA_awright: That can't be right
[04:54] pkrumins: it doesnt matter
[04:54] pkrumins: get a life.
[04:55] SubStack: hey now pkrumins
[04:55] pkrumins: yes?
[04:55] SubStack: experiments!
[04:55] pkrumins: ah.
[04:55] pkrumins: ok!
[04:55] pkrumins: carry on!
[04:55] SubStack: experiments can teach us surprising things
[04:55] pkrumins: oh right
[04:55] pkrumins: i forgot
[04:55] SubStack: if this were mere speculation I would agree
[04:56] echosystm: what should NODE_PATH be? {installdir}/lib or {installdir}/lib/node/npm.....
[04:56] echosystm: ?
[04:57] pkrumins: nodelib/bin
[04:57] echosystm: you mean {installdir}/bin ?
[04:58] echosystm: that doesnt make a lot of sense
[04:58] jamesarosen has joined the channel
[04:58] SubStack: mine is /home/substack/.npm/lib
[04:59] echosystm: ah, hidden
[04:59] echosystm: found it, thanks :)
[04:59] SubStack: same as `npm config get root`
[05:04] sechrist: I absolutely love airplay
[05:05] sechrist: I was literally going to write some small service to be remote speakers -- then I realized the apple devices I already own do this
[05:07] echosystm: i must say SubStack, i am mighty impressed with dnode
[05:07] SubStack: :D
[05:07] echosystm: good work
[05:08] SubStack: ACTION uses it for everything
[05:08] echosystm: this is going to get used on the project ive been pulling my hair out over for the last month hah
[05:08] TheEmpath2: ACTION guts the socket.io client.
[05:09] TheEmpath2: I need to write a transport for socket.io that allows two node.js instances to talk to each other :X
[05:09] SubStack: TheEmpath2: well there's dnode :p
[05:09] noahcampbell has joined the channel
[05:10] SubStack: dnode talks socket.io and also does regular sockets
[05:13] TheEmpath2: incharesting
[05:13] TheEmpath2: how does dnode scale as a message queue solution like rabbit/AMPQ?
[05:14] SubStack: I'm not familiar with how those work.
[05:14] SubStack: dnode is a lot like drb, if you've used that
[05:14] smtlaissezfaire has joined the channel
[05:15] TheEmpath2: message queues allow multiple servers to pass data between each other in a queue-like fashion
[05:15] TheEmpath2: in case one server goes down, the message queue will route requests intelligently to whatever is still running
[05:15] TheEmpath2: could i use dnode to brute my server for load tests?
[05:16] SubStack: you can build something like that on top of dnode
[05:16] SubStack: dnode doesn't do that itself though
[05:16] SubStack: I don't see how that would be very useful actually
[05:16] bingomanatee_: They also offer task synchronization a la Java 
[05:16] SubStack: unless you are twitter or something
[05:17] TheEmpath2: im trying to get to big scales :D
[05:17] SubStack: I have a project on the back burner that is a little bit like that
[05:17] SubStack: role-based task delegation
[05:18] Ond: To separate node servers?
[05:18] jimt has joined the channel
[05:18] SubStack: separate or the same it doesn't matter
[05:19] smtlaissezfaire has joined the channel
[05:24] bingomanatee_: Queues are great for cloud based workers. They also give you the opportunity to use transaction or transaction-like flow control.
[05:24] prettyrobots_ has joined the channel
[05:24] _richardJ has joined the channel
[05:25] davidascher has joined the channel
[05:27] smtlaissezfaire has joined the channel
[05:27] eric_f: Curious what the general feeling about the url.js module is from people who've used it a lot?
[05:28] mjr_: I have a general feeling of adequacy for url.js
[05:29] SubStack: if it's on npm then it's most likely reasonably adequate
[05:29] TheEmpath2: step 1.) start a node server with the HTTP server too 2.) net.createConnection to that server/port 3.) crash the server!
[05:29] SubStack: good self-selection at work
[05:30] SubStack: TheEmpath2: .listen() can take a callback
[05:30] SubStack: gets called when the server has been bound to a port
[05:30] SubStack: if that's what you mean
[05:31] TheEmpath2: i mean i start an httpserver on an instance of node
[05:31] TheEmpath2: then i open another instance of node and net.createConnection to that poort and 127.0.0.1
[05:31] TheEmpath2: that will bring down my first instance of node
[05:31] eric_f: I've been thinking about URL and JavaScript APIs for some time now. Both for use in the browser dealing with user input, and on YQL. I read through the node url.js module and I guess it's just a pretty different approach from what I've been writing.
[05:31] TheEmpath2: if i access 8000 in a browser, it works.  if i access it via a net.createConnection, the sever goes down
[05:35] pkrumins: ryah: bad: $ node png-example-async.js 
[05:35] pkrumins: Segmentation fault
[05:35] pkrumins: ryah: on 0.3
[05:36] pkrumins: ryah: in examples/ directory
[05:36] sveimac has joined the channel
[05:36] SubStack: there should be a res.render shortcut that only sets locals
[05:36] SubStack: in express
[05:36] pkrumins: ryah: all async examples broken in 0.3 :(
[05:36] pkrumins: pkrumins@Peteris-Kruminss-MacBook-Air:610:110:~/tests/node-packages/node-png/tests$ node dynamic-png-stack-async.js 
[05:36] pkrumins: Segmentation fault
[05:36] andrewfff has joined the channel
[05:36] crodas has joined the channel
[05:36] pkrumins: trying 0.2 now.
[05:36] SubStack: res.show, maybe
[05:38] cafesofie has joined the channel
[05:41] joelklabo has joined the channel
[05:42] pkrumins: ryah: i can confirm that it works on 0.2, but crashes on 0.3. So please try the async tests for 0.3!
[05:43] slaskis has joined the channel
[05:44] TheEmpath2: and now it works :X
[05:44] TheEmpath2: spooky
[05:44] Aria: Gamma rays.
[05:46] cwo has joined the channel
[05:49] echosystm: ok SubStack, back to the issue i was talking about before...
[05:49] echosystm: when machine A has a reference to an object on machine B, and machine B disconnects, whats the best way to ensure all those referenced objects are purged?
[05:49] echosystm: is there some kind of ondisconnect event?
[05:49] SubStack: yep
[05:50] SubStack: conn.on('end', function () { /* ... */ })
[05:50] echosystm: ah, cheers
[05:50] SubStack: the pubsub article has a good example of that on it
[05:50] SubStack: also you can do conn.id to get a unique key to index clients by
[05:51] brainproxy: for GET requests, is it ever important to watch for the 'end' event on the req object?
[05:51] matjas has joined the channel
[05:58] ezmobius: anyone have a node.js chef cookbook for ubuntu 10.04?
[06:00] linac has joined the channel
[06:03] mgutz has left the channel
[06:07] kawaz_work has joined the channel
[06:07] sriley has joined the channel
[06:09] echosystm: SubStack: howcome a connection doesnt have an id immediately after connection?
[06:09] echosystm: DNode(function(client, connection) { console.log(connection); });
[06:09] echosystm: is undef
[06:10] echosystm: err, connection.id i mean
[06:10] echosystm: console.log(connection.id);
[06:11] TheEmpath2: connections are verified via a callback
[06:11] TheEmpath2: connections take time, and when the computer is done, it will let oyu know at a later time by calling you back
[06:11] TheEmpath2: via a callback
[06:12] evanmeagher has joined the channel
[06:12] echosystm: oh
[06:12] TheEmpath2: dunno how dnode works thou
[06:12] TheEmpath2: but thats the general theory
[06:13] grahamb has joined the channel
[06:13] sveimac_ has joined the channel
[06:14] derren13 has joined the channel
[06:15] sveimac has joined the channel
[06:17] TheEmpath2: night, nodites
[06:17] SubStack: echosystm: you have to .connect() or .listen() before the constructor you pass to DNode() fires
[06:17] SubStack: oh hmm!
[06:18] SubStack: what!
[06:18] SubStack: ah, conn.id only exists if you .listen()
[06:18] SubStack: wait, crap!
[06:19] SubStack: ah, it's not defined right away
[06:19] SubStack: but you can conn.on('ready', function () {})
[06:19] SubStack: and it'll be defined inside there
[06:20] SubStack: but this seems like a bug
[06:20] robotarmy has joined the channel
[06:21] SubStack: odd, my unit tests check for that
[06:23] tpryme has joined the channel
[06:23] SubStack: wtf, this is all wrong
[06:24] paulrobinson has joined the channel
[06:24] tfe1: is persistence.js the going ORM for mysql right now?
[06:25] pkrumins: permafrost! but it's not yet finished.
[06:25] SubStack: nah permafrost is not a very good fit for mysql
[06:26] pkrumins: oh
[06:26] MikhX has joined the channel
[06:28] SubStack: echosystm: pow, just pushed dnode 0.4.3
[06:28] SubStack: should fix your issue
[06:28] SubStack: thanks for the find, that is a pretty serious bug!
[06:30] echosystm: cool, i'll give it a suss tomorrow
[06:30] echosystm: thanks
[06:30] mikeal has joined the channel
[06:30] echosystm: home time now! ciao
[06:33] sudoer has joined the channel
[06:35] pkrumins: ACTION npm install dnode
[06:40] tpryme: pkrumins: is permafrost a general purpose orm?
[06:40] pkrumins: it's permanent object store
[06:40] SubStack: permanent? no
[06:40] pkrumins: via js proxies.
[06:40] pkrumins: oh
[06:40] pkrumins: SubStack knows better
[06:40] pkrumins: he wrote it
[06:40] SubStack: well it is sort of, but that's not the point of it
[06:40] tpryme: pkrumins: lol, ok
[06:40] tpryme: pkrumins: asking the wrong person
[06:40] SubStack: it's transparent persistence
[06:40] tpryme: SubStack: What's permafrost?
[06:41] SubStack: with permafrost you just update data structures and the changes are saved to disk automatically
[06:41] SubStack: and completely transparently
[06:41] SubStack: store.foo.baz.push(5) or whatever
[06:41] herbySk has joined the channel
[06:42] tpryme: SubStack: I see. What are you guys using it for? Not your primary data store, right?
[06:42] SubStack: not using it for anything yet since it has some pretty critical bugs with supermarket
[06:42] SubStack: actually supermarket has the bugs and I haven't written adapters for other data stores yet
[06:43] SubStack: it might be a pretty good fit for couch
[06:43] tpryme: SubStack: what's the current default adapter for supermarket?
[06:43] SubStack: supermarket is just a key/value thing that sits on top of sqlite
[06:43] SubStack: pkrumins wrote that
[06:43] chapel: SubStack
[06:44] chapel: why not use chaos
[06:44] SubStack: chapel: 'cause I haven't gotten around to it yet!
[06:44] chapel: :)
[06:44] SubStack: ACTION <-- crazy busy
[06:44] chapel: I know
[06:44] pkrumins: chaos!
[06:44] chapel: and you still have time to help in here
[06:44] pkrumins: click. chaos.
[06:44] SubStack: well because I always have irc open
[06:45] SubStack: it is not the same kind of time investment as writing code
[06:45] tpryme: SubStack: Where are you based? Close to pkrumins?
[06:45] SubStack: Oakland
[06:45] smtlaissezfaire has joined the channel
[06:45] SubStack: pkrumins is staying on my couch
[06:45] tpryme: SubStack: No way. did not know he was in the area
[06:45] tpryme: pkrumins: welcome
[06:46] pkrumins: thanks!
[06:46] tpryme: pkrumins: How long are you here for?
[06:46] pkrumins: 2 months!
[06:47] pkrumins: oh
[06:47] tpryme: tpryme: nice! I hope it's a comfy couch.
[06:47] tpryme: pkrumins: nice! I hope it's a comfy couch
[06:47] SubStack: 4 /more/ months, you mean :p
[06:47] SubStack: it is a very comfy couch
[06:47] SubStack: I found it.
[06:47] pkrumins: well i have been here for 2 months, and i'll be here for 4 more!
[06:47] pkrumins: like that.
[06:47] pkrumins: it's a comfy couch
[06:47] pkrumins: i sit on it all day, and sleep all night
[06:48] SubStack: also an air matress but the couch is way comfier
[06:48] SubStack: ACTION envies the couch
[06:48] tpryme: lol
[06:48] pkrumins: need another couch
[06:48] SubStack: this couch: http://browserling.com/images/sofa.png 
[06:48] pkrumins: :D
[06:48] SubStack: yes, another couch!
[06:49] SubStack: but first, need cashflow
[06:49] SubStack: unless I find another one
[06:49] SubStack: that was so lucky finding that awesome couch
[06:50] tpryme: that's one funky couch
[06:52] bitdrift has joined the channel
[06:53] starfox has joined the channel
[06:54] tlrobinson_ has joined the channel
[06:55] ryah: pkrumins: you sure - i think it's working in v0.3
[06:55] ryah: (it has to be recompiled)
[06:55] tlrobinson_ has joined the channel
[06:56] ryah: oh - maybe i didn't do the async tests.
[06:56] pkrumins: ryah: do the async 
[06:56] ryah: ryan@ryan-laptop:.../projects/node-png/tests% node -v
[06:56] ryah: v0.3.4-pre
[06:56] ryah: ryan@ryan-laptop:.../projects/node-png/tests% node dynamic-png-stack-async.js
[06:56] ryah: 4 Jan 22:56:48 - PNG located at (80,386) with width 112 and height 13
[06:57] pkrumins: trying again
[06:57] ryah: ryan@ryan-laptop:.../projects/node-png/tests% file dynamic-async.png 
[06:57] ryah: dynamic-async.png: PNG image, 112 x 13, 8-bit/color RGBA, non-interlaced
[06:57] SubStack: pkrumins: node-waf clean maybe?
[06:57] pkrumins: maybe
[06:58] Jezek has joined the channel
[06:58] Jezek: what kind of frameworks do people use
[06:58] SubStack: could be versions crossing if you've got 0.2 and 0.3 on the same machine
[06:58] dspree has joined the channel
[06:58] pkrumins: everything is possible
[06:58] SubStack: Jezek: testing frameworks, web frameworks
[06:58] Jezek: oh i mean
[06:58] Jezek: what are some recommended web frameworks
[06:59] SubStack: module would be pretty sweet for setting up 0.2 and 0.3
[06:59] tpryme: Jezek: express
[06:59] pkrumins: everything is possible at zombo com.
[06:59] SubStack: or I could actually implement hackman one of these days
[06:59] muk_mb: express is cool, unless you want to do file uploads, haha
[07:00] bitdrift: Jezek: I second express
[07:00] pkrumins: bah, it can't find libpng again
[07:00] Jezek: people use express for production apps?
[07:00] pkrumins: i forgot how i fixed that
[07:00] SubStack: pkrumins: you just said CPPFLAGS
[07:00] pkrumins: oh right!
[07:00] muk_mb: I'm using express for http://appengine.goodwinlabs.com
[07:00] EyePulp has joined the channel
[07:00] konobi: pkgconfig++
[07:00] v8bot:  konobi has given a beer to pkgconfig. pkgconfig now has 1 beers.
[07:01] Jezek: what if i need to use oauth
[07:01] tpryme: Jezek: yes
[07:01] tpryme: Jezek: provide oauth?
[07:01] tpryme: Jezek: or consume oauth?
[07:01] Jezek: consume
[07:01] Jezek: nomnomnom
[07:02] tpryme: Jezek: then use connect-auth with express
[07:02] tpryme: Jezek: Express is built on connect, so you can drop in any connect middleware
[07:02] pkrumins: ryah: crashing for me :( 
[07:02] pkrumins: $ node png-example-async.js 
[07:02] Jezek: ok
[07:02] pkrumins: Segmentation fault
[07:02] pkrumins: ACTION investigates
[07:02] pkrumins: with debugging tools, like gdb
[07:02] Jezek: will it scale well?
[07:02] RockShox: what are some recommendations for rendering engines
[07:03] RockShox: im looking at jade and ejs
[07:03] tpryme: RockShox: jade
[07:03] Jezek: im planning on using mongodb + node.js
[07:03] tpryme: Jezek: Yes
[07:03] Jezek: + express it looks like
[07:03] tpryme: Jezek: Look at mongoose 1.0, which is almost released
[07:03] RockShox: im trying to do couch + node + express + jade
[07:03] pkrumins: ryah: http://pastebin.com/PK1CAGzh
[07:04] SubStack: silly pastebin
[07:04] SubStack: gist ftw
[07:04] tpryme: RockShox: I prefer jade over ejs
[07:04] pkrumins: i am not logged in github all the time -_-
[07:04] RockShox: jade is being a whore though
[07:04] pkrumins: requires being logged in
[07:04] pkrumins: i hate that
[07:04] Jezek: what if i want to modify files without the server going down, can i do that
[07:04] RockShox: theres something im clearly missing
[07:04] tpryme: RockShox: ?? how so?
[07:04] SubStack: not logged in! whycome?
[07:05] pkrumins: i dont like being logged in
[07:05] tpryme: Jezek: You mean hot code?
[07:05] jankoprowski has joined the channel
[07:05] SubStack: that is a silly reason pkrumins!
[07:05] chapel: pkrumins: what irc client do you use?
[07:05] tpryme: Jezek: like in erlang?
[07:05] RockShox: db.view('user/all', { key: req.params.user }, function(e, r) {
[07:05] RockShox: jade.renderFile('post.jade', function(err, html) {
[07:05] pkrumins: i always clean my cache and history.
[07:05] pkrumins: chapel: irssi
[07:05] RockShox: but it says r is not defined
[07:05] chapel: oh
[07:05] Jezek: i don't know.. i'm just saying maybe i want to add a field to a form or something, etc
[07:05] chapel: I have an irc script I made for gists :)
[07:05] Jezek: do i have to restart the server for that
[07:06] RockShox: am i doing that right?
[07:06] tpryme: RockShox: The problem is not with jade
[07:06] tpryme: RockShox: The problem would be with view(...)
[07:06] RockShox: well r is defined
[07:06] tpryme: RockShox: Apparently not
[07:06] RockShox: ReferenceError: /home/rox/bookmarks/post.jade:4
[07:06] RockShox:     2. '  - each post in r'
[07:06] RockShox: r is not defined undefined
[07:07] RockShox: but i can print r with console.log
[07:07] tpryme: Jezek: yes, you have to restart. but there are node libraries that auto-restart the server for you in development mode, like in Rails.
[07:07] Jezek: i haven't used rails, what do you mean
[07:08] tpryme: RockShox: If you're using express
[07:08] tpryme: RockShox: You don't have to do jade.renderFile
[07:08] tpryme: RockShox: There's an easier way to use jade with express
[07:08] Jezek: i guess i should just have a development server where i wont worry about downtime?
[07:08] RockShox: i didnt think res.render would work within the db query
[07:09] tpryme: Jezek: So if you add a field to your form and save the file, and you have one of these restart modules installed, when you refresh the browser, then you'll see the new field with the form
[07:09] tpryme: RockShox: It will
[07:09] Jezek: oh nice
[07:09] tpryme: RockShox: it works because of js closures
[07:09] RockShox: im still struggling to grasp closures
[07:10] RockShox: db.view('user/all', { key: req.params.user }, function(e, r) {
[07:10] RockShox:         res.render('post.jade');
[07:10] RockShox:     });
[07:11] RockShox: jade still says r is not defined
[07:11] Aria: And how would jade get ahold of r?
[07:12] Aria: It's only inside of that function, which only has one line.
[07:12] RockShox: thats the part im missing
[07:12] RockShox: im assuming jade executes in that scope
[07:12] RockShox: because i didnt see any way to pass it data
[07:12] Aria: That's a wrong assumption.
[07:13] Aria: I imagine there's a greater closure around all this, and THAT might be in the right scope, so variables defined out there would show.
[07:13] RockShox: the docs are a little short on examples. could you show me how i ight fix that
[07:13] Aria: I don't have context (I don't know jade)
[07:13] tpryme: RockShox: 
[07:13] tpryme: RockShox: You have to pass in r in an extra options hash
[07:13] tpryme: RockShox: Read the express documentation
[07:14] Aria: But Javascript's scoping is lexical — you can see what things can access a variable. It's only inside the block that defines them.
[07:14] tpryme: RockShox: http://expressjs.com/guide.html#View-Rendering
[07:14] tpryme: RockShox: See the {locals: ...} object
[07:15] tpryme: RockShox: res.render('post
[07:15] tpryme: ', {locals: {r: r}})
[07:15] RockShox: interesting
[07:15] RockShox: you have to pass it all via locals then
[07:15] tpryme: RockShox: Get a good book on javascript, read it over a wknd, and you'll come away with a good understanding of closures, among other things
[07:15] tpryme: RockShox: Just like in Rails
[07:16] chapel: tpryme: I learned the hard way :)
[07:16] RockShox: thanks
[07:16] chapel: I've rewritten a script like 4 times because I didn't understand them, now its not as much of an issue
[07:17] joelklabo has joined the channel
[07:17] tpryme: chapel: I used to be the same way with `this` and context before I took the time to learn js, instead of just using jquery when I needed it
[07:17] chapel: yeah
[07:17] chapel: this seems pretty clear to me
[07:17] evanmeagher has joined the channel
[07:17] chapel: once I got closures
[07:18] ryah: pkrumins: i think you've not completely cleaned the folder
[07:19] ryah: pkrumins: node-waf clean configure build
[07:19] ryah: or you have png.node somewhere in your NODE_PATH already
[07:19] creationix has joined the channel
[07:19] RockShox: res.render('post.jade', { locals: { hi: "test", } });
[07:19] RockShox: ReferenceError: Jade:2
[07:19] RockShox: hi is not defined
[07:19] ryah: somehow it's trying to link to your old one
[07:19] SamuraiJack has joined the channel
[07:20] creationix: hey, how do I translate uid and gid to string names in node?
[07:20] creationix: and what's the chance of that working in windows
[07:20] ryah: creationix: we don't have bindings for getpwnam()
[07:20] creationix: ryah: ok, thanks
[07:20] ryah: getpwuid() rather is what is needed
[07:20] creationix: ryah: I *think* that's optional in the tar format
[07:20] derferman has joined the channel
[07:21] creationix: I guess I'll find out
[07:21] ryah: i want to add bindings though...
[07:21] creationix: yeah, would be nice
[07:21] shaver: wonder if you should just do ctypes
[07:21] shaver: so you can write the bindings in JS
[07:21] ryah: yeah...
[07:22] ryah: i've considered bundling libffi
[07:22] shaver: we did that
[07:22] shaver: it works pretty well
[07:22] shaver: some grotty code to write the libffi bindings
[07:22] creationix: shaver: where is yours
[07:22] creationix: I saw one way back, but it doesn't work now
[07:22] shaver: ours is for spidermonkey, not v8
[07:22] creationix: someone had made one for node early on
[07:23] ryah: there's a node-ffi
[07:23] sveimac has joined the channel
[07:23] creationix: it was pretty neat even though generating the config structures was a pain
[07:23] ryah: https://github.com/orlandov/node-ffi
[07:23] lianj: ffi ftw!
[07:23] creationix: nice, it looks like he updated it again
[07:24] creationix: does that work on windows too? (assuming the libraries are different there of course)
[07:24] cafesofie has joined the channel
[07:24] shaver: libffi does
[07:24] shaver: at least with the MSVC ABI
[07:24] void_ has joined the channel
[07:24] creationix: looks like his version only supports osx and linux
[07:24] shaver: which I guess is the same
[07:24] shaver: yeah, building libffi on windows was a source of adventure, IIRC
[07:28] mikedeboer has joined the channel
[07:29] mgutz has joined the channel
[07:32] skm has joined the channel
[07:32] daglees has joined the channel
[07:32] fangel has joined the channel
[07:33] jsnoob has joined the channel
[07:34] skohorn_ has joined the channel
[07:35] twoism has joined the channel
[07:37] ph^ has joined the channel
[07:37] tpryme: pkrumins: SubStack: Are you guys going to be in sf any time soon?
[07:38] SubStack: tpryme: we can come over whenever probably
[07:38] SubStack: except for next tuesday since we've got a video conference
[07:39] tpryme: SubStack: Would love to meet you guys in person and chat over a bite or coffee
[07:39] tpryme: SubStack: I'll message you via github to exchange emails
[07:40] felixge has joined the channel
[07:40] SubStack: busy until the 8th though, got to launch these paid plans already
[07:41] pkrumins: i can come after 15th
[07:42] pkrumins: on 11th actually we go to mountain view
[07:42] pkrumins: we could meet then! we could just hop out in SF
[07:42] tpryme: pkrumins: SubStack: Cool, let's figure it out over email.
[07:42] pkrumins: sure ok!
[07:42] tpryme: SubStack: Just sent you a github msg
[07:43] pkrumins: you could come with us to hackers & founders meetup
[07:43] pkrumins: it's cool.
[07:43] pkrumins: www.hackersandfounders.com
[07:46] RockShox: anyone recommend a library for managing user authentication for use with express
[07:47] tpryme: RockShox: connect-auth
[07:47] tpryme: pkrumins: Yea, I may go to that
[07:47] tpryme: RockShox: Comes with facebook connect + twitter oauth support
[07:47] RockShox: thanks
[07:49] teemow has joined the channel
[07:50] dguttman has joined the channel
[07:51] case__ has joined the channel
[07:53] ph^ has joined the channel
[07:53] peutetre has joined the channel
[07:54] evl has joined the channel
[07:58] evl: What's the easiest way to interface with a database such as couch or sqlite through node.js? My database is mostly comprised of key => complex value, where the biggest table contains about 35k rows, fast key access would be nice
[08:00] shaver: node-redis, IMO
[08:04] evl: shaver: I'll take a look at that, what about CouchDB? A lot of people seem to think it's easier to start with
[08:04] chapel: well couchdb is great
[08:04] chapel: but it isn't for speed
[08:04] chapel: :)
[08:05] chapel: mind you, couchdb itself is fast
[08:05] chapel: but it really depends on how you connect to it
[08:05] shaver: redis is the easiest software ever
[08:05] chapel: there is that
[08:05] chapel: :)
[08:06] evl: do I need a to run a server for any of these?
[08:06] chapel: well
[08:06] chapel: for simplicities sake
[08:06] chapel: couchdb is simple if you goto couchone.com
[08:06] evl: this isn't really going to have large loads at all
[08:06] chapel: and sign up for one of their free ones
[08:06] shaver: sqlite is easy that way
[08:06] evl: it's just the tables might get pretty huge
[08:07] evl: yeah the current db is in sqlite
[08:10] fjakobs has joined the channel
[08:12] crohr has joined the channel
[08:18] RockShox: i love sqlite but if youre just storing tuples its kind of a waste
[08:21] mAritz has joined the channel
[08:22] ezmobius_ has joined the channel
[08:23] sveimac_ has joined the channel
[08:23] arlolra has joined the channel
[08:24] kolor has joined the channel
[08:24] sonnym has joined the channel
[08:25] ewdafa has joined the channel
[08:25] daglees has joined the channel
[08:26] desaiu has joined the channel
[08:27] mikedeboer has joined the channel
[08:28] chapel: evl: if you want simple, get up and go storage, check out node chaos
[08:28] chapel: it is a simple file store based solution
[08:28] chapel: really simple, works
[08:29] Gruni has joined the channel
[08:30] Fullmoon has joined the channel
[08:33] virtuo has joined the channel
[08:34] guid has joined the channel
[08:35] sechrist: has anybody written a dns server in nodejs?
[08:35] sechrist: that anybody is aware of.. anyway?
[08:36] isaqual has joined the channel
[08:36] chapel: umm, not that I know of
[08:37] chapel: though I would be interested partly
[08:37] rjack: does the API page (http://nodejs.org/docs/v0.2.6/api.html) freeze Firefox or it's me?
[08:37] chapel: never liked the old api pages
[08:37] chapel: it made chrome weird too
[08:38] pkrumins: rjack: try it and see - www.browserling.com
[08:38] pkrumins: rjack: you can load websites in real browsers on that website.
[08:38] MikhX has joined the channel
[08:38] rjack: pkrumins: nice, thanks
[08:38] pkrumins: yw
[08:38] chapel: pimping your own stuff
[08:39] pkrumins: hahaha.
[08:39] chapel: how uncool
[08:39] chapel: :P
[08:39] chapel: get back on the couch
[08:39] pkrumins: you mean how cool
[08:39] pkrumins: i am on the couch man
[08:39] chapel: it is pretty cool
[08:39] chapel: I sleep on a couch
[08:39] chapel: while my bed sits unused
[08:39] pkrumins: its not like i do it every day all the time
[08:39] pkrumins: this is actually the first time it was appropriate to suggest to use browserling
[08:39] micheil: rjack: you can also use the 0.3.0 docs, which have similarities
[08:39] pkrumins: :)
[08:42] chapel: I know pkrumins
[08:42] chapel: just giving you shit
[08:43] tlrobinson has joined the channel
[08:48] JimBastard has joined the channel
[08:49] peritus_ has joined the channel
[08:53] creationix: oh yeah, implemented just enough tar for my proof of concept https://github.com/creationix/node-tar
[08:53] sveimac has joined the channel
[08:54] creationix: now to tackle ar
[08:54] mraleph has joined the channel
[08:58] devdrinker has joined the channel
[09:00] altamic has joined the channel
[09:02] dthompson has joined the channel
[09:04] devdrinker has joined the channel
[09:05] mikeal has joined the channel
[09:07] devdrink_ has joined the channel
[09:07] evl: chapel: thanks, that will be tried :)
[09:08] teemow has joined the channel
[09:10] creationix: on second thought, I'll tackle ar tomorrow, one arcane unix file format a day is plenty
[09:12] creationix: has anyone made a zlib extension for node?
[09:13] pdelgallego has joined the channel
[09:14] peritus_ has joined the channel
[09:15] richcollins has joined the channel
[09:16] pdelgallego has joined the channel
[09:16] ryah: creationix: https://github.com/waveto/node-compress
[09:16] saschagehlich has joined the channel
[09:17] creationix: ryah: is that still active
[09:17] creationix: no update for a year according to github
[09:17] creationix: and I get compile errors when I try it
[09:18] creationix: well, it seems to compile for v0.2.5, must not be 0.3.x compat yet
[09:19] devdrinker has joined the channel
[09:20] evl: chapel: chaos looks pretty good for what I want, but where can I read up on jset/hset and that other voodoo?
[09:22] RichardJ: v8: throw SyntaxError
[09:22] v8bot: RichardJ: SyntaxError: undefined
[09:22] RichardJ: what?
[09:23] RichardJ: v8: throw new Error
[09:23] v8bot: RichardJ: Error: 
[09:23] RichardJ: v8: throw new SyntaxError
[09:23] v8bot: RichardJ: SyntaxError: 
[09:23] RichardJ: hmm, alright
[09:23] romainhuet has joined the channel
[09:24] creationix: ryah: how hard would it be to make a custom build of node with zlib bindings built-in?
[09:24] sveimac has joined the channel
[09:26] creationix: v8: (new Error).stack
[09:26] v8bot: creationix:     at IOWatcher.callback (net:471:53)
[09:26] v8bot: creationix:     at IOWatcher.callback (net:471:53)
[09:26] v8bot: creationix:     at IOWatcher.callback (net:471:53)
[09:26] v8bot: creationix:     at IOWatcher.callback (net:471:53)
[09:27] v8bot: creationix:     at IOWatcher.callback (net:471:53)
[09:27] v8bot: creationix: [Output truncated...]
[09:27] creationix: v8: (new Error).stack.split("\n").length
[09:27] v8bot: creationix: 1
[09:27] creationix: hmm
[09:27] sriley has joined the channel
[09:28] creationix: clearly I'm too tired to understand this
[09:28] creationix: g;night everyone
[09:28] creationix has left the channel
