[00:04] malkomalko has joined the channel
[00:04] jcrosby has joined the channel
[00:06] jcrosby has joined the channel
[00:07] shfx: frodenius: http://www.andyatthemovies.com/2009/11/vampax-twilight-tampons-give-me-the-chuckles/ 
[00:08] frodenius: ok this is even better http://www.reddit.com/r/movies/comments/9xugj/summarize_your_sex_life_with_a_star_wars_quote/
[00:10] frodenius: shfx: lol
[00:12] emyller has joined the channel
[00:25] cloudhead: can someone explain this to me: http://github.com/ry/node/blob/master/lib/file.js#L105 ?
[00:26] cloudhead: is it to be able to refer to the top level from inside closures?
[00:26] shfx has left the channel
[00:27] inimino: cloudhead: yes
[00:27] shfx has joined the channel
[00:27] cadorn has joined the channel
[00:27] cloudhead: inimino: is this the accepted idiom? or are there other ways to do it?
[00:27] inimino: cloudhead: 'top level' there being proto
[00:28] inimino: it's quite common, yes
[00:28] cloudhead: kk, thanks
[00:28] inimino: I'd name the variable t, but there you have it ;)
[00:29] cloudhead: : ]
[00:39] blakemizerany has joined the channel
[00:50] rbranson has joined the channel
[00:56] dnolen has joined the channel
[01:11] sudoer has joined the channel
[01:13] sr_ has joined the channel
[01:16] sr_: i am sending packet to node tcp server which looks like "\eatester\001tester\001test\001login\001\000" but there data yielded by the the "receive" event strips out the ascii stuff
[01:16] sr_: is there a way to get a "raw" packet?
[01:17] inimino: isn't that what you get normally?
[01:18] sr_: apparently not. this packet comes out as "testertestertestlogin"
[01:18] inimino: did you use setEncoding?
[01:19] sr_: yea, i've tried binary and ascii, all the same
[01:19] inimino: how are you testing the value of the string you have?
[01:19] inimino: what's the .length?
[01:20] sr_: 17 which is the same length as the packet i am sending
[01:20] sr_: huum
[01:23] jtoy has joined the channel
[01:26] jcrosby has joined the channel
[01:30] sr_: ok, looks like i am missing some js knowledge heh. data.charCodeAt does what i want, pretty much
[01:33] siong1987 has joined the channel
[01:34] inimino: sr_: looks like you might want .indexOf, as that appears to be SOH-delimited fields
[01:38] sr_: inimino, exactly. i am hacking on a icbd server. thanks :)
[01:39] sr_: icb.net, it's rather obscure and i think nobody is actually using it beside some freebsd devs. but it is clean and most importantly, fun
[01:39] inimino: :)
[01:40] sudoer has joined the channel
[01:44] Connorhd has joined the channel
[01:45] jtoy_ has joined the channel
[01:50] jtoy__ has joined the channel
[01:58] sudoer has joined the channel
[02:06] jtoy has joined the channel
[02:27] RayMorgan has joined the channel
[02:39] shfx: ygh
[02:40] shfx: its 3 AM on my watch.. 
[02:40] shfx: good night everyone ;) 
[03:09] nefariousd_ has joined the channel
[03:18] mattly has joined the channel
[03:27] mtotheikle has joined the channel
[03:29] tlockney: I am away from the office on vacation Thurs/Fri, returning Monday 12/7.
[03:29] tlockney: If you need help right away, please contact Emily Nave at emily.nave@pearson.com
[03:29] tlockney: Thanks,I am away from the office on vacation Thurs/Fri, returning Monday 12/7.
[03:29] tlockney: If you need help right away, please contact Emily Nave at emily.nave@pearson.com
[03:29] tlockney: wtf?!?
[03:29] tlockney: where the hell did that come from???
[03:31] tlockney: sorry all, appears to be something weird going on with my paste buffer
[03:34] inimino: heh
[03:34] inimino: enjoy your vacation :)
[03:44] tlockney: inimino: if only it was my vacation. that's from some random out of office email I got. 
[03:44] tlockney: which makes it that much more weird
[03:44] inimino: heh
[03:47] fictorial has joined the channel
[03:48] mtotheikle has left the channel
[03:57] yesnode has joined the channel
[03:58] sudoer has joined the channel
[04:29] soveran has joined the channel
[04:59] eddanger has joined the channel
[05:00] JimBastard has joined the channel
[05:00] JimBastard: sup party people
[05:00] JimBastard: you alive inimino
[05:01] inimino: JimBastard: yes
[05:01] malkomalko: yeeehaw
[05:01] JimBastard: hows it going
[05:01] JimBastard: ive got the session code working pretty well now
[05:01] JimBastard: http://maraksquires.com:8000/
[05:01] JimBastard: just showing them in a select and cycling through them
[05:02] JimBastard: i want to add a live data view so it actually shows the sessions in real-time
[05:02] JimBastard: im thinking maybe i should just leave that on the debugger
[05:03] inimino: console is not defined
[05:04] JimBastard: drrr just saw
[05:04] JimBastard: sorry fixed
[05:04] malkomalko: man, I'm a little drunk
[05:04] malkomalko: nice!
[05:04] JimBastard: i should be using debug.log() instead of console.log()...old habit
[05:04] JimBastard: debug.log() is available there too >.<
[05:04] inimino: nice
[05:05] JimBastard: so what you think about viewing sessions and shit in real-time
[05:05] inimino: it can be done, I suppose
[05:06] inimino: would it be useful?
[05:06] JimBastard: somewhat
[05:06] JimBastard: im already logging requests in real-time
[05:06] JimBastard: maybe just check if 'session' is defined and attempt to debug if its there
[05:08] JimBastard: taking down server
[05:09] inimino: k
[05:10] keeto has joined the channel
[05:15] JimBastard: is there any way in node to determine how many open http requests are established?
[05:17] inimino: you could increment a counter to keep track, I suppose
[05:17] JimBastard: thats what im doing now, seems lame
[05:17] JimBastard: activeRequests, openRequests
[05:17] JimBastard: or something
[05:19] inimino: hm...
[05:19] inimino: maybe you could make node do that when run in debugging mode
[05:20] JimBastard: im just making an application scope to keep track of some simple stats
[05:20] JimBastard: in one place
[05:20] JimBastard: per node.js instance
[05:20] JimBastard: its good to know how many connections / open connections you have
[05:21] JimBastard: i would think thats built in though
[05:21] inimino: probably should be
[05:27] RayMorgan has joined the channel
[05:37] aguynamedben has joined the channel
[05:38] dnolen has joined the channel
[05:40] aguynamedben has joined the channel
[05:56] dnolen has joined the channel
[05:57] ciju has joined the channel
[06:47] JoePeck has joined the channel
[06:49] onar_ has joined the channel
[07:02] cmlenz has joined the channel
[07:22] JimBastard has joined the channel
[07:24] JimBastard: sup party people
[07:25] kriskowal: this…is…embarrassing, i can't get the sample web server to work.
[07:26] kriskowal: require("sys") throws an error.
[07:26] kriskowal: Error: Cannot find module 'sys'
[07:27] frodenius: did you do make install?
[07:27] kriskowal: ah, you have to install.
[07:27] kriskowal: quaint
[07:27] kriskowal: thanks
[07:28] frodenius: np :)
[07:29] kriskowal: i don't presume it could be made to work without that requirement.
[07:31] frodenius: idk, i think the lib path is hardcoded to /usr/local/node
[07:32] frodenius: ah no it's not
[07:35] kriskowal_ has joined the channel
[07:37] frodenius: kriskowal: setting NODE_PATH env var
[07:40] JimBastard: is anyone working on any databinding for node.js
[07:40] JimBastard: so data from the client can bind to the server
[07:46] JimBastard: also, is using the file system for some things that maybe a database would normally be used for okay>
[07:46] JimBastard: lets say i needed to have 10,000 unique static html pages
[07:50] onar_: when using posix.readdir I seem to be getting the callback fired twice
[07:52] onar_: actually I take that back, it seems like my request object that I define in createServer() gets called twice although I only request once
[08:15] michaelk^ has joined the channel
[08:19] aguynamedben has joined the channel
[08:22] JimBastard: if i POST data to a node server will it appear in the request object?
[08:22] JimBastard: i cant seem to find it, just the method that does parsing
[08:28] onar_: JimBastard: the request listener should get it
[08:28] onar_: but I am having a similar issue.. when I do request.body it just returns undefined :/
[08:28] onar_: but docs says it should be there
[08:29] onar_: oh, I see it is coming in chunked.. hmm
[08:29] Nailor: up
[08:29] Nailor: *yup
[08:30] Nailor: so the "body" listener should just concatenate the chunks
[08:30] Nailor: and when then add another listener to complete, which then can parse post values out of the body
[08:31] onar_: yeah
[08:31] onar_: makes sense.. although a little too much code for a simple operation
[08:31] onar_: isn't there a helper method for this?
[08:32] JimBastard: request.??
[08:32] JimBastard: request.post?
[08:32] JimBastard: request.paramName?
[08:32] Nailor: onar_: nope
[08:32] JimBastard: doesnt seem to appear, maybe my request is malformed
[08:33] Nailor: JimBastard: there shouldn't be any of those. The POST data is in body
[08:34] Nailor: onar_: I think this is more of a design decission, the post data should be handled by the application, not the by the underlying server (ie. node)
[08:34] onar_: I see
[08:35] onar_: is there a way to turn off chunked?
[08:35] Nailor: In receiving? No, since then the node would need to buffer the data
[08:42] JimBastard: Connorhd you alive
[08:44] Nailor: onar_: it's fairly easy to write te buffering yourself: var body; req.addListener('body', function(chunk) { body += chunk });
[08:44] onar_: yes, I did that already
[08:44] onar_: already ecstatic about node.js btw
[08:44] onar_: this is seriously cool stuff
[08:46] JimBastard: indeed
[09:02] cmlenz has joined the channel
[09:14] johan-s has joined the channel
[09:36] Connorhd: JimBastard, hi
[09:38] JimBastard: hello Connorhd, was having an issue trying to figure out something in the node_debug
[09:38] JimBastard: i think it might not be solvable
[09:39] Connorhd: sounds interesting
[09:39] JimBastard: i wanted to pass along some information with the server-side debug.log() call so i could identify the session that was calling the statement. (session being a variable scoped in the same block where the debug.log() was being called)
[09:39] JimBastard: its more of a sugar syntax problem
[09:39] JimBastard: i was thinking about taking it off a seperate port
[09:42] Connorhd: anything you pass to debug.log should work
[09:42] Connorhd: as long as its in the scope when you call debug.log afaik
[09:45] JimBastard: yeah i know
[09:45] JimBastard: it would be way more fun if i didnt have to pass that
[09:46] JimBastard: im trying to visualize grouping requests based on session
[09:46] JimBastard: so you could view debug statements from multiple requests and know what belongs where
[09:53] Connorhd: I don't quite see what you mean
[09:53] Connorhd: oh, right, so it groups by the session that caused the debug.log?
[09:56] JimBastard: yes
[09:56] JimBastard: so i could track debugging for one user / session if i needed to
[09:57] JimBastard: i have a session object on the application server already
[09:58] webben has joined the channel
[09:59] pdelgallego has joined the channel
[10:18] Connorhd: maybe add a session.log that does a special kind of debug.log?
[10:44] olivvv has joined the channel
[11:14] giorgio_v has joined the channel
[11:20] poppers has joined the channel
[11:23] malkomalko has joined the channel
[11:28] poppers: trying to compile on fedora
[11:29] poppers: Checking for program g++,c++             : not found
[11:29] poppers: Checking for program icpc                : not found
[11:29] poppers: Checking for program c++                 : not found
[11:29] poppers: Checking for program CC                  : not found
[11:29] webben has joined the channel
[11:30] poppers: Checking for library execinfo            : not found
[11:30] poppers: Checking for gnutls >= 2.5.0             : fail
[11:30] poppers: is this stuff needed?
[11:31] Nailor: Yes, generally you need a c++ compiler for compiling c++.
[11:32] poppers: damn! why is it not part for fedora core 8
[11:32] Nailor: you can probably install it with yum
[11:32] Nailor: or whatever tool you're using
[11:33] poppers: k i'll try
[11:36] poppers: how about the library execinfo thing?
[11:51] poppers: so much stuff is missing from my server!
[11:52] poppers: node.js installation is a mission in itselg
[11:52] poppers: meh
[11:52] poppers: Checking for epoll_ctl                   : fail
[11:52] poppers: Checking for function kqueue             : not found
[11:52] poppers: Checking for function port_create        : not found
[11:53] poppers: Has anyone managed to get node.js installed on amazon EC2 easily?
[11:59] mediacoder: poppers: seems so. you might want to check elliottcable 's AMIS
[12:02] poppers: ahh
[12:02] poppers: u know the name of the AMIS or how to find it?
[12:03] mediacoder: elliottcable: where are your AMIS? :-)
[12:04] poppers: haha
[12:14] Achilles has joined the channel
[12:47] soveran has joined the channel
[12:49] Sembianc1 has joined the channel
[12:51] emyller has joined the channel
[13:02] fictorial has joined the channel
[13:04] rolfb has joined the channel
[13:10] pmuellr has joined the channel
[13:27] malkomalko has joined the channel
[13:29] malkomalko: top of the morning
[14:04] malkomalko_ has joined the channel
[14:10] JoePeck has joined the channel
[14:22] Biscuits has joined the channel
[14:54] poppers: elliot baby where u at?
[14:59] emyller has joined the channel
[14:59] nefD has joined the channel
[15:07] cloudhead has joined the channel
[15:29] dims has joined the channel
[15:36] aguynamedben has joined the channel
[15:42] bentomas has joined the channel
[15:54] onar_ has joined the channel
[15:57] onar_ has joined the channel
[16:11] johan-s has joined the channel
[16:16] shfx has joined the channel
[16:41] saikko has joined the channel
[16:45] binary42 has joined the channel
[16:47] sudoer has joined the channel
[16:47] soveran has joined the channel
[16:52] ghotli has joined the channel
[17:01] RayMorgan has joined the channel
[17:01] postfuturist has joined the channel
[17:07] malkomalko_ has joined the channel
[17:10] onar_ has joined the channel
[17:13] pmuellr has joined the channel
[17:15] michaelk^_ has joined the channel
[17:17] onar has joined the channel
[17:26] webben has joined the channel
[17:26] jtoy has joined the channel
[17:33] aguynamedben has joined the channel
[17:37] sudoer has joined the channel
[17:38] eddanger has joined the channel
[17:39] the_undefined has joined the channel
[17:42] emyller_ has joined the channel
[17:57] bobaman has joined the channel
[18:01] dnolen has joined the channel
[18:09] richtaur has joined the channel
[18:11] pdelgallego has joined the channel
[18:11] sixtus42 has joined the channel
[18:20] ryah: 82 people. huh.
[18:21] rolfb: i'm just peeking
[18:27] Biscuits: Hmm, anyone took a look at fab yet ?
[18:27] inimino: Biscuits: yeah there was some discussion in here a couple days ago or so, check the logs
[18:28] Biscuits: Just wondering, what was the proper way to get the original req and response objects? can
[18:28] ryah: !logs
[18:32] Biscuits: Hmm, seem it's a bug he's working on :/
[18:33] mediacoder: Biscuits: yea, you still should be able to get them
[18:33] ryah: okay - got to put all of these patches in!
[18:34] Biscuits: What kind of patches did you get ?
[18:34] wkinney has joined the channel
[18:34] mediacoder: hehe, dont wanna know how your inbox looks like :-) (@ ryah )
[18:37] isaacs has joined the channel
[18:51] inimino: w00t!
[18:52] malkomalko: :)
[19:16] cmlenz has joined the channel
[19:22] giorgio_v has joined the channel
[19:23] the_undefined__ has joined the channel
[19:38] the_undefined__: ryah: hey, you're back in cologne right?
[19:38] the_undefined__: ryah: let me know if I can be of any help with integrating some patches
[19:45] sixtus42 has joined the channel
[19:51] sudoer has joined the channel
[20:06] ghotli has left the channel
[20:09] kriskowal has joined the channel
[20:10] jcrosby has joined the channel
[20:30] emyller has joined the channel
[20:32] sudoer has joined the channel
[20:33] jtoy has joined the channel
[20:37] jed has joined the channel
[20:47] the_undefined__: hey
[20:47] the_undefined__: does anybody here know what good encryption algorithms are implemented in nodejs?
[20:48] inimino: as modules?
[20:49] inimino: someone had a crypto module in progress I think
[20:50] Wes--: the_undefined__: you should be able to wrap this guy's stuff up as commonjs modules easily: http://pajhome.org.uk/crypt/
[20:50] jed: http://github.com/waveto/node-crypto
[20:50] the_undefined__: jed: yeah, I saw node crypto
[20:50] Wes--: specifically his hash stuff
[20:50] the_undefined__: I guess my real problem is that I'm a bit at loss what to use
[20:50] jed: yeah.
[20:50] Wes--: what sort of crypto stuff are you looking for?
[20:50] the_undefined__: I'm encrypting JSON with passwords to other people's s3 accounts in them
[20:51] jed: this stuff seems like it'd be a good fit for core.
[20:51] jed: i did this myself:
[20:51] jed: http://gist.github.com/239144
[20:51] jed: (did what Wes-- suggested)
[20:51] the_undefined__: jed: hex_hmac_sha1 !! AWESOME, exactly what I needed :)
[20:51] the_undefined__: (for something else)
[20:51] jed: the_undefined__: nice nice.
[20:51] mediacoder: the_undefined__: hmac .. aes
[20:52] the_undefined__: mediacoder: hmac is signatures
[20:52] the_undefined__: I need to be able to decryupt
[20:52] jed: seems like there's enough demand for this stuff that it should be deeper in the stack.
[20:52] the_undefined__: AES has come up a few times
[20:52] the_undefined__: in my search
[20:52] mediacoder: yea, its in node-crypto
[20:52] mediacoder: i also have a js implementation, if in need :-)
[20:52] mediacoder: (just stolen somehwere)
[20:52] the_undefined__: hehe
[20:53] the_undefined__: I'm a bit worried node-crypto might not get updated if node changes
[20:53] the_undefined__: and I usually build against node:HEAD
[20:53] the_undefined__: :)
[20:54] mediacoder: hm, isnt this waveto committing much recently? :-)
[20:54] mediacoder: tls is his, crypto stuff..guess there is more to come
[20:54] rtomayko has joined the channel
[20:54] the_undefined__: mediacoder: oh, rhys did that?
[20:54] mediacoder: yea
[20:55] the_undefined__: huh, ok I think that guy is solid like hell :)
[20:55] mediacoder: hehe
[20:56] the_undefined__: ok, I think I'll give it a shot now
[20:56] inimino has joined the channel
[20:56] mediacoder: the_undefined__: i think Biscuits might be also your guy.. he patched the node-crypto and added the cipher support
[20:56] mediacoder: guess he know more ebout encryption :-)
[20:57] mediacoder: (than me of course :-P)
[21:01] the_undefined__: oh nice
[21:15] rolfb has joined the channel
[21:35] gwoo has joined the channel
[22:07] ciju has joined the channel
[22:08] naturalethic has joined the channel
[22:10] elliottcable: mediacoder: I haven’t released any public AMIs; I’m still in beta. However, you can list my beta releases manually.
[22:11] elliottcable: mediacoder: http://github.com/elliottcable/ArchLinux-AMIs/ has instructions
[22:11] elliottcable: mediacoder: it boils down to ec2-describe-images --show-empty-fields --owner "316177411691" --executable-by all | less -S
[22:11] mediacoder: elliottcable: yea, sorry, mentioning your name :-) i just read that you were playing with AMIs and node and somone asked :-)
[22:12] elliottcable: no prob.
[22:12] mediacoder: god damned social web :-)
[22:12] elliottcable: have been internetless
[22:13] elliottcable: mediacoder: social web? what?
[22:13] mediacoder: it was poppers who had problems with EC2
[22:13] elliottcable: so, yeah, I’m re-thinking my acquire system again.
[22:14] elliottcable: For one thing, I’m not going to call it acquire, seems like a silly name, and too ambiguous with require.
[22:14] mediacoder: elliottcable: just kdding..i got that infoo on twitter iirc (that youve been messign around with amis)
[22:14] elliottcable: Going to go with `get` instead, though that may conflict with some of the silly Ruby-spawned web DSLs.
[22:14] elliottcable: I removed a lot of the API complexity I had suggested, am trying to keep it light this time.
[22:14] elliottcable: I’m also going to take a bit from python, and allow importing; also going to reverse that and allow exporting.
[22:15] inimino: exporting?
[22:15] elliottcable: mmhmm
[22:15] elliottcable: shipping values out to the file, as opposed to shipping them *in* from the file.
[22:16] elliottcable: i.e. `get('something/blah').import('blah', this).export({jess: jess})` or something.
[22:17] inimino: hm
[22:17] inimino: seems odd
[22:17] elliottcable: yes, it does
[22:17] elliottcable: but it’s also necessary
[22:17] elliottcable: I didn’t realize until yesterday, when I began *actually trying to write a modular library in JS(
[22:18] elliottcable: but we’re completely missing one of the most basic things that makes modular libraries possible in Ruby (where I come from), and I really couldn’t figure out another way around it.
[22:18] inimino: hm...
[22:18] elliottcable: Specifically, constants. If I have my Foo library in Ruby, in foo/bar.js, I have access to Foo, the value later defined in foo.js
[22:18] elliottcable: but we don’t have constants, or a global constant namespace.
[22:18] elliottcable: ANything we want to share with a file we get, we have to explicitly hand to that file
[22:19] erikcorry|away: Seems clean to me.
[22:19] elliottcable: so, for instance, one library file of mine, jess.js, brings in jess/transformation.js (a submodule ofthe library)
[22:20] elliottcable: but the transformation object needs access to my root `jess` object. Hence, I would `var transformation = get('jess/transformation.js').export({jess: jess})`
[22:20] elliottcable: or something of that sort
[22:20] erikcorry: var transformation = require("./transformation")
[22:20] erikcorry: transformation.setJess(jess)
[22:21] inimino: hm, interesting
[22:21] inimino: yes
[22:21] elliottcable: erikcorry: wouldn’t work, need jess at the rootlevel of that file. In this particualr example. In general, we need a solution to the ‘lack of a global namespace to store important objects in’ problem, which is solved by constants in Ruby
[22:22] inimino: but that supports more of a module-as-bag-of-functions model which elliottcable hates
[22:22] elliottcable: rather, we do have a global namespace, but I think it’s best we completely ignore that, and instead come up with an alternative solution
[22:22] elliottcable: inimino: oh, I fully support that as well. I just want to have the option to make my objects more useful
[22:22] elliottcable: inimino: on that note, that’s what import() is for
[22:23] elliottcable: `get('utils').import('usefulFunction', 'otherFunction', this)`
[22:23] elliottcable: equivalent to Python’s `import usefulFunction, otherFunction from utils`
[22:23] elliottcable: or whatever (/me doesn’t write python much… yet!)
[22:24] nefD: whee! this node-router script creationix wrote is pretty excellent
[22:25] inimino: s/hates/finds unfulfilling/ ?
[22:26] elliottcable: that works (-:
[22:27] inimino: from utils import foo, bar
[22:27] elliottcable: yah dat sry d-:
[22:28] aconran has joined the channel
[22:28] inimino: by the grace of Guido you are forgiven
[22:30] elliottcable: swho? what?
[22:31] xantus has joined the channel
[22:31] inimino: Guido van Rossum
[22:32] elliottcable: cloudhead: you get all that?
[22:33] nefD: hrmm.. ok, so, noobish question for anyone willing to enlighten me.. what sort of gains could I expect were I to use a node server built as a web service provider for ajax interaction versus a standard non-persistant, on-call php script? faster response time? decreased resource usage? connection persistance? also, is long polling the main method of pushing data to a client over time?
[22:35] inimino: nefD: yes, yes, yes, and primarily, but see also Web Sockets
[22:35] erikcorry: elliottcable: What do you mean you need jess at the root level.
[22:35] inimino: (and other Comet techniques)
[22:35] erikcorry: The implementation of the transformation file can have a var jess; at the top level
[22:35] elliottcable: that���s a bug, in this particular instance, but my point stands
[22:35] erikcorry: and the setJess function can assign to it.
[22:35] nefD: gotcha, thanks for the reply.. i've checked into web sockets, but my understanding is that they aren't widely supported as of yet
[22:35] xantus: typical php setups are mod_php + apache.  apache does not scale wrt long polling, etc
[22:36] nefD: yea, the mod_php + apache overhead is one big advantage i'd thought of
[22:36] inimino: nefD: they are not, but things like multipart etc are on some browsers, all of this requires browser detection
[22:37] xantus: disadvantage? :)
[22:37] nefD: in the system i'm tinkering with, i'm still using php worker scripts to perform mysql interaction, but php cli is at least forgoing the apache overhead
[22:37] erikcorry: kaazing.org have web sockets for all browsers.
[22:37] erikcorry: I haven't tried it, but I do wear their T-shirt on occasion.
[22:37] nefD: heh
[22:37] mediacoder: hehe
[22:38] nefD: xantus: Actually, maybe I misunderstood what you meant.. skipping mod_php + apache would be a disadvantage?
[22:39] mediacoder: no need for php or apache :-)
[22:39] nefD: well, currently my method for interacting with a mysql db is through php worker scripts which communicate to/from node via STDIN and STDOUT
[22:39] inimino: "the world's first enterprise-ready implementation " ... of a stardand that's still being hashed out.  Hilarious.
[22:40] inimino: (that's from kaazing.org)
[22:40] elliottcable: yah saw
[22:40] mediacoder: well, this is just due to a async mysql lib for node :-)
[22:40] elliottcable: pretty lawl
[22:40] mediacoder: *lack
[22:40] nefD: true.. and unfortunately, I don't think I have the chops to make one, myself :P
[22:40] nefD: I'm guessing it'd have to be written in C++?
[22:41] inimino: isn't there one?
[22:41] inimino: ACTION doesn't use MySQL
[22:41] xantus: nefD: as in using it would leave you at a disadvantage
[22:41] mediacoder: inimino: not sure.. i know ry said that at some point he might be interested in making one
[22:41] inimino: oh, yeah, that's right
[22:42] nefD: xantus:  Ahh I gotcha.. my idea was to forgo apache all together by running php scripts from the CLI
[22:42] xantus: haha, yeah, kaazing
[22:42] inimino: mediacoder: I selfishly hope he doesn't spend much time on that just yet ;)
[22:42] xantus: I should introduce myself
[22:42] mediacoder: inimino: true :-) 
[22:42] xantus: I'm David Davis, co-author of the bayeux protocol and co-founder of Cometd
[22:43] inimino: xantus: ah, welcome
[22:43] xantus: and I work for extjs
[22:43] elliottcable: who who, co-author of the what protocol, and co-founder of what?
[22:43] xantus: elliottcable: lol
[22:43] elliottcable: ah, extjs, something I’ve heard of.
[22:43] elliottcable: Somebody else I know was recently hired on by your guys… can’t remember who, though
[22:43] elliottcable: ACTION has a pretty fucking bad memory
[22:43] xantus: um, the word comet was coined by alex russell, who I started cometd with
[22:43] inimino: bayeux is an early Comet protocol
[22:44] nefD: oh wow, cool.. nice to meetcha
[22:44] elliottcable: heh
[22:44] nefD: I messed with cometd a bit when I was big into Dojo
[22:44] elliottcable: xantus: anyway, I was just poking fun at you. I generally don’t like people who try to throw their fame around in technical discussions, but you seem cool.
[22:45] mediacoder: hehe, nice to see where people coming from, that are interested in node
[22:45] inimino: I appreciate knowing who has worked on what :-)
[22:45] elliottcable: ACTION is just a bitter curmedgon
[22:45] elliottcable: … who apparently can’t spell
[22:45] inimino: curmudgeon
[22:46] xantus: ;)
[22:47] xantus: any Perl people here?
[22:47] erikcorry: Like I'd admit it if I was?
[22:47] elliottcable: ahahah
[22:48] erikcorry: I was young and needed the money..
[22:48] elliottcable: xantus: haven’t we seen you in here before? Your nick is familiar, and I’m gonna guess you don’t hang out in Ruby rooms very much…
[22:48] elliottcable: erikcorry: have you been tested?
[22:48] xantus: its ok, good perl engineers are proud to say it
[22:48] inimino: haha
[22:49] xantus: I don't hang out on freenode much
[22:49] erikcorry: I've never been called a good perl engineer!
[22:49] xantus: and my nick is registered, for the past 10 years
[22:49] xantus: I think the server would force a nick change on anyone else
[22:49] elliottcable: you have to tell it to
[22:50] elliottcable: not sure if you bothered, I didn’t.
[22:50] elliottcable: it’s like protected mode or something. /msg nickserv help
[22:52] inimino: my logs don't show that nick since I joined the channel on Oct 9
[22:53] inimino: (until just now, I should say)
[22:53] elliottcable: not in this room, I suppose. Or maybe I’m imagining.
[22:53] elliottcable: ACTION shrugs
[22:53] inimino: elliottcable: so are you writing up your new acquire/get stuff?
[22:54] elliottcable: yep
[22:54] elliottcable: atm
[22:55] inimino: cool
[22:56] erikcorry: xantus: http://www.tiobe.com/index.php/paperinfo/tpci/Perl.html
[22:57] erikcorry: http://www.tiobe.com/index.php/paperinfo/tpci/JavaScript.html
[22:57] elliottcable: inimino: you got a suggestion or summat?
[22:58] inimino: elliottcable: no, just curious to see where it goes
[22:58] elliottcable: k
[22:58] elliottcable: coo’
[22:58] inimino: elliottcable: so far I think I prefer require() but .export() is interesting, and I'm glad there's some competition
[23:00] elliottcable: ACTION sads
[23:02] inimino: ACTION will look forward to reading about it
[23:03] orlandov: ugh, so javascript is apparently horrible at dealing with binary data?
[23:03] onar_ has joined the channel
[23:03] orlandov: even string comparisons :(
[23:05] inimino: orlandov: JavaScript doesn't support binary data properly yet
[23:05] orlandov: yet... is that something that's going to be improved soon(ish)?
[23:05] inimino: string comparisons should be fine though, they consider bitwise equality only
[23:06] inimino: it's being discussed, yes
[23:06] jed has joined the channel
[23:06] inimino: orlandov: look at the binary stuff on commonjs.org
[23:07] orlandov: i swear these two strings are equal (doing a diff of their respective xxd outputs yields no diff)
[23:07] orlandov: kk
[23:08] inimino: (if they really are equal that would be a bug)
[23:09] ciju_ has joined the channel
[23:10] elliottcable: hm
[23:10] elliottcable: hm hm hm
[23:10] elliottcable: what do you think about just calling it `from()`?
[23:11] elliottcable: `var foo = from('foo')`, `var bar = from.file('bar.js')`, `var gaz = from.package('something/gaz').import('property', this)`?
[23:11] inimino: I like it better than get
[23:11] elliottcable: ACTION is abit obsessive about his APIs
[23:11] elliottcable: inimino: and compared to `acquire()`?
[23:11] inimino: I liked acquire, but maybe I just got used to it
[23:12] inimino: something seldom-used should not have a too-short name
[23:12] orlandov: i'm gonna see if i can produce a failing test case for this...
[23:12] inimino: require or acquire or import are about the right length
[23:13] inimino: 'get' is too short
[23:13] elliottcable: I’m just a little worried that `from()` has a bit unsemantic name. It makes a great little DSL in JS (from package import this, hah!), but…
[23:13] elliottcable: wheras I had chosen `get()` yesterday, because it’s the same semantic meaning as `acquire(0`, but less ambiguous with `require()`
[23:14] inimino: I don't see any ambiguity there
[23:16] elliottcable: hahaha
[23:16] elliottcable: best bit: it’s all irrelevant!
[23:16] elliottcable: `var acquire = require('from');`
[23:16] elliottcable: there ya go. d-:
[23:16] elliottcable: ACTION can’t believe he *just* realized that
[23:16] inimino: heh
[23:17] naturalethic_ has joined the channel
[23:20] elliottcable: oh, hey, I just realized
[23:21] elliottcable: `var foo = from.file('foo').import();` is functionally equivalent to `var foo = require('foo');`, because a new object will be returned with all of the properties of the object returned by the from-file
[23:22] elliottcable: which is the same effect as passing it an exports object, and expecting it to fill that object will properties
[23:30] isaacs_ has joined the channel
[23:32] isaacs has joined the channel
[23:35] isaacs has joined the channel
[23:50] isaacs_ has joined the channel
[23:50] cloudhead has joined the channel
