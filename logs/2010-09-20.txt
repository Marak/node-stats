[00:00] Tim_Smart: ryah: So the new suggestion for using non-js as modules would be to over-ride the compile() function?
[00:00] ryah: Tim_Smart: hm - not sure
[00:00] ryah: Tim_Smart: well, let's think about it
[00:00] ryah: the hook in the module stuff is kinda annoying
[00:00] ryah: there's probably an easier way for you all to hook in
[00:00] Tim_Smart: .compile = function(stuff, ..) { doStuff(); old_compile.call(...); };
[00:00] ryah: yeah, for exmple
[00:01] muk_mb: bah, both the redis orm's are backed by the non-working redis client
[00:01] ryah: Tim_Smart: that puts the complication on your end
[00:01] ryah: which i like :)
[00:01] Tim_Smart: But as long as compile() accepts ecmascript source (not filenames)
[00:01] ryah: i always go through that code and go "huh - what is this?"
[00:01] ryah: then i have to remember..
[00:02] sstephenson: I'm using it in an application to require ejs templates as modules
[00:02] ryah: Tim_Smart: okay
[00:03] ryah: someone needs to do a new API for process.binding('evals')
[00:03] Tim_Smart: ryah: Because you wouldn't devs to completely re-write the stock compilie() function just to patch in something small.
[00:03] sstephenson: wouldn't require still need to know to look for the other extensions?
[00:05] Tim_Smart: ryah: Well if I come up with a decent alternative, I'll send you a patch.
[00:05] Anti-X: sveimac: pong
[00:06] ryah: sstephenson: yeah -him
[00:06] ryah: s/i//
[00:06] pbradek has joined the channel
[00:09] pbradek: what version of v8 should one be using with the node.js 0.2.2?
[00:10] prettyrobots has joined the channel
[00:10] asfw has joined the channel
[00:12] Validatorian: I just installed node from http://github.com/ry/node and it says the version is 0.2.0 -- shouldn't it be the latest?
[00:13] NemesisD has joined the channel
[00:13] ryah: pbradek: 
[00:13] ryah: > process.versions.v8
[00:13] ryah: '2.4.4'
[00:13] asfw: says 0.2.0 for me node --version
[00:13] pbradek: i see 0.2.2 here http://nodejs.org/#download
[00:13] Validatorian: yea- I was expecting 0.2.2
[00:14] salieri: i used the github
[00:14] Tim_Smart: Latest master is using an old version that is all.
[00:14] salieri: ah
[00:14] Validatorian: is there a repo that will always contain the latest code?
[00:14] muk_mb: what should my npmrc look like to install things into a local directory?
[00:14] Tim_Smart: Validatorian: master does contain the latest code.
[00:14] Tim_Smart: Validatorian: The version number just hasn't been updated/
[00:15] Validatorian: ah, alright
[00:15] Validatorian: thanks Tim_Smart 
[00:15] ryah: > process.versions
[00:15] ryah: { node: '0.2.0'
[00:15] ryah: , v8: '2.4.4'
[00:15] ryah: , ares: '1.7.3'
[00:15] ryah: , ev: '3.9'
[00:15] ryah: }
[00:15] ryah: well - node's version is wrongish
[00:15] ryah: :)
[00:15] pbradek: so for v8 should we just be using trunk which is 2.4.4, or v8 2.3.8 as that is what is see in a nodejs changelog  "upgraded to v8 2.3.8"
[00:16] pbradek: or does it matter
[00:16] JimBastard: did SubStack ever reappear
[00:16] ryah: i guess we should change that to 3.0.0-pre
[00:16] ryah: or something
[00:16] ryah: er
[00:16] ryah: 0.3.0-pre
[00:18] benburkert has joined the channel
[00:19] muk_mb: I seriously don't see where the syntax for npmrc is. Where is it?
[00:19] aho has joined the channel
[00:20] benburkert has joined the channel
[00:20] bpot has joined the channel
[00:20] muk_mb: nvm, got it working
[00:20] jpld has joined the channel
[00:22] CIA-77: node: 03Ryan Dahl 07master * r354150f 10/ src/node_version.h : Tag release versions in 'process.version' - http://bit.ly/9j0Xnz
[00:22] blaines has joined the channel
[00:22] lachlanhardy has joined the channel
[00:23] Nietecht: Anyone got experience with using felixge's node-mysql?
[00:23] NemesisD: how is assert.throws supposed to work? i pass a string as the second arg for the error text and it complains it was "expecting a function in instanceof check"
[00:25] matschaffer has joined the channel
[00:25] lhardy has joined the channel
[00:26] muk_mb: mjr_: where's the redis info function?
[00:27] ehaas has joined the channel
[00:27] voodootikigod__ has joined the channel
[00:29] wilmoore_ has joined the channel
[00:29] sugardave has joined the channel
[00:29] muk_mb: oh nevermind
[00:29] derferman has joined the channel
[00:30] JimBastard: http://localhost:8080/sys/puts?a=Hello%20World
[00:30] JimBastard: :-)
[00:31] JimBastard: http://localhost:8080/fs/writeFile?filename=foo.txt&content=lol&enc=binary&fn=function(err,rsp){console.log('lol%20file%20created');}
[00:31] JimBastard: :-D
[00:31] meatmanek: hoo boy
[00:31] wilmoore_ has joined the channel
[00:33] muk_mb: is redis not the storage system to use? hmm
[00:35] _numbers: how can i turn a json string into an oject
[00:35] ehaas: JSON.parse(string)
[00:36] JimBastard: so yeah, does anyone wanna check this out?
[00:36] JimBastard: http://github.com/marak/webservice.js
[00:36] JimBastard: turns node.js modules into webservices 
[00:36] JimBastard: ryah? lol
[00:41] sveisvei has joined the channel
[00:43] ehaas has joined the channel
[00:43] JimBastard: _announcer seems to hate me now
[00:43] muk_mb: with express, do I need a style.css -and- style.less in my public/stylesheets?
[00:50] muk_mb: oh ok, I get it
[00:50] ryah: JimBastard: ?
[00:51] JimBastard: ryah: you wanna peep this little project? http://github.com/marak/webservice.js . turns node modules into webservices
[00:51] JimBastard: pretty simple code for now
[00:52] _numbers: thx ehass
[00:52] _numbers has left the channel
[00:52] JimBastard: i think this might be a nice pattern for building web-services. you just create your modules and then you can expose them if you want
[00:52] JimBastard: you can also create new modules that only export certain methods (that you want public)
[00:52] JimBastard: and require your core business logic (which you dont want public)
[00:54] prettyrobots has joined the channel
[00:54] mjr_: muk_mb: does redis client.info() not work for you?
[00:54] muk_mb: mjr_: Yeah turns out I was doing a few things wrong, haha
[00:54] muk_mb: fixed though
[00:54] mjr_: cool
[00:57] muk_mb: redis.client.info(redis.print); works just fine
[00:57] muk_mb: errr, redis client.info(redis.print);
[00:58] Tim_Smart: ryah: I think I have an idea that should make the module system a bit more sane...
[00:58] Tim_Smart: Well, some code rather.
[01:04] Nohryb has joined the channel
[01:04] f00li5h has joined the channel
[01:05] gerred has joined the channel
[01:06] chiragrules has joined the channel
[01:07] jacobolu_ has joined the channel
[01:07] a_meteorite has joined the channel
[01:08] a_meteorite has joined the channel
[01:13] chrisdickinson has joined the channel
[01:13] ekidd has joined the channel
[01:13] c4milo has joined the channel
[01:13] drudge has joined the channel
[01:17] eisd has joined the channel
[01:19] jamescarr has joined the channel
[01:21] digitalsatori has joined the channel
[01:21] zhesto has joined the channel
[01:28] manveru has joined the channel
[01:28] manveru: heya
[01:28] manveru: how do i check whether something == {}
[01:31] jashkenas: manveru: that's a good question... figuring out if something is a vanilla object is actually a little tricky.  Are we assuming that it's an object literal to start with, or can it be anything?
[01:31] jashkenas: If you can assume it's an object literal, and just want to check if it's empty, you can:    !Object.keys(object).length
[01:32] manveru: it could be anything...
[01:32] manveru: well, usually string, but sometimes {}
[01:32] langworthy has joined the channel
[01:32] manveru: and i just need to filter those out
[01:32] manveru: so i guess i could check typeof instead
[01:32] jamescarr: man
[01:33] manveru: but everytime i use typeof i feel dirty :P
[01:33] aho has joined the channel
[01:33] NemesisD: anyone have any ideas about stubbing filesystem methods in tests? one of my modules reads from a file, i'd like to intercept that readFileSync call and return some string
[01:34] jashkenas: manveru: I can't think of anything without explicitly blacklisting things it can't be.
[01:34] jashkenas: typeof doesn't help you much here -- there are a ton of things that are typeof object.
[01:34] manveru: heh
[01:35] jashkenas: !Object.keys(object).length && !('length' in object)    gets you pretty close.
[01:37] jashkenas: that should knock out empty strings and arrays...
[01:37] rcy has joined the channel
[01:44] bradleymeck1: mmmm Object.getPrototypeOf(o)===Object.prototype && Object.getOwnPropertyNames(o).length === 0
[01:44] bradleymeck1: i cant really think of what that wouldnt cover
[01:45] bradleymeck1: well need to check typeof o === "object" first
[01:45] danielzilla has joined the channel
[01:46] noahcampbell has joined the channel
[01:46] dilvie has joined the channel
[01:47] genexp has joined the channel
[01:47] sahazel has joined the channel
[01:49] mrbrdo has joined the channel
[01:49] mrbrdo: anyone here use socket.io?
[01:49] rtomayko has joined the channel
[01:51] jamescarr_ has joined the channel
[01:52] Tim_Smart: ryah: http://github.com/Tim-Smart/node/commit/b87686bc8d81c6e4fdb38264eae7b1229575568b.patch
[01:52] jamescarr has joined the channel
[01:52] sudoer has joined the channel
[01:52] Tim_Smart: isaacs[away]: ---^
[01:53] saikat has joined the channel
[01:54] nornagon has left the channel
[01:57] voodootikigod__: ryah: you around
[01:58] voodootikigod__: trying to figure out IOWatcher
[01:58] voodootikigod__: it keeps eventing, but never reads
[01:59] voodootikigod__: if anyone can help find the issue wiht this
[01:59] voodootikigod__: http://github.com/voodootikigod/node-serialport/blob/master/serialport.js#L70
[01:59] voodootikigod__: would love the support
[02:00] jesusabdullah: serial port? That sounds awesome!
[02:00] jesusabdullah: I'd help, but I have no idea :S
[02:02] voodootikigod__: thanks
[02:02] voodootikigod__: its hte last piece i need
[02:02] voodootikigod__: then its done!
[02:03] saikat has joined the channel
[02:05] voodootikigod__: join #node.js-dev
[02:05] mephux has joined the channel
[02:05] jesusabdullah: \join #node.js-dev
[02:05] jesusabdullah: er
[02:05] jesusabdullah: Sorry, LaTeX-ing
[02:05] saikat has joined the channel
[02:06] aho: dav glass' yui3+node talk was excellent :)
[02:06] aho: 251mb http://yui.zenfs.com/theater/glass-node-hd.mov
[02:09] jesusabdullah: downlording
[02:10] jamescarr: res.send(JSON.stringify(obj), {'Content-Type':'application.json'}) gets annoyingly repetitive
[02:10] jamescarr: wish I could leave the JSON.stringify out
[02:11] bpadalino: could you prototype a new method for the response object to be sendJSON and just use that ?
[02:11] jesusabdullah: Sounds like a good strat to me :)
[02:12] bpadalino: i'm starting to get this stuff! it's scary :(
[02:14] jakehow has joined the channel
[02:19] dilvie: bpadalino: Yes we can.
[02:19] bpadalino: neato
[02:20] CrabDude has joined the channel
[02:21] benburkert has joined the channel
[02:21] isaacs[away]: anyone on the node-dev list noticed that splitting off has led to a flurry of patches?
[02:22] dilvie: isaacs: I'm not on the list. );
[02:22] dilvie: ACTION is missing the party
[02:24] bpadalino: what splitting off ?
[02:24] halfhalo: who died?
[02:24] isaacs: dilvie, bpadalino: ry announced it a while back
[02:25] matschaffer has joined the channel
[02:25] bpadalino: got a link to said announcement ?
[02:27] eisd has left the channel
[02:27] isaacs: bpadalino: http://groups.google.com/group/nodejs/browse_thread/thread/2def722a5a78ad41/
[02:28] bpadalino: thanks very much
[02:29] bpadalino: oh i see .. interesting ..
[02:29] Aria has joined the channel
[02:31] bpadalino: very nice - it's probably a good split
[02:32] Tim_Smart has joined the channel
[02:33] jbenesch has joined the channel
[02:34] CrabDude has joined the channel
[02:35] kjy112 has joined the channel
[02:36] _CrabDude has joined the channel
[02:37] NemesisD: any nodeunit users in? what is the point of test.expect()? why would you want to assert how many tests you had
[02:42] sstephenson: NemesisD: you need it when testing asynchronous code
[02:42] sstephenson: otherwise you can't be sure assertions in async callbacks are ever made
[02:44] bpadalino: is there anything that actually looks at code coverage ?
[02:44] Aria has left the channel
[02:44] Aria has joined the channel
[02:47] amuck has joined the channel
[02:48] Tim_Smart: bpadalino: Yup. Expresso is bundled with jscoverage
[02:49] bpadalino: ah interesting
[02:49] sirevanhaas has joined the channel
[02:49] bpadalino: how does it figure out which parts of an if statement have been exercised ?
[02:50] ivong has joined the channel
[02:50] Tim_Smart: It modifies your source tree, and creates a new library to test against.
[02:50] paulwe has joined the channel
[02:51] bpadalino: interesting
[02:52] derferman has joined the channel
[02:55] Me1000 has joined the channel
[02:57] NemesisD: sstephenson: oh i see.. ive got another question: how do i get calls to assert to count towards that expectation? the "test" context only has a few methods like equals, etc. if i make raw assert calls, it doesn't seem to count towards the testrunner's count
[02:57] NemesisD: hope that made sense
[02:57] atourino has joined the channel
[03:01] Aria: test.assert()
[03:09] dipser has joined the channel
[03:09] dicon has joined the channel
[03:10] bradleymeck1: mmm dmitry said i had errors in the js primer on nodejsbot, cant see any on a quick glance, did anyone else notice?
[03:11] sechrist: ryah: did anything evolve on that ssl problem?
[03:12] dilvie: bradleymeck1: where's the bot?
[03:13] hassox has joined the channel
[03:13] dilvie has joined the channel
[03:14] rtomayko has joined the channel
[03:14] bradleymeck1: the post on blogger
[03:15] bradleymeck1: i can understand his wanting to use his article for advanced features (which it goes into great detail) but i still cant find the errors on that blog post
[03:16] malkomalko has joined the channel
[03:17] dilvie: I didn't see the link
[03:18] bradleymeck1: In JS there are many arguments of whether classes exist or not (Wikipedia).
[03:18] bradleymeck1: The argument that classes exist
[03:18] bradleymeck1: Javascript allows the creation of Object that may inherit properties from other objects in a chain. That by definition is the smalled type that may be associated in a JS execution. They are neither Object's in the sense that they rely on inheritance and neither types due having instance methods and properties.
[03:18] bradleymeck1: The argument that classes do not exist
[03:18] bradleymeck1: Classes imply things about languages after years of use to some of us. All of these aresubjective but an argument about classes as considered from a per language implementation basis:Inheritance from multiple sources (interfaces and superclasses, or multiple inheritance). ClassesAccess privileges: namely a distinction of protect and private, friendly and not friendlyShared privileges: an ability to access private data of an inst
[03:18] bradleymeck1: woops...
[03:18] bradleymeck1: http://nodejsbot.blogspot.com/2010/09/javascript-primer.html
[03:18] digitalsatori has joined the channel
[03:19] matschaffer has joined the channel
[03:19] x_or has joined the channel
[03:20] nroot7 has joined the channel
[03:21] sechrist: ryah: the leak actually appears to be with around AddCACert
[03:21] sechrist: which is interesting
[03:21] jacobolus has joined the channel
[03:22] ivong has joined the channel
[03:24] dilvie: bradleymeck1: Did you write that?
[03:24] bradleymeck1: yea, in a fit of rage though
[03:25] dilvie: There are a few problems. First of all, there are lots of missing semicolons - technically not required, but when you leave them off, the interpretter inserts them at line breaks if the line forms a complete statement on its own, which can introduce hard-to-find bugs.
[03:25] bradleymeck1: it doesnt insert them actually, but it does complete the statement
[03:26] x_or1 has joined the channel
[03:26] terinjokes has joined the channel
[03:26] dilvie: bradleymeck1: it guesses where they should go, and it sometimes guesses different from your intentions.
[03:26] bradleymeck1: no it doesnt
[03:27] hassox has joined the channel
[03:27] bradleymeck1: there is no guesswork, if you attempt to have an expression on a line not with a statement that accepts a statement is the error crockford talks about
[03:27] bradleymeck1: which makes perfect sense
[03:28] terinjokes: how is node with XML data?
[03:28] sechrist: terinjokes: pretty good
[03:28] bradleymeck1: terinjokes it can parse it but if you want xslt or xpath, bleh
[03:28] isaacs: terinjokes: there are a few xml parsers out there
[03:28] sechrist: yeah xpath/xslt = :X
[03:28] sechrist: node-expat the only one I suggest checking into
[03:29] vmthehut has joined the channel
[03:29] langworthy has joined the channel
[03:29] errorhandler has joined the channel
[03:29] sechrist: but from what I use of node-expat it's fantastic
[03:29] bradleymeck1: line not with a statement that accepts an expression*
[03:30] terinjokes: hrm
[03:30] terinjokes: trying to think of the best way of handling this
[03:30] sechrist: ryah: I found the source of the SSL memleak. It's because node is creating certs on the fly without a credentials passed (and not freeing them properly)
[03:30] dilvie: return
[03:30] sechrist: I reused a crypto.credentials and no more problem
[03:30] dilvie: {
[03:30] dilvie: thisIsBroken : "oops"
[03:30] bradleymeck1: indeed, you returned undefined
[03:30] dilvie: };
[03:32] dilvie: bradleymeck1: I think semi-colons help readability, too. For example, when I don't see a semicolon at the end of a line, I assume a multi-line statement -- that's not always the author's intent if they're lazy about semicolons.
[03:33] terinjokes: is parsing a string file much worse/
[03:33] bradleymeck1: i think there are many arguments for both sides, as there have been for years
[03:33] sechrist: terinjokes: what's your use case?
[03:33] bradleymeck1: semicolons help clarify when a statement must end, lack of them i find to be more understandable personally when reading
[03:33] noahcampbell has joined the channel
[03:34] terinjokes: "PO files", Portble Objects (for internationalizations)
[03:34] sechrist: terinjokes: like i8n?
[03:34] bradleymeck1: however, calling that return statement bug a prime example, there is use for object literal statements, even if rare so i wouldnt really call it that
[03:34] terinjokes: sechrist: exactly
[03:34] paulwe has joined the channel
[03:34] jbenesch1 has joined the channel
[03:35] sechrist: terinjokes: k well are you handling a stream or a defined chunks?
[03:35] terinjokes: sechrist: PO files are pretty standard, though in the future I might want to expand to other types
[03:35] terinjokes: sechrist: files
[03:35] terinjokes: sechrist: so I assume defined
[03:35] sechrist: terinjokes: k node-expat and most of the node libs are stream-oriented. so you're most likely going to find the interface weird
[03:35] bradleymeck1: then again, i guess you could be arguing against new lines entirely rather than semicolon use in particular
[03:36] sechrist: it doesn't work like "parse the xml and give me back a json object" instead you get events for each type of xml object
[03:36] bradleymeck1: ACTION is going to bed, heading off on tangents 
[03:36] bradleymeck1 has left the channel
[03:37] terinjokes: slightly a bit harder, I guess because I don't know the capablities of node (ha)... I'll also have to save the translations back to something
[03:37] halfhalo: why is it so hard to build a damn control console for this irc thingie
[03:38] sechrist: terinjokes: also it depends on what you want to do with the data. reading the XML is possible of course
[03:38] Tim_Smart has joined the channel
[03:39] terinjokes: sechrist: effectively, it's "read files, send to client, get item translated (returned from client), and edit that one part of the file
[03:40] cataska has joined the channel
[03:40] sechrist: fairly straightforward, though I'm not sure what the libraries have in terms of editing/rebuilding xml. I've only read xml data.
[03:40] terinjokes: good enough for now /me guesses
[03:41] jchris has joined the channel
[03:42] dilvie: bradleymeck1: Do minifiers automatically insert semi-colons for you? =)
[03:43] sechrist: dilvie: seems like they would take away semicolons where applicable :)
[03:43] ivong has joined the channel
[03:44] dilvie: var a = "Henry the ",
[03:44] dilvie: b=7
[03:44] dilvie: ++b
[03:44] dilvie: alert(a+b+"th\nI am, I am...")
[03:44] dilvie: ^ that will break.
[03:44] x_or has joined the channel
[03:46] wilmoore_ has joined the channel
[03:50] overra has joined the channel
[03:52] dnolen has joined the channel
[03:56] austinfromboston has joined the channel
[03:56] jbenesch has joined the channel
[03:59] CrabDude has joined the channel
[04:02] gsmcwhirter: well then. managed to get node to segfault... interesting...
[04:03] atourino has joined the channel
[04:05] ehaas has joined the channel
[04:09] ivong has joined the channel
[04:10] benburkert has joined the channel
[04:15] JimBastard has joined the channel
[04:17] lachlanhardy has joined the channel
[04:26] ysinopsys has joined the channel
[04:26] gsmcwhirter: is there a straightforward way to change a buffer slice into an array?
[04:26] endtwist has joined the channel
[04:27] endtwist: http://nodejs.org/dist/node-latest.tar.gz is still pointing to v0.2.1 instead of v0.2.2.
[04:27] damien has joined the channel
[04:28] mjr_: gsmcwhirter: it'd be a pretty small function to make it one.
[04:29] gsmcwhirter: mjr_, yeah. was just hoping there was a .toArray or something already in existence
[04:29] mjr_: http://gist.github.com/587425
[04:29] mjr_: You can use that one if you want
[04:30] mjr_: voodootikigod: did you figure out your iowatcher thing?
[04:35] googol has joined the channel
[04:41] dilvie has joined the channel
[04:42] jbenesch has joined the channel
[04:43] ivong has joined the channel
[04:49] ehaas has joined the channel
[04:50] jameshome: does crypto.createHmac need to be wrapped in a callback?
[04:53] paulwe has joined the channel
[05:00] jashkenas has joined the channel
[05:00] tahu has joined the channel
[05:00] prettyrobots has joined the channel
[05:01] tk has joined the channel
[05:01] ivong has joined the channel
[05:03] meatmanek: are there any decent HTTP session libraries for node?
[05:04] aaronblohowiak: lol
[05:05] meatmanek: something funny?
[05:05] aaronblohowiak: whoops, wrong window =)
[05:07] mikew3c_ has joined the channel
[05:13] dilvie has joined the channel
[05:16] dilvie: hi
[05:20] jbenesch has joined the channel
[05:22] benburkert has joined the channel
[05:27] JimBastard: so ive decided that anonymous callbacks over json-rpc is a bad idea
[05:27] JimBastard: http://localhost:8080/demoModule/asyncHello?fn=function(){return%20'hello';}
[05:27] JimBastard: lol
[05:29] admc has joined the channel
[05:30] JimBastard: i think just providing method names is safe though
[05:33] jacobolu_ has joined the channel
[05:35] saikat has joined the channel
[05:35] nwhite has joined the channel
[05:40] sechrist: Is there a way to execute javascript outside the node app via like one of the debuggers but inside the scope of an app?
[05:40] sechrist: I tried but even like require was undefined
[05:45] ph^ has joined the channel
[05:46] jakehow has joined the channel
[05:46] stiang has joined the channel
[05:47] hassox has joined the channel
[05:48] admc has joined the channel
[05:48] meatmanek: JimBastard, it would be nifty if you implemented something with WebSockets or long polling so that the callback could actually be defined on client-side
[05:49] JimBastard: meatmanek: it is defined
[05:49] bronson has joined the channel
[05:49] JimBastard: long polling works
[05:49] meatmanek: hmm
[05:50] meatmanek: it'd be nifty to abstract the HTTP request inside of a client library
[05:51] meatmanek: so you can call something like thing.on('event', 
[05:51] meatmanek: fxnCallback);
[05:51] meatmanek: where thing is the server-side module
[05:54] jbenesch1 has joined the channel
[05:58] JimBastard: dnode does that i think meatmanek 
[05:58] meatmanek: nifty
[06:01] brianmario has joined the channel
[06:01] ivanfi1 has joined the channel
[06:01] jacobolus has joined the channel
[06:04] NemesisD has joined the channel
[06:05] amerine has joined the channel
[06:05] amerine has joined the channel
[06:07] jbenesch has joined the channel
[06:07] mies has joined the channel
[06:12] jbenesch has joined the channel
[06:12] gerred: anybody here using faye?
[06:12] gerred: it's basically everything I've ever wanted.
[06:14] Duncan_ has joined the channel
[06:21] jbenesch has joined the channel
[06:22] sechrist: Anybody in here familiar with openssl sdk? I have no idea what's going on here
[06:22] sechrist: http://github.com/ry/node/issuesearch?state=open&q=https#issue/221
[06:28] micheil has joined the channel
[06:31] SamuraiJack has joined the channel
[06:38] smcq has joined the channel
[06:38] micheil: morning chaps' and ladies.
[06:38] Tim_Smart: Evening.
[06:39] smcq_ has joined the channel
[06:39] mjr_: Tim_Smart: just about finished with pub/sub in my redis client.
[06:39] jesusabdullah: gerred: No. Tell me about Faye.
[06:39] jesusabdullah: >:)
[06:39] Tim_Smart: mjr_: hawt.
[06:39] javajunky has joined the channel
[06:39] javajunky: yawn. honeymoon over, I'm back ;) 
[06:39] sechrist: Any cool startups in SF looking for engineers? I'm visiting for a few weeks and I'd like to migrate out here
[06:40] Tim_Smart: ryah: ping.
[06:40] gerred: jesusabdullah: it's an implementation for node/ruby of the bayeaux protocol. just started playing with it
[06:40] gerred: er
[06:40] gerred: bayeux
[06:40] gerred: http://faye.jcoglan.com/
[06:41] jesusabdullah: Not familiar with the bayeaux protocol
[06:41] jesusabdullah: But it allows for slick message passing between node and ruby?
[06:42] gerred: node, ruby, and clients.
[06:42] jesusabdullah: Huh
[06:42] jesusabdullah: Cool
[06:42] gerred: apparently it has support for websockets, with automatic fallbacks to long polling, but I'm still trying to figure that out.
[06:43] galaxywatcher has joined the channel
[06:43] sechrist: sounds like socketio
[06:43] sechrist: (and I like socketio)
[06:44] brianmario has joined the channel
[06:44] gerred: sechrist: basically yes.
[06:44] sechrist: however socketio isn't meant for inter-service message passing
[06:44] javajunky: bayeaux is effectiely comet
[06:44] Tim_Smart: Socket.io has a bit more overhead compared to plain websockets.
[06:44] micheil: yeah
[06:44] micheil: also things like queue / parsing of messages
[06:44] javajunky: http://cometd.org/
[06:45] zomgbie has joined the channel
[06:45] gerred: this may be my infamiliarity with websockets, but can javascript handle the actual WS creation?
[06:45] sechrist: so it's like socketio + thrift?
[06:45] micheil: yes
[06:45] micheil: gerred: websockets come under the umbrella term HTML5
[06:45] gerred: right.
[06:46] sechrist: it's not html at all
[06:46] sechrist: bleh
[06:46] micheil: so, currrent browser support is chrome, chromium, safari
[06:46] gerred: sechrist: as far as I can tell.
[06:46] micheil: sechrist: the client side comes under the umbrella of html5, while not strictly html
[06:46] sechrist: there's a flash based ws client for those unfortunate clients
[06:46] sechrist: before it hits xhr-multipart etc
[06:47] gerred: anyway. thinking about creating a service using faye or socket.io that takes all the work out of real time sockets. basically, someone pays for a restful handler that their app posts to, embeds the relevant JS in their client side pages.
[06:47] gerred: and the app broadcasts to those clients.
[06:47] micheil: gerred: http://pusherapp.com and there's another one
[06:47] gerred: aw, shame.
[06:48] gerred: i'll compete.
[06:48] sechrist: tons of people doing that
[06:48] sechrist: pusherapp is one of like 4 that I know of
[06:48] micheil: gerred: check out the changelog's panel on it for more: http://thechangelog.com/post/927103350/episode-0-3-1-websockets
[06:49] micheil: sechrist: okay, well, yeah, I know of pusherapp and the one that powers observerapp.com
[06:49] gerred: anyway. I've come to a philosophy on node.js/socket.io's entire point as being that intermediary, and the actual logic and client side stuff is handled by those respective services.
[06:50] gerred: thus this.
[06:50] gerred: it seems insane to handle logic inside node.js
[06:51] micheil: gerred: no
[06:51] gerred: no?
[06:51] micheil: gerred: I'm doing it with the apps I'm currently working on fine
[06:51] micheil: I have all the logic for it in javascript
[06:52] micheil: even the unique sorting for data coming in
[06:52] micheil: (it's a data aggregation service)
[06:52] gerred: ah
[06:52] micheil: so I have two segments: a worker & the server
[06:52] micheil: the server's built with express.js and node-websocket-server
[06:53] micheil: and the worker uses mongodb, hashlib, and request
[06:53] gerred: ahh
[06:53] gerred: express.js is essentially the sinatra of the js worldy es?
[06:53] gerred: s/es/yes
[06:53] micheil: (the only reason for a worker is because it's doing like,  2 reqs every 1800ms
[06:54] micheil: and pretty much
[06:54] micheil: have a look at http://github.com/ry/node/wiki/modules
[06:55] gerred: oh cool
[06:55] gerred: i'm going to have to dig much deeper into node
[06:57] gerred: and socket.io
[06:57] micheil: have a look at node-websocket-server too.
[06:57] micheil: :D
[06:58] micheil: ACTION is the author.
[06:58] mr_daniel has joined the channel
[06:58] gerred: ah cool.
[06:59] gerred: ws.creareServer() under Server, is this a typo?
[06:59] ryah: Tim_Smart: hey
[06:59] micheil: sort of
[07:00] micheil: ws.createServer() will either create a http.Server to use
[07:00] jesusabdullah: creare
[07:00] jesusabdullah: hah
[07:00] gerred: creare. ;)
[07:00] Tim_Smart: ryah: Oh hey, just was going to check if you had a glance at that patch yet.
[07:00] micheil: or you can pass an option like: ws.createServer({server: http.Server})
[07:00] gerred: second paragraph, first word under Server.
[07:00] micheil: and it'll hijack that server
[07:00] ryah: Tim_Smart: no - not yet
[07:01] ryah: i'll have a look tomorrow
[07:01] Tim_Smart: OK brilliant.
[07:01] micheil: hey ryah 
[07:01] micheil: ryah: btw, what did you think of those ideas for logo changes?
[07:02] micheil: does anyone have an LRU for node?
[07:02] micheil: like, an array with a fixed length
[07:02] jesusabdullah: logo changes?
[07:03] javajunky has joined the channel
[07:03] micheil: jesusabdullah: ideas, nothing solid ;)
[07:05] mjr_: Tim_Smart: new redis version with pub/sub is here.  Feedback appreciated:  http://github.com/mranney/node_redis
[07:05] mjr_: Sadly, I'm still having an npm auth issue, so I don't be able to publish it until isaacs fixes it.
[07:05] micheil: has anyone heard of anyone doing http fallbacks for websockets using redis?
[07:06] mjr_: and now, to bed.
[07:06] freeall has joined the channel
[07:07] jesusabdullah: micheil: What ideas? I'm curious!
[07:07] micheil: jesusabdullah: for?
[07:07] pyro_ has joined the channel
[07:07] pyro_: hi
[07:07] micheil: howdy
[07:07] pyro_: what's the closest framework to rails/django?
[07:07] Tim_Smart: pyro_: Probably geddy
[07:07] pyro_: i'm using express, i don't mind it but it's more along the lines of sinatra than rails
[07:08] micheil: oh, yeahs, if anyone's working on something epically awesome that's opensource, email me: micheil@changelogshow.com
[07:08] jesusabdullah: Oh, you do the changelog?
[07:08] jesusabdullah: Shit son, I had no idea
[07:08] micheil: yeah
[07:08] jesusabdullah: I think my thesis is pretty awesome
[07:08] micheil: I'm a part-time co-host
[07:08] jesusabdullah: but it's not useful
[07:08] jesusabdullah: :P
[07:08] pyro_: i <3 cls
[07:08] micheil: is it opensource?
[07:08] jesusabdullah: My thesis?
[07:08] jesusabdullah: I guess so
[07:08] micheil: prove it.
[07:08] jesusabdullah: well, everything on github anyway
[07:08] micheil: :P
[07:09] jesusabdullah: github.com/jesusabdullah/anisotropy
[07:09] jesusabdullah: and
[07:09] jesusabdullah: github.com/jesusabdullah/anisotropy_fea
[07:09] micheil: jesusabdullah: tl;dr?
[07:09] micheil: :P
[07:09] pyro_: micheil: 
[07:09] micheil: ?
[07:09] pyro_: micheil: do a segment on chromium
[07:09] jesusabdullah: matlab scripts that interface with comsol to do finite element analysis
[07:09] javajunky: pyro_: yeah it's express' *intention* to be close to sinatra, definitely geddy is trying to be closer to rails.
[07:09] micheil: heh, I'll keep it in mind
[07:09] pyro_: they just flipped the switch on webgl, 2d accelerated canvas, accelerated composition in beta 6
[07:10] micheil: I'm mainly to help write articles
[07:10] pyro_: sorry i mean
[07:10] pyro_: the flipped switch is firefox
[07:10] micheil: (and do the node.js / js related interviews)
[07:10] jesusabdullah: Hmm
[07:10] pyro_: the acceleration is chromium
[07:10] pyro_: but yeah
[07:10] pyro_: 3d acceleration is huge in browsers atm
[07:10] pyro_: itd be good to get the word out
[07:10] pyro_: even microsoft has done a decent job, not that thats open source
[07:11] pyro_: javajunky:
[07:11] pyro_: Tim_Smart: 
[07:11] pyro_: would you say it's as mature as express
[07:11] pyro_: i'm entered in a 48 hour game comp 2 weeks from today and i want something with a little documentation for my team
[07:12] javajunky: pyro_: technically express has been around longer, but in its *current* form, geddy has actually been around a little longer, they're both mature enough :) . I'm biased as I"m associated with express
[07:12] Tim_Smart: pyro_: Not quite. mde might be around to help though.
[07:12] micheil has left the channel
[07:12] micheil has joined the channel
[07:12] pyro_: hmm
[07:12] shellingfox has joined the channel
[07:12] pyro_: do the people in #nodejs know theyre in the wrong room lol
[07:12] pyro_: it should forward here
[07:13] pyro_: or have a bot saying
[07:13] pyro_: goto node.js
[07:13] pyro_: i might write on...in node
[07:13] crohr has joined the channel
[07:13] javajunky: pyro_: there's a few irc bots to use as starting points ;)
[07:13] pyro_: ja
[07:13] pyro_: there's this badass framework in ruby
[07:13] pyro_: i'd love to see a js version as mature some day
[07:14] pyro_: the ruby one uses eventmachine and stuff so it'd be a good benchmark
[07:14] javajunky: port it then :)
[07:14] pyro_: hmm
[07:14] pyro_: once upon a time i may have
[07:14] pyro_: dont use irc as much these days
[07:14] javajunky: fair
[07:15] pyro_: so geddy you thinks?
[07:16] javajunky: pyro_: again, biased , I'd use express ;) 
[07:16] javajunky: geddy offers much better model orientated stuff, so if you need/want that then geddy
[07:17] javajunky: express builds on top of connect so you get all of that module support for free
[07:17] pyro_: javajunky: as much as i'd like to say i do i'm not sure i dont
[07:17] pyro_: yeah that might be more valuable for the comp
[07:17] pyro_: just being able to drop in some rack-like functionality
[07:17] javajunky: if you've any requirements for authentication with 3rd party systems, I'd say that express is currently better (but then I wrote connect-auth so extremely biased on that one)
[07:18] pyro_: hmmm not just yet but ill keep that in mind for our current project
[07:18] pyro_: game engine ^w^
[07:18] pyro_: \mmo
[07:18] pyro_: so we'll definitely need some decent authen
[07:19] javajunky: well I woud
[07:19] javajunky: nt say 'decent' .. but pretty complete ;)
[07:19] javajunky: http://github.com/ciaranj/connect-auth
[07:20] sechrist: woah wth.. the same query in both navicat and node-mysql takes 21 times longer in node-mysql
[07:20] sechrist: 30msish for navicat, 640ish for node-mysql
[07:20] sechrist: large resultset (few k), but daaaamn
[07:21] pyro_: what's the query if you dont mind
[07:22] sechrist: that's IP but I'll write something similar
[07:22] sechrist: sec
[07:22] pyro_: ta
[07:22] pyro_: i cant fix it for you but im interested in avoiding the same type of query ^w^
[07:24] sechrist: pyro_: http://pastie.org/1169560
[07:24] sechrist: it's a simple equijoin
[07:24] sechrist: 4k row resultset on average
[07:24] sechrist: the problem isn't mysql
[07:24] sechrist: it's the node library
[07:24] pyro_: yeah i gathered that from navicat being fast
[07:25] jesusabdullah: Which library?
[07:25] sechrist: var Client = require('mysql').Client
[07:25] sechrist: so
[07:25] sechrist: node-mysql
[07:25] sechrist: lemme get ver
[07:26] sechrist: 0.5.0 mysql by felix
[07:26] pyro_: you should try to profile the query
[07:26] sechrist: from npm
[07:26] sechrist: oh i've ran explains and crap on it
[07:26] sechrist: I know what it's doing
[07:26] pyro_: nah not that part
[07:26] pyro_: i mean the parsing part in node
[07:26] sechrist: ah
[07:26] sechrist: true
[07:27] pyro_: i imagine the bulk of the work is just in transcoding into javascript strings
[07:27] pyro_: javascripts especially slow at that
[07:27] sechrist: shouldn't be that slow though
[07:27] pyro_: given it's all unicode
[07:27] Anti-X has joined the channel
[07:28] pyro_: and i imagine it's jumping between the c and js a billion times as it parses the response from mysql
[07:28] sechrist: it may be the way i'm using the library too
[07:29] sechrist: I'm waiting for the entire query to come back and call the callback instead of using the provided events per row and stuff
[07:33] ngw has joined the channel
[07:34] ngw has joined the channel
[07:38] shockie has joined the channel
[07:39] unconed has joined the channel
[07:40] mbrochh has joined the channel
[07:40] mbrochh has joined the channel
[07:46] virtuo has joined the channel
[07:47] pyro_: sechrist: the fact the library has per-row ops might be the source of its slowness
[07:48] pyro_: but yeah, it's very much node-like to hook into the per-row events
[07:48] pyro_: if that fits in well with your architecture try to use that instead
[07:48] pyro_: that way your user wont go .6 seconds without any action and it'll be better on memory
[07:49] sechrist: no user
[07:49] pyro_: no user
[07:49] sechrist: this is generating stats
[07:49] pyro_: program uses itself?
[07:49] sechrist: but yeah
[07:49] pyro_: lol well in that case it doesnt really matter
[07:49] pyro_: might be easier just to do the entire result set
[07:49] sechrist: oh I can't have a runtime over a few seconds
[07:49] sechrist: but yeah I can do per row
[07:49] sechrist: i'll clock both in a sec
[07:50] pyro_: the per row will be slower i think
[07:50] pyro_: more calls
[07:50] pyro_: calls are slow
[07:50] sechrist: I mean I'm taking the results and doing (what I perceive to be) a map/reduce heh
[07:50] sechrist: plopping into arrays and crap, but that's like 20ms of my time
[07:50] sechrist: instead of 600-700ms
[07:50] pyro_: id say
[07:50] pyro_: the majority of the .6 seconds is actually blocking js execution
[07:51] pyro_: so in this case you're not getting much out of it being async
[07:51] sechrist: I'm already using step, so lmao.. I get you though
[07:51] pyro_: but you're probably not doing much while you wait around for the results
[07:51] sechrist: if I do per row the libev loop can continue other things
[07:51] sechrist: between rows
[07:52] sechrist: but then I have to group callbacks and all kinds of nasty things
[07:52] sechrist: that's likely slower
[07:52] pyro_: yes, you can be processing rows whilst the rest are i/o'ing
[07:52] nroot7 has joined the channel
[07:52] pyro_: which means you'll be getting the most out of the evented nature
[07:52] pyro_: so yeah id go with perrow if it's not too much trouble
[07:52] pyro_: let me know when you benchmark it im interested in knowing
[07:52] olegp has joined the channel
[07:53] DoNaLd` has joined the channel
[07:53] pyro_: for some reason
[07:53] pyro_: even though it's not the most artistic i've ever seen
[07:53] pyro_: i kinda like the geddy site
[07:53] pyro_: Tim_Smart: 
[07:54] rnewson has joined the channel
[07:55] sechrist: I need to read up on Mach ports
[07:55] sechrist: those things are weird
[07:55] pyro_: javajunky: would it be feasible to base geddy on connect?
[07:55] pyro_: they're not incompatible in anyway are they?
[07:55] aubergine has joined the channel
[07:55] pyro_: theoretically or otherwise
[07:56] pyro_: when coffeescript gets executable class bodies geddy's ORM will be so clean
[07:59] sechrist: does coffeescript add any significant time onto execution?
[07:59] sechrist: I'd guess that happens with the script loads moreso than during runtime
[08:00] Duncan_ has joined the channel
[08:02] unconed: anyone here know a lot of about handling unix processes and node.js? specifically i'd like to spawn childprocesses with more pipes pointing at them than just stdin/out/err 
[08:04] javajunky: pyro_: I've no idea, mde is the guy to ask 
[08:04] pyro_: ok
[08:06] sahazel has joined the channel
[08:08] Tim_Smart: pyro_: Executable class bodies = constructor function...
[08:08] vmthehut has joined the channel
[08:08] pyro_: Tim_Smart: not exactly
[08:09] Tim_Smart: I'm not sure if jashkenas will ever let that patch pass.
[08:09] pyro_: ill find the issue
[08:09] Tim_Smart:  Yeah I know the issue
[08:09] pyro_: Tim_Smart: he will if someone proposes a clean implementation
[08:09] pyro_: someone smart will come up with a trick for the "this" issue
[08:09] pyro_: IMO thats the only thing holding it back
[08:10] pyro_: it will make it so much nicer
[08:10] path[l] has joined the channel
[08:10] iwasbiggs has joined the channel
[08:12] pyro_: does anyone else think that css is just the wrong 'language' to be trying to animate things
[08:12] unconed: pyro: you mean CSS transitions, or CSS animations?
[08:13] pyro_: animations
[08:13] iwasbiggs: there are so many things they could have fixed, but instead, they add another feature =\
[08:13] Tim_Smart has joined the channel
[08:13] pyro_: maybe when there's a decent IDE to abstract away all of the math from 'artists' then it will be irrelevant 
[08:13] unconed: well it seems the main reason they added it is so you could achieve hardware accelerated animation on the iphone/ipad
[08:13] pyro_: but whilst you need to code animations by hand it's so awkward...
[08:13] unconed: but the possibilities are pretty limited
[08:14] pyro_: im reading through some stuff on chromium
[08:15] pyro_: http://dev.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome
[08:15] pyro_: there's a new flag
[08:15] pyro_: --enable-accelerated-compositing
[08:16] sechrist: pyro_: it's about the same either way, but yeah way less blocking
[08:16] pyro_: sechrist: if you were performing more processing on the rows
[08:16] unconed: pyro: well, css animations means the animation loop is not in battery-draining JS code
[08:16] pyro_: sechrist: the per-row would be ~ 600 ms faster
[08:16] unconed: doesn't really affect compositing, but does allow them to be leaner about it
[08:17] pyro_: unconed: this flag enables hardware css acceleration
[08:17] pyro_: that's what they call 'compositing'
[08:18] sechrist: pyro_: that's an interesting figure. how the hell though? the same processing is taking place. I don't think mysql is actually streaming the results as efficiently as it could be, but even so. whatever hehe
[08:18] unconed: yes but whether an object is positioned manually with JS or through defined css animations, something has to composite it regardless
[08:18] sechrist: 99% of my execution time is node-mysql being slow. that sucks.
[08:18] pyro_: sechrist: 
[08:18] pyro_: if it really bothers you
[08:19] sechrist: libmysql bindings probably are way more blocking
[08:19] pyro_: you could run the mysql query through the mysql binary directly and just pipe in the results
[08:19] spetrea has joined the channel
[08:19] pdelgallego has joined the channel
[08:19] sechrist: now THAT would be interesting
[08:19] Tim_Smart: sechrist: Are you using felixge's module?
[08:19] pyro_: he is
[08:19] sechrist: Tim_Smart: yes
[08:19] sechrist: it's slow as shit
[08:20] sechrist: at least for my particular query resultset
[08:20] Tim_Smart: sechrist: Which node branch are you on?
[08:20] Tim_Smart: 0.2 or latest master?
[08:20] sechrist: the 0.2.2 I built maybe yesterday?
[08:20] sechrist: from nodejs.org tarball
[08:20] Tim_Smart: Oh right so you aren't on a branch with fast-buffers.
[08:20] sechrist: and node-mysql 0.5.0 from npm
[08:21] sechrist: fast buffers aren't in the main release yet?
[08:21] Tim_Smart: Nope.
[08:21] pyro_: Tim_Smart: how do they achieve their fastness...
[08:21] sechrist: how is ryan doing his rollouts? I don't really get it thus far
[08:21] sechrist:  I need to check out the branches I spose
[08:21] Tim_Smart: pyro_: Memory pool.
[08:21] pyro_: that's cool
[08:21] pyro_: that's what i'm doing in webgl atm
[08:21] pyro_: for 3d math
[08:21] jimmy203 has joined the channel
[08:22] Tim_Smart: Mainly the fact that calls to C++ from ecma-land is slow.
[08:22] pyro_: not performing any allocations in my matrix / vector / quartering operations
[08:22] pyro_: so memory pooling perse
[08:22] xla has joined the channel
[08:23] sechrist: damn
[08:23] sechrist: buffers even faster than Buffer
[08:23] Tim_Smart: Buffer was always slow.
[08:23] Tim_Smart: But not as slow as large strings.
[08:23] digitalspaghetti: heh @nodecore would be funny....if they made any funny, but unfortunatly they do not
[08:24] sechrist: Tim_Smart: Are you familiar with openssl's lib?
[08:24] Tim_Smart: Not really.
[08:24] Tim_Smart: I'm view on crypto is to leave it to everyone else, and just use it.
[08:24] Tim_Smart: s/I'm/My/
[08:24] sechrist: http://github.com/ry/node/issuesearch?state=open&q=https#issue/221
[08:24] sechrist: ah
[08:24] sechrist: ic
[08:25] Tim_Smart: Wow 60MB+ for a crypto op?
[08:26] sechrist: oh dude
[08:26] sechrist: it climbs linearly
[08:26] sechrist: it's a legitimate memory leak
[08:26] sechrist: it will consume all of your ram
[08:26] delapouite has joined the channel
[08:26] Tim_Smart: Is ssl the bug, or node just doing it wrong?
[08:26] sechrist: it's in the credential generation on the flight
[08:26] sechrist: it's node
[08:26] sechrist: fly*
[08:27] sechrist: I don't know exactly what the hell the problem is, because he's calling x509_free on the object that is supposedly leaking
[08:27] sechrist: according to Leaks
[08:27] sechrist: if you reuse credentials it's fine
[08:27] Tim_Smart: Hmm yeah crypto refactor is definitely on the TODO list apparently.
[08:27] markwubben has joined the channel
[08:27] sechrist: (I mean that probably still leaks, but at least it's once and not n times)
[08:28] matjas has joined the channel
[08:28] pyro_: device tag preview: http://www.youtube.com/watch?v=WcwnQW_AnC8&feature
[08:30] jimmy203: has anyone used connect-mongo?
[08:30] sechrist: pyro_: scuba pirate ftw
[08:30] sechrist: that's pretty cool 
[08:30] sechrist: flash gtfo
[08:31] sechrist: css transformation that's sweet
[08:32] pyro_: yep
[08:32] sechrist: I don't know how you can call all of this "HTML5" technology "HTML5"
[08:32] pyro_: yeah
[08:32] pyro_: i dont really care it's the best word for it
[08:32] sechrist: web 3.0
[08:32] sechrist: (but even that is stupid)
[08:32] pyro_: html5 has just become a label for the accepted apis
[08:33] jesusabdullah: "cool new shit"
[08:33] pyro_: and by accepted i mean apis with two or more implementations
[08:33] gthb has joined the channel
[08:33] pyro_: it's kind of what the web needed, the browsers are finally taking responsibility for the internet rather than some fuzzy-haired ivory tower knobheads
[08:33] unconed: pyro: er but the difference is, the standard process is now geared towards it
[08:33] sechrist: hopefully ie6 dies soon and ie7 doesn't become it's retarded cousin
[08:34] unconed: html5 and css3 are now modular standards, with different portions at different stages of completion
[08:34] unconed: whichever is widely implemented reaches standard status
[08:34] pyro_: that's okay as long as there are acid tests
[08:34] unconed: so it really is HTML5
[08:35] muk_mb: what's the js equivalent to the ruby write_attribute ?
[08:35] sechrist: you can't call a clusterfuck of javascript/websockets/canvas "hypertext markup language 5"
[08:35] unconed: sechrist: why not?
[08:35] sechrist: I guess you should, honestly
[08:35] sechrist: because "web development" is honestly one of the hardest things to pick up and learn
[08:35] unconed: when hypertext came out, the idea of embedding a link in a piece of text was unique
[08:35] sechrist: due to all of the different technologies you have to have a grasp on
[08:36] caolanm has joined the channel
[08:36] sechrist: (To do it properly, and not half-ass-indian-style)
[08:36] unconed: now with html5, it seems it is acceptable that "hypertext" is now software
[08:36] herbySk has joined the channel
[08:36] sechrist: hyperjson markup language IMO
[08:36] unconed: well i know i'm doing interesting things with it ;)
[08:37] sechrist: yeah but like if somebody asked me "How do I start to get into web development?" I have no idea what to tell them
[08:37] unconed: google has a course up
[08:37] unconed: http://code.google.com/edu/ajax/index.html
[08:37] daglees has joined the channel
[08:38] antares_ has joined the channel
[08:38] pyro_: "web 2.0"
[08:38] pyro_: that's so 2009
[08:39] unconed: thing is, nobody is really teaching this stuff
[08:39] unconed: it's all the industry doing it itself, at a tiny pace
[08:39] unconed: at conferences and camps
[08:39] unconed: if you try to hire junior developers, the ones who aren't eager hackers already will be behind 5 years
[08:39] sechrist: ^
[08:39] pyro_: i bet all the people who opted to make games in "html5" for performance reasons rather than opting for canvas are kicking themselves now it's hardware accelerated
[08:40] unconed: well 2D canvas is interesting
[08:40] unconed: but the real magic happens when webgl becomes universal enough
[08:40] sechrist: isn't canvas "html5"
[08:40] pyro_: sort of
[08:40] unconed: sechrist: i think he means "using native HTML elements rather than drawing onto canvas"
[08:40] sechrist: oh lord
[08:40] sechrist: like
[08:40] pyro_: in this case by html5 i mean css animations and dom elements
[08:40] sechrist: ew
[08:40] sechrist: svgs
[08:41] unconed: opacity styles etc
[08:41] pyro_: yeah basically svg or even worse
[08:41] unconed: z-index
[08:41] pyro_: svg's not that bad for some games
[08:41] saikat: which browsers are using GPU for canvas?
[08:41] unconed: only IE9 so far
[08:41] sechrist: hopefully ie9
[08:41] unconed: and chromium nightlies iirc
[08:41] saikat: interesting
[08:41] sechrist: IE 9 should be very good
[08:41] saikat: didn't know about that, i like that news a lot 
[08:41] pyro_: yeah ie9 is decent
[08:42] unconed: yeah and they've thrown down the gauntlet at least there
[08:42] pyro_: was taking a look last night
[08:42] sechrist: I mean I won't use it -- but I'm happy it's fabricating
[08:42] unconed: within the year, all the major browser will have to be hardware rendered
[08:42] aubergine has joined the channel
[08:42] unconed: safari / chrome already has the mobile path to work off
[08:42] unconed: firefox is working on it for 4
[08:42] saikat: i do pretty much
[08:42] saikat: everything on canvas
[08:42] saikat: just bet big that it would eventually get fast enough
[08:42] pyro_: canvas is win now
[08:42] sechrist: I've never worked with canvas
[08:42] saikat: well, it's already pretty fast
[08:42] saikat: i'm pretty happy with my bet then
[08:42] sechrist: I've never made an "html5 app"
[08:42] pyro_: yeah with acceleration it smashes html
[08:42] sechrist: I've used websockets but with fallbacks
[08:43] pyro_: whatd you use?
[08:43] unconed: there's socket.io which is awesome
[08:43] saikat: yeah, i'm using socket.io
[08:43] sechrist: well yeah I used socket.io
[08:43] saikat: which is great
[08:43] sechrist: I uhm
[08:43] saikat: and cappuccino on the frontend
[08:43] pyro_: i have a youtube video up of some webgl stuff using websockets to load all the content and sync between instances
[08:43] saikat: which used to abstract over canvas/VML
[08:43] pyro_: it was AWESOME
[08:43] sechrist: used xhtml 4.01 transitional + jquery
[08:43] saikat: but soon i probably won't care about that abstraction
[08:43] sechrist: booyah
[08:46] sechrist: everything I've worked on has been practical
[08:46] sechrist: a lot of the "html5" branded technologies are still toys
[08:47] sechrist: websockets being the only one I've actually taken advantage of, because <video> is still under war
[08:47] sechrist: mozilla needs to man up and get h.254
[08:48] pyro_: they cant
[08:48] sechrist: "forever free" license
[08:48] sechrist: zero cost
[08:48] sechrist: dynamically link
[08:48] sechrist: get it over with
[08:48] pyro_: what happened to webm
[08:49] sechrist: joke product
[08:49] pyro_: really?
[08:49] pyro_: did it get fucked?
[08:49] unconed: naw
[08:49] aubergine has joined the channel
[08:49] sechrist: it's gaining momentum
[08:49] pyro_: http://en.wikipedia.org/wiki/WebM
[08:49] sechrist: if microsoft takes it into ie9
[08:49] unconed: webm is an acceptable codec for average use and is at least as good as mainline h.264. only high-complexity h.264 beats it
[08:49] pyro_: it says its got the support of all the browser makers
[08:49] sechrist: h.264 is dead
[08:49] pyro_: yep
[08:49] unconed: where it got bad flack was the spec was kinda whack
[08:49] pyro_: google saved the day
[08:50] pyro_: they bought it, it was expensive...
[08:50] unconed: but they've been cleaning it up
[08:50] mies has joined the channel
[08:50] sechrist: VP8 created by On2
[08:50] sechrist: didn't On2 created some videogame service over lan
[08:50] sechrist: rendering games in the cloud
[08:50] pyro_: yes
[08:50] pyro_: onlive?
[08:51] pyro_: did they do the video codec for onlive?
[08:51] pyro_: onlive's video is better than vp8
[08:51] pyro_: you're lucky i'm a game dev ^w^
[08:51] sechrist: onlive yea
[08:52] sechrist: latency needs to be like zero for that shit
[08:52] sechrist: (to be usable for FPS games)
[08:52] unconed: pyro_: are you doing game-related stuff on node?
[08:52] pyro_: yep
[08:52] pyro_: atm both 3d and 2d
[08:52] pyro_: today 3d
[08:52] unconed: nice
[08:52] pyro_: doing an editor
[08:52] sechrist: pyro_: inside or outside of a browser? I would thoroughly enjoy a simple 2D GUI layer
[08:52] sechrist: or even simple oGl bindings
[08:52] pyro_: well...
[08:52] pyro_: okay
[08:53] pyro_: i can help you out
[08:53] pyro_: my mate has started support for webgl on desktop
[08:53] pyro_: on node
[08:53] prettyrobots has joined the channel
[08:53] pyro_: http://brianmckenna.org/blog/nodejs_webgl
[08:53] sechrist: I heard somebody was doing SFML
[08:53] pyro_: sfml is good
[08:53] pyro_: probably better than this
[08:53] pyro_: if it's decent
[08:53] pyro_: but there's a start
[08:53] pyro_: umm
[08:53] pyro_: 3d
[08:53] pyro_: 2d*
[08:54] pyro_: there's an engine coming out soome
[08:54] unconed: so this is just to use WebGL as local OpenGL bindings?
[08:54] pyro_: impact.js
[08:54] unconed: with node.js as the base platform?
[08:54] pyro_: yes
[08:54] pyro_: yes
[08:54] unconed: neat
[08:54] pyro_: yep
[08:54] pyro_: he lives here in brisbane
[08:54] sechrist: evented 3D programming
[08:54] sechrist: will make me
[08:54] sechrist: want to kill myself
[08:54] unconed: :D
[08:54] pyro_: clever fellow
[08:54] pyro_: lol
[08:54] pyro_: it's awesome dude
[08:54] pyro_: fully awesome
[08:54] pyro_: ive been waiting my whole life for 3d on the web
[08:54] pyro_: and now i have ssjs too
[08:54] unconed: well, it actually might factor into some of the job queue stuff that engines have been doing, no?
[08:55] pyro_: i'm very happy with the way it's all heading
[08:55] unconed: like id tech
[08:55] pyro_: it's alot easier
[08:55] unconed: they let phyics and collision detection take 1 frame of processing time
[08:55] pyro_: than fucking with threads
[08:55] unconed: essentially, evented
[08:55] pyro_: like we're still going to need to use webworkers for scripting
[08:55] pyro_: but you dont need to thread any entities
[08:55] sechrist: I don't comprehend the concept of webworkers yet
[08:55] pyro_: they do stagger the frames
[08:55] pyro_: and yes
[08:55] sechrist: Where is the benefit?
[08:56] pyro_: webworkers = threads for js
[08:56] pyro_: so u can do 2 things at once
[08:56] sechrist: why do you need to do two things at once
[08:56] TomY has joined the channel
[08:56] pyro_: when you have too much to do
[08:56] pyro_: like realtime code
[08:56] pyro_: gaming...
[08:56] sechrist: in a browser?
[08:56] pyro_: video+something else
[08:56] pyro_: yes
[08:56] sechrist: hmm
[08:56] pyro_: or just to sandbox things
[08:57] pyro_: it makes a nice scripting environment for games
[08:57] sechrist: I've seen a few sites trigger this "pubsub" thing in sfari
[08:57] pyro_: it's basically perfect
[08:57] pyro_: pubsubhubbub
[08:57] pyro_: redis is a pubsub server now it's fucking sweet, read up
[08:57] sechrist: yeah yeah
[08:57] pyro_: umm
[08:57] sechrist: redis is baller
[08:57] pyro_: before i goto dinner
[08:58] pyro_: http://impactjs.org/
[08:58] sechrist: so I keep hearing that the diaspora code
[08:58] sechrist: is like
[08:58] pyro_: not out yet but very soon
[08:58] sechrist: ridiculously crappy
[08:58] pyro_: i have an alpha build
[08:58] pyro_: i bet they just spent all the money on weed
[08:58] pyro_: and coded whilst under the influence
[08:58] TomsB has joined the channel
[08:59] pyro_: they strike me as the type of people whod do something like that
[08:59] pyro_: anyway u wanted the 2d engine?
[08:59] pyro_: http://www.phoboslab.org/log/2010/09/biolab-disaster
[08:59] pyro_: this has an editor too, it will be out within a month it's very good
[08:59] pyro_: i've been talking to the dev
[08:59] pyro_: there's also a commercial one - aves
[08:59] pyro_: http://www.dextrose.com/en/projects/aves-engine/
[08:59] pyro_: it's "html"
[08:59] pyro_: but it's quite clever
[09:00] unconed: gnight
[09:00] unconed has left the channel
[09:01] sideshowcoder has joined the channel
[09:03] tisba has joined the channel
[09:03] skampler has joined the channel
[09:03] sechrist: I want 2D for like
[09:03] sechrist: GUIs
[09:04] sechrist: not games
[09:04] sechrist: even legit QT bindings would be an improvement
[09:08] Gruni has joined the channel
[09:08] MrNibblesFreenod: hey guys
[09:09] MrNibbles: before i write this, just want to check it doesnt already exist
[09:09] ntelford has joined the channel
[09:09] MrNibbles: basically, a node image server that you can pass a URL to, it will grab that image and resize it to your required dimensions and spit it out to you
[09:09] MrNibbles: and cache that image at that requested size
[09:09] MrNibbles: like this: http://www.lightspun.com/
[09:10] MrNibbles: very handy for front end work that pulls in images from across the web
[09:13] sechrist: sounds simple enough to make
[09:14] sechrist: I'd worry less about if one already exists and more about how soon you start writing one :)
[09:14] MrNibbles: ha :P
[09:14] MrNibbles: ive just started on it
[09:15] ooooPsss has joined the channel
[09:21] omarkj has joined the channel
[09:28] xAFFEE has joined the channel
[09:30] aubergine has joined the channel
[09:31] drudge has joined the channel
[09:34] yrashk has joined the channel
[09:36] pyro_: MrNibbles: it doesn't sound like something that would benefit from being written in node
[09:37] pyro_: it's cool though
[09:37] pyro_: are there bindings to any image libraries?
[09:39] zum: node-imagemagick at least http://github.com/ry/node/wiki/modules#graphics
[09:39] pyro_: MrNibbles: http://github.com/rsms/node-imagemagick
[09:39] pyro_: yeah
[09:39] pyro_: it's just a wrapper
[09:39] pyro_: but it's nice nonetheless
[09:40] pyro_: MrNibbles: http://github.com/nikhilm/squeeze
[09:40] ashb: ugh. imagemagick--
[09:41] pyro_: wats wrong with it?
[09:41] ashb: (just the lib, not specifically your wrapper there of)
[09:41] pyro_: better than gd
[09:41] ashb: i just don't get on with it
[09:41] pyro_: gd makes me want to kill kittens
[09:41] ashb: cairo is nice. and also not 200 years old
[09:41] pyro_: sechrist: ui for desktop apps?
[09:42] teemow has joined the channel
[09:42] sechrist: well.. yeah.. writing a desktop app in node sounds amazing
[09:42] pyro_: i wonder how long it wil take for a macnode to come out
[09:42] sechrist: macnode?
[09:42] pyro_: like macruby
[09:43] sechrist: oh like
[09:43] sechrist: super mac optimized 
[09:43] pyro_: cocoa/objective-c bridge
[09:43] pyro_: like
[09:43] sechrist: yeah
[09:43] pyro_: yeah
[09:43] pyro_: optimised in the sense that they play very nicely together
[09:43] pyro_: not performance-wise
[09:44] pyro_: i mean there's essentially already a javascript-cocoa bridge with webkit
[09:44] pyro_: but i'm not sure how well that goes at i/o
[09:44] Tim_Smart: ACTION just deleted his Facebook account.
[09:44] pyro_: you cant actually delete your facebook account
[09:44] pyro_: your data still remains on the open graph
[09:44] Tim_Smart: https://ssl.facebook.com/help/contact.php?show_form=delete_account ?
[09:44] pyro_: you can recover your account like 12+
[09:44] sechrist: it's true
[09:45] pyro_: that page
[09:45] Tim_Smart: Is deactivates for 14 days then gets deleted.
[09:45] pyro_: that's not
[09:45] pyro_: nah
[09:45] pyro_: see it doesnt say they delete your data
[09:45] sechrist: the only way to have your data deleted is to know an engineer
[09:45] pyro_: they just dont guarantee they can recover it
[09:45] sechrist: even after 12+ months I doubt they delete it
[09:45] pyro_: it's very much like google's policy
[09:45] Tim_Smart: Oh I don't care about my data..
[09:46] pyro_: they basically keep a copy forever
[09:46] pyro_: well since your data exists
[09:46] Tim_Smart: As long as my credentials get deleted.
[09:46] pyro_: and there are plenty of backdoors in facebook for sale
[09:46] pyro_: then anyone who wants it enough can have it
[09:46] caolanm: I think that in the UK its possible to get them to delete it under the data protection act
[09:46] sechrist: well I mean in reality it's either mined in a statistical analysis and dumped later or dumped some other time
[09:46] sechrist: they don't keep it forever
[09:46] pyro_: tbh mark doesnt give a shit about privacy
[09:47] sechrist: not even google keeps all of their data forever
[09:47] pyro_: i think they do
[09:47] pyro_: i found this creepy page on google the other day
[09:47] sechrist: facebook is at the frontier of the internet
[09:47] sechrist: people need to cut them a break
[09:47] pyro_: it listed all the accounts and info they have on me
[09:47] pyro_: it was quite scary
[09:47] pyro_: sechrist: dont make me laugh
[09:47] sechrist: the privacy settings are super granular
[09:48] sechrist: shut up
[09:48] pyro_: http://www.readwriteweb.com/archives/facebooks_zuckerberg_says_the_age_of_privacy_is_ov.php
[09:48] Tim_Smart: pyro_: I know the page you speak of. I don't find it scary tbh
[09:48] pyro_: no  no
[09:48] pyro_: that's a front
[09:48] sechrist: oh right and mark zuckerburg is illuminati
[09:48] sechrist: and everything that happens at facebook is direct cause of mark
[09:48] pyro_: no im not crazy
[09:48] pyro_: basically
[09:48] sechrist: there's no employees, board meetings, etc, just mark bossing around 400+ engineers
[09:48] pyro_: he has way too much influence at facebook
[09:48] pyro_: his ideas are insane
[09:48] sechrist: it's not JUST him
[09:49] pyro_: http://www.smh.com.au/technology/technology-news/cheque-proves-facebook-treachery-20100818-128z9.html
[09:49] pyro_: he also screwed over his engineers
[09:49] sechrist: google's schmidt is much worse
[09:49] mies has joined the channel
[09:50] elliottkember has joined the channel
[09:50] pyro_: ZUCK: yea so if you ever need info about anyone at harvard ZUCK: just ask ZUCK: i have over 4000 emails, pictures, addresses, sns FRIEND: what!? how'd you manage that one? ZUCK: people just submitted it ZUCK: i don't know why ZUCK: they "trust me" ZUCK: dumb fucks
[09:50] sechrist: I TAKE % UNTIL WE LAUNCH
[09:50] sechrist: fantastic contract
[09:50] sechrist: pyro_: that was in like 2006
[09:51] pyro_: it doesnt matter when it was
[09:51] sechrist: I know he's ridiculous but all of facebook isn't
[09:51] pyro_: i was there in the zend framework channels when they were writing facebook
[09:51] pyro_: their attitude towards privacy and their general sloppiness is disturbing
[09:52] sechrist: general sloppiness lol
[09:52] sechrist: I think you have a skewed view of facebook from australia
[09:52] jakehow has joined the channel
[09:52] pyro_: how does where i live influence my view on facebook
[09:53] pyro_: besides not feeling any sense of patriotism towards it
[09:53] stagas has joined the channel
[09:53] pyro_: it's not as if i get my news from predominately australian sources
[09:53] sechrist: :P
[09:55] MrNibbles: the zucker bug
[09:56] MrNibbles: it stalks you on teh interwebz
[09:56] MrNibbles: you cannot block it on facebook
[09:56] sechrist: facebook is an impressive operation
[09:56] MrNibbles: fear. knows. no. bounds.
[09:56] MrNibbles: pyro_: thanks for that squeeze link
[09:57] MrNibbles: although ti doesnt seem to cache your images
[09:57] MrNibbles: and its not free :S
[09:57] sechrist: facebook isn't apple, zuck just can't boss around everybody
[09:57] V1 has joined the channel
[09:57] sechrist: if steve jobs worked at facebook
[09:57] sechrist: might have a problem
[09:57] pyro_: MrNibbles: didnt look into it too much, that sucks
[09:58] MrNibbles: pyro_: also, i would argue that node is just as viable a platform to write this in as any
[09:59] pyro_: MrNibbles: somewhere
[09:59] pyro_: there's an article on the sorts of things that are faster and slower in node
[09:59] tobeytailor has joined the channel
[09:59] pyro_: this isn't one of the things that's faster
[09:59] MrNibbles: if you are thinking about image processing
[10:00] MrNibbles: that does not happen within node
[10:00] pyro_: i understand that
[10:00] pyro_: it's just that
[10:00] pyro_: it's basically a static file server
[10:00] pyro_: with a little image processing added in
[10:00] pyro_: and a static file server
[10:00] paulwe has joined the channel
[10:00] pyro_: is one of the slowest things you can do in node
[10:01] pyro_: _unless_
[10:01] pyro_: you have a shitload of ram
[10:01] pyro_: and can serve from memory
[10:01] pyro_: rahl himself wrote or did a video on it i cant remember which
[10:01] MrNibbles: i see, of course thats going to be slow
[10:01] MrNibbles: but it would be slow on any platform
[10:02] spetrea: I need to render a 8x8   2D array in Firebug, how should I do that ?
[10:02] MrNibbles: any file system operations take years
[10:02] pyro_: like a bitmap?
[10:02] pyro_: or ints or what?
[10:03] pyro_: MrNibbles: i'll find the article or whever i read it
[10:03] pyro_: it explains it better than i can
[10:03] MrNibbles: pyro_:  i have a feeling i read the same one :)
[10:03] pyro_: im not saying dont do it
[10:03] MrNibbles: and i do agree with you
[10:03] MrNibbles: but its not going to be any slower than any other platform
[10:03] pyro_: because one day soon it will be hardly and slower than c
[10:03] pyro_: but atm
[10:03] pyro_: it's probably an order of magnitude slower
[10:03] MrNibbles: well, i am shit at C
[10:04] pyro_: nobody is shit at c
[10:04] pyro_: c is beautifully simple
[10:05] pyro_: MrNibbles: it's interesting
[10:05] pyro_: because the node version could actually be faster than something like nginx
[10:05] aubergine has joined the channel
[10:05] pyro_: if you had a reasonably small amount of data and a very large amount of clients
[10:05] MrNibbles: yeah, there are going to be no more than about 10 images cached at the same time
[10:05] MrNibbles: all in ram
[10:06] pyro_: then i believe it's faster than apache
[10:06] MrNibbles: yeah it will be
[10:06] MrNibbles: but if people pick this up then start throwing millions of images at it, its not going to be happy
[10:07] teemow has left the channel
[10:07] teemow has joined the channel
[10:07] pyro_: you could let a caching deamon sort that out for you
[10:07] pyro_: keep the most accessed in memory and put the rest on ice
[10:08] pyro_: something like memcached i believe can do that
[10:08] pyro_: here we go
[10:08] pyro_: this was in april
[10:08] pyro_: Platform	# requests/sec PHP (via Apache)	3187.27 Static (via Apache)	2966.51 Node.js	5569.30
[10:10] pyro_: how many bytes in 1-1 000 000
[10:10] pyro_: as a string
[10:10] pyro_: somsone write me a node app ^w^
[10:11] gthb has joined the channel
[10:11] pyro_: anyway
[10:11] pyro_: yeah
[10:11] pyro_: from memory node owns
[10:15] jimmy203 has joined the channel
[10:15] jimmy203: Anyone got any examples of using session stores with expressjs?
[10:17] ntelford has joined the channel
[10:19] ivong has joined the channel
[10:24] aliem has joined the channel
[10:25] micheil: pkrumins: ping
[10:30] JimBastard has joined the channel
[10:31] jacobolu_ has joined the channel
[10:36] vvsh has joined the channel
[10:37] paulwe has joined the channel
[10:39] ashb: http://www.arewefastyet.com/
[10:39] ashb: </troll>
[10:39] ashb: ;)
[10:39] JimBastard: sup ashb 
[10:39] ashb: just hating on rails at the mo
[10:40] JimBastard: i just made a little rails fu project
[10:40] JimBastard: i can turn node modules into RESTFul web-services in one line
[10:40] ashb: rails has too much magic and action at a distance. its really hard to figure out
[10:41] fermion has joined the channel
[10:41] peol_ has joined the channel
[10:41] peol_ has joined the channel
[10:43] Cainus: anyone use node-mysql ?  I can't get the simple1.js example simply won't give me error output on bad connection info or bad queries... am I doing something wrong? 
[10:43] JimBastard: _announcer doesnt pick up any of my tweets >.<
[10:44] Cainus: wow that almost made sense
[10:44] phil has joined the channel
[10:44] ashb: oh yeah - while some poeple are alive - whats the easiest way to port a commonjs test suite which uses the require('test') module to node?
[10:44] Tim_Smart: JimBastard: Not working here either.
[10:44] JimBastard: Tim_Smart: not getting your tweets either?
[10:45] JimBastard: lame
[10:45] Tim_Smart: Naw.
[10:45] Tim_Smart: It hasn't posted a tweet for a few hours yet, so...
[10:45] JimBastard: well
[10:45] JimBastard:     /* #node.js restful web-service */var ws = require('./lib/webservice'), fs = require('fs');ws.createServer({'fs': fs}).listen(8080);
[10:45] JimBastard: that was it
[10:45] JimBastard: node.js webservice in one tweet?
[10:46] JimBastard: restful
[10:46] JimBastard: >.<
[10:46] pkrumins: micheil, pong
[10:46] Cainus: where's the rest part?
[10:46] micheil: why can't I do: ws.createServer(fs)?
[10:47] mies has joined the channel
[10:47] pkrumins: micheil: is that a question for me?
[10:47] JimBastard: micheil: i wish you could tell me how
[10:47] JimBastard: really
[10:47] micheil: pkrumins: with your node-async code, what's with the lines that Ref and Unref the async value?
[10:47] JimBastard: i dont think its possible, i was scratching my head for a while
[10:47] JimBastard: how do you know the name of a module passed in?
[10:47] JimBastard: is the name attached to the module object?
[10:47] micheil: hmm.. no
[10:47] micheil: just wondering'
[10:47] JimBastard: i tried soo many things
[10:47] JimBastard: lol
[10:48] JimBastard: good question
[10:48] Tim_Smart: fs.name = 'fs'? :p
[10:48] JimBastard: Tim_Smart: im thinking of enforcing a convention on modules for additional "remote" properties
[10:48] pkrumins: micheil: increase reference count on the object so that v8 garbage collector doesn't collect the object somewhere between async call returns
[10:48] JimBastard: for this thing
[10:48] JimBastard: maybe
[10:48] micheil: pkrumins: that sounds like it'd be a good idea to do then
[10:49] JimBastard: micheil: you check this out yet? http://github.com/Marak/webservice.js it works
[10:49] JimBastard: there is a nice html page for browsing the modules
[10:49] JimBastard: well, "nice" is a relative term
[10:49] JimBastard: >.<
[10:50] micheil: pkrumins: also, should the initial malloc allocate space for how big the results struct could be?
[10:50] MattJ has joined the channel
[10:51] micheil: for example, requesting a user's details based on uid, there's a grp symbol or type
[10:51] micheil: should I be allocating space for that as a filled object, or just having that as an item in the EIO req struct be enough?
[10:52] adambeynon has joined the channel
[10:52] micheil: pkrumins: and asides from the usage of classes, is there anything else in that code that explicitly makes it C++ and not C?
[10:52] pkrumins: micheil: put a pointer in the struct and allocate space just for it, then when you're in the async call, allocate memory for that pointer there.
[10:53] pkrumins: (if i understand your question correctly)
[10:53] pkrumins: micheil: not really, the async stuff is actually plain C.
[10:53] micheil: hmm.. okay
[10:53] micheil: it's just been about 6 months since I've worked on this patch
[10:53] micheil: so I'm trying to figure out a little bit and also if I'm still wanting to work on it
[10:54] micheil: it's for a few os related methods
[10:54] micheil: such as get user by username / uid
[10:54] micheil: get group by name / gid
[10:54] sideshowcoder has joined the channel
[10:56] gJ|Alex has joined the channel
[10:58] lachlanhardy has joined the channel
[10:59] paulwe has joined the channel
[11:03] jimmy203: anyone use express.session()?
[11:04] jimmy203: I`m getting the following error when I try to init it - http://pastebin.com/P0uHDpwG
[11:05] TobiasFar has joined the channel
[11:07] mikew3c_ has joined the channel
[11:07] jimmy203: What is the best way to update node?
[11:08] stagas: I open sourced http://radioplz.com anyone wanna fork it and play with it here: http://github.com/stagas/radioplz
[11:08] mcarter has joined the channel
[11:08] tobiassjosten has joined the channel
[11:09] stagas: announcer is dead :(
[11:09] JimBastard: stagas: yeah he is
[11:09] JimBastard: !tweet but _frankie is keeping it real
[11:10] stagas: and nodejs.se is dead too
[11:10] stagas: where would we get news now
[11:11] wakawaka has joined the channel
[11:11] Tim_Smart has joined the channel
[11:11] zorzar_ has joined the channel
[11:11] stagas: mape?
[11:12] JimBastard: lulz
[11:14] pkrumins: oh, micheil, you're @miksago
[11:15] mif86 has joined the channel
[11:15] pkrumins: just noticed your tweet.
[11:18] x_or has joined the channel
[11:20] delapouite has joined the channel
[11:22] AAA_awright: Does the crypto module work?
[11:23] AAA_awright: ah there
[11:31] elliottkember has joined the channel
[11:34] jimmy203: Are there any issues/conflicts with the latest node release and npm?
[11:34] stagas: jimmy203: no, be sure to git checkout the latest branch though
[11:34] stagas: stable branch that is
[11:35] jimmy203: git clone git://github.com/ry/node.git
[11:35] jimmy203: that should work right?
[11:35] stagas: yes but you need to cd node
[11:36] stagas: and git tag to see the branches
[11:36] jimmy203: Im getting this issue with npm update - http://github.com/isaacs/npm/issues#issue/233
[11:36] stagas: and then: git checkout v0.2.2
[11:36] beawesomeinstead has joined the channel
[11:37] stagas: try building the stable branch and see how it goes
[11:37] lorewarden has joined the channel
[11:37] lorewarden has left the channel
[11:37] ivanfi1 has left the channel
[11:38] jimmy203: stagas: looks like I installed v0.3.0-pre of node
[11:40] FuzzYspo0N has joined the channel
[11:40] Tim_Smart: jimmy203: clone the npm repo, then in the repo root run: `node cli.js rm npm && node cli.js install`
[11:40] ekidd has joined the channel
[11:41] shockie has joined the channel
[11:41] jimmy203: ok I`ll give it a shot
[11:42] micheil: pkrumins: yup.
[11:45] voodootikigod__ has joined the channel
[11:45] micheil: JimBastard: best to do a clone then checkout v0.2.0
[11:45] voodootikigod__: anyone played with iowatchers in here?
[11:45] micheil: nup
[11:46] jetienne has joined the channel
[11:46] micheil: jimmy203: ^^ that was for you, not JimBastard 
[11:46] wao: um
[11:46] wao: isn't better ndistro for managment node, modules etc?
[11:46] micheil: voodootikigod: whatcho need them for?
[11:46] jimmy203: ok thanks :)
[11:46] elliottkember has left the channel
[11:46] voodootikigod__: using them to watch for reads on the serial port code
[11:47] voodootikigod__: but seems to just constantly trigger events
[11:47] jimmy203: ERR! Error: Failed to make /usr/local/lib/node/.npm/.tmp while ensuring /usr/local/lib/node/.npm/.tmp
[11:47] jimmy203: I just get this?
[11:47] voodootikigod__: not one event per condition
[11:47] micheil: voodootikigod: hm.. audrino hacking?
[11:47] voodootikigod__: that and zwave
[11:47] voodootikigod__: and usb
[11:47] voodootikigod__: and..
[11:47] micheil: voodootikigod: perhaps talk to one of the uxebu guys
[11:48] micheil: I know they were playing with node + audrino
[11:48] micheil: I forget who exactly though
[11:49] voodootikigod__: yea nonken and tobias i am wirting the serial port adaper for them :)
[11:49] micheil: ah, okay
[11:50] micheil: voodootikigod: perhaps wait 4 hours and talk to ryah ?
[11:50] voodootikigod__: thats my plan
[11:50] voodootikigod__: jump on and ask the same question every 4 hours :)
[11:55] jimmy203 has joined the channel
[11:55] paulwe has joined the channel
[11:55] ivanfi1 has joined the channel
[11:55] micheil: voodootikigod: have you tried using the network mdoule to access say /dev/serial
[11:55] micheil: or whatever it's mount point is?
[11:56] voodootikigod__: the writing is done
[11:56] voodootikigod__: its the reading
[11:56] jimmy203: micheil: I`m new to git how do I checkout 2.2 of node after I have cloned it? 
[11:56] voodootikigod__: i can write out the port perfectly fine
[11:56] micheil: jimmy203: git checkout v0.2.0
[11:56] voodootikigod__: and net module doesnt work because you need to set the baud rates, data bits, parity, etc
[11:56] micheil: voodootikigod: ah, okay
[11:58] jimmy203: thanks :)
[11:58] dnolen has joined the channel
[11:58] okuryu has joined the channel
[11:58] micheil: voodootikigod: is the code on github already?
[11:59] voodootikigod__: http://github.com/voodootikigod/node-serialport/commits/master/serialport_native
[11:59] voodootikigod__: err
[11:59] voodootikigod__: http://github.com/voodootikigod/node-serialport
[12:00] JimBastard: IT SAYS NO PEEKING
[12:01] crohr has joined the channel
[12:01] voodootikigod__: dats right
[12:01] voodootikigod__: its how i make sure it slips under the radar
[12:01] voodootikigod__: pretty effective no?
[12:01] JimBastard: hrmmmm
[12:02] stagas: I think it has the opposite effect
[12:02] JimBastard: perhaps time for coffee 
[12:05] hellp has joined the channel
[12:06] micheil: voodootikigod: what's the actual error that gets thrown?
[12:06] voodootikigod__: its not an error
[12:06] voodootikigod__: exception
[12:06] voodootikigod__: so the io watcher
[12:06] voodootikigod__: it does detect the new io in the file
[12:06] voodootikigod__: if you push code i
[12:06] voodootikigod__: int
[12:06] micheil: okay, what actually happens
[12:06] voodootikigod__: it will trigger
[12:07] voodootikigod__: and it just keeps triggering
[12:07] voodootikigod__: but it never stops
[12:07] voodootikigod__: to test
[12:07] voodootikigod__: make
[12:08] voodootikigod__: node test_read.js
[12:08] voodootikigod__: node test_write.js
[12:08] voodootikigod__: and watch it go crazy
[12:11] digitalspaghetti: coffee sounds like a good idea
[12:11] micheil: voodootikigod: does nothing on my mac.
[12:11] zemanel: star it biatches http://code.google.com/p/googleappengine/issues/detail?id=3745
[12:11] zemanel: :)
[12:12] micheil: voodootikigod: I've made it, and then I start test_read, it just sits there
[12:12] micheil: then I fire node test_write and nothing
[12:12] micheil: happens
[12:12] voodootikigod__: i may have pulled the debug out
[12:12] voodootikigod__: hold
[12:12] tahu has joined the channel
[12:12] micheil: k
[12:13] voodootikigod__: yup 
[12:13] voodootikigod__: try now
[12:13] voodootikigod__: so it just outputs "read callback" when the callback is triggered
[12:13] voodootikigod__: it goes ballistic
[12:13] voodootikigod__: when there is a write
[12:13] voodootikigod__: like apeshit ballistic
[12:13] voodootikigod__: but never executes the read
[12:13] micheil: I see one read callback, then nothing else
[12:15] SingAlong has joined the channel
[12:15] micheil: hangon.. works intermittenly
[12:15] voodootikigod__: brb
[12:15] voodootikigod__: baby crying
[12:15] micheil: k
[12:16] SingAlong: any way I can contribute to node? (any missing but required modules?)
[12:16] xla has joined the channel
[12:16] micheil: SingAlong: if something interests you, work on it.
[12:17] micheil: eg, I think a flockdb in pure node would be pretty cool
[12:17] bpadalino: is there libz support yet?
[12:18] SingAlong: micheil: oh the twitter one?
[12:18] micheil: yeah
[12:18] micheil: but binary and network protocols interest me
[12:18] micheil: bpadalino: I don't think so, explain what it does though
[12:18] bpadalino: what libz does ?
[12:18] SingAlong: micheil: its an uncompression library
[12:18] micheil: yah
[12:18] jashkenas has joined the channel
[12:19] micheil: hmm..
[12:19] bpadalino: gzip compression for transferring over http
[12:19] micheil: there is node-compress
[12:19] d0k has joined the channel
[12:19] bpadalino: ah look at that
[12:19] bpadalino: that looks great
[12:20] bpadalino: ok, off to shower then work
[12:20] bpadalino: the start of a good day it seems
[12:21] matschaffer has joined the channel
[12:25] micheil: anyway, I'm out for a few hours.
[12:26] micheil: if voodootikigod asks, I'll be back in probably 4-6 hours.
[12:31] CrabDude has joined the channel
[12:37] charlenopires has joined the channel
[12:38] mies has joined the channel
[12:44] kriszyp has joined the channel
[12:44] trotter has joined the channel
[12:49] mape: stagas: FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory
[12:49] mape: apparently
[12:49] stagas: mape: what?
[12:49] mape: that is why nodejs.se is down
[12:49] stagas: ah
[12:50] stagas: mape: are you using your boilerplate?
[12:50] mape: yeah
[12:50] stagas: disable gzip
[12:50] mape: but with twitter streamy thingy
[12:50] stagas: connect
[12:50] stagas: because it hangs
[12:50] mape: ah yeah did it
[12:50] mape: oops, seems I didn't, thanks for the reminder
[12:51] stagas: gzip needs a timeout to kill processes that hung
[12:51] stagas: in connect
[12:54] mape: yeah I removed it on my other projects and used nginx for gziping instead
[12:57] rwaldron has joined the channel
[12:57] figital has joined the channel
[12:57] SamuraiJack_ has joined the channel
[12:57] Eber has joined the channel
[12:58] Eber: Hey guys... Anyone here using RightJS server-side / client-side anywhere?
[12:59] boaz has joined the channel
[13:00] Eber_ has joined the channel
[13:00] adambeynon has joined the channel
[13:00] Eber_: Hey guys... Anyone here using RighJS anywhere?
[13:00] Eber_: RightJS*
[13:02] evanpro has joined the channel
[13:02] hellp has joined the channel
[13:02] stagas: mape: let me test it now :P
[13:04] aheckmann has joined the channel
[13:08] agnat has joined the channel
[13:09] femtoo has joined the channel
[13:10] trotter has joined the channel
[13:10] thijser has joined the channel
[13:11] thijser: is it possible to get heap map overviews in node.js?
[13:11] thijser: e.g. using the chromium dev tools?
[13:11] thijser: the --debug option doesn't support memery heap profiles...
[13:13] devkorcvince has joined the channel
[13:18] batok has joined the channel
[13:18] x_or has joined the channel
[13:20] jchris has joined the channel
[13:22] stalled has joined the channel
[13:22] voodootikigod_: micheil: back
[13:22] wavded has joined the channel
[13:22] wavded has left the channel
[13:24] neptun3 has joined the channel
[13:25] admc has joined the channel
[13:25] ceej has joined the channel
[13:26] jherdman has joined the channel
[13:26] wavded has joined the channel
[13:27] wavded has left the channel
[13:27] wavded has joined the channel
[13:27] wavded has left the channel
[13:27] digitalsatori has joined the channel
[13:29] dipsio: is it true, that there arent any selecting methods for couchdb? just plain read and write?
[13:29] dipsio: cant find that
[13:29] JimBastard: ?
[13:29] JimBastard: dipsio: you mean like views?
[13:29] dipsio: dunno
[13:29] devkorcvince: hello which is great couchDb or MongoDb
[13:30] Epeli: both :)
[13:30] JimBastard: dipsio: http://browsertoolkit.com/fault-tolerance.png
[13:30] JimBastard: there you go
[13:30] FuzzYspo0N: good answer Epeli
[13:30] JimBastard: whats a selecting method?
[13:30] dipsio: JimBastard: yeah :D
[13:31] c4milo has joined the channel
[13:31] devkorcvince: yap I think so both are great I'm having trouble chosing between couchDb and MongoDb 
[13:31] dipsio: i want to use it and not write the software
[13:31] dipsio: ^^
[13:31] thijser: any hard-core devvers here?
[13:31] JimBastard: with node?
[13:31] Nietecht has joined the channel
[13:31] FuzzYspo0N: rofl
[13:31] caolanm: dipsio: no, you cannot do ad-hoc queries in couchdb (unless you count temporary views, which you really don't want to be using in production)
[13:31] JimBastard: im soo lost
[13:31] FuzzYspo0N: i dev with heavy metal.
[13:32] JimBastard: caolanm: you can generate a view dynamically
[13:32] thijser: i'm trying to get a heap profile of my node.js app, seems impossible?
[13:32] JimBastard: doing it at run-time isnt ideal, but doing it the first time, im okay with
[13:32] caolanm: JimBastard: ...go on...
[13:32] JimBastard: we are working on this in http://github.com/indexzero/resourcer
[13:32] JimBastard: with cloudhead
[13:32] JimBastard: and cradle
[13:33] JimBastard: the idea is you create a model ahead of time
[13:33] JimBastard: and then create a set of views for that model
[13:33] JimBastard: right?
[13:33] thijser: can node.js be used with the chromium cpu profiler/heapmap tools?
[13:33] c4milo: Marak !, when is the next meetup of nyc.js ? 
[13:33] JimBastard: c4milo: second thursday next month
[13:33] caolanm: JimBastard: how is that creating a view dynamically?
[13:33] wavded has joined the channel
[13:34] digitaltoad has joined the channel
[13:34] wavded has left the channel
[13:34] JimBastard: caolanm: caus resourcer will autogenerate the view for you and create it in couch? behind the scenes?
[13:34] JimBastard: dunno if that counts
[13:34] caolanm: ah ok
[13:34] caolanm: I wouldn't count it ;)
[13:34] JimBastard: ahaha
[13:34] JimBastard: caolanm: you see the latest project im spamming?
[13:34] dipsio: oh man its so damn complicated to decide... mongodb (best readablity), couchdb (nice software around), redis (really cool stuff in it)
[13:35] caolanm: JimBastard: which particular project is that?
[13:35] JimBastard: caolanm: http://github.com/Marak/webservice.js
[13:35] evanpro has joined the channel
[13:36] wink_ has joined the channel
[13:36] dipsio: i like redis for selfdestroying objects :D
[13:37] The_Surfer has joined the channel
[13:37] The_Surfer: hello, is it possible to memory-debug my node.js script?
[13:38] JimBastard: The_Surfer: you got a mem leak?
[13:39] The_Surfer: JimBastard: not sure, maybe an object leak, mem usage keeps growing
[13:39] dipsio: ok which module do you advise for node.js? i will try that next... couchdb is unusable
[13:39] c4milo has joined the channel
[13:39] JimBastard: The_Surfer: how vanilla is your setup? what modules? are you doing gzip or ssl? are you doing a lot of req / res processing?
[13:40] JimBastard: dipsio: http://github.com/cloudhead/cradle
[13:40] dipsio: thx
[13:40] JimBastard: db.insert('vador', {     name: 'darth', force: 'dark' }, function (err, res) {     // Handle response });
[13:40] JimBastard: db.get('vador', function (err, doc) {     sys.puts(doc); });
[13:40] dipsio: looks ok
[13:40] JimBastard: its very nice
[13:41] JimBastard: cloudhead has quality stuff
[13:41] JimBastard: im using cradle as the database engine for our resourcer build
[13:41] The_Surfer: JimBastard: using the modules xml2js (sax.js) and redis only, no gzip/ssl, about 10-15 req/s
[13:41] stagas: JimBastard: you can build dev apis really quick with that
[13:41] stagas: when is post coming?
[13:41] bronson has joined the channel
[13:41] dipsio: oh nice :)
[13:41] JimBastard: stagas: whenever, it might ever work. i just didnt try
[13:41] JimBastard: stagas: i have no immediate need for it, so im just messin around
[13:42] JimBastard: The_Surfer: is there any chance you aren't closing requests? maybe on error? or bad conditional logic?
[13:42] JimBastard: stagas: you ever use coldfusion CFCs?
[13:42] stagas: nope
[13:43] javajunky has joined the channel
[13:43] JimBastard: they have the ability to set them as "remote" which exposes them via like 5 diffirent web-service protocols
[13:43] JimBastard: also it gives them build in docs
[13:43] crohr has joined the channel
[13:43] stagas: cool
[13:44] The_Surfer: JimBastard: pretty sure we covered all cases, we always close the connection on return
[13:44] stagas: it just needs a views parameter and it's a web framework
[13:44] JimBastard: The_Surfer: what about errors?
[13:45] voodootikigod__ has joined the channel
[13:45] JimBastard: i think mape has a profiler
[13:45] googol has joined the channel
[13:45] stagas: the one I was thinking of building these days
[13:45] mape: it is just a wrapper for the --prof one
[13:45] JimBastard: does that help with mem leaks at all
[13:45] JimBastard: ?
[13:45] stagas: I mean, having the api working and build the web app on top of it
[13:46] The_Surfer: JimBastard: all error handlers return and close the connection, so that shouldn't be the issue
[13:46] endtwist has joined the channel
[13:46] JimBastard: The_Surfer: i believe the counts. keep a counter and increment decrement
[13:46] MrNibbles: sigh
[13:46] MrNibbles: im doing it wrong
[13:46] JimBastard: i mean, prob not the issue...but it will give you idea
[13:46] JimBastard: mem leak could be anywhere, i dont know any profiling tools
[13:46] MrNibbles: i am doing the following:
[13:47] JimBastard: The_Surfer: you doing a scraping?
[13:47] mif86 has joined the channel
[13:47] MrNibbles: making a request to a url that returns an image, i am saving the data as binary to a file, but the data is not a valid image
[13:47] The_Surfer: JimBastard: good suggestion, let me check that. what do you mean with scraping? outgoing connections?
[13:47] stagas: JimBastard: I'm gonna hack it later today to see if I come up with something :) do you accept pull?
[13:48] JimBastard: stagas: for sure. there is an issue right now with the callback stuff
[13:48] MrNibbles: if i spooge the data back out in a response a browser reads the data fine
[13:48] MrNibbles: i am doing something terribly wrong :(
[13:48] JimBastard: stagas: currently it does some magic and allows for an anonymous callback to be defined in the url as string..
[13:48] JimBastard: stagas: im going to change it so that it can only take a method name, no arbitrary code. 
[13:48] JimBastard: does that make any sense?
[13:48] stagas: yes
[13:49] JimBastard: okay cool
[13:49] JimBastard: aside from that, go wild
[13:49] matclayton has joined the channel
[13:49] JimBastard: do you understand how query params are passed as method arguments ?
[13:49] stagas: by order?
[13:49] JimBastard: http://localhost:8080/fs/writeFile?filename=bar.txt&content=lol
[13:49] JimBastard: yes
[13:49] JimBastard: the turns into
[13:50] JimBastard: fs.writeFile('bar.txt', 'lol');
[13:50] JimBastard: it applys them in order
[13:50] stagas: ok
[13:50] JimBastard: :-D
[13:50] JimBastard: magic!
[13:50] stagas: hehe :)
[13:53] c4milo: marak which user run that ? 
[13:53] c4milo: root ? :)
[13:53] MrNibbles: http://gist.github.com/587934 <-- if someone can tell me why the data in imageData is not being saved as a valid image that would be great :(
[13:54] MrNibbles: if i dump imageData back out in the response as data type binary it works fine
[13:54] MrNibbles: as an image
[13:54] MrNibbles: but the saved file is not a valid image
[13:54] MrNibbles: i am missing something really obvious
[13:54] JimBastard: c4milo: the webservice?
[13:54] MrNibbles: and yes you can all chuckle at me :D
[13:55] c4milo: JimBastard: aha
[13:55] stagas: MrNibbles: ditch encoding=
[13:55] JimBastard: c4milo: so the pattern is, you create a new module that is intended to be publically exposed. inside this new module, you can apply validation if you want
[13:55] JimBastard: ill just pass in the req and res
[13:55] JimBastard: its up to the developer
[13:55] MrNibbles: stagas: in the response.write ?
[13:55] stagas: MrNibbles: in response.write
[13:55] MrNibbles: thats the bit that work
[13:55] MrNibbles: s!
[13:55] stagas: I mean leave just 'binary'
[13:55] stagas: it's not php
[13:55] MrNibbles: ah :P
[13:56] MrNibbles: stagas: the issue is where i write the image data to temporary file, the file is not a valid image
[13:57] MrNibbles: identify: Not a JPEG file: starts with 0xc3 0xbf `/tmp/tempImage11081-27174-kpynsy.jpg'.
[13:57] stagas: you need 'binary' there too I think
[13:57] MrNibbles: aha
[13:58] stagas: or not
[13:58] cferris has joined the channel
[13:58] MrNibbles: nope :(
[13:59] stagas: gist the temp module
[13:59] MrNibbles: stagas: you can find it here: http://github.com/bruce/node-temp
[14:00] MrNibbles: the files are created ok
[14:02] voodootikigod__ has joined the channel
[14:03] Throlkim has joined the channel
[14:05] tsyd has joined the channel
[14:05] tsyd: is it Node.JS, node.JS, Node.js or something else?
[14:06] tsyd: what's the *official* way of writing it?
[14:07] JimBastard: "kick-ass"
[14:09] stagas: MrNibbles: I don't know if it's that, but fs.write gets a buffer object according to the docs. did you try saving with writeFile bypassing the temp module?
[14:09] MrNibbles: im just trying that now :)
[14:09] aubergine has joined the channel
[14:10] matclayton has left the channel
[14:11] sdcooke has joined the channel
[14:11] digitalspaghetti: tsyd: i used to do node.js, but now i just do nodejs
[14:11] agnat: tsyd: I *think it's 'node.js' ... all lowercase and with a dot ... but if you need an *official* answer, you probably have to ask ry ...
[14:11] jimmy203 has joined the channel
[14:11] digitalspaghetti: my reason is #nodejs is more popular on twitter
[14:12] digitalspaghetti: is the author of radioplz in here?
[14:13] digitalspaghetti: stagas: it's you yea?
[14:13] stagas: digitalspaghetti: yeap
[14:13] digitalspaghetti: this.is.awesome!
[14:13] stagas: :)
[14:13] stagas: hack it plz :P
[14:13] matclayton has joined the channel
[14:13] digitalspaghetti: and it's all the kind of house/trance/techno stuff i like :)
[14:13] digitalspaghetti: stagas: i'm thinking scrobbling
[14:13] jimmy203: What is the best mehod of passing info back to a get? ie I have a login page on "/" that posts to "/login" and tests username pass if the details are incorrect it redirects back to "/" I want to display a message incorrect login details.
[14:14] ehaas has joined the channel
[14:14] jimmy203: at the moment I`m storing temporary session info to write out the message if incorrect login
[14:14] loincloth has joined the channel
[14:14] stagas: digitalspaghetti: cool :)
[14:14] digitalspaghetti: jimmy203: hang on, i have a bit of code doing that
[14:14] jimmy203: digitalspaghetti: great, thanks :)
[14:14] daniellindsley has joined the channel
[14:15] digitalspaghetti: i don't redirect to / on error though, but on success
[14:15] JimBastard has joined the channel
[14:15] jimmy203: thats fine
[14:15] MrNibbles: stagas: same issue
[14:16] stagas: MrNibbles: :/
[14:17] MrNibbles: ooh
[14:17] MrNibbles: actually]
[14:17] MrNibbles: i just forced binary on the file save
[14:17] digitalspaghetti: jimmy203: https://gist.github.com/89115c0f0c95ce9b0fbb
[14:17] MrNibbles: and it appears to be happy with it
[14:18] voodootikigod__ has joined the channel
[14:18] stagas: MrNibbles: ah yeah writeFile has encoding argument. does it work now?
[14:18] MrNibbles: it does indeed
[14:18] MrNibbles: yay
[14:18] digitalspaghetti: jimmy203: basically on post, just re-render the apge
[14:18] digitalspaghetti: *page
[14:18] digitalspaghetti: rather than passing back to the get
[14:18] MrNibbles: stagas: cheers matey
[14:19] stagas: MrNibbles: what you're doing could be useful in a module. you're fetching image to bypass cross domain right?
[14:19] digitalspaghetti: jimmy203: infact, this might be slightly better (hang on till i edit it)
[14:19] MrNibbles: that, and to perform image processing and caching
[14:19] MrNibbles: i will certainly consider moduling 
[14:19] stagas: MrNibbles: yeah I want that in a module :)
[14:20] jimmy203: digitalspaghetti: I see :) the problem is I have multiple pages with the different layouts and I call the /login to do the test and use res.redirect('back');
[14:20] stagas: MrNibbles: please do!
[14:20] antares_ has joined the channel
[14:20] Ezku_ has joined the channel
[14:20] jimmy203: Thanks for the example :)
[14:20] hansek has joined the channel
[14:20] digitalspaghetti: jimmy203: ahh, well i've updated the example
[14:21] ysinopsys has joined the channel
[14:21] digitalspaghetti: you could maybe do a check on an errors array and based on that, set some session data and that will get passed to the view
[14:21] digitalspaghetti: like you see i am setting req.session.name, now that session is set.  You could do something like req.session.error = foo
[14:21] shockie_ has joined the channel
[14:22] jimmy203: yep that is exactly what I`m doing :)
[14:22] jimmy203: I was just woundering if it was right to set that info in a session or not :)
[14:22] jimmy203: Thanks 
[14:23] JimBastard has joined the channel
[14:23] pwrfail has joined the channel
[14:24] jimmy203: I haven`t hashed my passwords yet; so I`ll take a look into crypto next 
[14:24] bradleymeck has joined the channel
[14:24] alexb_ has joined the channel
[14:25] bradleymeck: dilvie in response to minifiers a lot of that depends on settings \n takes up as much room and is just as fast to parse as ;
[14:26] aubergine has joined the channel
[14:26] jtsnow has joined the channel
[14:28] stagas: digitalspaghetti: if you know any more stations add them in radios.js and I'll pull them in the live site. make sure it's an mp3 stream cause flash doesn't do aac
[14:29] digitalspaghetti: oh is it using flash?
[14:29] digitalspaghetti: i haven't had a proper look yet
[14:30] stagas: soundmanager actually uses it
[14:31] digitalspaghetti: oh, there is a nodejs module for reading audio streams and outputing using an <audio> tag :D
[14:31] digitalspaghetti: i thought it was maybe using that
[14:32] digitalspaghetti: but no matter, it's still cool and very quick
[14:32] sonnym has joined the channel
[14:33] ben_alman has joined the channel
[14:34] stagas: <audio> doesn't stream :(
[14:35] stagas: not cross browser that is
[14:35] bradleymeck: is there a deterministic amount of latency you could chain audio tags in a queue of sorts?
[14:35] davidsklar has joined the channel
[14:36] bradleymeck: would need a rather big chunk size though prolly...
[14:36] stagas: that'd be a major hack!
[14:36] dipsio: i tried to update my node version from v0.1.102 to the 0.2.2  but it throws an error on osx: Could not install the file '/usr/local/include/node/eio.h'
[14:37] digitalspaghetti: chown -R $USER /usr/local
[14:37] digitalspaghetti: problem solved
[14:37] davidsklar has joined the channel
[14:37] stagas: the audio tag is designed by people that never ever ever worked with audio in their life
[14:37] dipsio: omg forgot sudo ^^
[14:37] stagas: so lame
[14:37] dipsio: thx anyway digitalspaghetti 
[14:38] digitalsatori has joined the channel
[14:38] alexb_: In libraries is it more kosher to use events and emit error/success or to use a callback and pass back errors as the first argument?
[14:38] digitalspaghetti: stagas: most stuff in the browser is designed by people who have never used it
[14:38] JimBastard: alexb_: both?
[14:39] bradleymeck: alexb_ depends on many possibilities those 2 signatures generally mean different things
[14:39] stagas: it's the same ppl that probably had the idea of <bgsound>
[14:39] bradleymeck: returning an event emitter generally associates that it is a 1 time deal or that the data of the cb must be prepared before hand
[14:39] alexb_: Ok, I have started seeing err as first arg a lot of places so i thought maybe that is the official pattern
[14:39] bradleymeck: sorry that was for callbacks
[14:40] sudoer has joined the channel
[14:40] JimBastard: morning bradleymeck 
[14:40] bradleymeck: event emitters mean it is a init that can possibly turn into multiple events rather than just having 1 kind of error or callback etc
[14:40] pbradek has joined the channel
[14:40] stagas: apparently it was a cool thing to open a page and play an audio file with no way to stop it until it finishes
[14:40] bradleymeck: morning jim
[14:40] stagas: now they call it <audio> and they added a .pause method. that's about it
[14:42] tobeytailor has joined the channel
[14:42] JimBastard: bradleymeck: i got that webservice.js thing working and released. i think there is something to be had there
[14:45] cloudhead has joined the channel
[14:45] softdrink has joined the channel
[14:46] bradleymeck: nice!
[14:47] sudoer has joined the channel
[14:47] davidwalsh has joined the channel
[14:47] pwrfail has joined the channel
[14:48] bradleymeck: been interested in webservice automated rollout
[14:48] ajpiano has joined the channel
[14:48] SingAlong: JimBastard: on github?
[14:49] JimBastard: SingAlong: http://github.com/Marak/webservice.js
[14:49] JimBastard: code is like, one day of work
[14:49] JimBastard: but the concept is good i think
[14:49] SingAlong: JimBastard: fine as long as it works :)
[14:49] JimBastard: we could enforce some optional conventions inside modules
[14:49] JimBastard: take a config method or something
[14:50] JimBastard: it makes soo much sense for what we do with resourcer
[14:50] Blink7 has joined the channel
[14:50] JimBastard: all of our models are eventemitters
[14:50] JimBastard: so we can just expose the model via this thing...
[14:50] SingAlong: JimBastard: a cool idea.
[14:51] JimBastard: id like to see dnode / socket.io integration or something
[14:51] JimBastard: gonna play with it
[14:51] Yuffster has joined the channel
[14:52] SingAlong: JimBastard: you have any suggestions for modules i could write? bored to death
[14:53] wavded has joined the channel
[14:53] wavded has left the channel
[14:54] digitalspaghetti: JimBastard: when you say your models are eventemitters, do you mean you could hook in pre/post save signals?
[14:54] JimBastard: digitalspaghetti: on any method
[14:54] JimBastard: one sec
[14:55] JimBastard: ['create', 'save', 'update', 'destroy', 'get']
[14:55] digitalspaghetti: basically, if I could not use Django for this project, but do it in nodejs it would actually make my life a hell of a lot easier
[14:55] digitalspaghetti: because trying to get Django to work with JSON nicely is a PITA
[14:56] jpld has joined the channel
[14:56] jpld has joined the channel
[14:56] digitalspaghetti: django-piston (a rest service) just doesn't work, and the app is heavily coded on the frontend in ExtJS
[14:57] silentrob has joined the channel
[14:57] digitalspaghetti: so if I could just pass a JSON object to something and save it, and have event emitters for other models to hook in that would just be amazing :)
[14:58] JimBastard: digitalspaghetti: lol yeah
[14:58] JimBastard: ive been focusing on pieces of a framework for months
[14:58] JimBastard: i kinda refused to start any "Framework" code
[14:58] JimBastard: hook.io is a framework, but thats not for building web apps
[14:59] JimBastard: now all the pieces are kinda coming together
[14:59] digitalspaghetti: yea, this is a relativly complicated app
[14:59] nerdEd has joined the channel
[14:59] digitalspaghetti: a lot of bits that fit togther and feed up to build business continuity plans
[15:00] drostie has joined the channel
[15:00] dnolen has joined the channel
[15:02] bradleymeck: jimbastard, license on nexpect?
[15:03] JimBastard: bradleymeck: MIT, you need it?
[15:03] JimBastard: im just lazy
[15:03] JimBastard: sorry
[15:03] Me1000 has joined the channel
[15:03] bradleymeck: yea...
[15:03] JimBastard: ill add it right now!
[15:04] bradleymeck: using it finishing git deploy hook then :)
[15:04] benburkert has joined the channel
[15:04] mies has joined the channel
[15:04] aurynn has joined the channel
[15:05] bradleymeck: kinda funny though, using `touch` to get node to reload in env vars rather than spawning a new node instance and spewing stuff over tcp
[15:07] phil- has joined the channel
[15:08] nefD: hmmmm anyone seen felix?
[15:08] streampunk has joined the channel
[15:08] JimBastard: nefD: naaah
[15:10] tj has joined the channel
[15:10] JimBastard: bradleymeck: http://github.com/nodejitsu/nexpect
[15:10] JimBastard: updated
[15:11] daniellindsley has joined the channel
[15:11] bradleymeck: nice
[15:12] mitkok has joined the channel
[15:13] SingAlong has joined the channel
[15:14] EyePulp has joined the channel
[15:15] killfill: anyone uses connect-assetmanager?
[15:15] killfill: cannot make it works.. :S
[15:15] mif86 has joined the channel
[15:15] zemanel has joined the channel
[15:16] tg: hm, strange, after upgrading to 0.2.2 require doesnt work for me in repl, it can't find anything
[15:16] killfill: whats route for?
[15:18] JimBastard: tg: did you update npm
[15:19] tg: no
[15:19] boaz has joined the channel
[15:19] tg: but it cant find anything even if i specify an absolute/relative path
[15:19] mikeal has joined the channel
[15:20] jakehow has joined the channel
[15:22] BrianTheCoder has joined the channel
[15:22] digitalspaghetti: hmm, JetBrains said they would have nodejs support in their IDE around JSConf
[15:22] digitalspaghetti: that's the end of this week
[15:24] killfill: for webstorm?
[15:25] digitalspaghetti: i believe so
[15:25] digitalspaghetti: if they do, i'll buy it because i like pydev
[15:25] digitalspaghetti: eh, pycharm even
[15:26] jetienne has joined the channel
[15:27] jherdman has joined the channel
[15:29] x_or has joined the channel
[15:30] isaacs has joined the channel
[15:33] jherdman_ has joined the channel
[15:34] amerine has joined the channel
[15:35] amerine has joined the channel
[15:37] tg: ok found it, issue #293
[15:39] jimmy203: is there a method to strip whitespace from ejs templates?
[15:39] digitalspaghetti: all strings in nodejs have .trim() methods
[15:40] digitalspaghetti: you could trim the string before passing it to the template (or are you looking to compress the template?)
[15:40] jimmy203: thejs code in the template leaves a lot of whitespace behind especialy if you do loops :(
[15:41] sahazel has joined the channel
[15:41] jimmy203: I`m not sure how I would use trim on the template / view?
[15:41] digitalspaghetti: just use it, all EJS templates are, are javascript
[15:41] digitalspaghetti: for example you can do - console.log(foo) in a template and you get console output in the stdout on your console
[15:42] Adora has joined the channel
[15:42] digitalspaghetti: so if you are doing sommething like this
[15:42] tjholowaychuk: he means extra whitespace gets buffered for output
[15:42] digitalspaghetti: li= foo.bar.trim()
[15:42] jimmy203: thats right the whitespaces that gets buffered for output :)
[15:42] muk_mb has joined the channel
[15:42] tjholowaychuk: depends which implementation you use, but i think sometimes the closing tag has modifiers for whitespace control
[15:42] digitalspaghetti: oh, yah
[15:43] tjholowaychuk: mine does not
[15:43] tjholowaychuk: yet at least
[15:43] jimmy203: <%for (rs=0;rs<1000;rs++) {%><%}%>
[15:43] jimmy203: something like that if you put a charage return would return 1000 lines of nothing :)
[15:44] jimmy203: and I want to strip that out
[15:44] jimmy203: I`m using ejs with expressjs
[15:45] jimmy203: I`ll take a look see if I can find it on ejs.
[15:45] killfill: hm..
[15:45] killfill: im trying to use asset-manager.
[15:45] killfill: is there something woring wit this? http://pastebin.ca/1945139
[15:45] tjholowaychuk: since we dont parse the entire template (aka html etc) it would be a decent hack to add whitespace control
[15:45] tjholowaychuk: ^ jimmy203
[15:46] killfill: the style ans javascript files are not getting modified.. :S
[15:46] jimmy203: I could just impliment it on the partials
[15:47] killfill: mape: are you there?
[15:49] cferris: any modules out there like mechanize for node yet?
[15:50] technoweenie has joined the channel
[15:51] dylang has joined the channel
[15:54] thejefflarson has joined the channel
[15:54] steadicat has joined the channel
[15:55] jesusabdullah: What's mechanize?
[15:55] ivanfi1 has left the channel
[15:56] cferris: jesusabdullah: http://github.com/tenderlove/mechanize
[15:57] cferris: jesusabdullah: basically a really easy way to scrape and interact with html (i.e. filling and submitting forms and then parsing results)
[15:57] technoweenie: thats a port of an old perl lib 
[15:58] technoweenie: its pretty rad if thats what you need.  
[15:58] cferris: technoweenie: right. not hard to do manually, but yeah it makes life easy
[15:58] jesusabdullah: Hmm
[15:58] jesusabdullah: *chinrub*
[15:58] endtwist has joined the channel
[15:58] jesusabdullah: I'm not aware of a mechanize
[15:59] jesusabdullah: though there are definitely the tools there to make one
[16:00] Anti-X has joined the channel
[16:01] stephank has joined the channel
[16:02] dmcquay has joined the channel
[16:02] alexb_ has joined the channel
[16:03] aurynn: Mechanize is definitely awesome.
[16:07] softdrink has joined the channel
[16:09] gerred has joined the channel
[16:10] cferris: maybe i'll take a crack at porting it over... it could be really neat on node being async and all
[16:10] pwrfail has joined the channel
[16:12] Nietecht: Does crypto interpret strings always as utf-8 by default? (I'm not even sure if that question makes sense)
[16:14] boaz has joined the channel
[16:15] jesusabdullah: I think you have to set it, Nietecht
[16:15] jesusabdullah: but I only used it like once
[16:16] Nietecht: Well, I'm just porting some code from VB which I used before (go ahead, laugh) which specifically encoded the string to utf-8 before hashing it. I didn't see specific mention of it in the crypto documentation, went ahead and tried it and the results seem to be same, so it's working for for me. Just want to make sure it's not going to bite me in the ass later.
[16:17] jesusabdullah: Nah, I won't laugh
[16:17] jesusabdullah: though I will ask, how did you get sucked into vb? D:
[16:17] Nietecht: Well, it's a simple progress really, start off with asp, server upgrades to .net, use VB
[16:17] jesusabdullah: did you end up extending an excel spreadsheet into a business-critical server app? :(
[16:18] jesusabdullah: asp :S
[16:18] jesusabdullah: not that I can really talk there
[16:18] Nietecht: Haha, no I'm not doing crazy stuff like that, luckily
[16:18] jesusabdullah: all i did was read the intro to a book on vb.net once
[16:19] Nietecht: But I've always been more proficient in client-side JS, my server side code always tended to be a very thin layer, typically just for database communication, so I'm happy node is as good as it is
[16:19] Nietecht: No longer having to expose all the app logic on the client and all that
[16:20] Nietecht: Not that I was doing anything business serious, more a hobbyist if anything
[16:21] technoweenie: hey does anyone know mjr's github name
[16:21] jesusabdullah: It's not mjr?
[16:22] jesusabdullah: (apparently not)
[16:22] jesusabdullah: idk :(
[16:22] tjholowaychuk: technoweenie: mranney
[16:22] technoweenie: merci
[16:22] mjr_ has joined the channel
[16:23] jesusabdullah: Went to his web site
[16:23] technoweenie: oh node_redis didnt show up alphabetically because osx sorts that shit differently
[16:23] jesusabdullah: mindy ranney has an impressive-sounding resume
[16:24] mjr_: hey, that's my wife
[16:24] langworthy has joined the channel
[16:24] technoweenie: stalker
[16:24] technoweenie: mjr.com redirects to bio-rad.com
[16:24] mjr_: Somebody took mjr.com forever ago, and I've had ranney.com for a long time.
[16:24] mjr_: It used to be "MJ Research" or something.
[16:25] bmavity has joined the channel
[16:28] bmavity: hola, peeps
[16:29] vmthehut has joined the channel
[16:30] mikeal has joined the channel
[16:30] mjr_: technoweenie: I think I fixed both of your gripes in my redis client.  It support variable args on the command methods, and commands are queued when a connection isn't available.
[16:31] technoweenie: oh thanks dude, i was just going to look at that today :)
[16:31] bradleymeck: man watching #css is like watching 2 years into the past
[16:31] technoweenie: did you fix that other bug from friday afternoon?
[16:31] qFox has joined the channel
[16:31] mjr_: technoweenie: I can't remember which one that was, but tjholowaychuk and Tim_Smart have been sending in lots of bug fixes.
[16:31] freeformz has joined the channel
[16:31] technoweenie: ok
[16:31] mjr_: It's looking pretty good so far, but I'm sure there are a few other edges that haven't been tested yet.
[16:31] noahcampbell has joined the channel
[16:32] tjholowaychuk: there were/are a few
[16:32] tjholowaychuk: but getting fixed fast
[16:32] tjholowaychuk: mjr_: sent another this morning
[16:32] mjr_: yeah, already in there
[16:32] technoweenie: well i just remember you ducked out of here to go to rick's w/ 1 bug remaining on friday :)
[16:32] tjholowaychuk: I think that is the last one preventing my lib that was using fictorial's from working
[16:32] tjholowaychuk: k sweet
[16:32] bradleymeck: anyone got a workaround to get Element.addEventListener("DOMNodeInserted") working client side?
[16:32] nsm has joined the channel
[16:32] mjr_: technoweenie: oh yeah, I got that one.  Also did pub/sub over the weekend.
[16:32] technoweenie: nice
[16:33] technoweenie: i'm gonna look at the multi method, see if i can clean that up a bit
[16:33] evilhackerdude: tjholowaychuk: i noticed connect-redis doesn't work atm, require('connect').session.Store is undefined
[16:33] mjr_: Yeah, I'm not happy with the multi API yet.
[16:33] tjholowaychuk: evilhackerdude: old version of connect probably
[16:33] tjholowaychuk: just released a new one
[16:33] tjholowaychuk: 0.2.5
[16:33] evilhackerdude: wohoo, thanks
[16:33] mjr_: technoweenie: I'd sure appreciate a better way to do multi.
[16:33] tjholowaychuk: mjr_: still think we should maybe just kinda queue those like that one gist i sent
[16:33] rcy has joined the channel
[16:34] tjholowaychuk: since they act as a batch, you could just handle any exception present with a single callback
[16:34] mjr_: tjholowaychuk: yeah, a progressive API like that also lets you use the watch/unwatch things for cross session locking.
[16:34] vmthehut has joined the channel
[16:34] technoweenie: http://gist.github.com/588178
[16:35] mjr_: That looks so much better
[16:36] mjr_: tjholowaychuk's was using function chaining, which also looks nice.
[16:36] evilhackerdude: queuing++
[16:36] v8bot:  evilhackerdude has given a beer to queuing. 							queuing now has 1 beers.
[16:36] tjholowaychuk: +1 for the chaining thing
[16:36] technoweenie: yea that was my other idea
[16:36] technoweenie: chaining is kinda awkward
[16:37] mjr_: The issue I had was that you get a response from the individual multi commands, which might be an error, like a parse error, and then you might get another error when the command is actually run.
[16:37] tjholowaychuk: not really
[16:37] technoweenie: you're not building up a query with this, you're adding commands to a queue
[16:37] mjr_: It just got kinda awkward, so I did it this simple way where you have to have the commands all in data form, and they all go in at once.
[16:37] technoweenie: chaining makes more sense when you're building something, like an sql query:  select('*').from('foo').where('a = 1')
[16:38] technoweenie: but jquery does chaining (awkwardly), so w/e
[16:38] tjholowaychuk: yeah, but the response is only relevant once, aka some kind of .end() callback or something
[16:38] mjr_: Do people use multi progressively?
[16:38] tjholowaychuk: not a ruby-style block
[16:38] mjr_: Like start a multi session, feed in a command or two, do some other stuff, then feed in another few commands, then exec?
[16:38] tjholowaychuk: plus you could easily queue the same way... chaining is just a bonus for simple stuff
[16:39] technoweenie: do you get responses from individual multi commands
[16:39] mjr_: technoweenie: yeah, you kinda get two responses.  One when you feed it to the multi queue, and another as the reply from exec.
[16:39] xAFFEE has left the channel
[16:40] tjholowaychuk: you get +QUEUED blah blah
[16:40] evilhackerdude: tjholowaychuk: what happens with connect's removed middlewares? are some of them going into express?
[16:40] tjholowaychuk: evilhackerdude: like which?
[16:40] technoweenie: ah i havent used multi much. i updated the gist w/ a chained example
[16:40] Guest25874 has joined the channel
[16:40] tjholowaychuk: IMO the chaining would be good
[16:41] evilhackerdude: i had format in the list, didnt use it though
[16:41] technoweenie: actually, the err/res makes more sense to be passed into exec()
[16:41] tjholowaychuk: you can have .end() (or whatever) with (err, res)
[16:41] sprout has joined the channel
[16:41] tjholowaychuk: for the exec respond or an error for anything
[16:41] tjholowaychuk: queued or whatever
[16:41] vnguyen has joined the channel
[16:42] tjholowaychuk: technoweenie: ah, yeah that is what mine was http://gist.github.com/579673
[16:42] bpot has joined the channel
[16:42] vmthehut_ has joined the channel
[16:42] sprout has joined the channel
[16:42] tjholowaychuk: multi() could be a getter
[16:42] mr_daniel has joined the channel
[16:42] mjr_: Until I actually have a use case for multi, I think I'm going to let somebody else figure this out.  :)
[16:43] technoweenie: yea uh thats why i left the parens off
[16:43] technoweenie: well its actually because i'm a dirty ruby programmer
[16:43] technoweenie: our redis server is old, it doesnt even do multi
[16:44] vmthehut_ has joined the channel
[16:44] tjholowaychuk: evilhackerdude: nope that one is just gone all together
[16:45] jesusabdullah: Why no upgrade technoweenie?
[16:45] technoweenie: because 2.0 _just_ came out
[16:45] technoweenie: still need to setup haproxy or something to get a zero downtime upgrade
[16:45] jesusabdullah: I see
[16:45] technoweenie: apparently there was a problem upgrading redis awhile back where only half the data was kept.  so everyones pretty cautious about it
[16:46] jesusabdullah: >:O
[16:46] jesusabdullah: I'd be too tbh
[16:46] EyePulp: as long as it kept the *important* data who cares?
[16:46] technoweenie: which is too bad, redis 2.2 uses 1/5th the RAM that 2.0 does
[16:46] mjr_: technoweenie: any idea what your request rate is into redis?
[16:46] jesusabdullah: EyePulp: Define "important." >:P
[16:46] technoweenie: mjr_: no idea
[16:46] EyePulp: jesusabdullah: zounds! I am undone.
[16:47] V1 has joined the channel
[16:47] jesusabdullah: >:{D Nehehehe
[16:47] technoweenie: i guess we should try running one of those redis tool son it
[16:47] technoweenie: tools on it
[16:47] jesusabdullah: Maaaaaaaaaan
[16:47] jesusabdullah: I forgot to commit an image
[16:47] skampler: http://github.com/skampler/mredis/blob/f5c8082a607b6f777e5aa0062177363267824ab4/examples/redis-streaming-client.js
[16:47] jesusabdullah: and now I can't build this latex doc
[16:47] mbrochh has joined the channel
[16:47] jesusabdullah: unless I feel like redrawing it
[16:47] mbrochh has joined the channel
[16:48] jesusabdullah: I guess I could do that :(
[16:48] skampler: streaming responses in redis
[16:48] mjr_: skampler: that's cool.  I'm planning on adding streaming support to mine soon.
[16:48] skampler: very nice
[16:49] q_no has joined the channel
[16:50] mjr_: skampler: have you benchmarked your redis lib's request rate?  You've really embraced the events/streaming model, even for small requests, and I'm curious about how fast that is.
[16:51] skampler: well, i don't think it's not meant for small responses
[16:51] skampler: there are three types of clients at the moment, one that's just let the user provide callbacks, like ry's http-parser, one client which buffers like fictorials and yours, and one streaming
[16:52] skampler: so there's three different API's, if you will
[16:53] mjr_: I'd like to come up with one that allows both buffering style as well as streaming in/out for large responses.
[16:53] skampler: mjr_: i think we share that goal
[16:53] mjr_: Although, hmm.  I suppose if you really need that functionality, you could just use both of our libs at the same time.  :)
[16:53] skampler: i wonder if two seperate projects is the best way of evolving that kind of standard/api?
[16:53] skampler: 
[16:54] skampler: hah
[16:56] mjr_: I started actually working on streaming data in from HTTP, because I probably have a use for that, but unfortunately, I don't know the size of the body in advance, which sort of makes it unworkable in redis.
[16:56] mjr_: Unless you convert it to a list of chunks or something.
[16:56] aubergine_ has joined the channel
[16:56] mjr_: Then I stopped, because it was too hard.
[16:57] skampler: mjr_: in my example i use append 
[16:57] skampler: it's like streaming
[16:57] stalled has joined the channel
[16:58] caolanm has joined the channel
[16:58] skampler: and i wager redis represent keys as linked lists or whatever internally
[16:58] jchris has joined the channel
[16:58] chuhnk- has joined the channel
[17:00] sahazel has joined the channel
[17:00] creationix has joined the channel
[17:00] mjr_: oh, I didn't know about append
[17:00] skampler: mjr_: i think a write stream could override the stream.write and make a write an append command
[17:00] creationix: morning everyone
[17:00] skampler: yeah i'll do that next ;p
[17:01] mjr_: skampler: is append binary safe?
[17:01] emmanueloga has joined the channel
[17:01] skampler: yes if you send it as a multibulk request
[17:01] skampler: like your lib does 
[17:01] CIA-77: node: 03Jorge Chamorro Bieling 07master * rfc334b3 10/ lib/sys.js : sys.js: --needless Object.keys() --needless .map() in a single patch - http://bit.ly/aypFgs
[17:01] CIA-77: node: 03Tim-Smart 07master * r0f16af7 10/ (src/node.js test/simple/test-module-loading.js): 
[17:01] CIA-77: node: Remove registerExtension, add .extensions. Tests.
[17:01] CIA-77: node: Updated extensions tests - http://bit.ly/9r7hvQ
[17:02] mjr_: ok, cool.  Well that seems like it'd work then.
[17:02] skampler: every command is binary safe if you send it as multibulk ;p
[17:03] vmthehut has joined the channel
[17:03] mjr_: That redis is so clever
[17:03] isaacs has joined the channel
[17:03] scnd has joined the channel
[17:03] mjr_: BTW, I see we've converted this into the redis channel now.
[17:04] CIA-77: node: 03Ryan Dahl 07master * r1b1bee8 10/ test/message/undefined_reference_in_new_context.out : Fix test/message/undefined_reference_in_new_context - http://bit.ly/bDr6N9
[17:05] aheckmann has joined the channel
[17:05] isaacs: mjr_: deleted your user account.  remove any _auth or _authCrypt lines from your .npmrc, and do npm adduser
[17:07] mjr_: isaacs: I still get this:  https://gist.github.com/60ad239264fa018dabf8
[17:07] isaacs: mjr_: did you do npm adduser again?  it shouldn't require auth to do that
[17:07] mjr_: yeah, I did an npm adduser.
[17:07] mjr_: But wait, my .npmrc doesn't have any auth lines in it.
[17:08] isaacs: hm.  well, then this is odd
[17:08] isaacs: update npm, maybe?
[17:08] onar has joined the channel
[17:09] mjr_: it didn't want to update my .npmrc.  I removed the file entirely, then ran npm adduser, and now it works.
[17:09] isaacs: oh, strangeness
[17:09] mjr_: odd
[17:09] isaacs: do you have something weird in there, maybe?
[17:09] mjr_: lemme try to repro
[17:09] isaacs: or, can you gist the .npmrc so i can check it out?
[17:09] isaacs: maybe it thinks it has auth, but really doesn't
[17:10] mjr_: isaacs: repro'd!   http://gist.github.com/588242
[17:10] ajpiano: "[13:09 ] <Vinny> gerred: can node.js work on IIS?"
[17:10] isaacs: ahh, weird
[17:11] isaacs: it's like having the email in there breaks it
[17:11] gerred: ajpiano: i'm not sure how to nicely answer that.
[17:11] gerred: other than 'no'
[17:11] pengwynn has joined the channel
[17:11] ajpiano: haha
[17:11] digitalspaghetti: whats the best way to add to Array.prototype in nodejs?  I want to add this method: http://www.martienus.com/code/javascript-remove-duplicates-from-array.html
[17:11] mjr_: isaacs: yeah, odd.  At least you have a reproducable test case though, right?
[17:12] isaacs: that is indeed a bug.  i shall fix it.  thanks for the test case :)
[17:12] isaacs: if you remove the email line as well, then it works.
[17:12] isaacs: so that's odd
[17:12] creationix: digitalspaghetti: Object.defineProperty(Array.prototype, foo, {...})
[17:13] creationix: if you must mess with built-in prototypes, that's the way to do it
[17:13] vmthehut_ has joined the channel
[17:13] creationix: but it's dangerous if you mix with other libraries
[17:13] digitalspaghetti: yea, maybe i'll just make the method a seperate lib
[17:13] prettyrobots has joined the channel
[17:14] creationix: the thing about arrays and plain objects is that's what JSON.parse will give you
[17:14] creationix: I used to add Object.prototype.forEach
[17:14] muk_mb has joined the channel
[17:14] creationix: it was super fast and convenient
[17:14] creationix: and I doubt someone else was going to define the exact same thing with different semantics
[17:15] tjholowaychuk: creationix: dont forget to check out that cache branch
[17:15] tjholowaychuk: sometime
[17:15] creationix: tjholowaychuk: are you waiting on me to review it?
[17:15] tjholowaychuk: creationix: wanted to wait for some more opinions
[17:15] tjholowaychuk: before greedily merging things I want :D
[17:15] creationix: heh, I merge without asking all the time ;)
[17:15] rcy has joined the channel
[17:16] digitalspaghetti: hmm yea, i don't really want to mess about with internals where i don't need to creationix, although I may suggest this gets added to the prototype of Array anyway, it's useful! :D
[17:16] derferman has joined the channel
[17:16] creationix: digitalspaghetti: I can promise node will never ship with modified prototypes
[17:16] malkomalko has joined the channel
[17:16] mikew3c has joined the channel
[17:16] creationix: tjholowaychuk: so what's the new features?
[17:17] digitalspaghetti: Well dammit, I'll just have to take it to ECMAScript then!! (waits 5000y for new feature to be added)
[17:17] creationix: digitalspaghetti: I couldn't even get Object.prototype.forEach in
[17:17] deepthawtz has joined the channel
[17:17] creationix: it's super useful and works exactely like Array.prototype.forEach
[17:17] creationix: and about 3 times faster than for..in
[17:18] tjholowaychuk: creationix: the primary motivation is to have the "cache" option, but have it actually work with http caching
[17:18] tjholowaychuk: so that it can be properly invalidated
[17:18] digitalspaghetti: yea, for (foo in bar) just feels....drity
[17:18] tjholowaychuk: but otherwise remain in memory (when true)
[17:18] creationix: digitalspaghetti: lately I just do Object.keys(foo).forEach(...)
[17:18] rnewson: is there any control over the maximum number of pipelined http requests at all? I think I'm breaking my server's limit.
[17:18] creationix: digitalspaghetti: it's not quite as fast or elegant as my forEach, but close enough
[17:18] tjholowaychuk: the cache() middleware is only really reasonable for largely static sites
[17:18] creationix: tjholowaychuk: sounds nice
[17:19] creationix: yeah, and it seems buggy
[17:19] tjholowaychuk: so it does kinda suck to add the http cache bloat directly into staticProvider
[17:19] creationix: tjholowaychuk: I don't have anything against the changes
[17:19] creationix: well, the largest use case I've seen for connect in the wild (other that express apps) is to serve static files
[17:19] creationix: I think we can afford a little code bloat to make it work the best possible
[17:20] s0enke: technoweenie, is it also possible to grab user streams with twitter-node?
[17:20] ryah: rnewson: no
[17:20] technoweenie: s0enke: probably.  just have to change the url that it gets
[17:21] technoweenie: theres probably more stream types
[17:21] creationix: tjholowaychuk: anyway I need to finish getting ready for jsconf.  I'm booked this week.  At a glance it looks fine to merge
[17:21] killfill: anyone uses connect-assetmanager?.. cannot make it work.. :S
[17:21] rnewson: ryah: fyi then, Tomcat defaults to 100 for 'maxKeepAliveRequests'. node is so fast and tomcat is so slow, that connection:keep-alive can cause it pain. :)
[17:21] technoweenie: i think like 5 people made twitter streaming libs, so i dont really care anymore
[17:21] tjholowaychuk: creationix: sounds good
[17:21] TobiasFar has joined the channel
[17:21] rnewson: ryah: oddly, I then get 505's as tomcat reads the junk it left as a request line.
[17:21] s0enke: technoweenie, ok i'll checkout other ones, too ;) thx
[17:22] rnewson: ryah: couchdb just keeps trucking, must have a higher or unlimited keepalive limit
[17:22] rtomayko has joined the channel
[17:23] technoweenie: s0enke: i think all you need is to make sure these are right: http://github.com/technoweenie/twitter-node/blob/master/lib/twitter-node/index.js#L39-41
[17:24] WALoeIII has joined the channel
[17:25] s0enke: technoweenie, ok. i'll try out. but it seems user streams require oauth
[17:25] technoweenie: oh fuck oauth
[17:25] technoweenie: i think twitter is bringing basic auth back
[17:25] technoweenie: thats, "oh fuck, oauth!", he exclaimed
[17:26] technoweenie: not "oh fuck oauth!" he growled
[17:26] s0enke: copied that ;) dunno if they're bringing back basic-http-auth
[17:26] mjr_: s0enke: you can make node do oauth to twitter, but it's a bunch of work.  Here's an example that needs more documentation:  http://github.com/jchris/tweasy
[17:27] technoweenie: s0enke: oh well you can do oauth NOW if you're sneaky :)  i think the android or blackberry app still uses basic auth
[17:27] rauchg_ has joined the channel
[17:27] langworthy has joined the channel
[17:27] mjr_: oh right, you can claim to be the android app and still do basic auth
[17:27] s0enke: lol
[17:27] mjr_: I don't think that works for user streams, does it?
[17:28] auser has joined the channel
[17:28] s0enke: well, http://groups.google.com/group/twitter-api-announce/browse_thread/thread/87093f7a299eace2 is very clear, isn't it
[17:28] mjr_: s0enke: I managed to hack it together using tweasy, node-oauth, and reading a lot of oauth documentation.
[17:28] nwhite has joined the channel
[17:28] mjr_: But it was painful.
[17:28] tobeytailor has left the channel
[17:28] technoweenie: mjr_: no clue
[17:29] killfill has joined the channel
[17:29] dylang: anybody that can answer joyent node hosting question?  (nobody responds in their channel).  i'm not sure what level of smart machine i need for my project.  It's on heroku now - http://www.opowerjobs.com - but it needs more dynos and heroku isn't letting me upgrade (not sure why, they aren't responding either).
[17:30] evilhackerdude: s0enke: did you check out streamie?
[17:30] isaacs: mjr_: you using hte latest node on ry/master?
[17:30] s0enke: evilhackerdude, yes. i switched to it today: http://twitter.com/s0enke/status/25033169100 ;-)
[17:31] evilhackerdude: awesome
[17:31] s0enke: chrome is my new os ;)
[17:32] mjr_: isaacs: I am, yes.
[17:32] digitalspaghetti: ChromeOS is out and runnable?
[17:33] isaacs: mjr_: because i'm seeing in that case that it creates teh request, writes the data, does request.end, and then there's never a response event.
[17:33] creationix: s0enke: I think webOS does what chromeOS meant to do
[17:33] evilhackerdude: woah, today was like you come back from the toilet, npm update and there are three new versions for stuff you use
[17:33] creationix: ACTION would love a webOS tablet + bluetooth keyboard ow webOS netbook
[17:33] creationix: node hacking in a js powered os
[17:34] evilhackerdude: uber-lovely :-)
[17:34] mjr_: isaacs: what version of node are you using?
[17:34] isaacs: latest
[17:34] isaacs: as of this morning
[17:34] mjr_: Yeah, pretty much every morning I do git fetch/merge on ry/master.  This morning is no different.
[17:34] creationix: what does npm update do?
[17:34] isaacs: creationix: it updates stuff :)
[17:34] creationix: isaacs: is that like apt-get update + apt-get dist-upgrade
[17:34] s0enke: creationix, let me try to compile node on my android ;)
[17:35] digitalspaghetti: although sometimes dependencies break i have found :(
[17:35] isaacs: creationix: it looks for new versions of the things you have, installs them, and then if doing so is safe (ie, allowed by the dep resolution rules) it re-links any dependent packages to point at the new ones.
[17:35] isaacs: if the old ones are then no longer needed (no dependencies pointing to them) it deletes them
[17:35] creationix: npm update failed
[17:35] s0enke: sounds like apt-get, yah
[17:36] isaacs: creationix: gist?
[17:36] creationix: it tried to remove stuff and then couldn't when doing safety checks
[17:36] digitalspaghetti: i just got this error: https://gist.github.com/98aa95bec3c1d687465f
[17:36] isaacs: creationix: what version of npm?
[17:36] creationix: isaacs: https://gist.github.com/0e4ed799953a56dbfcc4
[17:36] isaacs: (also, you can do "npm update foo" to just update the foo package)
[17:36] creationix: 0.2.1 I think
[17:36] onar has joined the channel
[17:37] isaacs: yeah, i see it
[17:37] aubergine_ has joined the channel
[17:37] isaacs: well, that's a bug.  it shouldnt' be forcing that
[17:37] nsm has joined the channel
[17:37] vmthehut has joined the channel
[17:37] digitalspaghetti: is it only doing a lazy version check?
[17:37] digitalspaghetti: i.e. this version != that version
[17:37] onar has joined the channel
[17:38] jchris1 has joined the channel
[17:38] isaacs: digitalspaghetti: it's not lazy, no.
[17:38] creationix: isaacs: should I just remove npm and start fresh
[17:38] isaacs: creationix: no, you've got the new version.
[17:38] isaacs: creationix: but you can just manually install the new version of connect, and that should work fine
[17:38] Adora has joined the channel
[17:38] isaacs: creationix: npm install connect@0.2.5
[17:38] sechrist: drizzle drizzle drizzle
[17:38] isaacs: if that fails, lmk
[17:39] creationix: isaacs: same error
[17:39] creationix: still trying to remove 0.2.4
[17:39] isaacs: k.  then somethings broken.  i'll get on it
[17:39] bradleymeck: dylang idk how much computation you are doing by that site, nor do i think node machines are up for public on joyent still
[17:39] isaacs: the problem with being DRY is that it means that every feature is exponentially more powerful.
[17:39] creationix: isaacs: ok, let me know if you need more info
[17:39] creationix: I may have a linked version of connect or wheat somewhere
[17:39] creationix: not sure
[17:40] isaacs: so, fixing bugs fixes them everywhere, but *introducing* bugs does too!
[17:40] isaacs: creationix: regardless, a dep on an old version should not prevent updating, ever.  that's kinda the point.
[17:40] isaacs: creationix: i'm sure it's a stupid thing where i'm raising an error instead of handling it or something
[17:40] creationix: agreed
[17:41] dylang: bradleymeck: it might still be alpha/beta, but they have instructions for setting up node: http://joyeur.com/2010/09/15/installing-a-node-service-on-a-joyent-smartmachine/
[17:42] mjr_: isaacs: do you still need to "npm tag pkg@ver stable" for it to be the default install version? 
[17:42] isaacs: nope
[17:42] isaacs: mjr_: the default install version is "latest" which is always the last thing that was published.
[17:42] mjr_: oh, cool.  So does that stable tag do anything other than look pretty?
[17:42] isaacs: which is *not* necessarily the greatest version number -- just the most recently published.
[17:42] Vekz has joined the channel
[17:43] isaacs: mjr_: you can change the config for which version is installed by default.
[17:43] isaacs: mjr_: you could even do stuff like "npm tag foo@version release" and then on your prod box, do "npm install foo --tag release"
[17:43] mjr_: oh, nice.
[17:43] isaacs: mjr_: but there's no magic with "stable"
[17:43] isaacs: "latest" is the magic one.
[17:44] isaacs: when i got rid of that behavior, i sorta could relate with what ryah has said about sync require.
[17:44] muk_mb: if I want to make a new subclass of some js class, how do I include the previous js file that declares the base class?
[17:44] isaacs: the Doing It Right part of my brain was like, "NOOOOOO!!!!" and then after a while, i grew to like it.
[17:44] isaacs: muk_mb: var BaseClass = require("./base-class.js")
[17:45] muk_mb: cool, thanks
[17:45] isaacs: muk_mb: then in ./base-class.js, you do this: module.exports = BaseClass ; function BaseClass () { ... }, etc
[17:45] muk_mb: kk
[17:47] ollie has joined the channel
[17:47] mbrochh has joined the channel
[17:47] mbrochh has joined the channel
[17:49] caolanm: after doing "var stdin = process.openStdin()", what's the correct way to close it? stdin.destroy() ?
[17:49] caolanm: which will end the program
[17:50] bradleymeck: thats about it
[17:50] bradleymeck: but you can never reopen it /cry
[17:50] caolanm: that's ok, I want to exit the program anyway
[17:51] caolanm: just wondering if its better to do that or process.exit()
[17:51] caolanm: all the program does is read from stdin, print a response and close
[17:51] bradleymeck: if you have dangling references to stdin i would bet exit
[17:52] caolanm: ok, so replace stdin.destroy with process.exit
[17:52] caolanm: or do both?
[17:52] caolanm: :)
[17:52] caolanm: wondering why I chose to use this as example code now
[17:52] caolanm: haha
[17:52] benv has joined the channel
[17:53] bradleymeck: well process.exit() would prevent the danglers from trying something, so i would use that
[17:53] caolanm: agreed
[17:53] caolanm: thanks
[17:53] MikhX has joined the channel
[17:54] s0enke: ryah, (maybe silly) question: in your may yahoo talk you said "node is not stable nor secure, put it behind a proxy like nginx". afaik a proxy could make is more safe (e. g. block malformed tcp or http requests if it's a deep inspection / layer 7 proxy). so imho a proxy *could* prevent from *some* attacks?! or how was your statement meant?
[18:02] ben_alman has joined the channel
[18:02] rwaldron has joined the channel
[18:03] silentrob has joined the channel
[18:04] brianmario has joined the channel
[18:04] gwoo has joined the channel
[18:05] meatmanek_ has joined the channel
[18:05] vmthehut has joined the channel
[18:07] agnat has joined the channel
[18:08] technoweenie: mjr_: hey i dont think my redis connection is closing properly. all i'm doing is creating a client and calling end() on it
[18:08] creationix: I really don't like having to tell everyone to sign a CLA before they can help with connect or spark
[18:09] creationix: it feels dirty somehow
[18:09] technoweenie: oh i think i'm calling end before the connection is open
[18:09] mikekelly: creationix, what's advantage of connect over jsgi?
[18:09] creationix: connect is based on node apis
[18:09] creationix: jsgi is a port of wsgi
[18:09] creationix: very different community mainly
[18:09] mikekelly: that's an advantage? :S
[18:10] creationix: mikekelly: I think less abstraction is a very good feature
[18:10] auser has left the channel
[18:10] creationix: with connect you get raw request and response objects from node
[18:10] mikekelly: don't follow
[18:10] mjr_: technoweenie: what does it do?  I didn't actually test the close bit, but it seemed to work on my redis + node.
[18:10] creationix: if you implement jsgi on top of node, you have to wrap all the nodeisms to fit the jsgi spec
[18:11] technoweenie: it just hangs.  i'm assuming it's still trying to open the connection when i call end
[18:11] creationix: and I find abstractions like that tend to be leaky
[18:11] mikekelly: isn't the entire point of jsgi to abstract to HTTP's uniform interface
[18:11] creationix: mikekelly: exactely, like I said, very different communities
[18:12] node has joined the channel
[18:12] creationix: besides, even if you prefer the jsgi api, when something goes wrong, you have to learn and understand the underlaying node api to fix bugs
[18:12] mjr_: technoweenie: oh, I haven't tried that sequence, I'll bet there's a bug.
[18:12] creationix: that's what I mean by leaky abstractions
[18:12] technoweenie: oh, stream.on('end') isn't ever called
[18:12] mikekelly: creationix, that's almost certainly going to be an issue with the adapter
[18:12] joshdulac: anyone know how to have the a http.createServer listen on port 443 and port 80
[18:12] mikekelly: rather than the specific jsgi app
[18:13] creationix: mikekelly: true, but it still sucks when you have to learn yet another api to debug your app
[18:13] stride: joshdulac: make two and give them the same event handlers
[18:13] mikekelly: creationix, but your solution is only 'better' because it's coupled to one specific api
[18:14] creationix: mikekelly: yes and for people writing node servers that's a feature too
[18:14] technoweenie: mjr_: yea not a big deal. i dont see this coming up often.  i'm just writing a test harness and ran into it:)
[18:14] joshdulac: stride: thats the only way i figured i could do it, but i didnt want to repeat my logic... i was trying to find something like: var server2 = server 1 = http.createServer
[18:14] creationix: mikekelly: it's not like the browser where you have to support all platforms or you lose market share
[18:14] mikekelly: creationix, jsgi-node provides an equivalent point of focus
[18:14] technoweenie: yea none of the inner net stream's events are called, but it just sits there
[18:14] joshdulac: stride: but thats obv bad logic
[18:14] technoweenie: mjr_: i'm gonna try upgrading to 0.2.2.  i'm on 0.2.0
[18:14] joshdulac: server1* lol
[18:15] jesusabdullah: I feel like there's this community of people that use ssjs that's not node, that's all butthurt because node's stealing their thunder
[18:15] jesusabdullah: Am I wrong?
[18:16] creationix: mikekelly: well, if you want an api that works equal on all ssjs platforms, then don't go with connect
[18:16] ysynopsis has joined the channel
[18:16] creationix: if you want something that was made to be the best possible for node , then go for connect
[18:16] onar has joined the channel
[18:16] pedrobelo has joined the channel
[18:16] creationix: it's just preference
[18:16] mikekelly: isn't connect slower?
[18:16] creationix: no
[18:16] bradleymeck: oh no
[18:16] jesusabdullah: According to Some Guy
[18:16] tjholowaychuk: mikekelly: 99% of other code will NOT work on node anyways
[18:16] tjholowaychuk: if you are trying to support both
[18:16] jesusabdullah: that obviously has a vested interest in jsgi
[18:16] tjholowaychuk: and why the hell would you (IMO)
[18:16] creationix: mikekelly: if you're talking about the sitepoint article, that benchmark is meaningless
[18:16] tjholowaychuk: thats like supporting both php and ruby from the same code set
[18:17] tjholowaychuk: its just awkward
[18:17] figital has joined the channel
[18:17] mikekelly: I know that - it's not important to me I only write jsgi-node apps anyway
[18:17] mikekelly: it's just way more elegant
[18:17] jesusabdullah: Yeah, the sitepoint article
[18:17] tjholowaychuk: mikekelly: so you can take your app, and run it on another vm?
[18:17] tjholowaychuk: without modification?
[18:17] creationix: mikekelly: so jsgi's delegation method is 30 times faster than connect's delegation
[18:17] creationix: so what? that's about 0.1% of the overall cost
[18:17] s0enke: is there some builtin function to dump contents of a variable/object?
[18:17] tjholowaychuk: when I benched jsgi it was slower actually
[18:17] mikekelly: delegation is quite an important feature when you're writing stacked applications.
[18:18] jesusabdullah: Why is their delegation faster, anyway?
[18:18] creationix: mikekelly: sure, it matters a little in some edge cases
[18:18] bradleymeck: s0ebje console.log(require("sys").inspect(obj,null))
[18:18] mikekelly: edge cases?
[18:18] creationix: jesusabdullah: theirs is just a function all
[18:18] creationix: *call
[18:18] agnat: s0enke: sys.inspect()
[18:18] creationix: it's hard to beat that
[18:18] s0enke: thx guys
[18:18] mikekelly: creationix, the entire point of a uniform interface is to let you isolate and layer up your logic
[18:18] tjholowaychuk: jesusabdullah: yeah, theirs does nothing
[18:18] tjholowaychuk: basically
[18:18] jesusabdullah: What's yours? Why's it not a function call? >:O
[18:18] creationix: mikekelly: chosing node over narwhal will make much more performance difference than jsgi over connect
[18:19] creationix: mikekelly: so if you're using node anyway for performance reasons, then why not use something that was made for node with minimal abstraction
[18:19] mikekelly: sure, I don't care that much about performance really but I don't accept that delegation is misleading
[18:19] aurynn: What's narhwal?
[18:19] mikekelly: it's fundamental to that design approach
[18:19] creationix: I meant rhino/spidermonkey, not narwhal
[18:19] jesusabdullah: aurynn: Another ssjs engine
[18:20] aurynn: creationix, close to a prepared model that'll work concurrently
[18:20] onar_ has joined the channel
[18:20] creationix: aurynn: cool
[18:20] creationix: mikekelly: my point is it's silly to argue over something that barely matters and gloss over the major decisions that make the real difference
[18:20] jesusabdullah: Actually, I take that back.
[18:20] aurynn: It'll be slower than yours due to locking on the wire, but, concurrent and does prepared statements. So I'm pleased.
[18:20] jesusabdullah: http://narwhaljs.org/
[18:21] tjholowaychuk: as per jsgi's simple dispatcher, people are already confused (and constantly) stacking middleware incorrectly
[18:21] creationix: aurynn: neat
[18:21] tjholowaychuk: so deferring ALL dispatch related logic to middleware
[18:21] tjholowaychuk: is just not realistic
[18:21] mikekelly: tjholowaychuk, how is it possible to mess up jsgi? :/
[18:21] tjholowaychuk: people put logger() at the bottom, errorHandler() at the top
[18:21] tjholowaychuk: all kinds of funky shit
[18:21] jesusabdullah: Is it possible to combine jsgi with connect?
[18:21] jesusabdullah: Use BOTH?
[18:22] creationix: jesusabdullah: possibly
[18:22] creationix: I haven't tried
[18:22] mikekelly: flexible + efficient delegation is a key feature of that approach - it has to be
[18:22] creationix: I like the clean slate with libraries we have in the node ecosystem
[18:22] creationix: mikekelly: and I think minimal abstraction and non-blocking apis are the key
[18:22] dnolen: #emacs
[18:22] dnolen: oops
[18:22] creationix: it's simply a difference of opinion on what's important.
[18:22] creationix: that's all
[18:23] tjholowaychuk: mikekelly: we need to focus on node, not what might be cool for other VMs 2 years from now
[18:23] creationix: I think the jsgi guys are doing great work, I just don't agree with them
[18:23] tjholowaychuk: I for one will never use rhino
[18:23] mikekelly: creationix, I'm saying that what you think is important. isn't. :)
[18:23] creationix: mikekelly: fair enugh, but I clearly think it is important ;)
[18:23] mikekelly: in this context, anyway
[18:24] bradleymeck: ACTION is confused by you both
[18:24] jesusabdullah: creationix said "non-blocking apis"
[18:24] jesusabdullah: If jsgi makes it hard to write non-blocking code
[18:24] jesusabdullah: that's a problem :(
[18:24] mikekelly: jesusabdullah, how does jsgi make it harder?
[18:25] s0enke: technoweenie, mhm. strange, but basic-auth works with userstreams. first incoming message is the list of "friends", then tweets are coming in. i should ask @twitter ;)
[18:25] tjholowaychuk: the point is we are not at the stage yet, to be supporting other idioms, we need to come up with what works for node ATM
[18:25] tjholowaychuk: I abstracted away from node with Express when node was frequently changing
[18:25] vmthehut has joined the channel
[18:25] tjholowaychuk: and it was VERY restrictive
[18:25] technoweenie: s0enke: ah, well twitter-node handles special non-tweet messages.  it could easily be extended to handle the userstream-specific events
[18:25] tjholowaychuk: and basically forced a rewrite
[18:25] skampler has joined the channel
[18:25] creationix: mikekelly: how do you use node streams from jsgi
[18:25] creationix: last I checked it was a terrible hack on forEach
[18:26] technoweenie: s0enke: i was at chirp when they announced user streams and had it working during the chirp hackfest
[18:26] boaz has joined the channel
[18:26] stephank: woah, hey, jsgi, I hadn't seen this before.
[18:27] stephank: and I'm already confused o_O
[18:27] mikekelly: creationix, it is possible to sprint off enthusiastically in the wrong direction
[18:27] creationix: that beats standing in the middle trying to please everyone
[18:27] Guest13459 has joined the channel
[18:27] creationix: I'd rather try and get it wrong
[18:27] cardona507 has joined the channel
[18:27] mikekelly: good luck with that.
[18:27] stephank: I'm looking at this from a rails perspective, let's say someone requests `/something/1`, and I want to see if that something exists in my database before I return a status. I can't with jsgi?
[18:28] tjholowaychuk: lol
[18:28] mikekelly: stephank, of course you can
[18:28] bradleymeck: jsgi and connect differ mainly on how requests are given to middleware, and largely on how responses are handled, the end
[18:28] charlenopires has joined the channel
[18:28] mikekelly: does connect have dynamic delegation ?
[18:28] bradleymeck: yes
[18:28] jesusabdullah: mikekelly: I don't *know*, having never used jsgi *or* connect
[18:28] creationix: mikekelly: though considering how much node's philosophy resonates with a LOT of developers and how fast it's gained popularity means we have something at least
[18:28] jesusabdullah: I'm just saying
[18:29] mikekelly: creationix, what does that have to do with connect?
[18:29] stephank: mikekelly: how then? JSGI expects an immediate return value with a status, my database driver is asynchronous...
[18:29] bradleymeck: i see soo many arguments come up over this jsgi vs connect and neither side is willing to admit they both just work
[18:29] creationix: mikekelly: connect's goal is to be a natural extension of node's ideals
[18:29] creationix: bradleymeck: I thought I did
[18:29] tjholowaychuk: mikekelly: when every single other api that node ships with, is commonjs, then we can worry about being jsgi-ish :p
[18:29] tjholowaychuk: until then apps are not portable anwyays
[18:29] bradleymeck: creationix, well then you are an exception hehe
[18:30] derferman has joined the channel
[18:30] jesusabdullah: I feel like we need to give mikekelly a big ol' BEAR HUG
[18:30] creationix: I have not once said that connect is better for everyone, just that it has different goals and I personally think they are better goals
[18:30] benburkert has joined the channel
[18:30] mikekelly: I'm reading lots of text and very few hard facts at the moment :S
[18:30] jesusabdullah: Like, the kind he doesn't want but SORELY NEEDS
[18:30] s0enke: technoweenie, well not that big problem. i can just throw away the first "tweet" for a quick start hack ;)
[18:30] BrianTheCoder has joined the channel
[18:30] mikekelly: I don't think node's success has anything to do with connect
[18:30] tjholowaychuk: oh god lol
[18:30] jesusabdullah: mikekelly: You're reading that wrong
[18:31] creationix: mikekelly: just wondering, but what's your position/relationship with jsgi.  tjholowaychuk and I are the authors of connect so our position is obvious
[18:31] s0enke: technoweenie, anyway, i will fork and write some howto to conserve the current knowledge
[18:31] tjholowaychuk: its successful because it is doing what it needs to do in order to make things work, not copy some spec that may or may not work
[18:31] mjr_: technoweenie: confirmed your end-while-connecting issue.  I guess you can't call stream.end() on a stream that's still connecting.  It gets confused.
[18:31] jesusabdullah: It's not that connect is responsible for node's popularity. It's that node is popular, and that connect is node-centric instead of commonjs-centric
[18:31] isaacs: mjr_: found it.
[18:31] mikekelly: I'm an HTTP guy, I started with connect and got tired of it and found jsgi
[18:31] gf3_ has joined the channel
[18:32] mikekelly: I don't know who's right I'm just trying to make sense of what you're saying
[18:32] creationix: mikekelly: what do you not understand?
[18:32] creationix: To put it simply, like tjholowaychuk said.  We don't know what's best for node, but we're trying to figure out
[18:33] creationix: blindly following a spec that worked for a very different environment is not a good way to experiment and learn
[18:33] isaacs: i think having jsgi as well as connect is probably fine.
[18:33] creationix: yep
[18:33] tjholowaychuk: yeah exactly,
[18:33] tjholowaychuk: who cares
[18:33] stephank: well, of course, one will simply prevail :p
[18:33] tjholowaychuk: people will adopt what they like, and they have
[18:33] mikekelly: ? :/
[18:33] rauchg_: who cares about jsgi 
[18:33] isaacs: this is javascript, i mean, whatever.  do what you want.  that's always been the mantra.
[18:33] isaacs: stephank: right, like how yui and jquery and dojo and...
[18:33] isaacs: stephank: one doesn't always prevail. sometimes lots prevail.
[18:33] creationix: hey, mikekelly asked why connect instead of jsgi
[18:34] rauchg_: who cares about sax parsers
[18:34] jesusabdullah: saxophone parsers? :v
[18:34] isaacs: connect vs jsgi basically comes down to which api sugar tastes tastier to you.
[18:34] isaacs: it's a coke vs pepsi thing, imo.
[18:34] onar has joined the channel
[18:34] creationix: mikekelly: seriously, I'm not arguing, what do you not understand, but want to?
[18:34] creationix: isaacs: nice, I like that
[18:34] creationix: except I don't like coke or pepsi ;)
[18:34] isaacs: hehe
[18:34] rauchg_: it's more of coke vs generic cola
[18:35] jesusabdullah: RC Cola 4 lyfe
[18:35] jesusabdullah: Aww yeah
[18:35] isaacs: jesusabdullah: hellz yeah!!
[18:35] jesusabdullah: :D
[18:35] mikekelly: I don't understand why you would essentially spec something out designed for building layered applications and then claim that 'nice apis' are more important than delegation
[18:35] stephank: isaacs: Perhaps my perception is wrong, but jquery has massive backing compared to the other two. My job requires me to occasionally work on a dojo project, but I found it hard to learn because there wasn't any good reference work / real world examples.
[18:35] mikekelly: the entire architecture of connect apps revolves around delegation
[18:35] mikekelly: :/
[18:36] bradleymeck: indeed but how many layers deep are you going to go?
[18:36] isaacs: stephank: yui3 has a massive backing as well.  (and the fact that i was once employed on the yui team and talk to the developers frequently has nothing to do with that assessment)
[18:36] creationix: mikekelly: how if my easier, but slightly slower delegation "worse" 
[18:36] mikekelly: easier in what sense?
[18:36] creationix: easier is subjective
[18:36] mikekelly: indeed.
[18:36] creationix: but easier in that the framework does more for you
[18:36] mikekelly: leaky abstractions?
[18:36] mikekelly: :)
[18:37] isaacs: i was thinking about this the other day.
[18:37] ryah: s0enke: that's what i meant, and said - or?
[18:37] bradleymeck: leaky?
[18:37] onar has joined the channel
[18:37] creationix: mikekelly: no, it's a lot closer to node's request handler than jsgi ever was
[18:37] isaacs: you know how rails is basically a great framework for doing what ruby is good at?  (ie, a great framework for 37signals' crud programs)
[18:37] creationix: and it does more for you too
[18:37] isaacs: it'd be cool to have a really great framework for doing what node is good at.
[18:37] s0enke: ryah, yap ;) just wanted to make sure i got you right ;)
[18:38] creationix: isaacs: I have yet to figure out what that is?
[18:38] creationix: ? why did I ?
[18:38] rauchg_: isaacs: ruby is good for many things besides rails 
[18:38] jesusabdullah:  pwning noobs, obviously
[18:38] jesusabdullah: rails is good at doing what rails is good at
[18:38] mikekelly: creationix, what extra magic do you need for delegation?
[18:38] jesusabdullah: similarly, node is good at what node is good at
[18:38] jesusabdullah: not so much at doing what js is good at <_<
[18:38] isaacs: rauchg_: sure, but i mean, rails really does leverage a lot of what ruby is good at.  syntaxy DSL magic.
[18:39] jesusabdullah: I guess js makes non-blocking natural
[18:39] creationix: mikekelly: it doesn't do much, but the little it does is handy, like a global error handler and automatic paramter passing to the next layer
[18:39] creationix: and the fact that a layer can do non-blocking stuff and then later call the next layer
[18:39] creationix: there is no return value
[18:39] creationix: just callbacks
[18:40] bradleymeck: which for streaming templates is the only way to go (string concats hurt)
[18:40] creationix: isaacs: I used to be a ruby guy who hated rails jobs.  There are non-rails jobs for ruby, but they are indeed hard to find
[18:40] technoweenie: mjr_: maybe end() should be queued too
[18:40] creationix: isaacs: but yeah, the rails guys made the dsl stuff popular
[18:41] mjr_: technoweenie: I dunno, I think it's an oddity about node's net streams.  Shouldn't you be able to end() a stream while it is still connecting if the connect() is taking too long?
[18:41] jesusabdullah: I've noticed that 95% of the posts on jobs.github.com are rails-related
[18:41] mjr_: I think destroy() might work.
[18:41] technoweenie: mjr_: that too... but it should wait til your queued commands are sent
[18:42] technoweenie: for instance i'm hitting the issue now where i connect, select and flush a db, and end
[18:42] mjr_: technoweenie: oh, I see.  Yeah, I guess we need an "end politely" and an "end now, somehow"
[18:42] jesusabdullah: baleet()
[18:43] mjr_: technoweenie: client.end() doesn't actually send the end command, it just closes the connection.  It should probably send them command, and then flag the client for normal shutdown with no retry.
[18:43] mikekelly: .whois creationix 
[18:43] mikekelly: :]
[18:44] onar has joined the channel
[18:44] creationix: mikekelly: http://github.com/creationix
[18:44] vilhonen has joined the channel
[18:44] vilhonen: hey, I
[18:44] technoweenie: what end  command?
[18:44] vilhonen: Ḯ'm trying to require libraries in repl
[18:45] vilhonen: it doesn't find any but if I execute a script it finds
[18:45] mikekelly: do you work for sencha ?
[18:45] technoweenie: oh QUIT you mean
[18:45] technoweenie: yea that would be polite :)
[18:45] mjr_: oh yeah, I mean quit.  That's pretty easy then.
[18:45] onar has joined the channel
[18:45] tg: vilhonen: 0.2.2?
[18:45] vilhonen: yes
[18:45] creationix: mikekelly: yes, connect is a sencha project
[18:45] technoweenie: mjr_: actually what if quit() is the polite one.  end() is the stream killer
[18:45] creationix: or rather they paid tj and me to write it
[18:45] mjr_: I think quit() should be polite and end should be kill.
[18:46] technoweenie: ok
[18:46] tg: vilhonen: http://github.com/ry/node/issues/issue/293
[18:46] creationix: mikekelly: why do you ask?
[18:46] digitalspaghetti: creationix: so are you a Sencha employee?
[18:46] creationix: yes
[18:46] mikekelly: creationix, no real reason just for clarification
[18:46] mikekelly: were you involved in extjs ?
[18:46] digitalspaghetti: hah!  Cos I actually have a extjs question that i've asked in #extjs but dunno if i'll get an answer :D
[18:47] creationix: to be clear, I have nothing to do with sencha's products
[18:47] konobi: isaacs: what was the name of the bot that did the "when" stuff?
[18:47] creationix: Sencha wants to support open source javascript and so they hired tj and me to write node code
[18:47] isaacs: konobi: ircretary
[18:47] isaacs: ircretary: when konobi
[18:47] ircretary: isaacs: konobi was last seen at 2010-09-20T18:47:11.304Z, in #Node.js saying isaacs: what was the name of the bot that did the "when" stuff?
[18:47] isaacs: ircretary: what is creationix doing?
[18:47] ircretary: isaacs: creationix was last seen at 2010-09-20T18:47:23.209Z, in #Node.js saying Sencha wants to support open source javascript and so they hired tj and me to write node code
[18:48] isaacs: ircretary: what kind of puppy is konobi?
[18:48] ircretary: isaacs: konobi was last seen at 2010-09-20T18:47:11.304Z, in #Node.js saying isaacs: what was the name of the bot that did the "when" stuff?
[18:48] isaacs: turing test FAILED
[18:48] digitalspaghetti: creationix: ok i have a request then :D  Please can we get ExtJS working on the server side :p
[18:48] creationix: digitalspaghetti: not sure
[18:48] tg has joined the channel
[18:48] bradleymeck: ACTION is jealous of creationix and tj
[18:49] digitalspaghetti: I'm doign a pretty big ExtJS app and maaaaaaaannnnn Django sucks to talk to
[18:49] endtwist has joined the channel
[18:49] creationix: digitalspaghetti: you can use connect, but there is no high level integration
[18:49] digitalspaghetti: creationix: yea i was for a bit to test it out, but our DB backend is pretty big as well, and tbh Django's ORM makes it easy as hell
[18:49] creationix: though extjs assumes a railsy crud backend, and node isn't so good at that
[18:50] creationix: exactely
[18:50] creationix: I wouldn't try it yet
[18:50] digitalspaghetti: there isn't an ORM at that level for nodejs, and i really don't want to hand write SQL
[18:50] creationix: sql is great
[18:50] konobi: ircretary: when dannycoates
[18:50] ircretary: konobi: when what now?
[18:50] digitalspaghetti: actually i had better success with express than I did with django, except for the heeps of SQL i'd have to write
[18:51] creationix: does geddy have an orm?
[18:51] konobi: ircretary: when did you see dannycoates?
[18:51] ircretary: konobi: when what now?
[18:51] digitalspaghetti: because i could just pass a JSON object <- -> and it worked
[18:51] konobi: fffffuuuuuu
[18:51] aurynn: ACTION likes writing SQL
[18:51] franksvalli has joined the channel
[18:51] digitalspaghetti: creationix: no, and it doesn't support MySQL (yea, I know but that's what I know)
[18:51] mitkok1 has joined the channel
[18:51] creationix: ahh
[18:52] creationix: well node is still maturing quite quicky, but there is a ways to go
[18:52] digitalspaghetti: sequelize isn't quite there yet either
[18:52] jesusabdullah: digitalspaghetti: You use django? Is it worth learning? I already know the pythons
[18:52] jesusabdullah: or, at least, a lot of it :)
[18:52] creationix: anyway, I should really finish my jsconf.eu slides BEFORE I stand up to speak
[18:52] digitalspaghetti: jesusabdullah: depends what you need
[18:52] konobi: sql++ # powerful
[18:52] creationix: (didn't do that two conferences I spoke at)
[18:52] digitalspaghetti: if you need a content heavy website, then yea Django does a good job
[18:52] jesusabdullah: hmm
[18:52] digitalspaghetti: if you need a web app, it's a bit more tricky
[18:53] jesusabdullah: I see.
[18:53] digitalspaghetti: you have to fight a lot of "Django wants to do it THIS way"
[18:53] endtwist has joined the channel
[18:53] digitalspaghetti: or it throws it's toys out the pram
[18:53] jesusabdullah: hehe, "pram"
[18:53] Adora has joined the channel
[18:54] jesusabdullah: Where are you from, s'ghetti?
[18:54] digitalspaghetti: The one thing I may do in the end (still haven;t decided) is use Django to finish the DB design
[18:54] tjholowaychuk: creationix: hehe :D the only few I did I screwed up brutally by not figuring out length n shit
[18:54] digitalspaghetti: then take the DB and hand write the transport code
[18:54] tjholowaychuk: I was done so early
[18:54] tjholowaychuk: since I rushed
[18:54] digitalspaghetti: jesusabdullah: scotland
[18:54] rcy has joined the channel
[18:54] jesusabdullah: Ah
[18:54] jesusabdullah: oh geez, reminds me
[18:54] jesusabdullah: Girlfriend found that video yesterday, with the scots in the elevator
[18:54] onar has joined the channel
[18:54] jesusabdullah: "ELEVEN!"
[18:55] digitalspaghetti: jesusabdullah: I can confirm this is true
[18:55] jesusabdullah: That was pretty awesome
[18:55] digitalspaghetti: Trying to do anything voice-activated sucks
[18:55] jesusabdullah: Found more vids by the same guys
[18:55] technoweenie: mjr_: also this doesnt seem to actually use command_queue?  it adds to it (so now theres a constantly growing array of stuff)
[18:55] jesusabdullah: digitalspaghetti: :(
[18:55] digitalspaghetti: Yea, the guys are pretty legend round here - they did Consolevania beofre this show
[18:55] technoweenie: it uses it for reporting errors and crap
[18:55] jgautier has joined the channel
[18:56] jesusabdullah: consolevania?
[18:56] jgautier: hey anyone done any performance metrics with socket.io....wondering how many push messages/second it can handle
[18:56] digitalspaghetti: jesusabdullah: late night computer game + comedy show
[18:56] jesusabdullah: Ah, cool
[18:57] digitalspaghetti: http://www.consolevania.com/
[18:57] mjr_: technoweenie: just pushed a version with client.quit() for sending the QUIT command.  Can you try it?
[18:57] jesusabdullah: I'll have to look at that after class
[18:57] technoweenie: mjr_: sure
[18:57] onar has joined the channel
[18:58] vacuoustruth: vacuoustruth
[18:58] mjr_: technoweenie: Each new non pub/sub command gets put on command_queue when it is sent, then responses can be de-pipelined by shifting from it.  QUIT commands get pushed on like all other commands now.
[18:58] vacuoustruth: ugh, sorry
[18:58] mjr_: WTF IRC client.
[18:59] vmthehut has joined the channel
[18:59] mjr_: technoweenie: all non-pub/sub commands get pushed onto command_queue as they are send down the socket.  When responses come back, the callback gets shifted from the queue.
[18:59] softdrink has joined the channel
[19:00] aubergine has joined the channel
[19:02] vmthehut has joined the channel
[19:02] onar has joined the channel
[19:04] technoweenie: mjr_: ah ok cool... seems to work: http://gist.github.com/588446
[19:04] creationix has joined the channel
[19:04] mjr_: great
[19:04] mjr_: Need to figure out how to kill a net stream while it is still connecting though.  That's kind of bad.
[19:07] joshdulac has left the channel
[19:08] creationix: nice article, but seems a bit more antagonistic than needs to be http://www.sitepen.com/blog/2010/09/20/promised-io/
[19:08] ehaas has joined the channel
[19:10] siculars has joined the channel
[19:11] jesusabdullah: O
[19:11] jesusabdullah: I've decided I don't really like this guy. :/
[19:12] creationix: jesusabdullah: no, he's super smart and nice
[19:13] jesusabdullah: Hmm
[19:13] creationix: isaacs: mjr_ are we not welcoming enough to the jsgi/commonjs guys?
[19:13] jbenesch has joined the channel
[19:13] mjr_: creationix: I dunno, I think they are fine.  I'm just not interested in the things they are interested in.
[19:14] creationix: sure, but all the articles on sitepoint are like "our stuff is better and the node people are wrong"
[19:14] creationix: maybe that's just a sitepoint thing
[19:14] bradleymeck: i talk to the ringo ppl somewhat
[19:14] bradleymeck: i think its a different culture
[19:14] jesusabdullah: I kinda wanna mess with ringo
[19:14] jesusabdullah: kinda
[19:15] creationix: maybe people feel they have to compete with node since it's got the limelight?
[19:15] sechrist: I like the idea of jade but I don't think I'd do a large project with it
[19:15] jesusabdullah: creationix: I've noticed that re: sitepoint
[19:15] sechrist: haml is more widely spread
[19:15] tjholowaychuk: ringo packs alotttt in core
[19:15] tjholowaychuk: weird stuff sometimes
[19:16] jesusabdullah: heh
[19:16] evilhackerdude: i think a minimalistic layered approach is just fine. hear hear, not that much stuff is being broken with 0.3 for most people, right?
[19:17] bradleymeck: creationix i think they prefer a coding style that is more classical and is somewhat similar to java (well i think commonjs is basically what a java api wrapped in js would be).
[19:17] bradleymeck: they avoid callbacks as much as possible in order to prevent what they consider complexity
[19:17] rnewson has joined the channel
[19:17] kriszyp: creationix: I was antogonistic? I wasn't trying to be, anything I should have avoided?
[19:18] elliottkember has joined the channel
[19:18] evilhackerdude: i think we haven't arrived at a general consensus concerning eventemitters, callbacks, promises et al. yet
[19:18] creationix: I may be misreading
[19:18] hoodow has joined the channel
[19:20] bradleymeck: the only thing that I can truly say is an insane and bizarre idea in commonjs is the use of "lazy arrays" (object that use .forEach to emit data) especially considering loss of object reuse imho
[19:20] matclayton has left the channel
[19:20] prettyrobots has joined the channel
[19:22] wink_: anyone familiar with fb's graph api?
[19:22] deepthawtz has joined the channel
[19:22] wink_: *not a node question :>
[19:23] creationix: kriszyp: cool, no worries
[19:24] rauchg_: mjr_: pubsub! woot
[19:24] ysynopsis has joined the channel
[19:25] mjr_: rauchg_: yeah, it came together.  Let me know if it works for you.
[19:25] rauchg_: i will
[19:25] Aria has joined the channel
[19:27] stephank: All the JS modules of node are also compiled into the binary, it seems? I was hoping to use events.js in the browser for some pieces of code that are shared on the server and browser.
[19:28] sechrist: yeeks.. piping mysql bin was faster for my query than node-mysql
[19:28] ngw has joined the channel
[19:28] sechrist: it's that binary serialization it's doing that's killing it I think.. or so says prof
[19:28] aurynn: But that probably won't work for high concurrency :)
[19:29] sechrist: well neither will node-mysql
[19:29] sechrist: until it's performance improves
[19:29] bradleymeck: stephank yes, but you can just throw their source onto the browser from node's repo w/ minor adjustments, i think jimbastard has some stuff
[19:29] claudiu__ has joined the channel
[19:30] stephank: bradleymeck: will do that then, thanks
[19:31] aurynn: I wonder how fast my postgres.js fork runs
[19:32] micheil: stephank: fwiw, it's companies like IBM and Uxebu that are backing node
[19:32] stephank: micheil: Hmm? Don't think anyone was arguing against node. :)
[19:33] micheil: uh
[19:33] huyhong has joined the channel
[19:33] micheil: whoops. dojo
[19:33] micheil: it's too early. :P
[19:34] sechrist: well maybe some of it is that I'm not using a node branch with fast buffers
[19:34] jesusabdullah: I'm unfamiliar with dojo :/
[19:34] stephank: micheil: Well, their site also mentions aol, cisco, sun/oracle, etc. But I just don't see anything real world using it.
[19:34] huyhong has joined the channel
[19:34] huyhong has left the channel
[19:35] micheil: stephank: generally it's used on internal applications, not public apps
[19:35] micheil: so that may be why
[19:36] benburkert has joined the channel
[19:36] micheil: hmm.. which is currently the best mongodb driver?
[19:36] micheil: -native or the other one?
[19:36] micheil: I'm guessing -native though.
[19:37] stephank: micheil: Okay, that's fair, but that's sort of the perception part I was talking about. There's several large companies backing jquery, but besides that, everyone and his cat is using it as well.
[19:37] micheil: hmm, true.
[19:37] sechrist: my cow uses mootools
[19:37] micheil: stephank: although.. if we want to get into library wars, jquery is wrong.
[19:37] technoweenie: mjr_: ah damnit, there's still a bug w/ quit().  its intermittent
[19:37] sechrist: but my cat does in fact use jquery
[19:37] stephank: micheil: uh oh :D
[19:38] micheil: :P
[19:38] stephank: micheil: enlighten me :)
[19:38] maushu has joined the channel
[19:38] micheil: no, I won't start.
[19:38] technoweenie: mjr_: oh its making the command.. maybe its not parsing the reply and/or sending the callback... investigating...
[19:38] programble has joined the channel
[19:38] stephank: bummer then :)
[19:38] mjr_: technoweenie: OK, thanks.  
[19:40] codetonowhere has joined the channel
[19:41] richcollins has joined the channel
[19:44] mif86 has joined the channel
[19:44] gerred has joined the channel
[19:47] BrianTheCoder has joined the channel
[19:47] pedrobelo has joined the channel
[19:48] voodootikigod_ has joined the channel
[19:48] isaacs has joined the channel
[19:49] AAA_awright has joined the channel
[19:49] voxpelli has joined the channel
[19:49] noahcampbell has joined the channel
[19:52] digitaltoad has joined the channel
[19:54] awenkhh has joined the channel
[19:57] javajunky has joined the channel
[19:59] Anti-X: announcer clean the tubes
[19:59] _announcer: Cleaning the tubes for great justice!
[19:59] jesusabdullah: whoo
[20:01] gf3_ has joined the channel
[20:03] Anti-X: didn't work?
[20:05] evilhackerdude: tjholowaychuk: did you find out something about the jade parser giving undefined's on empty lines after nestings?
[20:05] evilhackerdude: i think i made a gist for that
[20:05] evilhackerdude: http://gist.github.com/581578
[20:05] tjholowaychuk: evilhackerdude: yeah there is a bug there,havent had a chance to fix it yet sorry
[20:06] mitkok has joined the channel
[20:06] evilhackerdude: can you point me into the right direction? i'd love to fix it
[20:07] evilhackerdude: well, must be one of the visits :D
[20:07] mitkok has joined the channel
[20:08] tjholowaychuk: evilhackerdude: I think the main parse method http://github.com/visionmedia/jade/blob/master/lib/jade/parser.js#L127
[20:08] tjholowaychuk: we just need to handle outdents
[20:08] tjholowaychuk: and newlines
[20:09] bmavity has joined the channel
[20:09] tjholowaychuk: nvm newline is there
[20:09] tjholowaychuk: and skip them
[20:09] tjholowaychuk: just be sure to make write a test for it
[20:10] cloudhead has joined the channel
[20:11] evilhackerdude: how can i run the tests?
[20:11] evilhackerdude: expresso?
[20:11] evilhackerdude: yup
[20:11] tjholowaychuk: git submodule update --init
[20:11] tjholowaychuk: first
[20:11] tjholowaychuk: and then `make test`
[20:12] tjholowaychuk: they should all pass
[20:12] tjholowaychuk: i never use whitespace like that though so I must not have had a test for it
[20:12] tjholowaychuk: during the refactor
[20:12] bradleymeck: does connect support http trailers?
[20:13] jesusabdullah: Is there a good way to get a list of what keys a js object has?
[20:13] tjholowaychuk: jesusabdullah: Object.keys()
[20:13] jesusabdullah: Object.keys({a: 1, b: 2}) ?
[20:13] creationix: bradleymeck: does node support trailers?
[20:13] jesusabdullah: NICE
[20:13] jesusabdullah: Thanks tj!
[20:13] bradleymeck: there was a patch for it a bit ago
[20:14] evilhackerdude: tjholowaychuk: what do you mean "use whitespaces like that"?
[20:14] creationix: connect is pretty minimal, it might just work
[20:14] creationix: depends on the exact api change that was done in node
[20:14] tjholowaychuk: evilhackerdude: I just dont put a bunch of newlines
[20:14] tjholowaychuk: evilhackerdude: between different chunks of my template
[20:14] evilhackerdude: i see!
[20:14] tjholowaychuk: but its still a bug
[20:15] creationix: bradleymeck: but, no, nothing was explicitly done in connect to support trailers, unless tjholowaychuk added it when I wasn't looking
[20:15] pquerna: the http client sends trailers
[20:15] pquerna: the server doens't yet emit stuff for it
[20:15] creationix: pquerna: cool, thanks
[20:15] pquerna: should be a small patch say ryah
[20:15] tjholowaychuk: nope i havent touched it
[20:15] tjholowaychuk: saw that patch though
[20:15] micheil: anyone know much about mongo-native?
[20:15] ajpiano has joined the channel
[20:17] dilvie has joined the channel
[20:19] bradleymeck: when tmpvar
[20:20] bradleymeck: ircretary: when tmpvar
[20:20] ircretary: bradleymeck: tmpvar was last seen at 2010-09-18T23:44:33.969Z, quitting Quit: Leaving
[20:20] jesusabdullah: ircretary: Who am I?
[20:20] ircretary: jesusabdullah: I'm not sure what to do with that command.  Ask for help in PM and I'll tell you what I can do.
[20:20] jesusabdullah: :C
[20:21] wink_: watch out, hes gonna try to cyber you
[20:21] wink_: robot style
[20:21] jesusabdullah: ACTION smacks ircretary's ass
[20:21] jesusabdullah: Don't worry, it's 1965 in this channel!
[20:21] jesusabdullah: ACTION lights up some smokes all Mad Men style
[20:21] jesusabdullah: That reminds me
[20:21] bradleymeck: if we have 2 evalbots in here we can get all kinds of nasty
[20:21] jesusabdullah: I gave a cigarette to a 17 year old yesterday :C
[20:21] jesusabdullah: It'd be great if they disagreed >:P
[20:23] _announcer: Twitter: "node.js occupies two of the top three spots on search keywords that end up at @RedMonk. google / oracle is #5." -- steve o'grady. http://twitter.com/sogrady/status/25055055535
[20:24] marshall_law has joined the channel
[20:25] polyrhythmic has joined the channel
[20:27] tav has joined the channel
[20:29] onar has joined the channel
[20:31] evilhackerdude: tjholowaychuk: so the parser is adding newlines to the parse tree although it shouldnt?
[20:31] saikat has joined the channel
[20:31] quirkey has joined the channel
[20:32] tjholowaychuk: evilhackerdude: yeah, the lexer is fine but the parser needs to ignore those
[20:32] tjholowaychuk: actually i think it is a outdent
[20:32] tjholowaychuk: that is the problem
[20:32] tjholowaychuk: you can do that same template without the large gap and it will render fine
[20:33] tjholowaychuk: but the parse tree with the gap introduces an undefined I think last time I checked
[20:33] tjholowaychuk: due to it not being handled in that method
[20:33] evilhackerdude: yeah, that's how i fixed it on my end
[20:33] mitkok has joined the channel
[20:34] _announcer: Twitter: ".@creationix: i suspect it's partially our audience, which is overwhelmingly developers, but mostly that node.js is just that impressive" -- steve o'grady. http://twitter.com/sogrady/status/25055741807
[20:35] mytrile has joined the channel
[20:35] onar has joined the channel
[20:36] _announcer: Twitter: "Amongst a bajillion other things, really need to check out node.js...who needs sleep!" -- ScottGal. http://twitter.com/scottgal/status/25055862512
[20:37] sveimac has joined the channel
[20:38] _announcer: Twitter: "@scottgal You got that right, node.js will cause sleep loss! #toomuchfun" -- Tim Caswell. http://twitter.com/creationix/status/25055932858
[20:38] shapeshed has joined the channel
[20:39] delapouite has joined the channel
[20:40] AAA_awright has joined the channel
[20:41] technoweenie: mjr_: yea, i think redis is closing the connection when QUIT is sent.  it's sent before INFO message can be received i guess
[20:42] gthb has joined the channel
[20:42] mjr_: oh
[20:42] mjr_: does it always happen that way?
[20:43] technoweenie: only if you open a connection, issue a command, and quit
[20:44] mjr_: oh, sure enough
[20:44] technoweenie: basically it means you have to be sure all your commands have returned before calling quit
[20:45] mjr_: technoweenie: I think this is a redis bug
[20:45] shapeshed has left the channel
[20:45] mjr_: I just tested with the this.closing=true commented out, and it never sent back the reply to the first comand.
[20:46] mjr_: It's like the engine got two commands, and read through them all before responding to the first one.
[20:46] admc has joined the channel
[20:46] technoweenie: yea
[20:46] onar has joined the channel
[20:47] mjr_: Not sure what to do about that.  I guess you need to only send quit from the last command's callback.  And we should probably file a bug with redis.
[20:48] technoweenie: yea thats what i'm doing.  i'd expect the queue to wait on sending the command until the previous one was sent i guess
[20:48] _announcer: Twitter: "@sogrady I think it's just that node.js is the new hotness.  Gods know I'm learning JQuery." -- fuzzychef. http://twitter.com/fuzzychef/status/25056560612
[20:48] mjr_: technoweenie: in all other cases, it is a huge performance win to just pipeline them all.
[20:48] technoweenie: yea i figured thats what you'd say :)
[20:48] mjr_: The difference is really striking.
[20:49] Me1000 has joined the channel
[20:49] technoweenie: yea, the ruby lib has a special method for pipelining commands
[20:49] technoweenie: anyways, this is fine.  at least now i know whats going on :)
[20:50] AAA_awright has joined the channel
[20:50] mjr_: Yeah, that's indeed quite surprising.
[20:51] gsmcwhirter has joined the channel
[20:51] technoweenie: ok good you didnt merge in my commit that fucked w/ test_start_stop.js
[20:52] _announcer: Twitter: "A guide to writing unit tests for #nodejs using nodeunit - http://bit.ly/aytG8S" -- Caolan McMahon. http://twitter.com/caolan/status/25056836747
[20:54] mjr_: I thought I did.  That test isn't wired in anywhere, so I didn't really look at it.
[20:55] _announcer: Twitter: "@scottgal http://howtonode.org, http://nodejs.org/api.html, http://github.com/ry/node/wiki" -- Tim Caswell. http://twitter.com/creationix/status/25057031914
[20:55] onar has joined the channel
[20:55] technoweenie: no, this one: http://github.com/technoweenie/node_redis/commit/1b8bd29bdfe3dfc8640a51c265e0d4e3967c5a9b
[20:58] javajunky: arghh can't get my head around github's 'new' pull request stuff, it seems almost too clever for itself… when I pul stuff in from the fork queue it sometimes works, and sometimes doesn't.. I'm guessing I'm screwing stuff up :( 2 weeks away from git hurts me ;)
[20:58] muk_mb: oh nice, technoweenie's working on node_redis
[21:01] marshall_law has joined the channel
[21:01] onar has joined the channel
[21:02] _announcer: Twitter: "@sogrady.  I agree. node.js is being used for enough serious projects now that it will take years to go away even after it stops being hot." -- fuzzychef. http://twitter.com/fuzzychef/status/25057471022
[21:02] trotter has joined the channel
[21:03] awenkhh has joined the channel
[21:03] _announcer: Twitter: "So IntelliJ will have node.js support in the next 5 days? http://devnet.jetbrains.net/thread/289933 http://jsconf.eu/2010/" -- Mark Bolusmjak. http://twitter.com/z5h/status/25057579991
[21:05] marshall_law has joined the channel
[21:06] prettyrobots has joined the channel
[21:09] BryanWB has joined the channel
[21:10] _announcer: Twitter: "Excellent! VLC player for iPad is now available for free. Now I can watch @davglass' YUI+Node.js presentation on it :)." -- Ron Derksen. http://twitter.com/ronderksen/status/25057999138
[21:13] _announcer: Twitter: "This afternoon I had a great fun idea in the car with @ aplanting when we have the capabilities of the brainstorming were nodejs # ..." [nl] -- JvdMeulen. http://twitter.com/JvdMeulen/status/25058235854
[21:14] emmanueloga has joined the channel
[21:15] _announcer: Twitter: "cygwin installed - check. #nodejs gitted/built - check. loving serverside javascript coding - check." -- Nick Riggs. http://twitter.com/nickriggs/status/25058348532
[21:19] jchris has joined the channel
[21:20] _announcer: Twitter: "very cool this nodejs #. I have to take time to study it." [pt] -- Osmar Alves. http://twitter.com/osmarAlvesWeb/status/25058685133
[21:21] antares_ has joined the channel
[21:22] ivong has joined the channel
[21:23] TobiasFar has joined the channel
[21:24] prettyrobots has joined the channel
[21:24] Tim_Smart has joined the channel
[21:25] evilhackerdude: Tim_Smart: the geddy/rails dude from yesterday http://twitter.com/txustice/status/25004871268
[21:26] evilhackerdude: still don't know which one was faster though. well, not that worthwhile anyway.
[21:26] BrianTheCoder has joined the channel
[21:26] Anti-X: why would you care about a hammer when you have a sledge
[21:27] Anti-X: maybe that analogy would have worked better the other way around
[21:27] evilhackerdude: still waiting for dhh to comment on node :D
[21:27] pedrobelo has joined the channel
[21:28] evilhackerdude: 'async is fucking with my brain. fuck async.'
[21:28] Anti-X: uhm
[21:28] Anti-X: how is it so hard to get?
[21:28] matjas: thus spoke evilfuckerdude
[21:28] matschaffer1 has joined the channel
[21:28] evilhackerdude: async?
[21:28] Anti-X: yeah i don't get why it's not gettable
[21:28] Anti-X: :p
[21:29] konobi: Tim_Smart: any more luck with your zone?
[21:30] evilhackerdude: well, i think i got node's callback and eventemitter style, but at least some people are complaining or searching for a better solution
[21:30] saikat has joined the channel
[21:30] _announcer: Twitter: "@ # Http://nodejs.org/ download button freak and I propose to look at this if you have time-&gt; http://logt.nu/i/8l" [nl] -- JvdMeulen. http://twitter.com/JvdMeulen/status/25059320220
[21:30] Tim_Smart: konobi: Yeah removing that .clone directory put the icing on the cake :)
[21:30] konobi: Tim_Smart: awesome
[21:30] Tim_Smart: konobi: http://fostle.com/ is running with it atm
[21:30] Anti-X: evilhackerdude, well node is still just at 0.2.. i'm pretty sure if there are better options that ryah will be open to suggestions
[21:30] evilhackerdude: Anti-X: especially rubyists from eventmachine/fibres camp. but i don't care. everyone use what they want. i'll burn a few books of the opposite party though.
[21:31] evilhackerdude: Anti-X: my words!
[21:31] Tim_Smart: But I need to get a smtp server running for the form :p
[21:31] evilhackerdude: i'm fine with stuff
[21:32] _announcer: Twitter: "# 010php was fun. Now look @ and @ sborsje ECFI in the flesh. Tomorrow node.js just started!" [nl] -- Johan Kuijt. http://twitter.com/johankuijt/status/25059449275
[21:32] evilhackerdude: Anti-X: although i'd *love* to see a polarizing rant from a popular person inciting a flamewar!!!11
[21:33] Anti-X: well, assuming this popular person is a node developer figure, i'd rather they focused on improving node
[21:33] Anti-X: rather than starting flame wars
[21:34] Tim_Smart: isaacs: Were you happy with that module patch?
[21:34] Anti-X: a healthy discussion is one thing, but a flame war is generally uninteresting to read and nothing useful ever comes out of it
[21:34] neptun3 has joined the channel
[21:34] Anti-X: the facts vs claims ratio is quite low
[21:35] Anti-X: or facts per claim
[21:35] Anti-X: rather
[21:35] technoweenie: filed the redis issue: http://code.google.com/p/redis/issues/detail?id=334
[21:35] konobi: Tim_Smart: formspring or wufoo, man
[21:36] evilhackerdude: Anti-X: of course, who would want a flamewar over a health discussion?
[21:36] Anti-X: healthy*
[21:36] evilhackerdude: thanks.
[21:36] evilhackerdude: lol
[21:36] Anti-X: different thing
[21:36] Anti-X: :p
[21:36] evilhackerdude: health care reform discussion
[21:36] evilhackerdude: the php tea party knocked on your door
[21:37] evilhackerdude: it's like, don't joke about the cool new stuff
[21:37] evilhackerdude: but it's fine to crap on php
[21:37] evilhackerdude: ++
[21:37] Anti-X: i made two programming languages like php in the toilet this morning
[21:37] evilhackerdude: lol.
[21:37] evilhackerdude: Anti-X++
[21:37] v8bot:  evilhackerdude has given a beer to Anti-X. 							Anti-X now has 1 beers.
[21:39] charlenopires has joined the channel
[21:39] onar has joined the channel
[21:40] _announcer: Twitter: "Someone to share their impressions with Node.js WebSockets programming or Python Tornado" [es] -- Francisco Reyes. http://twitter.com/pacorro2000/status/25060033679
[21:44] brianmario has joined the channel
[21:48] _announcer: Twitter: "@ BenAbraham Two smaller rooms instead of one large and have a 101 and nodejs nodejs for post-beginners?" [cs] -- Almad. http://twitter.com/almadcz/status/25060547407
[21:48] onar has joined the channel
[21:52] bradleymeck: !tweet @pacorro2000 im biased, sharing client and server side socket code is nice
[21:52] _announcer: Twitter: "heroku update on node.js summarized: "we'll call you (next year)"" -- Dylan Clendenin. http://twitter.com/deepthawtz/status/25060880872
[21:54] onar has joined the channel
[21:54] RwL has joined the channel
[21:55] _announcer: Twitter: "ok, i'm doing it. finally. sudo port install nodejs" -- Tim Macfarlane. http://twitter.com/timmacf/status/25061074153
[21:56] _announcer: Twitter: "@chbm theoreticaly for...in is unpredictable but both firefox and the latest nodejs (v8) iterate over it properly unlike chrome stable" -- Luís Nabais. http://twitter.com/d3x7r0/status/25061134055
[21:56] ivong has left the channel
[21:56] _announcer: Twitter: "so close to finishing the node-serialport project just one last thing... #nodejs" -- Chris Williams. http://twitter.com/voodootikigod/status/25061164397
[21:59] creationix: can someone help me make this code more pretty https://gist.github.com/87d173e42d36a65cf35a
[22:00] bradleymeck has joined the channel
[22:00] ekidd has joined the channel
[22:00] deepthawtz: looks pretty already to me
[22:02] Anti-X: isaacs, nodeunit error still happens after upgrading npm to 0.2.1
[22:02] creationix: deepthawtz: yeah, but I'm comparing it to https://gist.github.com/424ceb3fbfdc08d381cf
[22:02] creationix: though I understand the node api is a little lower level
[22:02] isaacs: Anti-X: what  version of node?
[22:02] Anti-X: 0.2.0
[22:02] isaacs: oh, yeah, huh.
[22:03] Anti-X: i'm on cygwin, but that shouldn't matter.. the error is about a missing directory
[22:03] Anti-X: like the end leaf of that tree
[22:03] isaacs: no, it's a missing file.
[22:03] Anti-X: oh it's a file
[22:03] isaacs: the bin is pointing to ./lib/testrunner, and it should be ./lib/testrunner.js
[22:04] Anti-X: right on
[22:04] deepthawtz: creationix: actually that ruby could be much shortened
[22:04] deepthawtz: but i get what your striving for
[22:04] creationix: deepthawtz: yeah, but I'm trying to fine patterns, not the shortest using high level apis
[22:04] creationix: I could use node's fs.readFile too
[22:05] creationix: I'm trying again with a node api that closer matches the ruby one
[22:05] x_or has joined the channel
[22:06] deepthawtz: i know in the ruby example you can do File.open("hi", "r").readlines.each {|x| ... }
[22:06] RwL: on two OS X systems that I thought were identically set up, I've had node configure & compile with no issues on one machine (home) and had ./configure fail on another (work)... "Could not autodetect OpenSSL support. Make sure OpenSSL development packages are installed." Know offhand why? Are those openSSL packages included with the latest xCode (which is 3.1.3 here at work but might be 3.2 at home)? 
[22:07] isaacs: Anti-X: i'm gonna add a bit of logic in there to check for .node|.js at the end of files if they're not found
[22:07] Anti-X: neat
[22:08] deepthawtz: creationix: fs.readFile() returns an array?
[22:08] creationix: deepthawtz: no
[22:09] creationix: just a single string or buffer
[22:09] deepthawtz: is there a function for reading in by lines?
[22:10] bradleymeck: i have one lying about
[22:10] bradleymeck: ACTION digs
[22:11] bradleymeck: http://gist.github.com/588742 , makes a stream emit "line" events
[22:11] deepthawtz: bradleymeck: returns an array?
[22:11] bradleymeck: nope
[22:13] bradleymeck: returning an array is generally a memory waste
[22:13] deepthawtz: just an event with some data
[22:13] deepthawtz: the line
[22:13] evilhackerdude: tjholowaychuk: are you aware of any problems the session middleware using a redis backend could cause especially on POST requests?
[22:13] isaacs: Anti-X: fixed on http://github.com/isaacs/npm/commit/bce486b7409937a3c9cb3d509c676a92a7a261ab
[22:14] tjholowaychuk: evilhackerdude: nope, should be fine regardless
[22:14] evilhackerdude: GET seems to work fine, POST just hangs, doesn't event log anything.
[22:14] isaacs: Anti-X: if you wanna test it out, that'd be cool.  pull the latest npm from git, do "make dev" and then "npm install nodeunit"
[22:14] Anti-X: k
[22:14] tjholowaychuk: evilhackerdude: what makes you think it is redis?
[22:14] evilhackerdude: it could also be the session middleware, may not be redis' fault
[22:14] evilhackerdude: sorry
[22:15] bradleymeck has joined the channel
[22:15] creationix: bradleymeck: does it look something like this? https://gist.github.com/a85a980a977dbd35482e
[22:15] ajsie has joined the channel
[22:16] evilhackerdude: so in a GET it's working fine, lastAccess is being updated and read in the url's callback
[22:16] evilhackerdude: but when i post with the session middleware enabled it just doesn't do anything. not even log the POST request.
[22:17] evilhackerdude: if i disable the session middleware the POST works
[22:17] bradleymeck: creationix, yea
[22:17] bradleymeck: at least use wise
[22:18] bradleymeck: gotta restart mac os is freaking out
[22:18] tjholowaychuk: evilhackerdude: woah...
[22:19] evilhackerdude: i love how it's totally unrelated.
[22:19] Anti-X: isaacs, works fine
[22:19] isaacs: Anti-X: awesome.
[22:19] onar has joined the channel
[22:19] tjholowaychuk: evilhackerdude: what is your middleware stack like? perhaps something above session() ends the req
[22:19] bradleymeck has left the channel
[22:20] isaacs: Anti-X: are you torvalamo?
[22:20] Anti-X: yup
[22:20] evilhackerdude: oh, there's more...
[22:22] brianmario has joined the channel
[22:24] hellp has joined the channel
[22:25] evilhackerdude: tjholowaychuk: my fault i guess. i had an order of logger, cookiedecoder, session, bodydecoder, methodoverride, staticprovider
[22:26] evilhackerdude: i moved the session behind methodoverride and now it works with all of them still enabled
[22:27] prettyrobots has joined the channel
[22:29] _announcer: Twitter: "Some very interesting work happening around Node.js http://github.com/ry/node/wiki/modules" -- Ed McManus. http://twitter.com/emcmanus/status/25063519101
[22:29] gerred has joined the channel
[22:31] tjholowaychuk: evilhackerdude: ah :P
[22:32] pdelgallego has joined the channel
[22:32] _CrabDude has joined the channel
[22:37] _announcer: Twitter: "@TheSamoth I'll try and find some sweeping statement involving Node.js or perhaps MongoDB next time ;)" -- Kieran Masterton. http://twitter.com/kieranmasterton/status/25064047420
[22:37] jashkenas has joined the channel
[22:38] LFabien has joined the channel
[22:40] _announcer: Twitter: "Nice, simple node.js templating engine up and running now." -- nick Tulett . http://twitter.com/ticism/status/25064286580
[22:42] onar has joined the channel
[22:42] bradleymeck has joined the channel
[22:43] lachlanhardy has joined the channel
[22:44] matjas has joined the channel
[22:47] bradleymeck: creationix was the readline thing you were showing, your work?
[22:49] prettyrobots has joined the channel
[22:52] creationix: it's a made up api
[22:52] creationix: bradleymeck: ^
[22:52] creationix: I'm not quite sure how to implement it effeciently
[22:53] bradleymeck: yea the only problem i have with that is we have to have something that occurs before end so that we ensure that last line emits
[22:53] bradleymeck: prior to end*
[22:54] creationix: bradleymeck: nah, that's easy, just flush what's in the buffer as a line
[22:54] bradleymeck: the flush is easy
[22:54] creationix: the hard part is to not create lots of temporary buffers
[22:54] bradleymeck: getting line to be garranteed before end though is :/
[22:54] bradleymeck: guaranteed*
[22:54] creationix: bradleymeck: just nextTick the end event
[22:54] creationix: though emit is sync
[22:54] creationix: so as long as you emit line before you emit end you're good
[22:55] bradleymeck: yea but id like it to attach to streams in general :)
[22:55] creationix: you mean piggy back on an existing stream (add line events)
[22:56] bradleymeck: yea but ensure last line event is fire before any end events (somehow bunker down that first end slot)
[22:57] creationix: unless you can consume the end event and not emit it till later, it's going to be tough
[22:57] creationix: I'd just wrap the stream in a new event emitter
[22:59] bradleymeck: yea i guess that would be reasonable
[23:00] sprout1 has joined the channel
[23:01] sprout2 has joined the channel
[23:02] sprout1 has joined the channel
[23:02] _announcer: Twitter: "debugging #nodejs is pretty straight forward using the chrome developer tools : http://bit.ly/9ocVPu" -- Nick Riggs. http://twitter.com/nickriggs/status/25065827013
[23:06] tpryme has joined the channel
[23:07] steadicat has joined the channel
[23:07] jgautier has joined the channel
[23:08] jgautier: hey can anybody help me out with some advice for a multiplayer pong game on node with socketIO?
[23:10] pengwynn has joined the channel
[23:12] confoocious has joined the channel
[23:13] jgautier: anyways i first built the game with all the logic on the client and the server just passing messages but it seemed that the paddle and balls got out of sync after a while
[23:13] muk_mb has joined the channel
[23:13] jgautier: now i have everything running on the server and the clients are basically just drawing frames but im worried the server is pushing to many messages to the client
[23:14] jgautier: any thoughts?
[23:14] gerred has joined the channel
[23:15] prettyrobots: isaacs: The tar format things is coming along.
[23:15] prettyrobots: FYI.
[23:15] prettyrobots has left the channel
[23:16] creationix: jgautier: I started a multiplayer pong and gave up because there is no way around the network latency
[23:16] creationix: since the players are unpredicitable, you have to stream all the movement data 
[23:16] mikew3c has joined the channel
[23:16] creationix: the ball's position can, however, be predicted
[23:16] creationix: just emit changes in direction
[23:16] jgautier: yeah so right now on my server i have each game on an interval pushing messages to the clients
[23:17] jgautier: the message is basically a collection of points for each client to draw
[23:17] bradleymeck: why not just do paddle detection on server side, about the only route to go i would think
[23:17] [[zzz]] has joined the channel
[23:17] jgautier: so but that is going to be 60 messages per second per game
[23:17] creationix: jgautier: why 60/second
[23:18] jgautier: per each player
[23:18] jgautier: well 30 per client
[23:18] creationix: I see
[23:18] jgautier: seems like alot
[23:18] creationix: as long as the message are small, websockets should handle that fairly wekk
[23:18] creationix: *well
[23:18] creationix: or just lower the resolution to 10/sec
[23:19] endtwist has joined the channel
[23:19] kjy112 has joined the channel
[23:19] jgautier: im just messing around and dont really plan on having 100s of people playing so it might be fine
[23:19] creationix: keep in mind your network latency over the internet is sometimes more than 1/30th of a second anyway
[23:19] jgautier: yeah right now im just testing on localhost
[23:19] creationix: A single process can handle thousands per second if your code is effecient
[23:20] rauchg_: creationix: 
[23:20] jgautier: im thinking if the latency is so bad that the game will be choppy
[23:20] rauchg_: you can stream all the movement data 
[23:20] jgautier: just got to test it out
[23:20] rauchg_: but drop packets of data at time intervals 
[23:20] rauchg_: so if you get 100 movement messages in 100 ms 
[23:20] bradleymeck has joined the channel
[23:20] rauchg_: discard the first 99 and send the last 
[23:21] rauchg_: you'll see the player flicker but your app will be more efficient 
[23:21] jgautier: ill just have to play with it to see how it works
[23:21] jgautier: but it sounds like the way im doing it isnt all bad :P
[23:21] rauchg_: it's not 
[23:22] jgautier: cool this is my first node app so ill let you guys know when i upload it to github
[23:22] tjholowaychuk: what gman said
[23:22] tjholowaychuk: lol
[23:22] tjholowaychuk: thats why you can play halo and your dude pops all over the place w/ a shitty connection
[23:23] rauchg_: i've been reading some papers on acm about how they optimize data transfer 
[23:23] rauchg_: leveraging both udp and tcp 
[23:23] sstephenson: can "author" be an array in npm package.json?
[23:23] Vekz: anyone affiliated with sodajs in here?
[23:24] rauchg_: it's crazy 
[23:24] isaacs: sstephenson: i don't think it actually does anything interesting with author, but it's sorta supposed to be just one person.
[23:24] rauchg_: Vekz: tjholowaychuk 
[23:24] tjholowaychuk: Vekz: what up
[23:24] sstephenson: ok. i'll use a comma-separated string
[23:24] Vekz: tjholowaychuk how do I specify a Sauce job name? I cannot seem to find this in the docs
[23:25] sstephenson: thanks isaacs 
[23:25] isaacs: sstephenson: i'll add support for that in the next version.
[23:25] tjholowaychuk: Vekz: you can pass 'job-name' (their naming convention, I requests support for jobName, accessKey etc)
[23:25] isaacs: sstephenson: but you can just omit "author" and add two contributors
[23:25] tjholowaychuk: Vekz: but that should work
[23:25] sstephenson: ah good idea
[23:25] ivong has joined the channel
[23:26] _announcer: Twitter: "I have a desperate urge to write some node.js middleware tonight." -- James Pearce. http://twitter.com/jamespearce/status/25067594285
[23:26] isaacs: sstephenson: actually, on second thought, since "author" is supposed to be like a single principle owner, i think i'm gonna punt on that idea.  just use "contributors"
[23:26] charlenopires has joined the channel
[23:26] Vekz: tjholowaychuk where do i pass that? as a prop on the SauceClient constructor obj?
[23:26] tjholowaychuk: Vekz: yup
[23:27] Vekz: thx bro
[23:27] tjholowaychuk: working?
[23:27] tjholowaychuk: np
[23:28] evilhackerdude: sometimes i read rapeInterval in the connect docs :/
[23:28] Vekz: tjholowaychuk yes it is
[23:28] Duncan_ has joined the channel
[23:29] tjholowaychuk: evilhackerdude: ahahahah
[23:30] kjy112: noob question is node.js written in c++?
[23:30] zith_: c++ and javascript
[23:30] kjy112: how so?
[23:31] kjy112: backend c++ front end js?
[23:31] Sami_ZzZ has joined the channel
[23:31] muk_mb: http://pastie.org/1171100 <— what's wrong with this? I want to build an array of functions and execute them later.
[23:31] zith_: i'm not sure which parts are javascript, kjy112 
[23:31] sveisvei has joined the channel
[23:32] frodenius has joined the channel
[23:32] frodenius has joined the channel
[23:32] frode has joined the channel
[23:32] kjy112: oh thanks anyways i'll research more
[23:34] tjholowaychuk: muk_mb: c is an index
[23:34] tjholowaychuk: muk_mb: do for (var i = 0; len = array.length; i < len; ++i) array[i]()
[23:34] tjholowaychuk: muk_mb: or while (array.length) array.shift()();
[23:34] tjholowaychuk: many ways to go about it
[23:34] muk_mb: oh
[23:34] muk_mb: oh ok, c is not the item 
[23:34] s0enke: or array[c]();
[23:34] s0enke: ;)
[23:35] tjholowaychuk: that too
[23:35] tjholowaychuk: slow
[23:35] tjholowaychuk: but yes
[23:35] evilhackerdude: for loop is teh fastest [tm]
[23:35] evilhackerdude: for with numeric counter.
[23:35] evilhackerdude: cuz loops is where it's at in webapps !!1
[23:36] creationix: while (array.length) array.shift() :O
[23:36] tjholowaychuk: lol
[23:36] tjholowaychuk: didnt say it was fast
[23:36] tjholowaychuk: array.shift()() :p
[23:36] tjholowaychuk: ()()()()()()
[23:37] aliem has joined the channel
[23:37] creationix: it scales so badly it shouldn't even be mentioned
[23:37] onar has joined the channel
[23:37] creationix: shift should never be used in a loop
[23:37] Tim_Smart: Checking for length every iteration is bad, and so is shift.
[23:37] _announcer: Twitter: "@ If you are interested mspro other alternative implementations decentralized Twitter: &quot;Twebz (CouchDB node.js +) + streamie.org" [de] -- ozaed. http://twitter.com/ozaed/status/25068438868
[23:37] creationix: never
[23:37] Tim_Smart: But yeah shift is several times worse than not caching length.
[23:37] creationix: ACTION goes back to writing slides for jsconf.eu
[23:38] sveisvei has joined the channel
[23:38] Tim_Smart: creationix has his irc notifications set to shift()
[23:38] evilhackerdude: creationix: when is your talk?
[23:38] creationix: Saturday morning
[23:38] Tim_Smart: So he can ban-hammer everyone who mentions its.
[23:38] tjholowaychuk: hahaha
[23:38] creationix: Tim_Smart: good idea
[23:39] Tim_Smart: Naw, smart programmers get a bot to do the work for them.
[23:39] thedjinn has joined the channel
[23:39] evilhackerdude: creationix: d'oh, we're competing
[23:39] evilhackerdude: creationix: i would have loved to see yours. RECORD IT ON VIDEO!
[23:39] tjholowaychuk: Tim_Smart: ps, rapid is on node_redis now
[23:39] muk_mb: yay that works, thanks y'all
[23:39] tjholowaychuk: the last fix .. fixed it lol
[23:39] Tim_Smart: tjholowaychuk: Oh nice.
[23:39] stalled has joined the channel
[23:39] muk_mb: oh it is? so don't bother making your own ORM and use rapid?
[23:40] tjholowaychuk: use anything you want
[23:40] tjholowaychuk: mongoose etc
[23:40] tjholowaychuk: rapid is far from done
[23:40] evilhackerdude: <# riak <3
[23:40] tjholowaychuk: and redis is not necessarily ideal lol
[23:40] tjholowaychuk: but its fast
[23:41] Tim_Smart: The thing with redis, is that is it low level, so you can do whatever the flip you want with it.
[23:41] zith_: all this obsession with speed
[23:41] Tim_Smart: It might just take more implementation.
[23:41] zith_: some time good things takes their time damn it
[23:41] tjholowaychuk: yeah exactly
[23:41] tjholowaychuk: implementation is totally left up to you though
[23:41] s0enke: this channel should be renamed to #bleedingedge ;)
[23:42] Tim_Smart: naw, redis isn't bleeding edge, it didn't come out yesturday///
[23:42] Tim_Smart: s/\/\/\//.../
[23:42] evilhackerdude: hmm.
[23:42] s0enke: awk { print $1 }
[23:42] evilhackerdude: i think it's a _damn_ hard job to write a good document store
[23:43] onar has joined the channel
[23:43] evilhackerdude: redis would definitely be my candidate for something like that though
[23:43] Tim_Smart: Yeah I might just use rapid as a base for biggie-orm
[23:44] digitalsatori has joined the channel
[23:45] evilhackerdude: hm
[23:45] [[zz]] has joined the channel
[23:45] evilhackerdude: so what if you're doing more complex operations on your data and have no index to work with?
[23:47] evilhackerdude: also, what about replication? redis can do that but your app will have no way to know about the database's health and no way to influence it
[23:47] evilhackerdude: at least no trivial way
[23:49] tjholowaychuk: health in terms of?
[23:49] evilhackerdude: replication status
[23:49] Tim_Smart: evilhackerdude: There are the info, monitor, slaveof, config commands, but not sure if those are what you are after.
[23:50] gsmcwhirter has joined the channel
[23:51] jbenesch has left the channel
[23:51] evilhackerdude: Tim_Smart: i think it all depends on the evolution of redis cluster
[23:52] aliem has joined the channel
[23:52] tjholowaychuk: just keep in mind guys, im not suggesting rapid (or redis) is a good solution for this stuff, its just "a" solution
[23:52] evilhackerdude: i totally understand
[23:52] evilhackerdude: and i love the idea
[23:53] evilhackerdude: thought about using it myself, but found riak to be a better fit for now
[23:53] evilhackerdude: (or mongo or couch for that matter)
[23:53] Tim_Smart: As far as indexing and stuff, you have to make your own.
[23:53] tjholowaychuk: its just fun because like tim said, you kinda just get to create whatever you want
[23:53] evilhackerdude: yes!
[23:53] evilhackerdude: that's the awesome thing about redis
[23:53] evilhackerdude: like some data struct lib you include and use, but it's all persisted and damn fast.
[23:53] tjholowaychuk: but it pisses me off that there are no man pages for redis lol
[23:53] tjholowaychuk: and he doesnt want them
[23:55] sahazel has joined the channel
[23:56] thedjinn has joined the channel
[23:56] _announcer: Twitter: "I'll be in #paris for the next 4 days. Any #ruby #nodejs or any-language hacker for a hack-beer-night?" -- Andrea Franz. http://twitter.com/gravityblast/status/25069862574
[23:56] evilhackerdude: i'm done with man pages
[23:56] evilhackerdude: and i hate the fact that npm doesn't have an inline help for the commands
[23:57] Tim_Smart: See, this is how someone implemented full text with redis: http://playnice.ly/blog/2010/05/05/a-fast-fuzzy-full-text-index-using-redis/
[23:57] richcollins has joined the channel
[23:57] evilhackerdude: did you read the completion stuff by antirez?
[23:57] evilhackerdude: http://antirez.com/post/autocomplete-with-redis.html
[23:59] evilhackerdude: http://neugierig.org/software/chromium/bloat/ < cool.
