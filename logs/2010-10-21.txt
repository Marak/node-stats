[00:01] ryah_: is anyone doing i18n stuff with node?
[00:02] malkomalko has joined the channel
[00:02] hoffa_ has joined the channel
[00:02] malkomalko: tjholowaychuk: you around?
[00:03] mattly has joined the channel
[00:04] aubergine has joined the channel
[00:05] PyroPeter has joined the channel
[00:05] isaacs: hey, irc people
[00:05] davidascher has joined the channel
[00:05] isaacs: who wants to paint my latest bikeshed?
[00:06] isaacs: http://github.com/isaacs/node/commit/1c3ffb2672c9fc7dec0c08d1fe5753bf00230d49
[00:06] isaacs: anything missing?  any of those that you think should behave differently?  (note: a lot of these don't pass right now, the question is whether or not they *should* all pass)
[00:06] synthomat: okay, on this tutorial, they connects to the db when they use the model :(
[00:06] synthomat: http://howtonode.org/f8553a94aea5117c7236bb73cf85340269ea6602/express-mongodb
[00:07] jashkenas: you're fixing the path.join "./" goes to "/" problem? hallelujah.
[00:08] isaacs: jashkenas: well, that and a few others.
[00:09] isaacs: jashkenas: also the path.join("", "foo") goes to "/foo" "problem"
[00:09] isaacs: ACTION kinda likes that, but whatevs
[00:09] hzin has joined the channel
[00:09] isaacs: just means you have to do path.split(/^|\//) instead of path.split("/")
[00:10] jashkenas: interesting way to set up the tests... looks good to me after a quick read.
[00:10] jashkenas: One thing that seems a little strange is that ... ('', 'foo') is 'foo'    but ('foo', '') is 'foo/'
[00:11] [[zz]] has joined the channel
[00:11] jashkenas: perhaps only add the slash if its necessary? and just just if you happen to have a joined anything to the right?
[00:11] jashkenas: *not just
[00:11] tjholowaychuk: malkomalko: hey kinda
[00:11] tjholowaychuk: whats up
[00:12] isaacs: jashkenas: the logic there is that any preceding '' elements are dropped, but trailing '' elements turn the dir-path in to a dir-contents-path
[00:12] malkomalko: nm, I saw your note in jade that said block expansion wasn't done yet
[00:12] isaacs: jashkenas: which are subtly different
[00:12] malkomalko: thought it was by the examples in the folder, my bad
[00:12] synthomat: WOHOOOO!!
[00:12] isaacs: just ask ls, ln, rsync, scp, cp, etc
[00:12] jashkenas: isaacs: think that joining an empty string on the end should trigger that behavior?
[00:13] jashkenas: do you accept "null" instead, to keep the dir-path?
[00:13] isaacs: jashkenas: if you can think of a better way, sure
[00:13] isaacs: jashkenas: (just emailed to the list,too)
[00:13] synthomat: Validatorian: http://gist.github.com/637550
[00:13] synthomat: this is evil anyway
[00:13] dquestions has joined the channel
[00:13] synthomat: but it works
[00:13] tjholowaychuk: malkomalko: ah :) yeah not yet
[00:13] tjholowaychuk: hopefully soon
[00:14] jashkenas: I just mean -- if I had to pass a value to path.join() that I wanted to be a no-op, I'd probably pass an empty string...
[00:14] jashkenas: anyhow, great job.
[00:14] isaacs: jashkenas: i didnt' do anything except point out the problem :)
[00:14] isaacs: jashkenas: but thanks anyway :D
[00:14] isaacs: ooh!! noop!  that's a great point!  what should path.join() do?
[00:14] isaacs: (like, with no args()
[00:15] jashkenas: barf.
[00:15] jashkenas: or "."
[00:15] jashkenas: but barf is best, I think.
[00:15] isaacs: yeah, i'm thinking path.join() should === path.join("")
[00:15] pquerna: what every python path join does
[00:15] pquerna: is the right answer
[00:15] jashkenas: alright.
[00:15] isaacs: GAGAAAHHH!!!! NOOOOO!!!
[00:15] isaacs: pquerna: go wash your brain out with something.
[00:15] isaacs: python's path.join is redonkulous
[00:15] jashkenas: In Ruby, its ""
[00:16] jashkenas: The Omega Path.
[00:16] isaacs: haha
[00:16] mikew3c_ has joined the channel
[00:16] isaacs: could just return Î©
[00:16] isaacs: currently path.join() is ""
[00:16] isaacs: as is path.join("")
[00:16] isaacs: but i think returning "" is probably never a good answer.
[00:16] Validatorian: synthomat: well done :)
[00:16] indexzero has joined the channel
[00:17] synthomat: Validatorian: but it still doesn't feel right :D
[00:17] synthomat: hehe
[00:17] isaacs: btw, jashkenas, "but barf is best, I think." is so very tweetable.
[00:17] indexzero: isaacs: You around?
[00:17] indexzero: oh there you are
[00:17] pquerna: the choice are throw an exception or return an emptry string for a whole set of path join operations
[00:17] isaacs: indexzero: yep :)
[00:17] pquerna: pick one pattern and just use it
[00:17] jashkenas: especially because it's the one true falsy path, in JavaScript.
[00:17] jashkenas: if (path.join(arg)) { ... }   where arg is null... but who would ever write that?
[00:17] isaacs: pquerna: tell that to python and perl and c# and php
[00:18] isaacs: pquerna: path.join is an airplane on a treadmill.
[00:18] pquerna: isaacs: enjoying all the anecdotes about python's broken path.join, but I have to say I've never had that much pain from it; Its seemed to done what iv'e expected of it whenever I use it.
[00:19] isaacs: pquerna: path.join("foo", "/bar") is retarded.
[00:19] Validatorian: synthomat: I hear ya -- You might post on the node google group, get some opinions on best practice and such
[00:19] isaacs: pquerna: er, python's answer to that is retarded.
[00:19] isaacs: it should be foo/bar, not /bar
[00:19] pquerna: the implication is that the first argument should always be an absolute path
[00:20] pquerna: if its relative, and the second is absolute
[00:20] pquerna: use the absolute
[00:20] pquerna: just like urls really
[00:20] isaacs: pquerna: the problem with python's is that ANY absolute path anywhere in the list drops everything that comes before it.
[00:20] pquerna: yes
[00:20] isaacs: path.join("foo", "/bar", "baz" , "/quux")
[00:20] isaacs: that is wonky
[00:20] synthomat: Validatorian: good idea. will do it after some sleep. we have 2.20am :-/
[00:20] isaacs: pquerna: join is not supposed to be a resolve.
[00:20] synthomat: thanks for your and the others guy help 
[00:20] pquerna: mixed use of absolute and relative paths is what seems wonky to me
[00:20] MikhX has joined the channel
[00:20] Validatorian: synthomat: That's prime coding time!
[00:21] nerdEd has joined the channel
[00:21] necrodearia has joined the channel
[00:21] Validatorian: you're welcome :)  Enjoy node!
[00:21] synthomat: oh not realy. have to stand up at 8am, cook something and then go to work :D
[00:21] echosystm has joined the channel
[00:22] synthomat: i think i will join this chan permanently :-)
[00:22] synthomat: see you
[00:23] echosystm: whats the difference between Nodules and NPM ?
[00:23] isaacs: echosystm: nodules is a module loader.  npm is a package manager.
[00:23] echosystm: ah
[00:23] echosystm: i see
[00:23] creationix has joined the channel
[00:23] hoffa_ has joined the channel
[00:23] isaacs: echosystm: ie, nodules does stuff at run time.  you start your program with it
[00:23] isaacs: npm sets things up, and then goes away
[00:23] echosystm: yep
[00:23] echosystm: i understand
[00:23] echosystm: thanks
[00:23] isaacs: np
[00:24] creationix: isaacs: though the npm generated shims do a little at runtime right?
[00:24] creationix: but that's transparent to the end user, so it's not the same thing
[00:24] isaacs: creationix: yeah, but very very little.  they're basically symlinks, except with a bit of require.paths shuffling.
[00:24] creationix: true
[00:24] MikhX has joined the channel
[00:25] rcy has joined the channel
[00:25] isaacs: creationix: and once the node_modules folder thing is more widespread, they'll literally be just module.exports = require("whatever")
[00:26] creationix: yeah, that will be nice
[00:27] charlenopires has joined the channel
[00:28] Validatorian: isaacs: http://gist.github.com/637660 <-- this npm or html5 acting up? Or me?
[00:29] isaacs: Validatorian: hmm.... just a sec.  that looks like a bug i just fixed...
[00:30] isaacs: oh, no, i mean... a regression i just introduced *^_^*
[00:30] Validatorian: :)
[00:30] isaacs: just a sec, i think i can tinker with the data and make it start working
[00:30] Validatorian: out of the 90 or so npm issues I've had, I think this is the first time it's not been entirely my fault
[00:31] isaacs: hehe
[00:33] mif86 has joined the channel
[00:36] isaacs: ok, should work now
[00:36] banjiewen_ has joined the channel
[00:36] isaacs: i should clean that data up on the way in, too
[00:36] AAA_awright: Why is it everyone attributes every new feature addition to Javascript to HTML5?
[00:37] halfhalo: because
[00:37] AAA_awright: SQL Database in webpages! HTML5!
[00:37] AAA_awright: Huh/
[00:37] halfhalo: be glad its not xml
[00:37] aurynn: XML5!
[00:37] AAA_awright: Native audio playing in Javascript! That's HTML5! >_<
[00:38] Validatorian: worked, thanks isaacs 
[00:39] hober: aurynn: dunno if you're joking, but anne was working on that...
[00:41] evanmeagher has joined the channel
[00:42] c4milo has joined the channel
[00:42] kgf: AAA_awright: maybe I'm mistaken, but at least in the case of audio, it /IS/ HTML5, it's just made accessible via javascript's DOM API.
[00:43] echosystm: anyone here used persevere?
[00:43] Aria: kgf: Which is HTML5!
[00:43] benreesman has joined the channel
[00:43] AAA_awright: The DOM is an entirely seperate spec, so is the audio and image (including video) API
[00:44] kgf: Aria: that was kinda my point lol
[00:44] kgf: or was that sarcasm?
[00:44] AAA_awright: There's no reason you can't use audio and image with <object>
[00:44] Aria: Yes, but if you say it that way it's not buzzword 2.0 compliant!
[00:44] AAA_awright: The fact that browsers waited for a dedicated <video> tag to come out before writing the video player shows some engineering stupidity on their part, imo
[00:45] Aria: Well, immediately prior to that was a format minefield.
[00:45] Aria: It wasn't very long ago that the playing field got so level.
[00:45] kgf: it still kind of is a minefield isn't it?
[00:45] AAA_awright: Level... the standard now is *Flash*
[00:46] AAA_awright: And there isn't any single format that all browsers will play
[00:46] AAA_awright: codec, rather
[00:46] Aria: Yeah, but now there's thankfully only a few options
[00:46] Aria: (and decoder libraries are surfacing!)
[00:47] AAA_awright: Every browser wants their codec of choice to be the *only* codec of choice instead of just letting the hive decide on a de-facto codec
[00:48] AAA_awright: No My Codec will be required by the HTML specification whether you like it or not! >_<
[00:48] AAA_awright: </rant>
[00:48] amerine has joined the channel
[00:51] markt has joined the channel
[00:53] Blackguard has joined the channel
[00:53] jimt has joined the channel
[00:55] meatmanek has joined the channel
[00:56] CIA-31: node: 03Ryan Dahl 07master * r5a98fa4 10/ lib/child_process.js : ChildProcesses cannot be killed if pid is missing - http://bit.ly/ayIC3t
[00:58] jchris has joined the channel
[00:59] Validatorian has joined the channel
[01:02] bentruyman has joined the channel
[01:03] Validatorian: if anyone messaged me recently, please resend -- thought I got a message, then I closed chat without even looking :-P
[01:07] mopemope has joined the channel
[01:10] AAA_awright: Not since your thanks
[01:10] mopemope has left the channel
[01:10] evanmeagher has joined the channel
[01:11] Validatorian: no, it was a PM
[01:11] creationix has joined the channel
[01:13] TheEmpath: alrighty folks
[01:13] TheEmpath: after many hours of your help
[01:13] TheEmpath: and two weeks
[01:13] TheEmpath: here it is
[01:13] TheEmpath: the world's first API-oriented Node.js framework http://github.com/cainiac/Imhotep
[01:13] TheEmpath: the installation instructions are wonky and i have no idea whats going to happen. :(
[01:15] dysinger has joined the channel
[01:17] creationix: TheEmpath: what do you mean by API-oriented?
[01:18] TheEmpath: i dont believe in overarchitected view layers
[01:18] TheEmpath: things like Jade will deter people from embracing node.js i believe
[01:18] gerred has joined the channel
[01:18] TheEmpath: especially given that the vast majority of web people are designers
[01:18] creationix: really, a template language?
[01:18] TheEmpath: there is a reason Drupal is used all over the place
[01:19] TheEmpath: it appeals to designers and designers hate having to learn new stuff
[01:19] kgf: I would've put 'jquery' in that sentence but okay :)
[01:19] TheEmpath: they'd rather make out with a catcus
[01:19] creationix: TheEmpath: well, looks nice
[01:20] TheEmpath: so instead, im making the framework API oriented.  that means that you have an very noninvasive API layer that designers can easily hook into
[01:20] TheEmpath: this allows standing projects to get started using node.js
[01:20] TheEmpath: very quickly
[01:20] SubStack: TheEmpath: the "synchronous request" on that readme is actually asynchronous
[01:20] TheEmpath: yes it is
[01:20] TheEmpath: every request is technically asynchronous
[01:21] TheEmpath: in this context, async means just throw stuff up in hte same way that mongo writes are async
[01:21] SubStack: TheEmpath: also http://github.com/substack/dnode 
[01:21] TheEmpath: we dont care if data was written, just throw it up there
[01:21] TheEmpath: syncRequests in this case allow you to wait for  request and handle it
[01:22] SubStack: then why call it by the wrong term?
[01:22] SubStack: I don't see why there would be a difference between the two
[01:23] TheEmpath: one handles a request, the other one doesn't care
[01:23] SubStack: one form has one or more callbacks as arguments and the other form has none
[01:23] TheEmpath: err one handles a response
[01:24] SubStack: I don't see why there should need to be a difference in the calling semantics when that behavior can be inferred at runtime
[01:25] TheEmpath: say a user lands on a page.  the server will need as much data about that user as possible, like tracing mouseOvers to see what they are looking at.
[01:25] TheEmpath: the user will never need results of that activity
[01:25] TheEmpath: its a one way communication.
[01:26] kgf: you're talking about fire and forget vs. fire and handle, not async vs. sync
[01:26] TheEmpath: ahhh indeed
[01:26] TheEmpath: there it is
[01:26] TheEmpath: i shall adjust
[01:28] SubStack: what I am saying is that you can use the same function for both types of behavior
[01:28] TheEmpath: yes that is true.
[01:28] SubStack: just map over the typeof for arguments
[01:29] TheEmpath: but with sync requests, i prevent multiple sync requests from firing until it resolves
[01:30] SubStack: if you want to get really fancy you can transparently wrap the callbacks gathered on a recursive walk over the argument array and turn them into rpc requests when they get called
[01:31] TheEmpath: D:
[01:31] bpadalino: sounds too fancy
[01:31] TheEmpath: my pants need some cleaning before i get that fancy
[01:32] SubStack: that's what dnode does
[01:32] SubStack: pfft, it's awesome
[01:32] SubStack: because it means your rpc requests can return objects with functions in them
[01:32] bpadalino: dnode sounds pretty neat, that's for sure
[01:33] TheEmpath: oo functions in them
[01:33] SubStack: this is one really annoying problem I had with drb in rubyland
[01:33] TheEmpath: i dunno much about RPC
[01:34] TheEmpath: but clients and servers passing functions around sounds like awesome in a burrito
[01:34] TheEmpath: prevents alot of redundant code
[01:34] madl10n has joined the channel
[01:35] SubStack: at a job I had previously I had to build a backend batch system in ruby for stitching together large gis imagery tiles
[01:35] SubStack: and drb was the best thing around for tying the backend to the frontend
[01:36] ThePub has joined the channel
[01:36] mikew3c_ has joined the channel
[01:36] SubStack: but drb is synchronous, so you've pretty much got to build your own thread pool or fork queue
[01:37] SubStack: and then you can almost pass around objects, but the object methods execute on the local side, which is pretty much never what you want
[01:38] SubStack: then that part is also kludgey since you've got to load the libraries just so and import some serialization stuff
[01:38] langworthy has joined the channel
[01:39] SubStack: TheEmpath: yep passing functions around is really great
[01:39] TheEmpath: ill pick your brain on it
[01:39] TheEmpath: nay
[01:39] TheEmpath: i'll bash your brain over it
[01:40] TheEmpath: sounds delicious
[01:40] SubStack: node is also a really great platform for rpc since you get async out of the box
[01:41] AAA_awright: Is there some recommended way of determining if an object is part of a set?
[01:42] AAA_awright: My tests seem to show the fastest way (by at least 20x) is checking for the existance of object["item"] exists
[01:42] xmux has joined the channel
[01:42] AAA_awright: Over iterating an Array which I guess isn't what I want
[01:43] matt_c has joined the channel
[01:45] SubStack has joined the channel
[01:45] aheckmann has joined the channel
[01:45] gJ|Alex has joined the channel
[01:46] jashkenas: indexOf in Node -- you have to write your own version for the browser.
[01:47] saikat has joined the channel
[01:49] AAA_awright: jashkenas: Is that me?
[01:50] AAA_awright: Yeah that seems to work
[01:51] jashkenas: list.indexOf(item) >= 0
[01:51] jashkenas: If you're in Internet Explorer < 9, you have to write indexOf yourself.
[01:52] AAA_awright: the object lookup still seems to be twice as fast
[01:54] twoism has joined the channel
[01:55] JCS^ has joined the channel
[01:56] jimt has joined the channel
[01:57] threeve has joined the channel
[01:59] mtodd has joined the channel
[01:59] jashkenas: oh, most definitely, but you can't use a JS object hash for everything...
[01:59] jasondavies has joined the channel
[01:59] jasondavies has joined the channel
[02:00] jashkenas: For example, in Internet Explorer (again), JS object's that happen to contain properties with a key of "toString", or "hasOwnProperty" don't work correctly.
[02:02] tosuk has joined the channel
[02:06] ryan[WIN]: sup jashkenas 
[02:06] ryan[WIN]: how's the coffeescript goin'
[02:08] fcoury has joined the channel
[02:15] banjiewen has joined the channel
[02:15] benburkert has joined the channel
[02:15] aurynn has joined the channel
[02:20] mbrochh has joined the channel
[02:22] daniellindsley has joined the channel
[02:23] cataska has joined the channel
[02:24] CIA-31: node: 03Ryan Dahl 07master * r6570cd9 10/ (lib/child_process.js test/simple/test-exec.js): 
[02:24] CIA-31: node: Fix execFile timeouts, improve tests
[02:24] CIA-31: node: It seems that a parent will not get a SIGCHLD if the child is killed by the
[02:24] CIA-31: node: parent? It's unclear, so make 'exit' callback manually. - http://bit.ly/9uo5iw
[02:30] russell_h: once stdin has been opened, is there any way to get node to exit without destroying it?
[02:30] russell_h: or manually exiting
[02:31] jashkenas: ryan[WIN]: goin' swell.
[02:31] ryan[WIN]: nice
[02:35] dnolen has joined the channel
[02:37] xmux: Is there a way (or a library) to open a child with a pty?
[02:38] jamescarr: holy cow
[02:39] jamescarr: websockets in java are a bit complicated
[02:39] chilts: s/websockets/everything/
[02:39] jamescarr: :)
[02:40] Tim_Smart has joined the channel
[02:42] meso has joined the channel
[02:42] roder has joined the channel
[02:44] roder: does anyone use json2 for JSON.parse instead of V8's JSON.parse? (per: http://news.ycombinator.com/item?id=1740395)
[02:45] davidascher has joined the channel
[02:48] ryanfitz has joined the channel
[02:49] unomi has joined the channel
[02:49] alexb_ has joined the channel
[02:51] ysynopsis has joined the channel
[02:53] mbrochh has joined the channel
[02:56] gwoo_ has joined the channel
[02:58] robotarmy has joined the channel
[03:03] dquestions has joined the channel
[03:06] SINPacifist has joined the channel
[03:07] JimBastard_ has joined the channel
[03:08] aurynn has joined the channel
[03:09] aurynn: ACTION facetimes ... CFM!
[03:10] aurynn: and gets.. no answer.
[03:13] jesusabdullah: roder: I wasn't aware of json2. I find JSON.parse works pretty well, though
[03:14] aurynn: wait
[03:14] aurynn: that was the wrong channel
[03:14] jesusabdullah: NUH UH
[03:14] aurynn: YUH HUH
[03:14] matt_c: JSON.parse is the future, which is nice.
[03:16] Twelve-60` has joined the channel
[03:17] twoism has joined the channel
[03:18] pedrobelo has joined the channel
[03:19] jashkenas: what do y'all think of the JSON.stringify + toJSON api? https://developer.mozilla.org/en/JSON#toJSON()_method
[03:20] ehaas has joined the channel
[03:21] Tim_Smart: jashkenas: It doesn't see half bad, but I can see a few surprises popping up here and there.
[03:21] Tim_Smart: *seem
[03:21] micheil has joined the channel
[03:22] AAA_awright has joined the channel
[03:22] jashkenas: I think it's awfully screwy that calling toJSON on an object isn't supposed to return a JSON string... but hey -- it's the standard, right?
[03:23] Tim_Smart: Oh yeah, that is strange.
[03:23] Tim_Smart: I thought you returned a string...
[03:24] micheil: ryah_: ping.
[03:28] JimBastard_: there are entirely too many hot peppers here. indexzero has been cutting them all day. its like toxic with capsaicin up in here
[03:28] JimBastard_: jashkenas: it would be nice to have a streaming JSON api
[03:29] JimBastard_: for parsing large blocks of json
[03:29] micheil: JimBastard: when do you emit a chunk?
[03:29] jchris has joined the channel
[03:30] JimBastard_: http://github.com/bmeck/node-jsonparser
[03:30] Raevel has joined the channel
[03:30] JimBastard_: micheil: you gotta be smart about it, its not an easy problem
[03:30] micheil: yeah
[03:30] Raevel: T_T i thought #nodejs was where it was at
[03:30] micheil: Raevel: nup.
[03:32] Raevel: been hanging out there for a week wondering why it was so quiet
[03:32] micheil: haha, we should really set a title in there saying: "go to #node.js instead"
[03:33] Raevel: yes, please
[03:33] jesusabdullah: Who hangs in #nodejs?
[03:34] JimBastard_: micheil: there is a form you need to fill out to get ops
[03:34] JimBastard_: i talked to the #freenode people
[03:34] micheil: ah
[03:34] JimBastard_: its a whole thing
[03:34] micheil: could you just get them to change it?
[03:34] JimBastard_: you wanna fill it out?
[03:34] JimBastard_: yeah
[03:34] Raevel: heh i recognize your nick jesusabdullah... you've been using IRC-js, yes?
[03:34] JimBastard_: if we fill this out and submit it, they will give ops in that room and this one
[03:34] micheil: probably something to talk to ryah_ about.
[03:35] micheil: JimBastard: got a link to that?
[03:35] JimBastard_: yeah, i dont want to do it
[03:35] Tim_Smart: We don't want ops.
[03:35] micheil: (I can't go on a searching trip, my downloads blew out so I'm on dial up speed)
[03:36] micheil: JimBastard: I was just going to email the dev mailing list so it's there as a thing to do.
[03:36] JimBastard_: micheil: http://freenode.net/group_registration.shtml
[03:36] micheil: hmm.
[03:36] aurynn has joined the channel
[03:38] JimBastard_: you can set a autojoin in #nodejs or something that forces people here
[03:38] noahcampbell has joined the channel
[03:40] micheil: JimBastard: perhaps someone should just stick a bot in there
[03:40] micheil: and as a user joins it sends a message to the channel telling them to join here instead
[03:40] hzin has joined the channel
[03:41] Tim_Smart: micheil: thenoded is sounding good ^^
[03:41] micheil: cool :D
[03:41] micheil: hopefully I'll have the website up by next week
[03:41] Raevel: i can make a bot if you'd like
[03:42] Tim_Smart: IRC bots are the hello world of node.js it seems :p
[03:42] micheil: Raevel: probably best to email the dev list first. I'll do that now..
[03:42] Raevel: Tim_Smart: heh, well, it's fun
[03:42] Tim_Smart: That I can't disagree on.
[03:43] Tim_Smart: I made a bot that you could chat to. It was pretty awesome.
[03:43] Raevel: also extremely simple in node O_o, IRC-js is also prettynice
[03:43] Tim_Smart: Sourced it's responsed from some online chatter bot.
[03:43] Tim_Smart: *responses
[03:44] Raevel: mine controls itunes on our media computer
[03:45] micheil: nice
[03:47] flintf has joined the channel
[03:50] MikhX has joined the channel
[03:55] guybrush: thenoded.com is about podcasts regarding nodejs?
[03:56] guybrush: ah right found the twitter
[03:56] micheil: yeah
[03:56] micheil: ACTION is one of the people behind it
[03:56] guybrush: looks cool, cant wait for it
[03:56] micheil: yeah http://twitter.com/thenoded
[03:57] micheil: you can catch the pilot episode on the twitter feed, and the website should be up in the next week.
[03:59] unomi has joined the channel
[04:00] jansc has joined the channel
[04:00] micheil: Raevel: the reply from ryah_ was that he's tried to get control of #nodejs, but they don't seem to care, so probably best to setup a bot in there :)
[04:00] guybrush: best would be to setup multiple bots there :p
[04:01] jamescarr: express-session-redis
[04:01] jamescarr: hmmm
[04:01] Raevel: i hope they don't ban me T_T
[04:01] micheil: Raevel: I don't see why they could.
[04:02] Raevel: :-) okay i'm on it
[04:03] micheil: I wonder what the most number of cpu
[04:04] micheil: 's per machine is..
[04:04] MikhX has joined the channel
[04:04] micheil: or what the highest number has been
[04:04] ehaas has joined the channel
[04:05] mattly has joined the channel
[04:06] unomi has joined the channel
[04:07] TheEmpath has joined the channel
[04:08] TheEmpath: hail
[04:08] Me1000 has joined the channel
[04:09] micheil: TheEmpath: ha, no. How about hi?
[04:09] TheEmpath: hail has a nice ring to it.
[04:09] micheil: pah.
[04:09] TheEmpath: a sturdiness that reminds me of bullets lodged in oak
[04:13] viktors has joined the channel
[04:15] micheil: hmm.. I should really finish up this documentation split.. huh?
[04:15] blaines has joined the channel
[04:16] dohtem has joined the channel
[04:16] dohtem has joined the channel
[04:16] unomi has joined the channel
[04:17] naturalethic has joined the channel
[04:17] naturalethic: jesus i was wondering why there was no action in #nodejs
[04:17] TheEmpath: D:
[04:17] naturalethic: i been in there for like a week haah
[04:17] Tim_Smart: Ah finally thought of a possible way to handle glib signals for node-gtk...
[04:18] saikat has joined the channel
[04:18] Tim_Smart: Without getting into much introspected mess.
[04:18] TheEmpath: gtk eh!?
[04:18] TheEmpath: tempting
[04:18] Tim_Smart: TheEmpath: http://github.com/Tim-Smart/node-gtk
[04:18] mikew3c has joined the channel
[04:18] TheEmpath: lol @ the todo
[04:18] xak466 has joined the channel
[04:19] Tim_Smart: :p
[04:19] TheEmpath: oh wait
[04:19] TheEmpath: process.nextTick?
[04:19] TheEmpath: you can bind... to server ticks!?
[04:19] blaines has joined the channel
[04:19] TheEmpath: well fml thats incredible...!
[04:20] Tim_Smart: Yeah, I got the glib event loop embedded into node's libev event loop. With some help from schmorp
[04:20] Tim_Smart: Well, actually, it is practically his code.
[04:20] TheEmpath: yessss
[04:20] TheEmpath: finally something awesome
[04:20] xak466 has left the channel
[04:21] TheEmpath: also, when dealing with physics engines, you need to set to NextTick but also measure the delta between ticks and use that as the multiplier against physics calculations
[04:21] micheil: Tim_Smart: what's this?
[04:21] TheEmpath: just saying
[04:21] micheil: :D
[04:21] Tim_Smart: But it is in a process nextTick, because of some gtk_init weirdness
[04:22] TheEmpath: the time delta*
[04:22] TheEmpath: but for webserver... next tick is my golden ticket to awesome
[04:22] Tim_Smart: TheEmpath: It only has to be in a nicktick once. It iterates the glib event loop asyncronously.
[04:22] TheEmpath: ya
[04:23] TheEmpath: i see that
[04:23] TheEmpath: its nifty :D
[04:23] unomi has joined the channel
[04:23] micheil: Tim_Smart: so, in which commit is this stuff from marc?
[04:24] Blackguard has joined the channel
[04:24] Tim_Smart: micheil: http://github.com/Tim-Smart/node-gtk/blob/master/src/ngtk.cc#L18-120
[04:25] micheil: woah... that's kinda complicated.
[04:25] Tim_Smart: That is Marc's code, which replaces glibs loop with ev's.
[04:25] micheil: smooth
[04:25] guybrush: micheil: something that would be cool is a user-editable timeline of each podcast to access information more easy
[04:26] micheil: guybrush: why user-editable?
[04:26] Tim_Smart: It is quite simple in theory, just the C low level cruft that makes it look complicated.
[04:26] TheEmpath: hrmm nexttick only fires once
[04:26] Tim_Smart: TheEmpath: Correct.
[04:26] micheil: guybrush: the site that I'm making is just going to be pulling data from a couchdb
[04:26] guybrush: micheil: user could discuss right in the editable area
[04:26] TheEmpath: how can i bind an event emitters to every server tick?
[04:26] micheil: guybrush: I think I'll leave the discussion to email or twitter
[04:26] Tim_Smart: TheEmpath: Recursion.
[04:26] TheEmpath: doh
[04:26] TheEmpath: k
[04:26] micheil: (maybe I'll setup a librelist for it)
[04:27] TheEmpath: is that safe?
[04:27] micheil: we'll see how it goes.
[04:27] Raevel: bot completed!
[04:27] guybrush: micheil: i am fine with that, first episode was nice
[04:27] dquestions has joined the channel
[04:27] micheil: guybrush: not too much info?
[04:27] guybrush: actually i will hear it once again
[04:28] Tim_Smart: TheEmpath: Probably not so much.
[04:29] TheEmpath: D:
[04:29] CIA-31: node: 03Ryan Dahl 07master * r33e45bb 10/ benchmark/plot.R : Add incomplete R plot file - http://bit.ly/aqgo7L
[04:29] Tim_Smart: I can't remember if nextTick is mapped to a ev call or not.
[04:29] Tim_Smart: ACTION checks it out.
[04:29] ryah_: micheil: what's up?
[04:30] micheil: ryah_: hey, with the patch for the documentation
[04:30] micheil: how do we want to run with that?
[04:30] TheEmpath: currently, i have an emitter that executes everything in an event queue, but it trives through setInterval, and that is way too slow
[04:30] TheEmpath: if i could bind to the node.js main loop itself, i'd be silly happy
[04:30] TheEmpath: nexttick does it, but only once
[04:30] micheil: TheEmpath: why not use a EventEmitter instance?
[04:30] ryah_: micheil: i want to wait a few days - but then i'll grab your patch
[04:31] ryah_: i think
[04:31] micheil: ryah_: okay, because I don't have a really solid patch yet
[04:31] TheEmpath: micheil: i do
[04:31] TheEmpath: wait
[04:31] TheEmpath: oh
[04:31] TheEmpath: oh wait
[04:31] ryah_: but at the moment im tyring to get this makefile thing done and i don't want to think about docs :)
[04:31] micheil: ryah_: I've got it on another local branch while I've been working on the argv/argc stuff
[04:31] chrischr1s has joined the channel
[04:31] micheil: ryah_: yeah, fair point
[04:31] TheEmpath: i need something server side that checks its own queue automatically
[04:32] micheil: ryah_: as for the graphs, I think I have a possible solution, given a no.de server
[04:32] TheEmpath: i can emit an event once, thats cool and all, but binding to the main loop itself is the best approach of all time!
[04:32] micheil: TheEmpath: not sure I get what you mean.
[04:33] TheEmpath: so as clients connect to the server, they transfer request events to it and those events get pushed into a queue
[04:33] Tim_Smart: TheEmpath: Basically if you did a recursive nextTick, the event loop won't stop iterating.
[04:33] TheEmpath: conversly, i have a setInterval that fires every x milliseconds to empty the queue and execute every event in it
[04:33] micheil: (theoretically you could emit an event every time you add data to the queue, but that might be a bit slow)
[04:33] ryah_: ACTION has to go. later
[04:33] micheil: ryah_: okay
[04:34] TheEmpath: micheil: that approach makes a reactive server that is dependant on traffic to send events
[04:34] TheEmpath: i need something that will send events on its own, which is why i execute the queue via setInterval
[04:34] micheil: TheEmpath: yeah, I'm not sure what you're actually trying to do, so I couldn't suggest anything
[04:34] TheEmpath: :(
[04:34] TheEmpath: i need something looping all the time as the server runs to go through the queue and execute events in it
[04:35] TheEmpath: regardless of people actually being connected to it and putting events in it
[04:35] micheil: unless you make it something like: RequestQueue.add() -> triggers event emittance -> RequestQueue#add(item)
[04:35] TheEmpath: that makes it reactive
[04:35] jchris has joined the channel
[04:35] TheEmpath: thats what php does
[04:36] rauchg_ has joined the channel
[04:36] micheil: but, then you can have the add() event being that it checks the queue length and if it is already running
[04:36] Tim_Smart: TheEmpath: So why do you need a continual loop?
[04:36] kgf: if no one's putting events in it, what's in the queue?
[04:36] chewbranca has joined the channel
[04:36] kgf: you seemed to describe something above that sounded like a reactive approach would be precisely what's called for
[04:36] TheEmpath: the continual loop will allow other things to run on the server that qwill dispatch request events as well
[04:36] unomi has joined the channel
[04:36] TheEmpath: AI, if you will
[04:36] micheil: then you don't try to handle the queue, otherwise, you pop() from the queue and handle it.
[04:36] TheEmpath: if i run the server, and no one ever connects to it, Request Events will still fill up in the queue
[04:37] micheil: TheEmpath: how?
[04:37] TheEmpath: i can cleverly dispatch events to do that in paralell
[04:37] micheil: if there are no connections, then there can't be requests.
[04:37] kgf: and why can't it react to those in the same way if they were to be emitted in the same manner for instance
[04:37] TheEmpath: i do it currently via setInterval
[04:37] micheil: TheEmpath: we'd probably need to see some code to understand the problem better.
[04:37] TheEmpath: kgf: thats a good point, but its a chicken before the egg scenario
[04:38] Tim_Smart: TheEmpath: You should do things always as a reaction to an 'event', whether it is time-based, io-based etc etc.
[04:38] TheEmpath: kgf: i'd still need something running internally to trigger Request Events
[04:38] TheEmpath: im currently doing it time-based, Tim_Smart
[04:38] TheEmpath: im curious if there was anything faster
[04:38] TheEmpath: such as binding to iterations of the main loop
[04:38] micheil: yeah, io-based probably
[04:38] Tim_Smart: TheEmpath: Recursive nextTick.
[04:38] Tim_Smart: Is faster.
[04:39] TheEmpath: what i tried was a no go
[04:39] micheil: actually..
[04:39] Tim_Smart: TheEmpath: NextTick wraps around this: http://github.com/ry/node/blob/master/src/node.cc#L173-218
[04:39] Raevel: yay my bot helped :-h
[04:39] TheEmpath: here's what i tried Tim_Smart: http://gist.github.com/637945
[04:40] Tim_Smart: TheEmpath: Why are you calling executeEventQueue() when passing it?
[04:40] MikhX has joined the channel
[04:40] TheEmpath: you said recurisve
[04:40] kjeldahl has joined the channel
[04:41] Tim_Smart: ... executeEventQueue doesn't return a function though...
[04:41] TheEmpath: ya, the nextTick source looks like a call wrapper that i would imagine it would be
[04:41] TheEmpath: oh
[04:41] Tim_Smart: It should be http://gist.github.com/637946
[04:41] TheEmpath: i should get rid of the ()s
[04:41] Tim_Smart: Yes.
[04:41] TheEmpath: i get screwed up with that form time to time :(
[04:42] TheEmpath: those wily functions as objects!
[04:42] TheEmpath: oh yeah
[04:42] TheEmpath: thats way faster
[04:42] TheEmpath: thank you kindly, mr. tim_smart!
[04:43] Tim_Smart: I still think you don't need to be doing this, libev is already an event dispatcher...
[04:43] micheil: yeah
[04:43] micheil: and libev is bloody fast.
[04:43] Gurpartap has joined the channel
[04:43] Tim_Smart: micheil: It's more he is duplicating functionality.
[04:44] Tim_Smart: TheEmpath: What exactly does executeApplicationEvents do?
[04:44] micheil: yeah, but, the way that libev / node_event works is by taking an array of listeners, making a static copy, and then calling the callbacks in that array in sequence
[04:44] Tim_Smart: TheEmpath: You really should emit an event when an item is pushed to the queue.
[04:45] Tim_Smart: Then deal with it, rather than continually iterating libev.
[04:45] TheEmpath: ah
[04:45] micheil: Tim_Smart: we could almost hack that into tim caswell's queue()
[04:45] TheEmpath: Tim_Smart: instead of passing dead emissions
[04:45] Tim_Smart: TheEmpath: Yes.
[04:45] micheil: TheEmpath: and what tim just said is pretty much what I was saying, just in a cleaner way
[04:45] TheEmpath: it would improve performance not iterating through al that
[04:46] micheil: O.o process.on/addListener != events.EventEmitter.on/addListener?
[04:46] TheEmpath: libev?
[04:46] TheEmpath: i would imagine process listeners and event listeners are two separate things
[04:46] Tim_Smart: TheEmpath: node uses libev for its event loop.
[04:46] micheil: TheEmpath: libev is the event library that node uses internally.
[04:46] TheEmpath: hrmm
[04:47] micheil: TheEmpath: generally all eventEmitter's in node inherit from node_events / events.js
[04:47] micheil: but process's events aren't.
[04:47] Tim_Smart: TheEmpath: Basically it polls a file descriptor, if there is nothing to do, it blocks. If there is something to do it iterates the loop and poll the descriptor again.
[04:47] TheEmpath: id imagine process events are lower level
[04:48] TheEmpath: for resource i/o
[04:48] micheil: TheEmpath: not at all.
[04:48] TheEmpath: hrmmm
[04:48] TheEmpath: any examples of libev being used for something similar to what im doing?
[04:49] micheil: Tim_Smart: have a look at src/node.js#352-594
[04:49] micheil: *394
[04:49] micheil: it looks wrong.
[04:49] Tim_Smart: TheEmpath: Node abstracts libev, you don't worry about it.
[04:49] micheil:  / duplicated
[04:49] micheil: Tim_Smart: * generally you don't worry about it.
[04:50] TheEmpath: okay then
[04:50] TheEmpath: taking the advise of wiser people
[04:50] TheEmpath: i emit an event to go through the queue whenever an event is pushed to it
[04:50] TheEmpath: then
[04:51] Tim_Smart: Yup.
[04:51] micheil: TheEmpath: although, you may want to lock the queue
[04:51] TheEmpath: i use nextTick to do a "secondary" main loop to run through any internal processes that may generate Request Events (Aritifical Intelligence, etc)
[04:51] Tim_Smart: So you process on demand, rather than polling.
[04:51] micheil: that is, if your listener is to process the entire queue and not just one item
[04:51] TheEmpath: lock the queue when executing it, yes
[04:52] benburkert has joined the channel
[04:52] TheEmpath: but locking requires me to queue up failed execution events
[04:54] TheEmpath: and if im doing that... then i need something else to go back and go through failed execution events and execute them
[04:55] micheil: TheEmpath: one sec, I'll show you what I mean.
[04:56] path[l] has joined the channel
[04:56] TheEmpath: thanks
[04:57] Tim_Smart: TheEmpath: Have you come from another language?
[04:58] TheEmpath: started at QBasic, learned C++ up to btrees, moved to PHP so i could prototype C++ ideas faster, stuck with C++ for 10 years, learned flex, jquery, and python in the past 2 years
[04:58] TheEmpath: stuck with PHP for 10 years
[04:58] mbrochh has joined the channel
[04:58] Tim_Smart: Ah right. PHP sort of obscures evented programming.
[04:58] TheEmpath: yes it does
[04:59] TheEmpath: flex woke me from my dogmatic slumber
[04:59] TheEmpath: taught me the power of event driven programming and i've been hooked ever since
[05:01] ThePub has joined the channel
[05:01] Tim_Smart: TheEmpath: So what your AI doing that requires a continual loop?
[05:01] TheEmpath: well
[05:01] TheEmpath: im building a framework to help design people and non-coders leverage the power of node.js
[05:01] micheil: TheEmpath: http://gist.github.com/637972
[05:01] ajpiano has joined the channel
[05:02] TheEmpath: ty micheil
[05:02] micheil: TheEmpath: basically it only triggers the processing callback when the locked state is set to false
[05:02] micheil: that way you don't have two processing functions at once
[05:02] micheil: (aka a race-condition)
[05:03] TheEmpath: Tim_Smart: the key is a simple API interface that can scale out quickly without having designers to learn crazy server-side programming.  most designers know js and jquery, so focusing on API modules should translate well for them
[05:03] TheEmpath: Time_Smart: My ever-evolving attempt: http://github.com/cainiac/Imhotep
[05:03] Tim_Smart: So where does the AI come in?
[05:03] TheEmpath: Tim_Smart lol
[05:03] micheil: it shouldn't actually be too hard for a designer familiar with jQuery to learn node
[05:04] TheEmpath: AI was an example of a server-side process creating Request Events
[05:04] Tim_Smart: Browser land is very similar to node.
[05:04] TheEmpath: it is
[05:04] TheEmpath: but it requires designers to learn a serious amount of server architecture to build something that scales out for a team safely
[05:04] Tim_Smart: TheEmpath: I see, so you wanted to create requests as fast as possible, continuously?
[05:04] TheEmpath: aye, long polling etc
[05:05] Tim_Smart: Right, for testing that is fine, but definetly don't do that sorta thing in production ;)
[05:05] Tim_Smart: definitely*
[05:05] TheEmpath: theres alot of this code that i'll have to hit with a fine tooth comb
[05:05] TheEmpath: right now I'm POCing my brains out
[05:05] amerine has joined the channel
[05:05] Tim_Smart: Hmm Github is broke here ;(
[05:07] markt has joined the channel
[05:08] TheEmpath: the ideal setup:  my framework allows design-oriented teams to scale out functionality per Imhotep deployment while allowing them to quickly and automatically deploy fresh builds to new cloud servers... then somehow find a way to load balance traffic between clouds atuomatically
[05:08] TheEmpath: its the most ambitious thing i've ever done, but node.js is armed to do it
[05:08] TheEmpath: total fucking scalability
[05:08] TheEmpath: thats the plan
[05:09] micheil: TheEmpath: good luck with that. :)
[05:09] TheEmpath: i'll need it
[05:09] jakehow has joined the channel
[05:09] micheil: is there a rob righter in the house?
[05:10] TheEmpath: my house or the general house of this channel?
[05:10] micheil: this channel.
[05:10] micheil: but if he's in your house, and he works at medium, could you ask him to join this channel.
[05:10] TheEmpath: lol
[05:10] jamescarr: hmmm
[05:11] beawesomeinstead has joined the channel
[05:11] beawesomeinstead has joined the channel
[05:12] TheEmpath:  Array.prototype.slice.call overrides the argument list of slice, ya?
[05:13] Tim_Smart: TheEmpath: Just thinking, maybe you could create a queue 'buffer'. I.e. When the queue is appended, set the lock and set the processing job in a process.nextTick
[05:13] micheil: TheEmpath: uhh.. it's complicated.
[05:13] micheil: calls the slice function in the context of thisArg with the supplied arguments
[05:13] TheEmpath: ah
[05:14] micheil: call(thisArg, arg1, arg2, arg3, ...)
[05:14] micheil: == apply(thisArg, [arg1, arg2, arg3, ...])
[05:14] Tim_Smart: TheEmpath: Basically turns the syntax from array.slice(etc) .. to .. slice.call(array, etc)
[05:14] TheEmpath: ah
[05:15] TheEmpath: Tim_Smart: how does this measure up in a setup where calls are happening all the time?
[05:15] amerine has joined the channel
[05:16] Validatorian: http://github.com/aredridel/html5 -- "You can pass parser.parse an EventEmitter and the parser will keep adding data as it's received." -- I wrote: response.on('data', function (chunk) { parser.parse(chunk);  }); -- I don't think this is right. Can someone show me the correct syntax?
[05:16] Tim_Smart: TheEmpath: It means it will only process the queue when it has finished a bunch of execution, so the processing is a bit more distributed.
[05:17] Tim_Smart: Validatorian: parser.parse(response); ?
[05:17] Tim_Smart: response is an event emitter.
[05:17] Validatorian: ah, I'll give it a shot
[05:17] amerine has joined the channel
[05:17] micheil: Tim_Smart: actually looks like it takes data
[05:17] micheil: var inputfile = fs.readFileSync('doc/jquery-example.html');
[05:17] micheil: parser.parse(inputfile);
[05:18] Tim_Smart: micheil: The docs need some work then ;)
[05:18] micheil: heh
[05:18] amerine has joined the channel
[05:18] Tim_Smart: Or maybe it has a runtime check...
[05:18] Tim_Smart: If (obj.addListener is function) ...
[05:18] amerine has joined the channel
[05:19] micheil: oohh.. that's possibly somewhat slow too.
[05:19] micheil: uses a slow Object.keys
[05:19] TheEmpath: whats boggling me is the lock itself.. does the lock prevent executions or adding new events to the queue?
[05:19] micheil: Tim_Smart: nup
[05:19] dquestions has joined the channel
[05:19] Tim_Smart: TheEmpath: Executions.
[05:20] TheEmpath: ah
[05:20] TheEmpath: that way executions are forced to happen serially
[05:20] Validatorian: naw, didn't work Tim_Smart -- hrm
[05:20] micheil: actually, yes, it does have a type check, my bad
[05:20] Tim_Smart: TheEmpath: I haven't looked at micheil's gist, so I can't comment on that.
[05:20] micheil: TheEmpath: the lock prevents the dual execution
[05:20] jamescarr: is there a simple node.js balancer? I'm too lazy to write one :)
[05:20] unomi has joined the channel
[05:21] TheEmpath: aye, and thus, stops race conditions
[05:21] TheEmpath: i think i understand
[05:21] Tim_Smart: micheil: Oh I know that queue... I use a faster version ;)
[05:21] micheil: TheEmpath: so effectively, as long as your onPush function loops the queue, until it is empty and then immediately sets the state of locked to false
[05:21] micheil: then it should never be left with anything in it
[05:21] micheil: Tim_Smart: oh yeah?
[05:22] micheil: Tim_Smart: code or it didn't happen.
[05:22] TheEmpath: lol
[05:22] Tim_Smart: micheil: http://github.com/Tim-Smart/node-redis/blob/master/util.js#L63-83
[05:22] Tim_Smart: Might be slower in some cases...
[05:22] Tim_Smart: But was faster in the numerous redis benchmarks I did.
[05:24] TheEmpath: so you control locking via offset alone?
[05:24] Tim_Smart: TheEmpath: It doesn't have any locking code in there.
[05:24] TheEmpath: ah
[05:24] micheil: TheEmpath: that gist isn't tim's original fastqueue
[05:24] micheil: it's been modified
[05:25] micheil: TheEmpath: I added the locking code for your use case.
[05:26] micheil: also, I don't think the call to onPush should block.
[05:26] Tim_Smart: I have a general pattern I use for 'locking' queues: http://github.com/Tim-Smart/nodudio/blob/master/src/service.coffee#L58-71
[05:26] micheil: so, that code may be wrong
[05:27] Tim_Smart: But that code is a little specific for the use case.
[05:27] TheEmpath: but that puts me in a dilemma
[05:27] micheil: yeah
[05:27] TheEmpath: if my executes are triggered only during events
[05:27] micheil: TheEmpath: that gist probably should have done..
[05:27] mattly has joined the channel
[05:27] TheEmpath: and i am locking my event queue
[05:27] unomi has joined the channel
[05:28] TheEmpath: can an event be added to the queue but not executed due to a lock?
[05:29] TheEmpath: if so, then i have to wait until the next request event to have that last event executed
[05:29] mcnellis has joined the channel
[05:29] TheEmpath: this is bad for realtime apps
[05:29] micheil: http://gist.github.com/637972
[05:29] micheil: yes
[05:29] mcnellis: I found a typo in the documentatino how should I notify someone? 
[05:29] micheil: mcnellis: could you create a ticket on the bug tracker?
[05:30] mcnellis: 'binary' - ... This encoding method is depreciated => should be deprecated
[05:30] micheil: http://github.com/ry/node/issues
[05:30] mcnellis: awesome, will do micheil 
[05:30] micheil: thanks
[05:30] micheil: ACTION wishes the bug tracker could have assignments..
[05:30] TheEmpath: to use locking to prevent race conditions, that implies that i have a process loop iterating all the time :X
[05:31] micheil: TheEmpath: yes
[05:31] micheil: so, the while() loop blocks in a way
[05:31] TheEmpath: so that means its okay if the execution of the request queue is blocking
[05:31] breccan has joined the channel
[05:32] micheil: TheEmpath: so, effectively, when an item is added to the queue, if the queue is not already being processed, then we start it processing
[05:32] TheEmpath: which means its acceptable practice to have that queue execution be blocking
[05:32] micheil: if you add another item to it before the processor has finished the first item, then the processor will automatically move on the the next item when it's done the first
[05:33] TheEmpath: addint to the queue should be async then, but execution should be blocking, which negates hte need for an execution lock
[05:33] micheil: (that the while() loop that you need to implement)
[05:33] jacobolus has joined the channel
[05:33] micheil: once the loop finds that the queue is empty, then it sets the lock to false
[05:34] TheEmpath: correct me if im wrong, but if i just bind the execution of the queue to a recursive nextTick and make it blocking, then a lock isn't needed if requests are populated via async calls
[05:35] banjiewen has joined the channel
[05:36] Tim_Smart: micheil: TheEmpath: Here is a little something I usually do: http://gist.github.com/638004
[05:36] micheil: meaning that the next time queue.push() is called, the queue will run
[05:36] pufuwozu has joined the channel
[05:36] Tim_Smart: Might be broken, but I gotta go to dinner.
[05:36] jamescarr: hmmm
[05:37] ThePub has joined the channel
[05:37] micheil: Tim_Smart: yeah, my code is doing similar, just not as elegantly
[05:37] jamescarr: here's a silly question... proxying websockets?
[05:37] micheil: jamescarr: how so?
[05:37] micheil:  and why
[05:38] jamescarr: actually doesnt matter... was going to illustrate using websockets in a round robin setup...
[05:38] ThePub has joined the channel
[05:38] micheil: well, at draft-76, most proxies will die with websockets
[05:39] jamescarr: realized the websockets themselves should just hit a broker
[05:39] jamescarr: activeMQ supports STOMP over websocket
[05:39] micheil: (when draft-04 or -05 is released and implemented, it should be much nicer to do load balancing and such)
[05:41] sveimac has joined the channel
[05:42] xla has joined the channel
[05:42] micheil: Tim_Smart: this leads me to the question: would a good npm module be just a generic queue runner that people can inherit from and use
[05:44] Tim_Smart: micheil: Yeah it was broken, this -> self in the process function.
[05:44] micheil: Tim_Smart: yup
[05:44] Tim_Smart: micheil: Well differents queues for differents tasks really.
[05:45] pquerna: who is the other guy in nodededed?
[05:45] micheil: mikeal
[05:45] micheil: I'm there, and so is mikeal
[05:45] pquerna: heh
[05:45] Tim_Smart: The one that you could implement as a module is distributed job queues backed by redis.
[05:46] micheil: (just to confuse the shite out of people, y'know?)
[05:46] pquerna: right, i know mikeal's voice
[05:46] micheil: right, so the voice you don't know is mine.
[05:46] pquerna: so thats make you the other guy
[05:46] pquerna: right
[05:46] bartt has joined the channel
[05:46] bpot has joined the channel
[05:49] Tim_Smart: What would be cool is a resque client for node.js, and also a client for other languages.
[05:49] Tim_Smart: Having a job queue that is language agnostic would be great.
[05:49] micheil: Tim_Smart: I think a resque client exists in php
[05:52] micheil: but yeah, a node variant could be cool.
[05:52] micheil: technoweenie may have one of those actually.
[05:52] micheil: in node.js
[05:52] Tim_Smart: I actually haven't tried using blpop with my redis client yet.
[05:53] Tim_Smart: My client hasn't implemented pubsub or monitor commands quite yet.
[05:53] dquestions has joined the channel
[05:59] dexterous has joined the channel
[05:59] dexterous has left the channel
[05:59] dexterous has joined the channel
[06:00] dexterous has left the channel
[06:01] TheEmpath: for process.memoryUsage.. what is rss and vsize?
[06:01] Tim_Smart: rss and vsize are generic memory terms.
[06:01] Tim_Smart: v = virtual memory, rss = physical memory used.
[06:02] micheil: ah, neat.
[06:02] TheEmpath: ahhh thanks
[06:05] sivy has joined the channel
[06:11] peutetre has joined the channel
[06:12] TheEmpath: yay long pulls for memory usage!
[06:12] TheEmpath: should make a great dashboard
[06:14] micheil: long polls?
[06:14] micheil: pah! WebSockets or EventSource ftw.
[06:14] micheil: actually, does anyone have an EventSource server in node?
[06:14] micheil: (I haven't seen one)
[06:14] Tim_Smart: Nope. Socket.io has been my choice most of the time.
[06:14] Validatorian: does http://demo.hummingbirdstats.com/ come up for anyone?
[06:15] micheil: yeah, eventsource still looks cool for one-way events
[06:15] ThePub has joined the channel
[06:15] micheil: hmm.. not yet, Validatorian 
[06:15] Tim_Smart: Validatorian: Timing out here.
[06:15] evanmeagher: Validatorian: Nope. I remember trying to view it a few weeks ago and it was down then too.
[06:15] micheil: so, probably timing out
[06:15] micheil: Validatorian: it may be easier for you to spin up your own instance
[06:15] Validatorian: so I've wanted to see the demo for that app for probably 5 months -- it's never worked once for me ;-P
[06:16] Validatorian: yea, suppose I'll have to
[06:16] micheil: why not contact them?
[06:18] Validatorian: sent a tweet. Maybe that'll suffice
[06:19] fyskij has joined the channel
[06:20] fyskij: hai
[06:20] Raevel: oh hai
[06:21] spetrea-home: fyskij: hi
[06:21] fyskij: hai spetrea 
[06:22] fyskij: hai spetrea-home 
[06:22] fyskij: tab fail
[06:22] mjr_: micheil: you can make a really simple and reasonable message queue with my redis client and blpop.
[06:22] spetrea-home: mjr_: blpop = ? 
[06:22] micheil: mjr_: I should just make it supply-your-own redis library
[06:22] micheil: spetrea: a redis thing
[06:23] SamuraiJack has joined the channel
[06:23] Validatorian: yea, I'd like to see a matrix of the different redis modules so I can see what the differences are
[06:24] fyskij: you know a tutorial for a semi-ignorant js user?
[06:24] micheil: fyskij: http://developer.mozilla.org/
[06:24] micheil: you'll find something there.
[06:24] fyskij: thanks
[06:25] micheil: (that's if you're looking for a general js tutorial)
[06:25] Tim_Smart: Making userscripts is a great way to enter the ecmascript world.
[06:26] Tim_Smart: :)
[06:26] micheil: Tim_Smart: I agree
[06:27] yviktorov has joined the channel
[06:27] Tim_Smart: There was a guy on userscripts.org, that wrote a captcha OCR for megaupload.
[06:27] Tim_Smart: Worked really well too.
[06:27] Validatorian: pure js?
[06:27] Tim_Smart: Yeah.
[06:28] Validatorian: nice
[06:28] Tim_Smart: John Resig even blogged about it, and was like "this guy is awesome"
[06:29] Validatorian: anyone care to hazard a guess as to why this is breaking? http://gist.github.com/638045 -- might be an issue with HTML5 parser, but could also be something I missed...
[06:29] Validatorian: I was really happy when Jeremy Keith praised one of my blog articles :-P
[06:32] mr_daniel has joined the channel
[06:32] Anti-X has joined the channel
[06:35] mjr_: Validatorian: the redis command set takes a while to get comfortable with.  There is a big list here:  http://code.google.com/p/redis/wiki/CommandReference
[06:37] zomgbie has joined the channel
[06:38] admc_ has joined the channel
[06:38] admc has joined the channel
[06:39] davidsklar has joined the channel
[06:40] springmeyer has joined the channel
[06:41] SamuraiJack has joined the channel
[06:41] Validatorian: mjr_: eh? Was that meant for me?
[06:41] pquerna: http://github.com/pquerna/node/blob/secure-stream/lib/securestream.js
[06:42] pquerna: so, i don't get how a stream that is both read and write, like SSL, is supposed to exactly fit in the new stream api
[06:42] pquerna: mikeal: ?
[06:42] mytrile has joined the channel
[06:44] micheil: pquerna: iirc, the new stream api is pretty much just an EventEmitter
[06:45] jpld has joined the channel
[06:46] stride: morning
[06:46] pquerna: micheil: yeah, but how do you be a Read & write stream, that needs to talk to another r/w stream?
[06:47] pquerna: is the intention that you'll have two pipe()s?
[06:47] pquerna: and the user stiches it together?
[06:47] micheil: you just emit both events
[06:47] stride: new stream api? :/
[06:47] micheil: pquerna: give me five minutes and I'll check.
[06:47] micheil: stride: 0.3.x
[06:48] pquerna: micheil: you don't emit write(), you call it on something :)
[06:48] sirevanhaas has joined the channel
[06:48] stride: oh, okay thanks
[06:48] pquerna: (at least according to the gist)
[06:49] micheil: pquerna: k, so when you're stream is written to, that'd be a data event coming in
[06:49] mjr_: Validatorian: oh, sorry, you said "modules" and I read "commands".  
[06:50] pquerna: http://gist.github.com/597812 <- is the gist i was going by, there isn't a 'data' event for a writable stream?
[06:50] mjr_: Validatorian: the matrix is pretty simple:  Tim_Smart's client: fastest, fictorial's client: most well tested, only works on older node, my client: supports all Redis features and works on latest node.  Lots faster than fictorials, but not as fast as Tim_Smart's.
[06:50] micheil: pquerna: yeah, that's right iirc.
[06:51] Tim_Smart: mjr_: You forgot one ;)
[06:51] micheil: pquerna: so with a Stream.pipe()
[06:51] Tim_Smart: redis-node is pretty fast, and has a pretty decent coverage.
[06:51] micheil: when the readable stream emits "data" events, it'll call the write() function on writable streams
[06:51] mjr_: Tim_Smart: oh right, the bnoguchi client.  Where does that go on the matrix?
[06:51] pquerna: right
[06:52] Tim_Smart: mjr_: Probably ties with yours on most levels. The API might catch some by surprise.
[06:52] pquerna: so, how do i repersent ssl, which has a cleartext readwrite, and an encrypted read/write stream
[06:52] mjr_: Tim_Smart: I've been meaning to apply your fastness techniques to my redis lib, but yours doesn't do all of the fancy new things.
[06:52] pquerna: in my current model, you would have the ssl stream swallow the socket stream
[06:53] mjr_: Anyway, pquerna is fixing SSL, so I'll stop talking about Redis now.
[06:53] micheil: pquerna: does the ssl stream emit()  data in cleartext?
[06:53] pquerna: yes
[06:53] Tim_Smart: mjr_: Yeah, I'll probably write some tests first. I got a few optimizations to make to the parser as well.
[06:53] pquerna: thats how it is right now
[06:53] micheil: let me check your code..
[06:54] pquerna: its constructor assumes you pass into it another stream -- normally what would be a socket
[06:54] pquerna: then it behaves like a read/write stream for the cleartext
[06:54] micheil: hmm..
[06:54] micheil: if you do something like...
[06:55] pquerna: the other option, is to make a constructor, that returns two streams (with shared state/objects)
[06:55] pquerna: one is the 'cleartext' stream, and the other is the encrytped stream
[06:55] pquerna: and then you would be responsible for pipe'ing them together on each side
[06:55] pquerna: but it seems like a pain in the ass
[06:56] Tim_Smart: os
[06:56] Validatorian: Tim_Smart: Is your client even in npm?
[06:56] Tim_Smart: Validatorian: Nope.
[06:56] pquerna: (ssl is best repersented as 4 'streams', 2 encrypted read & write, 2 cleartext, read & write)
[06:56] pquerna: a push / pull of data in any one of the 4, maybe cause any of the others to do something.
[06:57] micheil: http://gist.github.com/638075
[06:57] micheil: then you should have slightly cleaner code
[06:57] Tim_Smart: pquerna: So is that 4 duplex streams?
[06:57] easternbloc_ has joined the channel
[06:58] micheil: so, source given to createSecureStream is say, the plaintext http stream
[06:58] Validatorian: so I've been using bnoguchi's client, it looks like, but the API was exactly the same as redis-node-client, if I'm not mistaken
[06:58] pquerna: Tim_Smart: 2x duplex streams 
[06:58] Tim_Smart: pquerna: So only 2 streams then...
[06:58] Validatorian: oh, guess not, with some of the stuff
[06:58] pquerna: right, well, it depends if you split out the read and write streams
[06:58] Validatorian: maybe I never ran it
[06:58] Tim_Smart: pquerna: Makes sense to keep them unsplit.
[06:59] micheil: pquerna: well, the secureStream will emit data events, where the first argument is the plaintext chunk
[06:59] mbrochh has joined the channel
[07:00] micheil: but the secureStream should also implement the write method
[07:01] pquerna: thats my point, it needs to return two objects in this world
[07:01] micheil: not at all
[07:02] pquerna: there is one write method from the socket, that writes a encrytped chunk
[07:02] pquerna: there is another tthat wouldtake  a cleartext chunk
[07:02] pquerna: (coming form the http parser, for example)
[07:02] micheil: yeah, so, when you do a stream.pipe(), that listens for data events on the http stream and write's them to the secureStream
[07:03] pquerna: yes
[07:03] micheil: (I think it'd be wise to separate the two things: create a secure stream and pumping one stream to another
[07:03] Nohryb has joined the channel
[07:04] micheil: fffu...
[07:04] micheil: github's down
[07:05] Tim_Smart: http://status.github.com/ is a bit slow on the news I take it...
[07:06] Tim_Smart: Oh nope. It has found it..
[07:06] micheil: ooh..
[07:06] micheil: fancy it changed without a RELOAD
[07:06] micheil: *slow* actually, there it says it'll auto reload.
[07:07] micheil: pquerna: so.. 
[07:07] pquerna: so, it really seems like what you are saying is, make two stream classes.  SecureCleartextStream (which would communicate to the http parser via a pipe()), and SecureEncryptedStream, which would communicate to a socket for example
[07:08] pquerna: these two would be created at the same time, and joined togther, calling shared methods as needed
[07:08] micheil: pquerna: could you create a gist of the code in the securestream file?
[07:08] micheil: (assuming gist's are all cool)
[07:08] JimBastard has joined the channel
[07:08] jansc has joined the channel
[07:08] micheil: ACTION can't access your current code
[07:08] Tim_Smart: gists aren't all cool. pastie.org is in order though.
[07:09] pquerna: micheil: http://apache.pastebin.com/k9nJF6KQ
[07:09] micheil: k
[07:09] delapouite has joined the channel
[07:10] micheil: k, so, in SecureStream, line 24, make that just take credentials and is_server
[07:10] Tim_Smart: http://twitter.com/#!/github/status/28004545902
[07:10] micheil: parent_stream should be being piped() to
[07:10] pquerna: parent stream is a read, write, socket stream in most examples.
[07:10] micheil: pquerna: such as http
[07:10] pquerna: no
[07:10] micheil: no?
[07:11] pquerna: parent stream would be a tcp scoket
[07:11] micheil: net.Stream?
[07:11] pquerna: like net.straem
[07:11] micheil: k
[07:11] pquerna: an http stream would pipe onto this, and that should work.
[07:11] micheil: so, http <-> secureStream <-> net.Stream
[07:12] pquerna: yes
[07:12] micheil: okay
[07:13] pquerna: so, the other model I am talking aobut would be http <-> SecureClearTextStream :: SecureEncryptedStream <-> net.Stream
[07:13] micheil: hm..
[07:13] pquerna: (and in that case, you could make the pipe() calls between each work, rather that the current code, which 'wraps' a net.stream)
[07:14] micheil: so, if you made the createSecureStream take: (clear_stream, encrypted_stream, credentials, is_server)
[07:14] micheil: then that would work
[07:15] pquerna: yes, its possible
[07:15] Anti-X has joined the channel
[07:15] pquerna: though it seems odd to go through all this work to make thing 'pipe'able, and then the first stream i make can't be pipe'd, you need to pass them in at constructor time :)
[07:16] micheil: http://pastie.org/1237476
[07:16] zomgbie has joined the channel
[07:16] pquerna: no, not quite
[07:16] micheil: no
[07:16] micheil: yeah, you're right
[07:16] matjas has joined the channel
[07:17] fyskij: github down :(
[07:17] micheil: pquerna: maybe have a SecureReadStream and a SecureWriteStream
[07:18] micheil: SecureReadStream emits encrypted "data"
[07:18] micheil: wait.
[07:18] micheil: SecureReadStream emits cleartext "data"
[07:18] micheil: SecureWriteStream emits encrypted "data"
[07:18] pquerna: http://pastie.org/1237479
[07:19] micheil: yeah
[07:20] pquerna: (and this has it return basically an un-usable 'stream' handle, which you can't pipe to directly)
[07:20] pquerna: so; yeah.
[07:21] micheil: something like: http://pastie.org/1237484
[07:21] Anti-X: how pasty
[07:23] micheil: pquerna: perhaps call the secStream._clear secStream._write
[07:23] micheil: uh
[07:23] Tim_Smart: Why not just make SecureStream a duplex stream...
[07:24] pquerna: micheil: http://pastie.org/1237487
[07:24] Tim_Smart: You can pipe a duplex stream as a readable or a writable.
[07:24] micheil: secureStream._clear = secureStream._readable
[07:25] micheil: Tim_Smart: because it needs to emit "data" events to two sources
[07:25] micheil: http -> evt:data -> secureStream -> evt:data -> net.Stream
[07:26] micheil: http <- evt:data <- secureStream <- evt:data <- net.Stream
[07:26] Tim_Smart: Yeah that should be doable.
[07:27] Tim_Smart: ACTION pulls out the vim.
[07:27] micheil: I don't think it's possible without two instances of stream.Stream
[07:28] Anti-X: looks like a lot of data events
[07:28] Anti-X: you sure it can't be called something else?
[07:29] micheil: Anti-X: no.
[07:29] Anti-X: evt:clearText evt:encData
[07:29] micheil: no.
[07:29] micheil: this is because it's implementing the Streaming interface
[07:29] micheil: being a duplex stream it has two sets of data events
[07:30] pquerna: http://pastie.org/1237487
[07:30] pquerna: there
[07:30] pquerna: whatever the shortcut or not
[07:30] pquerna: it seems that the internals don't change either way
[07:31] micheil: hmm..
[07:31] micheil: that doesn't look right
[07:32] pquerna: its just more verbose of what you did in http://pastie.org/1237484
[07:32] micheil: createSecureStream should probably just return the stream instance
[07:32] pquerna: sure
[07:33] micheil: rather then each of the different streams
[07:33] pquerna: except it kinda sucks
[07:33] pquerna: so
[07:33] pquerna: okay
[07:33] pquerna: i'll do it this way
[07:33] pquerna: i'm also concerned about error handling
[07:33] ngw has joined the channel
[07:33] pquerna: now i have 3 possible places to emit an error
[07:33] micheil: the way I see it is that CreateSecureStream is like a pipe()
[07:33] pquerna: the read stream, the write stream, or the stram returned
[07:34] pquerna: * the cleartext stream, the encrypted stream, or the 'context' stream
[07:34] pquerna: (it kind actually implies that the return value from createSecureStream isn't actually a stream, but some other object.
[07:35] micheil: would it make sense to merge.. no
[07:35] micheil: not sure if the current streaming interfaces currently apply to duplex streams
[07:35] Anti-X: it doesn't look like it tbh
[07:36] Anti-X: unless each data event had a different interface, which would be a horrible plan
[07:36] Tim_Smart: Wait a minute, isn't ssl more a filter, rather than a stream?
[07:36] micheil: pquerna: some how I think this needs to be thought out more
[07:36] Druid_ has joined the channel
[07:36] micheil: Tim_Smart: hmm, yeah
[07:37] Anti-X: i suppose there's no way to detech which object is adding the event?
[07:37] Anti-X: listener'
[07:37] micheil: Tim_Smart: but filters haven't landed yet
[07:37] micheil: Anti-X: there's nothing that can be done with the events.
[07:37] pquerna: it is not like the filters people are talking about implenting at all
[07:37] micheil: Anti-X: it has to conform to a standard interface that we've got
[07:37] Anti-X: micheil, yeah, but internally i mean
[07:38] Tim_Smart: pquerna: I almost got some psuedo code written... wait a minute.
[07:38] micheil: well, currently Stream.pipe() is like http -> pipe -> file
[07:38] micheil: it's not a duplex thing.
[07:39] Anti-X: if you have one read and one write stream... secure.on('data', ... would find out if the caller is a net.Stream and assign it to the write stream, and if not, assign it to the read stream... but i suppose that's a horrible way to do it
[07:40] pquerna: the caller could be anything, not jsut a net.Stream
[07:40] micheil: it's better to have two internal streams imho.
[07:40] Anti-X: on the encryption side?
[07:42] ph^ has joined the channel
[07:42] Anti-X: well you obviously have contact with both sides once you create the stream, ergo there is a way to detect which of the objects are asking for the data event
[07:42] Tim_Smart: micheil: pquerna: http://pastie.org/1237512 ?
[07:42] murphy has joined the channel
[07:43] viktors has joined the channel
[07:43] Tim_Smart: Ignore the obvious naming issue :p
[07:44] fbits has joined the channel
[07:44] micheil has left the channel
[07:44] micheil has joined the channel
[07:45] pquerna: right, so this moves even more of the 'magic' of what pipe() does into the logic of the secureFilter though
[07:45] micheil has joined the channel
[07:45] pquerna: .right, so this moves even more of the 'magic' of what pipe() does into the logic of the secureFilter though
[07:45] pquerna: micheil: Tim_Smart> micheil: pquerna: http://pastie.org/1237512 ?
[07:45] Tim_Smart: pquerna: Not exactly, as you need two variants of 'write;
[07:45] Tim_Smart: Hence 'reply'
[07:46] micheil: man...
[07:46] micheil: colloquy is fcuked atm
[07:46] MaSch_ has joined the channel
[07:46] temp02 has joined the channel
[07:46] micheil: it won't take focus :(
[07:47] micheil: k, so..
[07:47] micheil: there is this Stream.filter interface that's meant to be being implemented
[07:47] Tim_Smart: You need a write for incoming data, and write for outgoing data.
[07:47] viktors has joined the channel
[07:47] murphy has joined the channel
[07:48] ehaas has joined the channel
[07:48] pquerna: yes, this is actually somewhat close to what it is right now. baring naming and some smudging around.
[07:48] adamholt_ has joined the channel
[07:48] sr_ has joined the channel
[07:48] pquerna: instead of using pipe() on the source, this internallizes it
[07:48] micheil: yeah
[07:48] Tim_Smart: pquerna: You can't use pipe...
[07:49] micheil: yeah
[07:49] micheil: SecureStream.target && SecureStream.source
[07:49] pquerna: Tim_Smart: the code I originally wrote used pipe on one side, and this approach on the other.
[07:49] micheil: then the flow is..
[07:49] pquerna: anyways, its jsut moving the source from something that was piped, to something it does itself.
[07:49] pquerna: if people like this way, i'll do it this way :)
[07:50] micheil: source -> evt:data -> write() -> SecureWriteStream -> evt:data -> write() -> target
[07:50] Athox has joined the channel
[07:50] micheil: I think.
[07:50] Tim_Smart: A bit cleaner: http://pastie.org/1237512
[07:51] gorakhargosh has joined the channel
[07:51] micheil: then the same in reverse
[07:51] micheil: Tim_Smart: yeah, I'm saying you have a Read and Write SecureStream
[07:52] micheil: (sort of like a fs.createWriteStream and fs.createReadStream)
[07:52] Tim_Smart: micheil: Seems a bit too much machinery for a simple filter thing.
[07:52] Tim_Smart: SSL will always have a data source, and a data target.
[07:52] Athox: so what did you agree on while i was receiving nothing at all for 10 mins... effing wifi
[07:52] pquerna: okay
[07:52] pquerna: so
[07:52] pquerna: great
[07:52] pquerna: now who do I emit an error to
[07:53] pquerna: when ssl hankshake fails
[07:53] micheil: pquerna: probably start a discussion on the mailing list.
[07:53] Tim_Smart: pquerna: The filter can be an event emitter.
[07:53] micheil: so way the error fails, it should go bubbling up
[07:53] Athox has joined the channel
[07:53] Athox: spectacular
[07:54] micheil: in case of SecureReadStream(source, target) : source -> evt:data -> sec.write() -> error"
[07:54] micheil: in case of SecureReadStream(source, target) : source -> evt:data -> sec.write() -> "error" -> evt:error -> source
[07:55] viktors has joined the channel
[07:55] micheil: I think.
[07:55] Anti-X: was that the answer to my question before everything went bonkers?
[07:55] breccan has joined the channel
[07:55] emmanueloga has joined the channel
[07:55] mcarter has joined the channel
[07:55] frodenius has joined the channel
[07:55] Roelven has joined the channel
[07:55] jamescarr has joined the channel
[07:55] ryah_ has joined the channel
[07:55] joeshaw has joined the channel
[07:55] vilhonen has joined the channel
[07:55] mape has joined the channel
[07:55] sechrist has joined the channel
[07:55] evilhackerdude has joined the channel
[07:55] orlandov has joined the channel
[07:55] _alex has joined the channel
[07:56] micheil: no
[07:56] Anti-X: what's happening? did the romanians discover freenode?
[07:56] jpld has joined the channel
[07:56] dquestions has joined the channel
[07:56] unomi has joined the channel
[07:56] mikew3c has joined the channel
[07:56] trochala has joined the channel
[07:56] xraid has joined the channel
[07:56] jameshome has joined the channel
[07:56] papyromancer has joined the channel
[07:56] onar has joined the channel
[07:56] aakour has joined the channel
[07:56] akweon has joined the channel
[07:56] jperras|away has joined the channel
[07:56] raja has joined the channel
[07:56] Nacho_ has joined the channel
[07:56] s0enke has joined the channel
[07:56] wereHamster has joined the channel
[07:56] jakob has joined the channel
[07:56] kjeldahl has joined the channel
[07:56] Tim_Smart: pquerna: Take a look at incoming now http://pastie.org/1237536
[07:56] micheil: it's a netsplit
[07:56] micheil: one server gets taken off line, and users get pushed to another server
[07:57] Anti-X: i know it is, i just haven't seen one here (except one a few days ago)
[07:57] wereHamster has joined the channel
[07:57] Anti-X: undernet is riddled with them
[07:58] Anti-X: but then again there aren't more than 50 people in those channels, so it's not as noticeable
[07:58] JimBastard: someone keeps spamming penises in http://www.nodejscloud.com:8001/
[08:00] Anti-X: any reason why you don't have an auto scroll to the bottom?
[08:00] JimBastard: Anti-X: because those guys are noobs
[08:00] Anti-X: oh ok
[08:00] Anti-X: they manage to update the window title with number of new messages, but can't scroll the thing?
[08:00] LionMadeOfLions has joined the channel
[08:01] Validatorian: what browser are you using? it scrolls fine for me
[08:02] stride: works fine here on chrome, too
[08:02] Anti-X: operah
[08:02] adambeynon has joined the channel
[08:02] Validatorian: well there's your problem
[08:02] Anti-X: also it loads the chat before you've logged in, but won't display any of it
[08:02] Anti-X: i can see the scrollbar growing
[08:03] Validatorian: I don't code for opera either, can't blame them
[08:03] stride: meh, I like chats as a techdemo but why are those guys actually using that?
[08:03] stride: it's not like there aren't any established protocols for chat scenarios..
[08:03] Validatorian: gothub is back
[08:04] Validatorian: github too
[08:04] Anti-X: also why do they have so much code
[08:04] Anti-X: there's a socket.io chat example that does exactly this, in 10 lines
[08:04] Anti-X: (of course with socket.io as an additional source)
[08:05] stride: am I blind or is the input font another font as the text above?
[08:06] rubyphunk has joined the channel
[08:06] ph^ has joined the channel
[08:06] Anti-X: i don't know, are you still on the page?
[08:06] ntelford has joined the channel
[08:06] Anti-X: if so, why?
[08:07] Validatorian: 'MS Shell Dlg' is specified for input, probably degrades to sans-serif. the chat text is specified as 'DejaVu Sans Mono,fixed'
[08:07] stride: Anti-X: because I'm in while(!coffee) procrastinate();
[08:09] pquerna: wtb, stream test suite
[08:09] dgathright has joined the channel
[08:10] Tim_Smart: Hmm stream filters would actually be a way better way of doing this.
[08:10] Tim_Smart: Maybe not, as you have to handle incoming data as well.
[08:11] pquerna: Tim_Smart: http://github.com/pquerna/node/blob/9569cdd547036bc9023b4564553fe4b4c94e7118/lib/securefilter.js
[08:12] Tim_Smart: pquerna: http://github.com/pquerna/node/blob/9569cdd547036bc9023b4564553fe4b4c94e7118/lib/securefilter.js#L77
[08:12] stride: pquerna: s/_taget/_target
[08:13] pquerna: stride: thanks
[08:13] micheil: pquerna: what about target.onEnd?
[08:13] path[l] has joined the channel
[08:14] pquerna: i dropped all the onend stuff so far.
[08:14] micheil: k
[08:14] pquerna: what should it do? emit error to the source?
[08:14] Anti-X: you'll just never know
[08:14] Anti-X: it'll vanish like a ninja
[08:14] micheil: I still think it'd be cleaner to have a readable stream and a writable stream
[08:14] micheil: yeah
[08:15] pquerna: micheil: i don't think it matters, the internals are all going to just queue it into an array and call the _cycle function
[08:15] micheil: target.onError -> emit:error -> source:error
[08:15] pquerna: micheil: the wrapper streams or the filter interface, are all just wrapping what _cycle is doing
[08:15] micheil: mm
[08:16] murphy has joined the channel
[08:16] micheil: pquerna: does that work?
[08:17] pquerna: i don't think it does right now; i was pulling parts of it from 3 different branches i've had around
[08:17] micheil: okay
[08:17] pquerna: see: would like strem test cases :)
[08:17] micheil: just wondering
[08:17] micheil: yeah
[08:17] micheil: we really need to get stream.Filter landing
[08:17] Tim_Smart: micheil: Will stream.filter be a two way filter?
[08:17] micheil: so, in stream.js, export.Filter = ...
[08:18] micheil: yeah
[08:18] micheil: wait. I'm not sure
[08:18] Tim_Smart: I thought it would be something like: stream.filter(someFunction);
[08:18] mattly has joined the channel
[08:18] micheil: hmm..
[08:18] micheil: stream.duplex?
[08:18] micheil: stream.Duplex(source, target)
[08:19] Tim_Smart: Yeah but you need a different for incoming and outgoing data.
[08:19] micheil: yeah
[08:19] stride: oh, are you guys implementing transparent filters for streams? :)
[08:19] Tim_Smart: micheil: We already have duplex streams though.
[08:19] pedrobelo has joined the channel
[08:19] micheil: because that hooks the events together similar to how pquerna's doing it
[08:19] TomY has joined the channel
[08:20] micheil: this mustn't be a case of a duplex stream then..
[08:20] micheil: (this all gets confusing)
[08:20] Tim_Smart: We just need a filter interface, like stream. So we can go: util.Filter(source, target)
[08:20] pquerna: is there something more complex being proposed for the actual filter api?  last I saw, it was pretty limited to transformations like base64
[08:22] Tim_Smart: I might submit a quick patch to the mailing list with a proposition.
[08:22] Tim_Smart: Get the ball rolling.
[08:23] JimBastard: again with the penis, http://www.nodejscloud.com:8001/
[08:23] JimBastard: geesh
[08:23] Anti-X: i think it's you
[08:23] stride: the php stream filter api is done pretty well imho
[08:23] Anti-X: since you have the need to advertise it
[08:23] stride: (besides from being implemented in php :>)
[08:23] JimBastard: Anti-X: lies
[08:24] ph^ has joined the channel
[08:24] mattly has joined the channel
[08:24] Anti-X: ;)
[08:24] Tim_Smart: stride: Streams in PHP sounds weird to be honest, being blocking and all.
[08:24] pquerna: of course it is, they have bucket brigades <3
[08:24] murphy has joined the channel
[08:25] Anti-X: the php guerilla can make you use php for anything, because it's the lord's gift to mankind
[08:26] stride: pquerna: okay, granted, how data access in them is handled isn't nice but the interfaces for registering filters & pumping data events between streams & filters always looked pretty usable
[08:26] JimBastard: ahh i think they banned me
[08:27] pquerna: stride: no, how data is access in them is correct.
[08:27] Tim_Smart: "error: The requested URL returned error: 502 while accessing http://github.com/ry/node.git/info/refs" ;(
[08:27] Tim_Smart: I cannot pull some node :/
[08:29] pquerna: micheil: http://github.com/pquerna/node/blob/ssl-filter/lib/securefilter.js#L98
[08:30] micheil: hmm..
[08:30] micheil: wtf. colloquy is being shite atm
[08:31] micheil: pquerna: that error event doesn't propagate
[08:32] micheil: it only dies with no-one listening for the secureFilter's error event
[08:32] micheil: nothing ever listens though
[08:32] Tim_Smart: micheil: The propagation should be handled by http client etc.
[08:32] micheil: it should probably propagate up to the source
[08:32] Tim_Smart: Or whatever so happens to be using the SSL stream.
[08:32] micheil: so, self._source.emit("error")
[08:33] micheil: instead of self.emit("error")
[08:33] Tim_Smart: Hmm I'm not sure about that one.
[08:33] micheil: just like the drain stuff
[08:33] Tim_Smart: The source didn't error, you see. It was the filter that errored.
[08:33] micheil: I think.
[08:33] micheil: hmm, yeah
[08:33] micheil: I guess.
[08:33] micheil: :/
[08:34] pquerna: yup
[08:34] pquerna: proper fucked.
[08:34] stride: if you're interested in thoughts: I'd vote for propagating the error to the securestream (or filter) as it's the abstraction the user is currently using
[08:35] pquerna: and if no one is listening for errors, just throw top level then :) ?
[08:35] stride: user is using.. meh *runs to the coffee machine*
[08:35] stride: if no one is listening it will be propagated to the global uncaughtException handler, isn't it?
[08:36] micheil: yeah
[08:38] micheil: some how I don't think a duplex stream should be an eventemitter
[08:38] micheil: uh
[08:38] micheil: that came out wrong.
[08:38] Tim_Smart: *filter
[08:38] micheil: a duplex filter shouldn't be an eventemitter
[08:38] micheil: yeah
[08:39] pquerna: so, it should emit an error to... source?
[08:40] Tim_Smart: Not sure about that one.
[08:40] micheil: I dunno
[08:40] micheil: because if it's not a stream it shouldn't emit
[08:40] micheil: I guess
[08:40] Tim_Smart: I'll submit a Filter patch to the mailing list soon, maybe discuss on there.
[08:40] stride: emitting would disallow queuing
[08:40] stride: right?
[08:41] micheil: because, by almost default, the node streams aren't really duplex I don't think
[08:41] Tim_Smart: ... when I can pull from ry/node.
[08:41] Tim_Smart: We need a mirror...
[08:41] micheil: actually, secure streams can't be a duplex.
[08:41] micheil: duplex implies read/write
[08:42] micheil: securestreams are read/read/write/write
[08:42] micheil: they have 2x duplex (which I think pquerna stated before)
[08:42] Tim_Smart: micheil: All TCP streams are duplex I.e. readable + writable.
[08:42] femtoo has joined the channel
[08:42] micheil: yeah
[08:42] micheil: so, for a secureStream, you need a source duplex and a target duplex
[08:42] micheil: right?
[08:43] pquerna: yes
[08:43] virtuo has joined the channel
[08:43] Tim_Smart: ssl is just data transformation.
[08:43] Tim_Smart: Yes.
[08:43] digitalspaghetti: you guys fixing SSL & TSL :D
[08:43] micheil: so, effectively a secureStream is a quadrex (is that a word?) stream
[08:43] Tim_Smart: Nope. It isn't a stream.
[08:43] micheil: okay
[08:43] stride: require('hypercube')
[08:44] micheil: so, it's a dual filter?
[08:44] Tim_Smart: micheil: It is more comparible to a createHash I guess.
[08:44] micheil: :/
[08:45] micheil: I have no idea how createHash works
[08:45] Tim_Smart: You filter data through SSL, which transforms it into the correct form.
[08:45] micheil: k
[08:45] Tim_Smart: So dual filter yeah.
[08:45] micheil: although, crypto doesn't use streams.
[08:45] pquerna: i mean, thats an accurate statement; but its not 1:1 or anything.
[08:45] pquerna: with ssl you can re-handshake midstream
[08:46] pquerna: and cause all kind of activity on the encrtyped-side, with zero data going to the cleartext side
[08:46] pquerna: just ssl re-handshaking
[08:46] pquerna: (which is also why some of this pause/resume stuff going between the 3 areas is kinda meh)
[08:46] Tim_Smart: Yay git pull is back in business.
[08:51] SubStack: \o/
[08:59] mbrochh has joined the channel
[09:01] synthomat has joined the channel
[09:04] aubergine has joined the channel
[09:06] pquerna: there
[09:06] pquerna: mail sent
[09:06] pquerna: please troll quickly and effectively
[09:08] Anti-X: announcer clean the tubes
[09:08] _announcer: Cleaning the tubes for great justice!
[09:08] Anti-X: i'm starting to think that someone are clogging up the tubes on purpose!
[09:09] sveimac has joined the channel
[09:09] teemow has joined the channel
[09:10] aubergine has joined the channel
[09:11] hzin has joined the channel
[09:12] ph^ has joined the channel
[09:14] stride: pquerna: your approach looks nice for the SSL use-case but when you're talking about adding such filtering abilites to the core, wouldn't a more generic approach of registering / deregistering filters for eventemitters be more useful?
[09:15] stride: especially, I can't see how your suggestion would allow multiple filters to be executed on the same source data before being forwarded to the target stream
[09:15] cefn has joined the channel
[09:16] hzin_ has joined the channel
[09:19] MikhX has joined the channel
[09:20] hzin has joined the channel
[09:21] JCS0 has joined the channel
[09:23] jperras has joined the channel
[09:24] jetienne has joined the channel
[09:24] Twelve-60 has joined the channel
[09:25] mattcodes has joined the channel
[09:25] hzin_ has joined the channel
[09:25] sveimac_ has joined the channel
[09:26] mattcodes: what the best autorestarting solution out there? i see the one that you have bastardise your script? is there something more elegant?
[09:27] Anti-X: while node yourapp.js; do; done
[09:27] wao has joined the channel
[09:27] Anti-X: or do you mean while developing
[09:27] mattcodes: sorry whilst developing
[09:27] Anti-X: there were a few mentioned yesterday
[09:27] Anti-X: nodemon? and some monitor thing name
[09:28] digitalspaghetti: yea, nodemon is good
[09:28] PyroPeter has joined the channel
[09:28] digitalspaghetti: if your app crashes, it auto-reloads on change
[09:29] Anti-X: yeah don't use it until it's somewhat stable though
[09:29] mattcodes: nodemon looks ideal
[09:29] mattcodes: thanks
[09:29] Anti-X: oh reloads on change
[09:29] mattcodes: just locally for now
[09:32] Anti-X: i was thinking if it reloaded on crash, then it would just loop like hell if it crashes on startup
[09:32] Anti-X: :P
[09:32] PyroPeter has joined the channel
[09:32] wao has joined the channel
[09:37] mattcodes: whats the configure flag add openssl support?
[09:37] wao has joined the channel
[09:37] mattcodes: ignore
[09:37] mattcodes: sorted
[09:41] micheil: pquerna, Tim_Smart: I would've replied, but had people calling me for my 18th..
[09:41] micheil: mattcodes: just don't tell it to not compile with openssl
[09:42] agnat has joined the channel
[09:45] tg has joined the channel
[09:50] mattcodes: app seems to crash with ECONNRESET stacktrace useless
[09:50] mattcodes: all Im doing is request RpxNow
[09:50] mattcodes: and dumping out the body
[09:50] mattcodes: browser displays response
[09:50] mattcodes: and then ECONNRESET
[09:56] sideshowcoder has joined the channel
[09:57] path[l] has joined the channel
[09:57] Anti-X: lol @ comment
[09:57] Anti-X: http://thedailywtf.com/Articles/Masquerading-as-a-Loop.aspx
[10:00] Akufen has joined the channel
[10:00] Akufen has joined the channel
[10:01] aubergine has joined the channel
[10:03] hellp has joined the channel
[10:03] JimBastard has joined the channel
[10:09] hzin_ has joined the channel
[10:10] aubergine_ has joined the channel
[10:17] DozyPieman has joined the channel
[10:17] jetienne: in socket.io how to know if the socket.connect() failed ? apparently socket.on('disconnect', function(){}); is notified only on actual disconnection
[10:18] svnlto has joined the channel
[10:19] Anti-X: it never fails
[10:20] Anti-X: because it continues to retry
[10:20] Anti-X: failing implies stopping that
[10:22] Anti-X: but you could set a timeout or something to NOTIFY the user that the server seems to be down, but you can't say that it IS down.. could just be extremely slow
[10:22] Anti-X: and on connect just clear the timeout
[10:22] xAFFEE has joined the channel
[10:24] abstractj has joined the channel
[10:25] JimBastard: Disregard social life, acquire node.js modules.
[10:26] Anti-X: npm install *
[10:26] Anti-X: probably doesn't work, but would kick ass if it did
[10:27] oal has joined the channel
[10:27] jetienne: Anti-X: uncool
[10:27] JimBastard: this rage comic i made for our how it works section is pretty nice
[10:28] JimBastard: i think it come out classy
[10:28] Anti-X: jetienne, it's the only way, unless you modify the socket.io client to only try once and then notify you that it didn't work
[10:28] Anti-X: which is completely stupid
[10:28] Anti-X: if you think about it
[10:29] jetienne: Anti-X: i see this as a glitch in the API
[10:29] Anti-X: it's not, you just need to start executing stuff only when you've connected
[10:30] jetienne: when you do socket, you should be able to know if the connection failed or not
[10:30] Anti-X: but it didn't fail..
[10:30] Anti-X: it's just waiting to connect
[10:30] jetienne: i will look at the source to be sure there are no hidden event
[10:31] jetienne: Anti-X: i bet the actual websocket interface doesnt have this bug
[10:31] Anti-X: it's not a bug, it's a feature
[10:31] Anti-X: socket.io is an abstraction
[10:32] Anti-X: the moment you call .connect() it starts trying to contact the server, over and over
[10:32] jetienne: Anti-X: we disagree. well me and all previous socket implementation disagree :)
[10:32] jetienne: Anti-X: but this is just a matter of words
[10:32] Anti-X: socket.io doesn't just use sockets
[10:33] Anti-X: so it would be pointless to implement this for one transport and not the others
[10:35] omarkj has joined the channel
[10:35] Tim_Smart: micheil: pquerna: One filter patch coming right up.
[10:36] Tim_Smart: I have decided on a different and more appropiate API after a bit of thought.
[10:36] Tim_Smart: http://github.com/Tim-Smart/node/compare/filter
[10:40] alxc1 has joined the channel
[10:40] jetienne: Anti-X: when you says socket io will keep trying, how do you know that ? you experienced it ? you saw that in a doc ? do you have ref ? it never reconnect here
[10:41] Anti-X: hehe... try taking the server offline and online again, and output the socket.io log
[10:41] Anti-X: you'll know
[10:41] xAFFEE has left the channel
[10:42] micheil: Tim_Smart: okay..
[10:42] Anti-X: jetienne, you can discuss it to death with rauchg_ when he arrives... he's the author and he's probably more conscious about why it would be a bad idea
[10:42] jetienne: Anti-X: he is in pst ? 
[10:42] stride: Tim_Smart: this is more like a facade to hide functionality than a filter, isn't it?
[10:42] Anti-X: pst?
[10:42] unomi has joined the channel
[10:43] jetienne: Anti-X: pacific time. where does he live
[10:43] Anti-X: i think sf
[10:43] Anti-X: so yeah
[10:43] jetienne: ok
[10:43] StanAngeloff has joined the channel
[10:43] jetienne: Anti-X: but when you use socket.io, does it reconnect ?
[10:43] StanAngeloff: Hi, anyone came across build error 'bits/c++config.h: No such file or directory'?
[10:44] Athox has joined the channel
[10:45] Athox: grr
[10:45] Anti--X: registered schmegistered
[10:46] agnat: StanAngeloff: No, but it looks like your system is missing (parts of) the c++ standard library
[10:46] StanAngeloff: agnat: thanks, I am running yum upgrade just in case, but nothing new and i do have all the essentials for build (can compile ruby, php, imagemagick, etc.) oh ...
[10:50] stride: hm, is HEAD broken?
[10:50] Fullmoon has joined the channel
[10:50] Anti-X: i wouldn't use it for production, so to speak
[10:50] Tim_Smart: micheil: Basically you just attach a filter to a stream, and use the filter interface instead of the stream.
[10:50] agnat: StanAngeloff: hm, but ruby, php and IM are pure C if i recall correct. try 'yum install gcc-c++'
[10:50] Tim_Smart: Acts more like a filter.
[10:50] Tim_Smart: Rather than a special pump.
[10:51] stride: Anti-X: I wanted to take a shot at filters and wanted to go to 0.3 for that
[10:52] StanAngeloff: agnat: good point, i prolly have an outdated rpm on this rhel5, will grab a new one
[10:52] aubergine has joined the channel
[10:52] andguent has joined the channel
[10:53] micheil: Tim_Smart: I'd rather call a filter on a stream
[10:53] micheil: so, for instance:
[10:53] Tim_Smart: micheil: You can't have full duplex though.
[10:53] micheil: var outgoing = stream.filter(incoming, function(){...})
[10:53] micheil: and then just attach multiple for that
[10:53] Tim_Smart: You can't intercept the write call, without expecting them to use a different interface.
[10:54] micheil: bbiab.
[10:55] stride: Tim_Smart: can't you delay the write call on the original object until all filters are completed?
[10:56] Tim_Smart: stride: Yeah I'm adding async filters atm.
[10:57] Tim_Smart: Maybe a attach() method. Yeah.
[10:57] Tim_Smart: Maybe not.
[10:58] Tim_Smart: Can't have multiple filters per stream then ;)
[10:59] stride: why not? attach would simply have to maintain a queue of filters
[11:00] mbrochh has joined the channel
[11:01] Tim_Smart: stride: Say I have a gzip filter, and a deflate filter, and I want to have both run in parallel seperately.
[11:01] jashkenas has joined the channel
[11:01] Tim_Smart: So I don't want them to stack ontop of each other.
[11:01] aliem has joined the channel
[11:01] Tim_Smart: .attach means modifying the stream, rather than the filter.
[11:02] stride: huh? how would a gzip filter and a deflate filter on the same direction (in/out) even make sense in parallel?
[11:03] Tim_Smart: Just an example. If I wanted to pump to two different files with different filters.
[11:03] SubStack: var Lazy = require('lazy'); Lazy(stream).filter(...)
[11:04] SubStack: actually a .to() would be boss to pipe to an emitter
[11:05] JimBastard has joined the channel
[11:06] Jonasbn_ has joined the channel
[11:06] stride: Tim_Smart: you'd invoke each filter and that filter only handles requests that it's supposed to, or you don't have both filters attached to the two different file streams in the first place
[11:07] micheil: back Tim_Smart 
[11:07] Tim_Smart: stride: You would have two seperate filters on one read stream, piping the two filters to two different write streams.
[11:08] StanAngeloff_ has joined the channel
[11:09] micheil: yeah, so I'm thinking Filter implements Stream
[11:09] stride: how's that filtering (which I understand as transforming the in- or outgoing data) before it leaves the current level of abstraction? that sounds merely like intelligent event passing
[11:09] Tim_Smart: micheil: Correct. I'm doing a refactor atm.
[11:09] Tim_Smart: Just to make sure filter is pipable.
[11:10] micheil: so, basically, you pass a stream, and get a new stream back
[11:10] Tim_Smart: Yes.
[11:10] micheil: so, probably if we do:
[11:10] Raevel: my #nodejs bot is doing wonders :-DD
[11:11] micheil: streams.Filter(stream, {onWrite: Æ, onRead: Æ})
[11:11] micheil: streams being the require("stream")
[11:11] micheil: thing
[11:11] vilhonen: fancy characters
[11:12] micheil: vilhonen: quicker then typing function
[11:12] vilhonen: how do you write that character with your keyboard?
[11:12] kjeldahl has joined the channel
[11:13] micheil: hmm, on my macbook pro, it's option+f
[11:13] vilhonen: nice
[11:13] micheil: not sure about unix / windows
[11:13] zorzar_ has joined the channel
[11:17] mikew3c has joined the channel
[11:18] aakour_ has joined the channel
[11:19] StanAngeloff_: agnat: thanks for the tips, no joy unfortunately... that file really is missing, i may have to monkey-patch it somehow
[11:20] akweon has joined the channel
[11:21] cnu has joined the channel
[11:22] cefn has left the channel
[11:24] ph^_ has joined the channel
[11:24] yatiohi has joined the channel
[11:25] nsm has joined the channel
[11:26] StanAngeloff_: if anyone's interested in the 'bits/c++config.h' missing, here's what I did:
[11:26] StanAngeloff_: cp /usr/include/c++/4.1.1/i386-redhat-linux/bits/* /usr/include/c++/4.1.2/bits/
[11:28] jetienne: StanAngeloff_: yuk
[11:28] agnat: ACTION shivers
[11:29] path[l] has joined the channel
[11:29] Anti-X: couldn't you just add ..../i386-redhat.../ to include path?
[11:31] abstractj has joined the channel
[11:31] jetienne: StanAngeloff_: i can bet 4.1.2 is just poorly installed. but if it compiles now, you may get away with it
[11:31] StanAngeloff_: jetienne: it compiled just fine
[11:31] jetienne: StanAngeloff_: cool then :)
[11:32] StanAngeloff_: jetienne: reason is prolly i had libstdc++ for i386 and x64
[11:32] jetienne: ACTION is hitting the limit of the "return public functions" class model
[11:32] jetienne: StanAngeloff_: maybe. this is a corner case which may be poorly tested
[11:33] StanAngeloff_: jetienne: i'll log it onto a new page on the wiki for poor souls like me
[11:34] agnat: please, don't do that. It's a hack and very much not recommended IMHO
[11:35] bentruyman has joined the channel
[11:35] StanAngeloff_: agnat: any better ideas?
[11:36] StanAngeloff_: it's still 4.1.1 and 4.1.2 so how different could it be
[11:37] agnat: StanAngeloff_: yeah, find out how to *properly* install a c++ toolchain on your system and document that (if it is non-obvious)
[11:37] hellp has joined the channel
[11:38] StanAngeloff_: agnat: yeah i am sure i have that, don't you worry about my c++ skills good pal
[11:38] stride: Tim_Smart: just to be clear: I like what you're doing there since it's obviously a fit for the ssl use case and others. my only problem is a semantic one I guess. all languages I've come accross refer to a filter as the functional construct that e.g. arrays in js describe or the intercepting filter pattern http://www.oracle.com/technetwork/java/interceptingfilter-136585.html as opposed to a facade, which is (imho) what you're implementing there
[11:39] stride: wow.. tldr.. sorry :)
[11:40] cognominal has joined the channel
[11:40] Tim_Smart: stride: Facade seems a little un-friendly. I'll put it up on the mailing list for discussion.
[11:41] Ori_P has joined the channel
[11:43] jetienne: with socket.io, on the server, how to close a client connection ? 
[11:45] rubyphunk has joined the channel
[11:48] fermion has joined the channel
[11:49] stride: Tim_Smart: ok, sorry if that's too pedantic, I'm a little biased by the java patterns :)
[11:50] rasputnik has joined the channel
[11:51] micheil: Tim_Smart: yeah, so, what was the go with filters?
[11:52] Tim_Smart: micheil: http://github.com/Tim-Smart/node/compare/filter
[11:52] micheil: were they going to be read/write or just one way?
[11:52] Tim_Smart: Duplex.
[11:53] micheil: k
[11:53] micheil: +Filter.prototype.add = function (fn, mode) {
[11:53] micheil:  	109	
[11:53] micheil: should be":
[11:53] micheil: +Filter.prototype.add = function (mode, fn) {
[11:54] Tim_Smart: mode, fn
[11:54] Tim_Smart: Yeah.
[11:54] micheil: and is a bitwise op the best api?
[11:55] micheil: would: function(reads, writes, fn)
[11:55] micheil: but better?
[11:55] micheil: *be better
[11:55] micheil: (just thinking about people not being able to figure out how to properly use the flags
[11:56] micheil: where reads & writes are booleans
[11:56] Tim_Smart: micheil: Maybe some alias will be better. E.g. addIn() addOut()
[11:56] Tim_Smart: addBoth()
[11:56] micheil: hmm, no
[11:57] Tim_Smart: Two arguments that aren't needed is a bit too much I think.
[11:57] stride: which programmer doesn't know how a flag works? :)
[11:57] micheil: aliases would add little conveniences, but would become messier
[11:57] micheil: stride: the one coming from the client side to the server side
[11:58] stride: hmkay
[11:59] Tim_Smart: http://github.com/Tim-Smart/node/commit/b1a283adbfe702dca7be27acaf99223a58326514
[12:00] micheil: I mean, I'm sure most don't know about Constants
[12:00] Jonasbn_ has joined the channel
[12:00] Tim_Smart: micheil: I'll chuck it on the list. I mean, it is a start.
[12:00] stride: not sure that's a good thing but yeah, I get your point micheil :)
[12:01] badaxx has joined the channel
[12:01] Tim_Smart: I'm sure some will have strong opinions or something.
[12:01] micheil: well, the constants are all the things like constants.ENOENT and stuff
[12:01] Tim_Smart: They aren't constants, they are flags.
[12:01] Tim_Smart: Very common in C, but yeah... That's C.
[12:02] micheil: same deal though in a way
[12:02] Tim_Smart: Flags are very useful for this sorta thing though ^^
[12:02] micheil: like, I can probably be sure to see something where someone's doing filter.add(0x02, functuion...()}
[12:03] micheil: (yeah, I did just bash on the keyboard near the end of that.)
[12:03] micheil: instead of Filter.BOTH
[12:03] micheil: uh
[12:03] c4milo has joined the channel
[12:03] Tim_Smart: v8: 0x01 | 0x02
[12:03] v8bot: Tim_Smart: 3
[12:03] micheil: instead of 0x03
[12:03] micheil: yeah
[12:04] micheil: (typoed badly)
[12:04] StanAngeloff_: any ideas how to deal with multiple 'set-cookie' headers when using http.createClient, they seem to get merged into one, bummer?
[12:04] micheil: StanAngeloff_: probably just handle it yourself
[12:04] Tim_Smart: StanAngeloff_: I thought that was patched, for the server anyway...
[12:04] micheil: or write a patch./
[12:04] c4milo has joined the channel
[12:05] stride: StanAngeloff_: that's intended behaviour if i remember the source correctly
[12:05] StanAngeloff_: micheil: how can i get access to the raw body, can't see it when inspecting the response
[12:05] StanAngeloff_: Tim_Smart: oh hi Tim, doesn't seem to be patched, you can send multiple heads, but the response is still messed up
[12:05] micheil: uhh.. you can't (easily)
[12:05] Tim_Smart: Yeah they are comma seperated or something.
[12:05] StanAngeloff_: stride: right...
[12:05] micheil: so is the a http.Server or a http.Client?
[12:06] StanAngeloff_: well maybe i just use sockets then and do that shit myself
[12:06] micheil: StanAngeloff_: I can't begin to tell you just how much of a bad idea that is.
[12:06] agnat: StanAngeloff_: kk, sorry... no offense though ... do however you please, it's a public wiki. I'm just afraid that people (noobs) will do it blindly and *then* turn up on IRC.
[12:06] StanAngeloff_: http.Client .on 'response' (headers) -> headers only has one set-cookie
[12:06] stride: StanAngeloff_: why? is information lost?
[12:06] Tim_Smart: StanAngeloff_: Hmm http://github.com/ry/node/blob/master/lib/http.js#L248-254
[12:06] micheil: StanAngeloff_: in which case..
[12:06] Tim_Smart: And http://github.com/ry/node/blob/master/lib/http.js#L262-267
[12:07] StanAngeloff_: agnat: i agree actually ...
[12:07] derencius has joined the channel
[12:07] micheil: yeah, that's been patched
[12:07] StanAngeloff_: Tim_Smart: mm commited 2010-08-21 odd
[12:07] stride: I slightly remember a discussion on set-cookie where the comma seperation thingy was how the rfc specified it
[12:08] micheil: StanAngeloff_: node version?
[12:08] micheil: node -v
[12:08] codemanki has joined the channel
[12:08] Tim_Smart: set-cookie gets set to an array it seems.
[12:08] StanAngeloff_: latest stable tag, 0.2.3
[12:08] Tim_Smart: But it could be failing.
[12:08] StanAngeloff_: Tim_Smart: must be ... it's always a string
[12:12] heavysixer has joined the channel
[12:12] mikew3c has joined the channel
[12:12] mjr_ has joined the channel
[12:15] dnolen has joined the channel
[12:17] StanAngeloff_: Tim_Smart: well it seems it's not in the tags http://github.com/ry/node/blob/v0.2.3/lib/http.js#L248-254
[12:17] Tim_Smart: StanAngeloff_: OK, not a 0.2.x feature then :)
[12:18] StanAngeloff_: thanks for pointing it out
[12:18] micheil: okay, so, there's two options: back port it
[12:18] micheil: or wait
[12:19] Tim_Smart: micheil: Started a topic on the list.
[12:20] Tim_Smart: http://groups.google.com/group/nodejs-dev/browse_thread/thread/d4c5c3887c5bbc90
[12:20] micheil: k
[12:21] jtsnow has joined the channel
[12:21] StanAngeloff_: micheil: git checkout master && do it all over again and keep me fingers crossed I don't break the Coffee install
[12:22] micheil: StanAngeloff_: heh
[12:22] micheil: it's not recommended that people run master
[12:22] StanAngeloff_: micheil: i am no ordinary person :D
[12:22] micheil: okay then :)
[12:23] StanAngeloff_: micheil: i get by running master of everything... used to having stuff pulled from under me
[12:23] Tim_Smart: StanAngeloff_: Coffee runs fine on master. Just a couple warnings.
[12:23] StanAngeloff_: thanks for the awesome help you guys
[12:23] Tim_Smart: Plus I patched require.extensions, since I broke it :p
[12:23] StanAngeloff_: Tim_Smart: saw that in coffee several weeks ago, good work
[12:24] Tim_Smart: Yeah, with the cleaner stack traces patch.
[12:26] StanAngeloff_: well you were right, deps/libeio/eio.c:874: undefined reference to `sync_file_range' ; monkey-patching it is then...
[12:26] xla has joined the channel
[12:27] ajpiano has joined the channel
[12:28] micheil: StanAngeloff_: we do have a little bit for backport patches, and 0.2.4 will be released on the 23rd
[12:28] Jonasbn_ has joined the channel
[12:28] micheil: StanAngeloff_: maybe wait 2 days and see if it's patched by 0.2.4
[12:29] Tim_Smart: Is 0.2.4 the last of the 0.2.x series?
[12:29] StanAngeloff_: micheil: i reckon i'll checkout 2010-10-17, parent a6ee3bac85c84c1a24c1, that seems stable by the comment
[12:30] Sembiance: morning :)
[12:31] SvenDowideit_ has joined the channel
[12:31] Tim_Smart: micheil: I'm thinking an options hash is a possible replacement for the bitwise flags.
[12:31] micheil: :/
[12:31] aubergine_ has joined the channel
[12:31] Tim_Smart: I like the flags though, they seem cleaner.
[12:31] micheil: yeah, flags are cleaner then option hashs
[12:32] micheil: (almost felt like saying "isn't anything cleaner than a hashie?)
[12:34] aubergine_ has joined the channel
[12:35] micheil: also, Tim_Smart I think filters should run in sequence (series) as do event listeners
[12:35] Tim_Smart: micheil: I'm thinking of things like gzip filters.
[12:36] Tim_Smart: But I guess that is more a pipe job.
[12:36] micheil: yeah, but then I want to gzip and ssl
[12:36] micheil: (and yes, gzip is more a pipe job)
[12:36] Tim_Smart: Yeah I might go back to sync only filters.
[12:36] micheil: unless you have http -> gzip -> compressed data -> net.Stream
[12:36] micheil: and the reverse
[12:36] johngbrooks_ has joined the channel
[12:37] micheil: I'd like to hear what isaacs has on this.
[12:37] Tim_Smart: Then you just pipe to a de-compression gzip.
[12:37] micheil: looks like these duplex streams are going to be big.
[12:38] micheil: so, it sounds like anything with net/http/file io is likely to have a 2x duplex stream
[12:39] micheil: so, what I'm calling a quadrex stream..
[12:40] micheil: or, rather multiplexed streams
[12:41] kkaefer has joined the channel
[12:42] Tim_Smart: Yeah sync filters makes things so much nicer ^^ http://github.com/Tim-Smart/node/compare/filter
[12:42] Jonasbn_ has joined the channel
[12:43] MrNibbles: !seen MrDoob
[12:43] micheil: var Filter = function (stream, filters) {
[12:43] micheil: should be
[12:43] micheil: var Filter = function (stream) {
[12:43] micheil: filters is never used
[12:43] Tim_Smart: Ah yes.
[12:43] MrNibbles: is mrdoob on any channels?
[12:43] micheil: MrNibbles: I don't think so
[12:44] micheil: Tim_Smart: also, Filter never calls Stream on it
[12:44] micheil: Filter should include:
[12:44] micheil: Stream.call(this)
[12:44] romainhuet has joined the channel
[12:44] MrNibbles: micheil: ok :(
[12:44] micheil: MrNibbles: he's pretty hard to get a hold of, iirc.
[12:44] boaz has joined the channel
[12:45] MrNibbles: micheil: ok cool, i had a chat to him here a while back
[12:45] MrNibbles: might have to resort to an e-mail
[12:46] abstractj has joined the channel
[12:47] micheil: Tim_Smart: also, this.layers should probably be made static before looping
[12:47] micheil: like we do for event listeners
[12:47] Tim_Smart: micheil: No need, as the loop is syncronous.
[12:47] micheil: :/
[12:48] Anti-X has joined the channel
[12:48] Ori_P has joined the channel
[12:48] micheil: but the loop could fire while while another filter adds a filter
[12:48] Tim_Smart: People might want to add filters on the fly.
[12:48] micheil: hmm, I think that could lead to some nasty cases of recursion
[12:49] micheil: (which I think was why what was done in events.js was done)
[12:49] Tim_Smart: Recursion can't occur, as I cache the length.
[12:49] micheil: hmm, I suppose.
[12:49] micheil: ask ryah then.
[12:49] Tim_Smart: Yeah.
[12:50] micheil: for some reason we're currently slicing the listeners even though the length is static
[12:50] micheil: maybe due to the pop()/shift() case
[12:50] Tim_Smart: slices aren't cheap...
[12:50] micheil: yeah
[12:50] micheil: there'd have to be a good reason for it.
[12:51] micheil: it'll be morning time in SF in about.. 3 hours.
[12:51] Tim_Smart: Probably for a case where someone removes a listener in a listener.
[12:51] Tim_Smart: Which won't really happen in a filter.
[12:51] micheil: what's stopping someone doing that in a filter
[12:51] micheil: and can I remove a filter?
[12:52] Iszak has joined the channel
[12:52] Iszak: So I'm wondering how practical it is for Node.JS to be the web server and web application?
[12:52] Tim_Smart: Nothing, but I can't find a sane use case for removing a filter in a filter.
[12:53] micheil: Iszak: fairly practical.
[12:53] micheil: Tim_Smart: hmm..
[12:53] Iszak: would it be best to use say nginx?
[12:53] micheil: Iszak: depends on your use-case
[12:53] Tim_Smart: micheil: I would rather save the slice call ;)
[12:53] micheil: or your application rather
[12:53] micheil: Tim_Smart: discuss plz.
[12:53] micheil: Tim_Smart: should we pick this up in the am.?
[12:54] Iszak: micheil, it's more basically serving files but it needs to do database queries.
[12:54] micheil: it's what? 1am?
[12:54] Tim_Smart: Yeah, I might go to sleep.
[12:54] Tim_Smart: 2am.
[12:54] micheil: Iszak: so. why do you want to use node.js?
[12:54] micheil: Tim_Smart: who knew kiwi's were so far away?
[12:54] micheil: (actually, 1:54am, so, yeah 1am)
[12:54] micheil: :P
[12:55] Iszak: Well because the thought of JS on the server side is amazing, plus the ability to only have Node.JS no web server like nginx or lighttpd just Node which would act as both.
[12:55] MattDiPasquale has joined the channel
[12:55] MattDiPasquale: Node.js rules!
[12:55] micheil: Iszak: if you're serving insane amounts of static files, nginx is still better in the contrived benchmarks
[12:56] MattDiPasquale: does anyone here use cucumber with it?
[12:56] Tim_Smart: sendfile + node is still pretty fast though.
[12:56] micheil: Tim_Smart: true
[12:56] MattDiPasquale: i've seen vows
[12:56] Iszak: sendfile via what?
[12:56] micheil: Tim_Smart: but remember, these are contrived benchmarks
[12:56] MattDiPasquale: can you use cucumber & vows together?
[12:56] Tim_Smart: But nginx is still faster - it uses sendfile as well.
[12:56] Iszak: wait wait, node.js has sendfile?
[12:56] micheil: Tim_Smart: yeah, faster by the time of a c-> js -> c call
[12:57] micheil: Iszak: uhh, sort of.
[12:57] MattDiPasquale: i know you can write cucumber in JavaScript... But i've never really used cucumber before
[12:57] Iszak: api link?
[12:57] Tim_Smart: Iszak: Yeah. http://github.com/Tim-Smart/node-middleware/blob/master/sendfile.js
[12:57] Tim_Smart: Iszak: Not documented.
[12:57] Iszak: thank you.
[12:57] Iszak: it's okay.
[12:57] micheil: MattDiPasquale: no idea, perhaps talk to the cucumber guys
[12:57] Tim_Smart: Iszak: Fast forward to line 72
[12:58] Iszak: / TODO: pester ryah to let him how much of a hack this is
[12:58] micheil: Iszak: it's not for the faint of heart.
[12:58] Iszak:  ?
[12:58] JimBastard: MattDiPasquale: kyuri
[12:58] MattDiPasquale: i got the book on it... but i still don't really get it yet...
[12:58] MattDiPasquale: micheil: word. thanks
[12:58] Tim_Smart: Iszak: Yeah I have to do that to make sure the headers are sent before the file data.
[12:58] JimBastard: MattDiPasquale: http://github.com/nodejitsu/kyuri
[12:59] micheil: Tim_Smart: the same thing exists in http.js, iirc
[12:59] Iszak: Let me get some figures.
[12:59] micheil:   // This is a shameful hack to get the headers and first body chunk onto
[12:59] micheil:   // the same packet. Future versions of Node are going to take care of
[12:59] micheil:   // this at a lower level and in a more general way.
[12:59] Tim_Smart: micheil: Yeah but using undocumented API annoys me :p
[12:59] micheil: ACTION might head to bed
[13:00] micheil: been up for 18 hours already...
[13:00] Iszak: I am anticipating ~500,000 hits on files this month, atm all requests are routed through a /heavily/ optimized Zend Framework stack and I wanted to setup a l/w file server which does calls to the database and I was hoping Node.js is the answer.
[13:00] Tim_Smart: micheil: Yeah I can't get it into the same packet - sendfile skips node's write calls etc.
[13:00] Tim_Smart: All done in kernel land.
[13:00] micheil: Tim_Smart: ya
[13:00] Anti-X has joined the channel
[13:01] Tim_Smart: Unless I do some binding to CORK... which I might try in spare time.
[13:01] micheil: Iszak: with that number of requests, I'd say at all costs try to bypass application level stuff
[13:01] micheil: Tim_Smart: CORK?
[13:01] Iszak: it needs application level to interact with the database.
[13:01] micheil: so they aren't static files.
[13:01] Iszak: It's absolutely required as they're not direct links to files.
[13:01] Iszak: No.
[13:01] Iszak: If they were static ZF wouldn't touch them.
[13:01] Tim_Smart: micheil: A socket flags that buffers the write, making sure a full packet is sent.
[13:01] micheil: can you make them static?
[13:02] Tim_Smart: *Some socket
[13:02] Iszak: No because I need the database calls.
[13:02] MattDiPasquale: JimBastard: cool. thanks! is this better to use than cucumber for node.js then?
[13:02] danoyoung has joined the channel
[13:02] micheil: Iszak: what for? are the static files in the database?
[13:02] JimBastard: MattDiPasquale: it is cucumber for node.js
[13:02] Iszak: they are referenced in the database yes, they are not stored if that's what you meant.
[13:02] Iszak: I can't imagine storing base64 encoded files in the database =x
[13:03] micheil: MattDiPasquale: just watch, the developer is biased towards his own tech.
[13:03] JimBastard: unless you wanna use ruby racer
[13:03] Tim_Smart: micheil: You then unset it after the first call to sendfile, then you ensure you can get the headers + first chunk in one TCP packet.
[13:03] __mn__ has joined the channel
[13:03] micheil: Iszak: so, if you have one page with the <img>s in it for instance
[13:04] micheil: Iszak: unless you mean things like mapping file urls to file paths on different servers and stuff
[13:04] Iszak: the later.
[13:04] micheil: k
[13:04] micheil: I'd probably use a redis mapping for something like that
[13:04] MattDiPasquale: micheil: what do you mean biased towards his own tech? JimBastard made it? haha
[13:05] Iszak: Also what is the defacto database/mysql class/object?
[13:05] micheil: MattDiPasquale: somewhat.
[13:05] JimBastard: i dont know what he means, hes being dumb
[13:05] micheil: Iszak: uhh.. there isn't.
[13:05] JimBastard: show me the "other" node.js cuke implementation
[13:05] Iszak: Is there set to be any in the near future?
[13:05] micheil: JimBastard: there doesn't have to be an "other" for bias.
[13:05] micheil: Iszak: node will probably never include database stuff in it's core.
[13:06] Iszak: oh? why not?
[13:06] JimBastard: there are no other options to chose from...so forgive me if i recommend, the only one available 
[13:06] JimBastard: seriously lol
[13:06] micheil: Iszak: because databases are big and complicated things that are best handled else where
[13:06] __mn__: hey... Node's JSON parse keeps giving me an "unexpected token" on a "1-" or a "0-" ?
[13:06] JimBastard: go write some code micheil 
[13:06] ysynopsis has joined the channel
[13:06] Tim_Smart: JimBastard: heh.
[13:06] Iszak: JimBastard, you don't agree?
[13:06] micheil: can you imagine the size node would grow to if you had to support every single database type in it's core?
[13:07] Iszak: I never asked to support /every/ single database type, just the popular ones.
[13:07] JimBastard: food time
[13:07] Iszak: or even have an interface or something.
[13:07] benc has joined the channel
[13:07] micheil: JimBastard: well, there are a few other testing frameworks, speks, jsunit, etc.
[13:07] micheil: but the closest thing to cuke is vows
[13:07] Iszak: perhaps I should use something like couchdb
[13:07] Tim_Smart: Iszak: Node tries to keeps it standard library lean and mean. We then try to bless a few libraries for popular stuff.
[13:08] Iszak: Tim_Smart, so what libraries are blessed for database interaction?
[13:08] micheil: so, for instance, we've come to bless things like npm for modules
[13:08] micheil: as for databases, there's not really a blessing yet
[13:09] micheil: there's a bunch of ones being worked on
[13:09] Iszak: Okay, perhaps I am missing the objective of node.js
[13:09] Tim_Smart: Iszak: http://nodejs.org/api.html#appendix---third-party-modules-314
[13:09] micheil: node.js won't make your life 100000% easier.
[13:09] Tim_Smart: Iszak: node isn't a framework, rather more a language implementation.
[13:09] micheil: Tim_Smart: oh yeah.... forgot about those.
[13:10] Iszak: oh I see.
[13:10] Tim_Smart: Kinda like ruby, rather than sinatra or rails.
[13:10] micheil: ACTION should so patch that docs for websockets to be node-websocket-server, but that's bias speaking.
[13:10] Iszak: but I mean the only thing different from normal JS is the API, no?
[13:10] micheil: Iszak: uhhh.. some what
[13:10] Tim_Smart: Iszak: The only thing different is the standard libraries.
[13:11] Iszak: which make up the library?
[13:11] Iszak: I mean api
[13:11] Tim_Smart: Iszak: http://nodejs.org/api.html
[13:11] micheil: Iszak: well, node also uses these buffer things.
[13:11] micheil: which aren't standard JS types
[13:12] Tim_Smart: Which is just an alias to require('buffer').Buffer
[13:12] Iszak: Hmm
[13:12] Iszak: so you could in theory say in the future there may be node.js frameworks built on-top of node.js?
[13:12] Tim_Smart: Exactly, and there already are.
[13:13] Iszak: entitled?
[13:13] micheil: mikeal: 76 twitter followers and growing steadily for @thenoded
[13:13] Tim_Smart: http://github.com/ry/node/wiki/modules#web-frameworks-full
[13:13] Iszak: thanks.
[13:14] Iszak: hmm
[13:14] Iszak: Perhaps I should reevaluate my decision.
[13:14] micheil: perhaps.
[13:14] Tim_Smart: Iszak: What is the decision to start with?
[13:14] alex_b has joined the channel
[13:15] Iszak: To basically use it as a dynamic file server.
[13:15] Tim_Smart: Ah right. There are a couple modules to help there.
[13:16] Tim_Smart: Or you could use a combination a X-Redirect headers and nginx.
[13:16] Iszak: I'm sure, but now that I've thought about it, why use node.js at all, why not ruby or python.
[13:16] micheil has left the channel
[13:16] micheil has joined the channel
[13:16] micheil: man that's annoying.
[13:16] unomi has joined the channel
[13:16] Tim_Smart: Iszak: Node.js will be faster than ruby or python, I can tell you that.
[13:17] Iszak: No offense - but I find that hard to believe, got benchmarks?
[13:17] MattDiPasquale has joined the channel
[13:17] __mn__: look, Iszak, choose your framework and actually prove you can code some stuff rather than coming around into IRCs like this with nice people and being negative.
[13:17] __mn__: if you don't want to use Node.js don't use node.js -- we're here to help you, not argue with you.
[13:17] micheil has left the channel
[13:18] Iszak: I'm not trying to argue, I just want a claim backed up that's all.
[13:18] Tim_Smart: I got node benchmarks, but nothing to compare with.
[13:18] Iszak: As for using a framework I don't want to use one simply because it's overkill for what i want to do.
[13:18] chapel: benchmarks are really dependent on many issues
[13:18] __mn__: Iszak well there is plenty of data out on the web for node.js with lots of videos and stats and slides -- do your own research.
[13:19] SubStack: i just use node for the libraries
[13:19] chapel: it is really hard to make a good, 1 to 1 comparison, that is representative of the real world
[13:19] Tim_Smart: Iszak: I got around 700 MB / sec with my sendfile module.
[13:19] micheil has joined the channel
[13:19] markwubben has joined the channel
[13:19] Iszak: okay, thanks.
[13:19] chapel: I like node.js because I think javascript is a more sound language than php (what I am versed in otherwise)
[13:20] chapel: I think ruby/python et all are good languages, but in playing with each up til now, node.js has been the most fun
[13:20] chapel: imo
[13:20] Iszak: okay one last question if anyone knows otherwise I'll do research; does any framework have database support baked in?
[13:20] skohorn has joined the channel
[13:20] aheckmann has joined the channel
[13:20] Tim_Smart: Iszak: Geddy does.
[13:20] micheil: Tim_Smart: filter.prototype.outgoing should probably be filter.prototype.read
[13:20] micheil: or vica verse for write()
[13:21] Tim_Smart: micheil: Yeah that can happen tomorrow :p
[13:21] micheil: :P
[13:21] c4milo has left the channel
[13:21] chapel: Iszak: I highly recommend using couchdb, and there are libraries to bring in that are easy to use, but I do it all with base http requests
[13:21] micheil: Tim_Smart: k, I'm crashin. catch you in the flipside.
[13:21] Tim_Smart: See will do.
[13:21] Tim_Smart: *Yeah
[13:21] Iszak: chapel, so what raw js no framework and couchdb?
[13:21] micheil: still made sense.
[13:21] chapel: well
[13:22] chapel: for a website, express js (mind you I haven't played with it a lot yet) and couchdb
[13:22] chapel: but I plan on using express js
[13:22] SubStack: spool up a bunch of processes and tie them together with rpc!
[13:22] SubStack: that's what I do
[13:22] Tim_Smart: To be honest, web workers + kernel load balancing seems pretty hot.
[13:22] chapel: thats one thing I love about node.js so far, how it feels more like a daemon, than a web framework, but it is super simple to slap up the web side of things
[13:23] c4milo has joined the channel
[13:23] chapel: the ability to make robust services that don't need a website to function
[13:23] __mn__: chapel: yeah, cause you practically just write a couple if else statements and it works. :P
[13:23] chapel: :P
[13:23] chapel: well if you dont know closures, expect some headbanging :P
[13:24] __mn__: it's genius.
[13:24] chapel: believe me
[13:24] __mn__: ... closures (?)
[13:24] matjas has joined the channel
[13:24] Tim_Smart: function () { ... }
[13:24] chapel: is my terminology off?
[13:24] chapel: callbacks and such
[13:24] __mn__: oh.
[13:24] Iszak: they're also referred to as anonymous functions.
[13:24] SubStack: lambdas!
[13:24] __mn__: callbacks I know.
[13:25] chapel: :)
[13:25] Iszak: it'd be cool if there was a shortcut to create a closure.
[13:25] SubStack: Iszak: I know right?
[13:25] chapel: dont need shortcuts imo, once you get the idea down, its not that hard
[13:25] SubStack: I suspect that's what coffeescript is all about
[13:25] chapel: I still haven't got into events and stuff yet
[13:25] Tim_Smart: That is what snippets are for :p
[13:25] chapel: or exports
[13:25] Iszak: chapel, it's not the idea that's hard - it's just that it's annoying having to write function all the time, why not f(){}
[13:25] SubStack: chapel: well I mean typing wise, 'function' is a bit verbose
[13:25] SubStack: also implicit returns would be boss
[13:26] chapel: heh, well you could use a text editor that autocompletes, f(something) tab
[13:26] chapel: function(something) {}
[13:26] chapel: :P
[13:26] SubStack: OR, source filters
[13:26] SubStack: at runtime
[13:26] chapel: heh
[13:27] chapel: coffeescript
[13:27] Iszak: eh, I don't like too many dependencies.
[13:27] SubStack: Iszak: but for why?
[13:27] Jonasbn_ has joined the channel
[13:27] SubStack: dependencies are awesome
[13:27] chapel: I thought about using coffee script, but I really didn't want to be dependent on something different, and since my grasp of js is weaker than I want it to be, using a crutch like cs is not a good thing imo
[13:27] SubStack: less code you need to write
[13:27] Iszak: dependecies and too many choices.
[13:28] SubStack: Iszak: also npm can figure all that shit out for you
[13:28] Iszak: It's not like that, I mean like having to wait for a certain package to update if there's a bug.
[13:29] Iszak: I mean we use abstract languages already, using another language to generate it, to me feels like you're losing control on the output.
[13:29] chapel: well node.js is so new, make a pull request, fix it
[13:29] chapel: :P
[13:29] SubStack: that is a somewhat antiquated view of how open source works
[13:29] Iszak: chapel, I wasn't specifically talking about node.js
[13:29] chapel: oh that
[13:29] chapel: yeah
[13:29] chapel: I agree with you there
[13:29] SubStack: Iszak: pretty much everything is on github, so you can just fork it
[13:29] SubStack: and fix it yourself
[13:30] Iszak: I know.
[13:30] Iszak: It's just an example.
[13:30] chapel: at this time, I like the tedium of writing function(blah
[13:30] chapel: just because it reminds me of what it is
[13:30] chapel: I am sure soon though I will get tired :P
[13:30] Iszak: yeah.
[13:31] Iszak: Anyhow enough jibber jabber, time to churn some code.
[13:32] madl10n has joined the channel
[13:32] sschuermann has joined the channel
[13:37] jetienne has joined the channel
[13:39] jacobolus has joined the channel
[13:40] path[l] has joined the channel
[13:40] romainhuet has joined the channel
[13:41] Iszak: the build bot is down?
[13:41] huntz0r has joined the channel
[13:42] johngbrooks has joined the channel
[13:42] digitalspaghetti: we have a buildbot?
[13:43] Iszak: supposedly.
[13:43] Iszak: http://buildbot.nodejs.org:8010/
[13:44] chapel: v8: console.log('I remember when v8 didn't have console.log support.');
[13:44] chapel: hmm
[13:44] chapel: no v8?
[13:44] chapel: :(
[13:48] cyraxx: v8: 1
[13:48] v8bot: cyraxx: 1
[13:48] chapel: hmm
[13:48] chapel: v8: console.log('I remember when v8 didn't have console.log support.');
[13:49] chapel: v8: console.log('I remember when v8 didn't have console support.');
[13:49] chapel: v8: console.log("I remember when v8 didn't have console support.");
[13:49] v8bot: chapel: v8 <code> is no longer supported (except in PM).  Try v8: <code> or v8> <code>
[13:49] Draggor has joined the channel
[13:49] chapel: ...
[13:49] chapel: welp off to home
[13:52] matjas has joined the channel
[13:55] breccan_ has joined the channel
[13:59] charlenopires has joined the channel
[14:01] jakehow has joined the channel
[14:03] elijah-mbp has joined the channel
[14:04] dylang has joined the channel
[14:06] bradleymeck has joined the channel
[14:09] davidsklar has joined the channel
[14:12] ehaas has joined the channel
[14:17] maushu has joined the channel
[14:18] maushu: I'm gonna need some glasses, two cameras, an accelerometer, a gps and two of those transparent samsung screens.
[14:18] ceej has joined the channel
[14:19] maushu: It seems that I'm going to get some...
[14:19] maushu: ACTION puts on AR glasses.
[14:19] Anti-X: i sent gertrude to wal-mart to get some
[14:19] maushu: ...augmented reality. YEAAAAAAAAAAAAAH
[14:20] creationix has joined the channel
[14:20] jacobolus has joined the channel
[14:24] ajpiano has joined the channel
[14:29] softdrink has joined the channel
[14:38] mbrochh has joined the channel
[14:40] cferris has joined the channel
[14:40] virtuo has joined the channel
[14:40] kriszyp has joined the channel
[14:41] ryanfitz has joined the channel
[14:43] jetienne has joined the channel
[14:45] davidascher has joined the channel
[14:46] matt_c has joined the channel
[14:48] EyePulp has joined the channel
[14:50] matt_c has joined the channel
[14:55] tj has joined the channel
[14:55] tekky has joined the channel
[14:57] mattcodes has joined the channel
[14:57] mattcodes: using the response module where do I add an error handler?
[14:58] davidascher has joined the channel
[14:58] Anti-X: wut?
[14:59] mattcodes: sorry the request module
[14:59] Anti-X: error handler for what
[14:59] Anti-X: if it's an error, you reply with an error
[15:00] Anti-X: status code
[15:00] mattcodes: any error the originate from it, that arent passed to the callback
[15:00] sivy has joined the channel
[15:00] mbrochh has joined the channel
[15:00] Anti-X: which errors would that be?
[15:00] mattcodes: 1 sec 
[15:02] daniellindsley has joined the channel
[15:02] jherdman has joined the channel
[15:03] Ari-Ugwu has joined the channel
[15:03] mattcodes: okay so request a https url, the callback is called a few millisecond later as expected, no error and the body of the request, seconds later node exits with
[15:03] sonnym has joined the channel
[15:03] mattcodes: ah fuck its not doing it no. It was ECONTERROR stack trace useless
[15:03] mattcodes: expect it from closing the ssl socket
[15:04] mattcodes: ah now it does it
[15:04] mattcodes: 2 time round
[15:04] mattcodes: ECONNRESET
[15:05] mattcodes: presumably openssl was keep aliving the connection in the background and this confused either the request module (what everyone hear suggest I use) or the underlying http client
[15:05] mattcodes: either that or Ive got a bad build
[15:07] mattcodes: looking example here: http://github.com/mikeal/node-utils/tree/master/request/
[15:07] mattcodes: there doesnt seem anything else I can do.. diving a bit deeper
[15:08] springmeyer has joined the channel
[15:10] bartt has joined the channel
[15:10] dnolen has joined the channel
[15:11] mikew3c_ has joined the channel
[15:11] Ori_P has joined the channel
[15:11] Kami_ has joined the channel
[15:14] elijah-mbp has joined the channel
[15:18] muk_mb has joined the channel
[15:18] kriszyp_ has joined the channel
[15:18] benburkert has joined the channel
[15:19] zk has joined the channel
[15:19] elijah-mbp has joined the channel
[15:20] creationix has joined the channel
[15:21] benc1 has joined the channel
[15:22] d0k has joined the channel
[15:23] Me1000 has joined the channel
[15:25] unomi has joined the channel
[15:25] mif86 has joined the channel
[15:28] mape: Hmm the japanese node community is pretty large it seems
[15:28] halfhalo: they be crazy
[15:28] mape: Well they retweet like crazy at least
[15:28] halfhalo: Thats because they are insane in the membrane
[15:29] rwaldron has joined the channel
[15:30] chapel: well the japanese community created the rails craze
[15:30] chapel: so I guess thats a good thing
[15:31] chapel: v8: console.log('test');
[15:31] v8bot: chapel: CONSOLE: ["test"], OUTPUT: undefined
[15:31] chapel: v8: console.log('console.log');
[15:31] v8bot: chapel: CONSOLE: ["console.log"], OUTPUT: undefined
[15:31] mape: Just sad to see they seem quite isolated
[15:31] chapel: v8: console.log('I remember when v8 didn't have console.log support.');
[15:31] chapel: ahhh
[15:31] chapel: bug
[15:31] mape: Or well, we can't see all the cool stuff they do :)
[15:31] chapel: v8: console.log('I remember when v 8 didn't have console.log support.');
[15:31] v8bot: chapel: SyntaxError: Unexpected identifier
[15:31] mape: chapel: why console?
[15:32] chapel: just playing
[15:32] mape: v8: 1+2+3+5+6+3+2+3+4+5*2*4*5
[15:32] v8bot: mape: 229
[15:32] chapel: v8: console.log('I remember when v 8 didnt have console.log support.');
[15:32] v8bot: chapel: CONSOLE: ["I remember when v 8 didnt have console.log support."], OUTPUT: undefined
[15:32] mape: :)
[15:32] chapel: v8: console.log('I remember when v8 didnt have console.log support.');
[15:32] v8bot: chapel: v8 <code> is no longer supported (except in PM).  Try v8: <code> or v8> <code>
[15:32] chapel: so who runs v8?
[15:32] mape: v8: 'I remember when v 8 didnt have console.log support.'
[15:32] v8bot: mape: "I remember when v 8 didnt have console.log support."
[15:32] mape: ?
[15:32] sth: seriously, bot spam?
[15:32] halfhalo: hah
[15:32] chapel: just wondering who runs it
[15:32] chapel: because there is a bug
[15:33] chapel: :P
[15:33] chapel: v8: help
[15:33] v8bot: chapel: ReferenceError: help is not defined
[15:33] chapel: v8 help
[15:33] v8bot: chapel: v8 <code> is no longer supported (except in PM).  Try v8: <code> or v8> <code>
[15:33] mape: chapel: what is the bug?
[15:33] chapel: hmm
[15:33] chapel: v8: v8
[15:33] v8bot: chapel: ReferenceError: v8 is not defined
[15:33] chapel: v8: console.log('v8');
[15:33] v8bot: chapel: CONSOLE: ["v8"], OUTPUT: undefined
[15:33] chapel: hmm
[15:33] chapel: v8: console.log('I remember when v8 didnt have console.log support.');
[15:33] v8bot: chapel: v8 <code> is no longer supported (except in PM).  Try v8: <code> or v8> <code>
[15:34] chapel: there
[15:34] sth: But seriously, if you want to screw around with the bug, could you do it in a PM like the bot suggests?
[15:34] chapel: v8: "test v8 test";
[15:34] v8bot: chapel: v8 <code> is no longer supported (except in PM).  Try v8: <code> or v8> <code>
[15:34] chapel: sorry
[15:34] chapel: won't do it anymore
[15:34] chapel: was just illustrating for mape since he asked
[15:35] sth: I'd rather channel be idle than have effectively bot spam, at least then I won't get my hopes up for a conversation :)
[15:35] mape: chapel: using the wrong syntax isn't a bug? :)
[15:35] mape: sth: ignore is a power used for good
[15:36] chapel: uhh, the bug is that if you send v8 inside of your code after v8: it gives the v8 error
[15:36] chapel: its not a big issue
[15:36] mape: /^v8.*/ ?
[15:36] chapel: but me thinks that its something that could be fixed :P
[15:37] mape: or just not use v8, since that is never an issue?
[15:37] jakehow has joined the channel
[15:37] chapel: well obviously it isn't a 'real' issue, but if I were the creator of the bot, I would want to fix it
[15:38] kkaefer has joined the channel
[15:38] kkaefer has joined the channel
[15:42] benc1 has left the channel
[15:43] dmcquay has joined the channel
[15:43] JimBastard has joined the channel
[15:43] aurynn has joined the channel
[15:44] davidascher has joined the channel
[15:44] mattcodes: taking a look at some of the patterns in this.. (very basic) http://github.com/ciaranj/connect-auth/blob/master/lib/auth.strategies/janrain.js. is using my instead of options purely to preserve immutability (and that is the intent)?
[15:46] bradleymeck: mattcodes yes, having a secondary object not visible to the outside is to preserve the values for the duration of my's existence
[15:47] mattcodes: okay, trying to understand a little more about how things are fitting together.
[15:47] mattcodes: say module.exports = function(a,b) { }:
[15:47] mattcodes: I thought one would include this file by doing require("janrain") somewhere within a high level factory perhaps
[15:47] mattcodes: how are a and b passed to it
[15:49] bradleymeck: require("x")(mya,myb)
[15:49] jbrantly has joined the channel
[15:50] mattcodes: that simple.. thanks ;)
[15:50] jbrantly has left the channel
[15:53] nefD has joined the channel
[15:53] springmeyer has joined the channel
[15:54] aurynn has joined the channel
[15:56] mtodd has joined the channel
[15:57] TheEmpath_ has joined the channel
[15:57] mtodd has joined the channel
[16:06] elijah-mbp has joined the channel
[16:09] stephank has joined the channel
[16:09] gerred has joined the channel
[16:09] cefn has joined the channel
[16:11] mattcodes: when using expressjs how do I get a route to match all /secure/*
[16:12] mattcodes: so I can 403 if not authenticated
[16:12] mattcodes: or next() if authenicate
[16:12] mattcodes: without adding req.authenicate to all /secure/paths
[16:12] tmcw has joined the channel
[16:13] tjholowaychuk: mattcodes: in the future i might add some mechanism for use-cases like that, to apply middleware to a range of routes
[16:13] tjholowaychuk: but
[16:13] tjholowaychuk: ATM
[16:13] mape: tjholowaychuk: move that mouth out the way
[16:14] tjholowaychuk: things are simple. you can just do for example app.get('/secure/foo', secure, function(){})
[16:14] tjholowaychuk: and secure can do your 403 stuff
[16:14] tjholowaychuk: mape: haha what
[16:14] mattcodes: ah yeah I see that from the docs. 
[16:14] mattcodes: cool that will do
[16:14] mattcodes: just hope I dont forget to add that second parameter
[16:14] mape: tjholowaychuk: nm :P
[16:14] tjholowaychuk: mattcodes: it is not set up like rails or anything where you can apply to a range of "actions" or whatever. Something like this could be useful if done correctly but I dont want to spoil the somplicity of express either
[16:15] tjholowaychuk: mape: ahaha :p
[16:15] mattcodes: do you imagine even more specific -- opinionated -- frameworks sitting on top of expressjs in the future?
[16:15] bradleymeck: who is good with obj-c and can tell me why the gc is collecting things before my release method hits when i specifically dont use an autoreleasepool
[16:16] tjholowaychuk: mattcodes: totally
[16:16] tjholowaychuk: I have 2 in the works
[16:16] tjholowaychuk: but I am super busy
[16:16] tjholowaychuk: so might be a while
[16:16] mape: connect -> express -> turbo -> sillyspeed
[16:16] aurynn: -> ludicrous drive
[16:16] banjiewen has joined the channel
[16:17] mape: -> django ?
[16:17] mattcodes: mape - am all about saving time. the eco system exists in other platforms so a third more opinionated layer shouldnt be an issue.
[16:17] mattcodes: sometimes Id rather bend to an author preference eg. fubumvc
[16:17] tjholowaychuk: im way more about simplicity
[16:17] isaacs has joined the channel
[16:17] tjholowaychuk: frameworks that assume things, are great in many ways
[16:17] mape: mattcodes: Actually I have something pretty neet for saving time, spent some time on express stuff to make frontend stuff faster, no good for backend
[16:17] tjholowaychuk: but can become verrrry annoying quickly IMO
[16:17] mape: *neat
[16:18] mattcodes: tj, I think expressjs is well placed, you make a good point
[16:18] mape: mattcodes: auto reload on css change without refresh, reload on page with js changes as well as template and html validation
[16:19] mape: as well as syncing multiple browsers to do browser compatability stuf
[16:19] mape: Only shitty part about it is, I'm killing myself going back to work refreshing as usual :(
[16:19] mattcodes: mape: I dont know, Im writting a small lead management system now with expressjs and couchdb, because once couchdb is doing the most works there actually very little stuff for nodejs to do (but more than am comfortable doing as a couchapp)
[16:20] xla has joined the channel
[16:20] mape: mattcodes: yeah my work is more on the frontend part, since that is what I work with
[16:20] mattcodes: mape: that sound time saving
[16:20] mattcodes: that sound --> that does sound
[16:20] mape: mattcodes: http://boilerplate.mape.me/
[16:21] mattcodes: you talking about reload css server side? does nodejs cache statics?
[16:21] amerine has joined the channel
[16:21] mattcodes: ah you're referring to less / sass stuff?
[16:21] mattcodes: now that is neat
[16:22] mape: Jup, and if you check the top right
[16:22] mape: the red blinking stuff is html validation
[16:22] tapwater has joined the channel
[16:22] mape: and the S part is syncing
[16:22] mape: so when working with IE7/8, chrome, firefox you just use your browser of choice, browse to the page
[16:22] rauchg_ has joined the channel
[16:22] mape: click "s" and all other browsers redirect to that page
[16:23] figital has joined the channel
[16:23] mattcodes: 6 monitors and you're rolling..
[16:23] mape: mattcodes: So far I have 4 at work
[16:23] mape: But yeah :P It is really useful for rapid prototyping
[16:23] mattcodes: nice, I can image
[16:23] mattcodes: imagine
[16:23] mape: More fun seeing stuff break in IE while doing stuff then going back and fixing
[16:24] aurynn: conditional comments ftw.
[16:25] mape: mattcodes: Oh and if you click the V button you get the info for validation
[16:25] mape: so instant feedback without being a pita
[16:27] mape: Thought about getting CSS validation but well..
[16:27] mape: Seems like that will always fail so no one would give a shit
[16:28] mattcodes: definitely bookmarks next time im ui focused
[16:29] mape: mattcodes: I'll put it on github as soon as it is "done".. Hopefully this weekend
[16:29] mattcodes: sweet
[16:29] mape: Coupled with nodemon it is really nice, but yeah, more or less frontend
[16:29] mape: But yeah, more (sain)magic on the backend with ORM and thingys will be nice
[16:30] JCS^ has joined the channel
[16:30] mape: But as long as things depend on connect I'm ok ;)
[16:30] jpld has joined the channel
[16:30] abstractj has joined the channel
[16:30] aguynamedben has joined the channel
[16:30] mape: But biggie seems nice as well, from Tim
[16:30] mape: Haven't had the time to check it though :(
[16:32] noahcampbell has joined the channel
[16:34] mape: mattcodes: In thailand?
[16:34] mattcodes: bangkok
[16:34] mattcodes: u?
[16:34] mape: Originally from?
[16:34] mape: Sweden
[16:34] mattcodes: england
[16:34] mape: Ah, how is it working over there?
[16:35] mape: Company with a lot of foreign devs or mostly from thailand?
[16:35] mattcodes: slowly ticking over, was hoping to talk some stuff about node.js at bangkok barcamp tomorrow but as comfortable with it yet
[16:35] mape: And how is the community there?
[16:36] mattcodes: in BKK there quite a few devs, and opportunities, i live out on islands, so things have been very dry past few months
[16:36] mape: The weather got you moving? Or good company?
[16:36] mattcodes: need a few months holiday/break
[16:36] mattcodes: weather is always good
[16:36] mape: Hehe yeah
[16:36] mape: So freelancer?
[16:37] benreesman: BKK is an awesome city
[16:37] mattcodes: there are many reasons to visit thailand, tho, which I wont go into
[16:37] mattcodes: yep freelance where i can
[16:38] aguynamedben has joined the channel
[16:38] aurynn: freelance from thailand at us rates, make a killing.
[16:39] c4milo has joined the channel
[16:39] mape: mattcodes: So working for UK people?
[16:39] mape: Or is there a local market?
[16:40] davidsklar has joined the channel
[16:40] mape: mattcodes: your page is down :S
[16:40] mattcodes: not sure about local market, i imagine competition is pretty strong, there 1000 devs registered for this barcamp, so probably a lot of both
[16:41] mape: If the knowledge good? Hard to get a grasp on that market
[16:41] boaz has joined the channel
[16:42] benburke_ has joined the channel
[16:42] mape: I mean how is the connectivity in Thailand? Are people using online services?
[16:43] mattcodes: probably in a better position to answer that  tomorrow, but yeah from what Ive send in BKK there are a lot of good/strong dev/design people. outside of bkk probably joomla/wordpress people knocking out sites with free themes
[16:43] mape: Hmm k
[16:43] mattcodes: connectivity is universally poor, especially now, if you can manage with 2mbit at good times, 200kbit bad times it bearable, if used to 20mbit forget it
[16:44] mape: Hmm k
[16:44] mattcodes: ill update you after ive been to this barcamp, about what the dev really is like, if interested
[16:44] mattcodes: dev really --> dev scene really
[16:45] mape: For sure, always good to know what is happening :)
[16:45] mattcodes: id be very surprised if there not a few people out 1000 that are promoting/talking about nodejs
[16:46] mape: Well don't be supprised, I think there are 3 people in Sweden interested in node
[16:46] mif86 has joined the channel
[16:46] mape: or well, 4 that I know of
[16:46] mape: At least that are active in the community in one way or another, of that I have on twitter ;)
[16:47] TomsB has joined the channel
[16:49] jtg88 has joined the channel
[16:51] AAA_awright has joined the channel
[16:51] mrjjwright has joined the channel
[16:52] bpot has joined the channel
[16:52] spetrea-home has joined the channel
[16:52] abstract_ has joined the channel
[16:56] abstractj has joined the channel
[16:58] JCS0 has joined the channel
[16:58] steadicat has joined the channel
[16:59] Aria has joined the channel
[17:00] fermion has joined the channel
[17:00] ctp has joined the channel
[17:00] bradleymeck: do people think supporting only X clipboards is decent for linux/freebsd support of clipboards?
[17:01] evanmeagher has joined the channel
[17:01] aurynn: I think that the toolkits ought to hit people who don't use a consistent clipboard implementation.
[17:01] JCS^ has joined the channel
[17:02] Aria has joined the channel
[17:02] bradleymeck: could you rephrase that?
[17:03] bradleymeck: i mean most window management system clipboard operations are done consistently
[17:03] TheEmpath has joined the channel
[17:04] mape: bradleymeck: Having no knowledge, I'd say do one thing and do it great
[17:04] mape: And if when it is good enough to not fiddle with, move onto other platforms/implementations
[17:04] bradleymeck: i got mac pretty easy, i think ill just do X well
[17:04] dgathright has joined the channel
[17:04] mape: I would rather have someone do an win app awsome then do win/osx shitty
[17:05] maushu: wut
[17:05] mape: Trying to make everyone happy makes no one happy
[17:05] maushu: mape: Easy to fix, port shoes to node.js
[17:05] cardona507 has joined the channel
[17:05] mape: maushu: Yeah, so filewatch is great in OSX? :) It runs great on win?
[17:06] bradleymeck: well i want to bridge multiple OS properly and clipboard stuff takes like 1hr per OS probably
[17:06] maushu: filewatch?
[17:06] mape: Rather have it run great on one platform then being so so on multiple
[17:06] mape: maushu: Yup?
[17:06] maushu: mape: You racist.
[17:06] maushu: oscist?
[17:06] Aria: I'm with mape on this one
[17:07] mape: maushu: nassiterna
[17:07] bradleymeck: for a multiple platform thing like node doing it on multiple is about the only thing to do
[17:07] Aria: Using so-so apps is ... well, life is too short for that
[17:07] Aria: So either go all the way on each (like, say, Transmission, which has written the frontend four times)
[17:07] Aria: Or get out.
[17:07] mape: Doing it great on all platforms.. is when you nailed it on ONE platform
[17:08] mape: How else do you know when it is "good enough"
[17:08] saikat has joined the channel
[17:08] confoocious has joined the channel
[17:08] confoocious has joined the channel
[17:08] BBBB has joined the channel
[17:08] mape: (unless you have "subpar" standards)
[17:08] maushu: Easy to fix. Kill all platforms besides one.
[17:09] mape: choice is always good :)
[17:09] Aria: The worst is "runs the same everywhere"
[17:09] Aria: App quality is 90% in the integration
[17:09] maushu: Well, forget desktop.
[17:09] maushu: Lets go with web online.
[17:09] Aria: Services starting and stopping seamlessly; Copy and paste working the way people expect on desktops. 
[17:09] maushu: Oh wait, multiple browsers.
[17:10] mape: maushu: If you don't have to deal with it, god bless you :D
[17:10] maushu: Not feeling much blessed.
[17:10] Aria: "The Browser: Native Platform for Exactly Nobody"
[17:10] deepthawtz has joined the channel
[17:10] maushu: ACTION is fixing ie7 bugs on the company's cms.
[17:10] maushu: going home, brb
[17:11] mape: maushu: then you aren't blessed :P
[17:11] TheEmpath: greetings, fair citizens
[17:12] mattvermaak has joined the channel
[17:13] paulr has joined the channel
[17:13] SamuraiJack has joined the channel
[17:13] mape: So.. A wild question..
[17:13] mape: Why do windows/OSX people expect node to run on their OS?
[17:14] aurynn: windows because windows-centricity is easily expected
[17:14] mape: Wouldn't it be better for node to be awsome on the majority deployment OS then a native one?
[17:14] aurynn: osx because osx is a real unix
[17:14] aurynn: (tm)
[17:14] mape: ACTION throws fileWatch at aurynn 
[17:14] gerred_ has joined the channel
[17:15] TheEmpath: lol @ the (tm)
[17:15] TheEmpath: ACTION recalls almost throwing his Macbook at a cripple trying to install Python with Oracle support on Macports.
[17:15] Aria: Because people use OSX a) for testing and b) sometimes for servers and b) for a lot of other things node doesn't suck at
[17:15] aurynn: I use OSX because X11 annoys the crap out of me
[17:15] jbenesch has joined the channel
[17:15] Eber has joined the channel
[17:15] Aria: I alternate between the two pretty fluidly.
[17:16] TheEmpath: Macbook just to blend in at the office, but I have a Ubuntu VM.
[17:16] mape: I'd rather use a wmware/virtualbox/parallels thingy to run linux then do it native
[17:16] aurynn: Ir eally want OSX + decent package management, but I'll take decent windowing as I can ignore package management most of the time
[17:16] mape: Do one thing right, rather then wasting resources on making it work everywhere
[17:16] Aria: aurynn++
[17:16] v8bot:  Aria has given a beer to aurynn. aurynn now has 1 beers.
[17:16] admc_ has joined the channel
[17:16] admc has joined the channel
[17:16] Aria: Depends on how far apart those things are, mape 
[17:17] Aria: (Software written JUST for linux almost universally sucks. But things that port to BSDs are generally clueful.)
[17:17] jbenesch has joined the channel
[17:17] aurynn: I'd hate X11 less if I could argue with the toolkits into letting me globally redefine shortcut combos
[17:17] mape: Aria: for sure. If it is easy the for sure, but trying to port stuff to foreign stuff usually makes shit hard to maintain
[17:17] Aria: Yeah. That's something that Gnome and KDE both need to work on
[17:17] mape: Since the one writing the code doesn't use it all
[17:17] aurynn: mape, uh.. portable code is better code.
[17:18] Aria: Maybe. I've also seen the opposite.
[17:18] TheEmpath: fire up the VMware, shell in, eclipse with rSE and im g2g
[17:18] Aria: Often, in fact. Especially with ports to BSD
[17:18] aurynn: fewer weird edge cases and assumptions that Break Things Interestingly
[17:18] mape: aurynn: For sure, but code isn't always portable. Why not make node work with php syntax? That would be sweet.
[17:18] bruse: portable code is better, but maintaining several ports is more work and it can slow down development
[17:19] TheEmpath: i also have windows 7 VM.  i should probably try to deploy my node projects to all three to make sure they work
[17:19] abstract_ has joined the channel
[17:19] benburkert has joined the channel
[17:19] mape: TheEmpath: make sure it works in ME as well, then it will totally rock
[17:20] TheEmpath: lol
[17:20] aurynn: This argument looks very familiar
[17:20] TheEmpath: at least it isn't mobile development
[17:20] aurynn: and anyone who runs freebsd hateses it. :)
[17:20] TheEmpath: ACTION shutters at watching code port to 36 different places.
[17:21] stephank has joined the channel
[17:21] mape: Aria: Would you rather see wide deployment then a kick ass feature in node?
[17:22] aurynn: mape, Wide deployment.
[17:22] TheEmpath: doesn't wide development crubmle after like one fork?
[17:22] mape: aurynn: And that goes how far? :)
[17:22] aurynn: wider deployment == more humans working on the code == faster, more reactive dev cycle.
[17:22] aurynn: == better features sooner.
[17:23] mape: How does rails work on win?
[17:23] aurynn: but I still wouldn't support Windows.
[17:23] mape: That is the exception why?
[17:24] stride: aurynn: against windows native or against cygwin as well?
[17:25] aurynn: windows isn't unix, and it requires a lot of extra effort to make it play nice
[17:25] tekky: aurynn: more humans !== better/faster and definitely doesnt help code quality generally
[17:25] TheEmpath: if they had a team lead, that would help
[17:25] aurynn: tekky, the point is, you get more extreme cases the code is wrung through. So even if they're not committing, you get a benefit that bugs are exposed
[17:26] aurynn: but, it's a tradeoff, certainly
[17:26] Aria: PHP syntax, eh? I keep thinking I should implement a PHP VM in Node
[17:26] dahankzter has joined the channel
[17:26] bartt has joined the channel
[17:26] mape: aurynn: Or you add more edge cased
[17:27] mape: *s
[17:27] Aria: mape: What I want out of node is a unixy tool that doesn't screw up, with all IO async
[17:27] EyePulp: aurynn: Re-read the The Mythical Man-
[17:27] EyePulp: Month
[17:27] EyePulp: ACTION hit return a bit too quickly
[17:27] aurynn: heh
[17:28] creationix has joined the channel
[17:28] aurynn: I'm noting that this strategy is used to great effect by, say, postgresql. or linux. Wide deployment begets better code.
[17:28] mape: Aria: sure, but would you rather want rapid development then slow progress that works everywhere?
[17:29] aurynn: and I'd rather have code that works everywhere, so there's a greater mindshare slice allocated to whatever I'm writing code in.
[17:29] bentruyman has joined the channel
[17:29] mape: aurynn: assuming there are more people contributing
[17:29] stride: why would slow(er) progress be bad? that gives the people who aren't porting stuff a bit more time for planning and testing
[17:30] Aria: mape: I can wait. 
[17:30] mape: stride: Huh? As long as you don't break APIs?
[17:31] stride: mape: at some point even the node core has to get to a point were "not breaking APIs" every other month should be normal, so what?
[17:31] mape: Aria: Then why go with node at all? Aren't there more mature solutions out there?
[17:32] mape: stride: That is why you have versioning?
[17:32] mape: If it is good enough, stay.
[17:33] unomi has joined the channel
[17:33] EyePulp: +1 what mape said
[17:33] jansc has joined the channel
[17:34] Aria: More mature for async IO? In a reasonably fast interpreted language?
[17:34] matjas has joined the channel
[17:34] stride: mape: what good is the semi-semantic versioning that the core currently has if I know nothing about library compatibility?
[17:34] agnat has joined the channel
[17:34] muk_mb has joined the channel
[17:34] rubyphunk has joined the channel
[17:36] Aria: Node's development is going at the right rate. Its focus on being small is a win. Portable is a win. And actually, I think that portability to Windows is totally doable, since it actually has fantastic Async IO 
[17:36] naturalethic has joined the channel
[17:36] Aria: Different, and entirely not posix, but it has it. And has for a LONG time
[17:36] mape: stride: Democrazy? (beers are wearing on me, but yeah)
[17:36] stride: mape: democrazy?
[17:37] mape: Aria: I'm thinking more about rather smalls features that are hard to implement cross platform rather then having the core team thinking about the large picture
[17:37] naturalethic: there needs to be a heroku for node.js
[17:38] mape: stride: you know, crazy people in large masses making decisions for the broad majority
[17:38] naturalethic: we could make millions .. MILLIONS!
[17:38] mape: which usually isn't optimal
[17:39] evanmeagher has joined the channel
[17:39] Aria: If you know about the platforms and their quirks, sometimes you can abstract.
[17:39] stride: mape: not sure what you want to get at, am I the crazy person in your metaphor for supporting crossplattform development & sem. versioning?
[17:39] Aria: And sometimes I think you just have to leave out the platforms for certain items that stink
[17:39] stride: it's not like windows development is witchcraft
[17:40] stride: it just stinks a lot :>
[17:40] Aria: Not at all. Just windows development with a posix mindset is witchcraft
[17:40] Aria: Also, only crazy people do it
[17:40] Aria: But that's a different issue
[17:40] bruse: i think it will be nice once node gets regular releases with feature freezes
[17:41] stride: Aria: psst, don't call them crazy, they just love their visual studio team unicorn edition 
[17:41] mape: stride: The, lets make it better for everyone but not great for one person... person. And sure I get that most OSes compare, but putting time into each still causes issues.
[17:41] nrub has joined the channel
[17:41] Aria: Yeah, okay. Not crazy.
[17:41] Aria: Just crazy.
[17:41] Aria: Node's APIs will work 100% with Windows async IO
[17:42] Aria: I think not exposing any of libev and libeio was super smart 
[17:42] Aria: Things like that. But under the hood, could be vastly different.
[17:42] stride: mape: that would need some experienced windows dev anyway so the only time the current team would have to invest is on decisions to give node a good portable architecture (which it already has I guess)
[17:43] mape: stride: that is why running node on win is so awsome already?
[17:43] mape: Finding great devs for OS projects is totally easy
[17:44] jetienne has joined the channel
[17:44] svnlto has joined the channel
[17:44] stride: it is? I don't know, I don't like the windows example anyway, at the start I just chimed in because someone objected porting efforts to other unix platforms.. 
[17:44] V1 has joined the channel
[17:44] stride: there's someone wrong on the internet and stuff
[17:45] mape: stride: so win isn't ok but everything else is?
[17:45] stride: mape: imho, yeah. my main argument wouldn't even be the core but the whole bunch of native modules
[17:46] blaines has joined the channel
[17:46] mape: So.. Supporting win is bad because it is harder?
[17:47] Aria: Nah, it's just a cost.
[17:47] mape: And supporting everything else is easier?
[17:47] sprout has joined the channel
[17:47] Aria: Now that's definitely true, at least from here
[17:47] dmcquay has joined the channel
[17:47] mape: And where is the line drawn?
[17:48] stride: between sparta and windows.
[17:48] Aria: I think a windows port might be a good opportunity to solidify some of the core decisions -- whether to commit entirely to a library like libeio and shoehorn things into it, or whether to abstract one level up from there
[17:48] blaines has joined the channel
[17:48] Aria: (which that right there could be justification for 'not yet')
[17:48] sprout has joined the channel
[17:48] mape: So drop great parts for portability?
[17:48] TheEmpath: does v8 run on windows?
[17:49] stride: TheEmpath: yes
[17:49] mape: TheEmpath: Chrome totally doesn't run on windows
[17:49] TheEmpath: D:
[17:49] stride: mape: abstracting isn't dropping
[17:49] Aria: Indeed. 
[17:49] Aria: You just don't NEED libeio for IO on Windows
[17:49] Aria: Windows has a 100% non-blocking interface
[17:50] mape: stride: in the end it means more work
[17:50] TheEmpath: thats true, windows does
[17:50] TheEmpath: winsock?
[17:50] TheEmpath: D:
[17:50] stride: Aria: although I don't know about module developers. I'd doubt they would port their native bindings to windows
[17:50] TheEmpath: well when you come across the more work question, you analyze it with an objective cost/benefit analysis
[17:51] mape: TheEmpath: And that means using win? :P
[17:51] wilmoore has joined the channel
[17:51] TheEmpath: no ones made the analysis yet
[17:52] stride: and I'd doubt it's more work to port and maintain that port than maintaining the cygwin part + every setup issue the windows-based devs have
[17:52] stride: let's face it, when this channel discusses if the devs that come from client side development know how to use bitflags, they certainly wont switch their OS
[17:53] stride: .oO(no windows devs, why am I against this?)
[17:53] TheEmpath: then there is that  factor
[17:53] TheEmpath: js people have a deep history of client-side work and may or may not know the finer details of porting, architecture, systems design, etc.
[17:53] mape: stride: Isn't it a bad idea to use bitflags anyway? (frontend developer here)
[17:54] mape: trying to floor is a pita when you don't know the size, even though it is faster
[17:54] heavysixer has joined the channel
[17:55] stride: mape: uh, flags (or enums) are great for their respective usecases, why?
[17:55] TheEmpath: indeedy
[17:55] TheEmpath: bitflags are great for many logical cases
[17:55] Aria: stride. That's another question -- and a hard one. A lot of modules are platform-specific. And that's never easy in any case. (I think a web site that has a huge compatibility table would help apply pressure to the various developers to get things ported though)
[17:56] mape: stride: Not doing a rethorical question, I'm really a frontend developer asking questions
[17:56] TheEmpath: cost/benefit people!
[17:56] mape: Just heard using >> or (floatNum & ~0) is troublesome with big numbers
[17:56] mape: so better to avoid it when perf isn't an issue
[17:57] stride: Aria: I'd opt for a howtonode tutorial on how to port shit you need to that OS :)
[17:57] Aria: stride: That too!
[17:57] Aria: Eh, I like bitfields, when used right. If you have to do contortions to use an API though, someone did it wrong
[17:57] stride: mape: that's something javascript sucks at imho and you have to be careful but that doesn't make it bad
[17:58] mape: stride: fringe == bad in my book :)
[17:58] zemanel has joined the channel
[17:58] TheEmpath: bitmasks anyone? :D
[17:58] mape: Doesn't that belong in the don't optimize to early thingy?
[17:58] Aria: If you need bitfields wider than 32 bits, and you're exposing this in an API, you're doing it wrong
[17:58] stride: mape: and a flag is basically {FOO: 0x01, BAR: 0x02, FOOBAR: FOO | BAR} not really rocketsience
[17:59] Aria: And if interpreters bork on large numbers and binary operations, ... file a bug.
[17:59] jtg88 has left the channel
[17:59] stride: Aria: are you saying lookup tables like {ONE: 0x0000001, TWO: 0x00000002, ONEBILLION: ...} ARE WRONG?!
[17:59] TheEmpath: so, about long pulling
[17:59] TheEmpath: since websockets through socket.io establshed a persistant connection
[17:59] Aria: stride: So very, very wrong
[17:59] TheEmpath: theres is no need to do the pubsubhubbub model of long polling where a pull triggers another pull
[18:00] stride: Aria: :) you can hardly file a bug for stuff that's in the language specification
[18:00] Aria: Where in the spec is this?
[18:00] stride: like the weird signed / unsigned conversions 
[18:00] creationix has joined the channel
[18:00] dquestions has joined the channel
[18:00] TheEmpath: all you need to do is register with the server that a long poll has been established for a certain user for a certain API action and have the main execution loop go perform that action and send the results
[18:00] mape: stride: so when is using >> 0 to floor a bad idea?
[18:00] herbySk has joined the channel
[18:01] Aria: Oh, they're weird, but they're not things that have to be inconsistent.
[18:01] stride: >> 0 floors?
[18:01] mape: stride: http://jsperf.com/parseint-vs-math-floor/8
[18:01] dmcquay has joined the channel
[18:02] stride: that's weird
[18:03] mattly has joined the channel
[18:03] stride: Math.floor is actually faster than >> 0 on my machine, even weirder
[18:03] Nohryb: watch out: binary operators truncate the results to 32 bits
[18:04] mape: stride: The ole switcharoooooo
[18:04] Aria: Meep. Is that in the spec?
[18:04] Nohryb: yes, for sure.
[18:05] langworthy has joined the channel
[18:05] Aria: Yagh
[18:05] Aria: Now that stinks
[18:06] langworthy has joined the channel
[18:06] ajsie has joined the channel
[18:06] ajsie: hi is there a node package that help me make a npm package?
[18:07] ajsie: like jeweler for ruby gem
[18:07] Aria: echo '{}' ? package.json
[18:07] Aria: echo '{}' > package.json
[18:07] Aria: And then edit ;-)
[18:07] ajsie: lol=)
[18:07] synthomat has joined the channel
[18:08] TheEmpath: what doth that doo
[18:08] Aria: It makes a json file with an empty object in it
[18:08] abstractj has joined the channel
[18:09] mattly_ has joined the channel
[18:09] Aria: WHY did ECMA go 32-bit? Geez.
[18:09] Aria: That seems like a truly stupendous blunder.
[18:09] Me1000 has joined the channel
[18:10] Prometheus: essentially sends the output of an executable to a file instead of printing it to the stdout 
[18:10] Prometheus: =)
[18:10] evanmeagher has joined the channel
[18:10] mattly__ has joined the channel
[18:12] bradleymeck: map it is a bad idea when the number > 32bit
[18:12] bradleymeck: mape*
[18:12] dmcquay has joined the channel
[18:13] Aria: (I think it might be nice to have a V8 flag --ignore-ecma-collosal-blunders)
[18:13] bradleymeck: aria it went 32bit because back in the day that was all we had for a good while and bitwise ops need to know the size of things
[18:14] Aria: Yeah, but that doesn't have to be exposed in the API.
[18:14] sveimac has joined the channel
[18:14] stride: how else would you do a generic number type?
[18:14] bradleymeck: idk, ~x on 64 vs 32 bit is pretty different what you would get back
[18:14] svnlto has joined the channel
[18:14] Aria: Ruby manages it neatly.
[18:15] MikhX has joined the channel
[18:15] Aria: (I think it'd be nice to have a bunch of compatible, yet known-size integer types)
[18:15] mape: bradleymeck: yeah, so edge case == bad :)
[18:16] tmcw has left the channel
[18:16] Aria: Yeah. For many use cases.. ew. I'd totally put comments in critical path code that does that.
[18:16] Aria: "// Good thing this never comes near 32 bits... it'd truncate."
[18:16] stride: Aria: doesn't ruby have a bunch of number classes instead of one?
[18:16] pedrobelo has joined the channel
[18:17] Aria: stride: four, yeah. But they all interoperate and the fallback to non-immediate integers, the "BigInt" type, is super smooth)
[18:17] mape: So never optimize when not needed? :)
[18:17] Aria: Right.
[18:17] bradleymeck: well for bitwise or, and etc when combined with something larger in bitsize would be odd (dont at least we dont have overflow)
[18:17] stride: Aria: in that case, go and port that system ( :> ) to node as a library :))
[18:18] Aria: It wouldn't work as a library.
[18:18] Aria: It wouldn't work as a library.convertToBigNum(MAXINT).plus(1)
[18:18] Aria: Yagh. Stupid keyboard.
[18:18] stride: it'd be ugly, but working :>
[18:19] bradleymeck: there are several bignum libraries for js already
[18:19] stride: this one would be uglier!
[18:21] Aria: Or maybe I'll hack something into V8 someday, and add an --ignore-ecma-shortsightedness flag
[18:21] Aria: Or an actionscript like pragma
[18:22] gerred_ has joined the channel
[18:22] bradleymeck: pls dont use string literal pragmas
[18:22] bradleymeck: strict mode === fail
[18:23] hoodoos has joined the channel
[18:24] hoodoos: hey guys! what is the correct way to send data over httpClient? I mean, I first do httpRequest.write(someData); then httpRequest.end(), do I need to wait for any kind of callback before calling end()?
[18:24] Aria: Nope.
[18:24] Aria: node queues the writes until they can happen
[18:25] Aria: If you want small buffers, you can wait for drain events before filling, and stopping when write returns false
[18:25] Aria: But if you ignore the false return from write, you just queue inside node
[18:25] hoodoos: no, i don't need small buffers..
[18:25] hoodoos: thanks for reply, Aria :)
[18:25] Aria: Well then. Flood the data in and let node do the rest.
[18:25] Aria: Sure thing
[18:26] abstract_ has joined the channel
[18:26] mikecsh has joined the channel
[18:27] aheckmann has joined the channel
[18:28] aurynn: What's a good performance comparison of node vs. python or ruby or whatever?
[18:28] Aria: WEll, first, code some code that does the same things the same way, then compare...
[18:29] Aria: What sort of tasks are you wanting to compare?
[18:29] Aria: For a lot of things, V8 is blindingly fast. And then it'll garbage collect.
[18:30] Aria: Kinda like Ruby. Only faster.
[18:30] abstractj has joined the channel
[18:30] aurynn: given I work with web stuff most of the time, a reasonably complex web-ish application
[18:30] teemow has joined the channel
[18:30] Aria: Well, what does a web-ish application do for you?
[18:30] stride: Aria: well, the whole numbers / bitops limitations come with the language. I doubt a --ignore-ecma flag would save you headaches. if you need those things, use another language
[18:30] Aria: That's hardly a one-size-fits-all sort of question
[18:31] creationix: aurynn: anything with lots of I/O wait will be much faster in an evented system
[18:31] Aria: stride: maybe. But I like node. and this is how languages evolve cleanly.
[18:31] creationix: regardless of the VM uses
[18:31] stepheneb has joined the channel
[18:31] stride: Aria: your private fork doesn't evolve the language, sorry :)
[18:31] creationix: you can go to the language shootout to see synthetic benchmarks of the languages themselves benchmarks
[18:32] Aria: stride: Private?! You implement in a testbed, you give a clean way to signal that code should (and must) use the new features, then you port to other runtimes, then you get the !@#!@# ECMA to put it in v6
[18:32] Aria: (and the whole time, you publish it on github)
[18:33] yrashk has joined the channel
[18:33] stride: Aria: hmkay, good luck with that :)
[18:34] aurynn: creationix, where's the shootout? That's what I was looking for
[18:34] Aria: ACTION shrugs. I have good luck with things like that ;-)
[18:34] jesusabdullah: Found an amusing thread on /r/javascript: http://www.reddit.com/r/javascript/comments/du9um/i_like_javascript_a_lot_but_is_there_any_way_to/c12z3up
[18:34] strmpnk has joined the channel
[18:34] stride: jesusabdullah: haha :D
[18:34] paulwe_ has joined the channel
[18:34] jesusabdullah: Sad Stallmans });
[18:35] jesusabdullah: It turns out, interestingly enough, that the OP was using node.js
[18:35] blaines has joined the channel
[18:35] sivy: woo, my first successful longpolling app
[18:35] sivy: http://skitch.com/steveivy/dh129/http-localhost-3000
[18:35] Aria: Not surprised. Callbacks can lead to deep nesting if you're not thinking about decoupling
[18:35] jesusabdullah: Yeah, exactly
[18:36] jesusabdullah: I had that issue with my first semi-major node program
[18:36] jesusabdullah: Someone else ended up factoring out a bunch of stuff for me
[18:36] fcoury has joined the channel
[18:37] Aria: It's funny how it starts being a code smell and you realize you can decouple different aspects, and it gets clean again
[18:38] sivy: Aria: hey, I know that smell
[18:38] sivy: :)
[18:39] mjr_: Sad Stallmans is hilarious
[18:39] aurynn: hehe
[18:39] aurynn: it is
[18:40] Anti-X: i love the smell of refactoring in the morning
[18:40] Anti-X: before i go to bed
[18:40] jesusabdullah: :D
[18:40] dgathright_ has joined the channel
[18:41] Anti-X: speaking of which, let me just cross out one more day that i haven't done anything, in the calendar that counts down to my death
[18:41] admc_ has joined the channel
[18:41] admc has joined the channel
[18:42] Anti-X: my legacy? hundreds of 80% finished apps and projects
[18:42] EyePulp: Anti-X: huzzah!
[18:42] mjr_: Anti-X: yeah, we've all been there
[18:42] Anti-X: that are each one hour of debugging away from actually working
[18:42] mjr_: exciting and easy to start, but tedious and uninteresting after a while.
[18:43] Anti-X: we did a sort of team role test a few weeks ago
[18:43] Anti-X: turns out i am the idea guy
[18:43] Anti-X: i could have told them
[18:43] pedrobelo has joined the channel
[18:43] mjr_: You can be a thought leader.
[18:43] femtoo has joined the channel
[18:43] EyePulp: I'm a thoughtless leader.  is that similar?
[18:43] Anti-X: apparently idea guys aren't the best leaders
[18:44] path[l] has joined the channel
[18:44] Aria: Usually not
[18:45] Anti-X: however that doesn't mean they can't be
[18:47] blaines has joined the channel
[18:47] bradleymeck: if an idea man gets a hold of a true bred code monkey, good lord
[18:48] Anti-X: i think that may be how microsoft was born
[18:48] ph^ has joined the channel
[18:48] Anti-X: or was that not idea man, but business man
[18:49] Aria: Heh. That was business man.
[18:49] jakehow has joined the channel
[18:49] Anti-X: i am a code monkey, until i reach the point where i can see that this is going to work, and then i turn into a sloth
[18:49] Anti-X: it's like flicking a switch
[18:49] Aria: Hehe. Experimental code monkey.
[18:49] Anti-X: "right, concept proven, what's next?"
[18:50] mjr_: Anti-X: you just need some others to hand things off to.
[18:50] mjr_: Problem solved.
[18:50] Anti-X: i totally do
[18:50] Anti-X: i even have no problems writing specs
[18:50] Anti-X: i can write a book on any idea i have
[18:50] Anti-X: but finishing it?
[18:50] Aria: I used to be like that. Now I like finishing things.
[18:50] Anti-X: fuck no
[18:51] Anti-X: the last thing i finished (except two minor github projects (argtype and browscap)) was my dad's band website three years ago...
[18:51] evanmeagher: what's a good module to read as a learning experience for a somewhat newcomer to node?
[18:52] temp01 has joined the channel
[18:52] evanmeagher: i was thinking npm, but wondering if anybody had any other suggestions
[18:52] Anti-X: module to read?
[18:52] themiddleman has joined the channel
[18:52] evanmeagher: as in, code to study
[18:52] Anti-X: ah
[18:52] Anti-X: npm might be slightly confusing, not sure
[18:53] Aria: npm's biggish, but a good read
[18:53] Anti-X: unless you know js
[18:53] Aria: Not horrible code.
[18:53] evanmeagher: i'm decent with js
[18:53] Anti-X: then go for it
[18:53] evanmeagher: i heard isaacs saying the other day that npm's up for a refactoring
[18:53] sonnym has joined the channel
[18:53] Aria: Yep.
[18:53] evanmeagher: i'm mostly looking for ways to contribute to the node world, so figured the best way to learn the ropes is to dive into code
[18:53] voodootikigod: ryah_: yt
[18:53] Anti-X: and get a github account
[18:54] cloudhead has joined the channel
[18:54] ryah_: voodootikigod: yo
[18:54] evanmeagher: Anti-X: http://github.com/evnm
[18:54] evanmeagher: done and done
[18:54] Anti-X: rock on!
[18:55] dgathright has joined the channel
[18:56] AAA_awright: evanmeagher: How about the JS code for Nodejs itself? You can find it under lib/
[18:57] jbrantly has joined the channel
[18:58] quirkey has joined the channel
[18:58] jesusabdullah: Anti-X: Me too re: half-assed projects
[18:59] Anti-X: no not half-assed
[18:59] Anti-X: just no longer inspired
[18:59] evanmeagher: AAA_awright: I'll take a look. Thanks for the suggestion.
[18:59] marktlang has joined the channel
[18:59] Anti-X: the quality up to that point is fine
[18:59] Anti-X: it just stops
[18:59] EyePulp: so is there some wisdom as to why my socket.io client under a current version of FF seems to have its socket die regularly?
[18:59] jesusabdullah: Anti-X: Fair 'nuff
[18:59] jbrantly has left the channel
[19:00] EyePulp: it's using xhr-polling for the transport
[19:00] Anti-X: EyePulp, does it connect at all?
[19:00] EyePulp: Anti-X: definitely
[19:00] Anti-X: i had some problems with FF recently
[19:00] Anti-X: but it was with websockets vs flash sockets
[19:00] Anti-X: it confused itself
[19:01] EyePulp: I can't seem to get flash sockets working, but then I thought, shoot - it needs to work w/o flash sockets anyway to cover more users.
[19:01] benburkert has joined the channel
[19:02] EyePulp: so I'm using xhr-polling to test things, and it doesn't hold the connection for very long.  Works for minutes at a time, and then gets an Abort to the request
[19:02] MikhX has joined the channel
[19:02] EyePulp: So I have a ton of code handling reconnects and re-establishing the session.  Frustrating stuff.
[19:04] femtooo has joined the channel
[19:07] davidascher has joined the channel
[19:07] isaacs has joined the channel
[19:08] rwaldron has joined the channel
[19:10] bengl has joined the channel
[19:11] mape: mde: I think yammer just made a lot of people in my company stop using it :(
[19:13] bentruyman has joined the channel
[19:13] digitalspaghetti: WOOP: http://aws.amazon.com/free/
[19:13] isaacs: micheil: yes, a good generic queue runner would be a good npm module.
[19:14] isaacs: micheil: i've got an lru cache in there.
[19:14] isaacs: same level of use, afaict
[19:15] digitalspaghetti: free AWS hosting for node funtimes :D
[19:15] jesusabdullah: What's yammer?
[19:15] Prometheus: company twitter
[19:15] mjr_: digitalspaghetti: you can also get free VPS from chunkhost.
[19:15] jesusabdullah: hmm
[19:16] mjr_: http://chunkhost.com/
[19:16] digitalspaghetti: oh? this i did not know
[19:16] digitalspaghetti: mjr_: US only
[19:16] isaacs: wow, 512 mb ram for free
[19:16] isaacs: pretty nuts
[19:16] mjr_: Yeah, 512MB free, until they decide to start charging I guess.
[19:16] tekky: mjr_:  if their registration works, I tried for 2 weeks with the help from their sales email being "try again"
[19:17] digitalspaghetti: US only kind of sucks :(
[19:17] mjr_: Interesting.  It worked for me right away, and I've been running node + couchdb there with relative ease.
[19:17] c4milo has joined the channel
[19:17] mjr_: Disk IO seems way faster than AWS.
[19:17] tekky: mjr_:  how long ago was this? I trried when they first started the offer
[19:17] nerdEd has joined the channel
[19:18] mjr_: tekky: my instance has been up for 10 days.
[19:18] tekky: mjr_:  ahhh so very recently
[19:18] tekky: maybe they finally figured out what it was then
[19:22] kriszyp_ has joined the channel
[19:23] nerdEd has joined the channel
[19:26] ajsie: who created the npm?
[19:26] ajsie: is it ryan dahl?
[19:26] isaacs: ajsie: that would be me
[19:26] ajsie: great work
[19:26] jimt has joined the channel
[19:26] isaacs: ajsie: npm is not official or sanctioned by ryan or nodejs in any way.
[19:26] aurynn: who is john galt? er, ryan dahl?
[19:26] ajsie: much more simple than ruby gem
[19:26] isaacs: ajsie: thanks :)
[19:26] isaacs: that's great to hear :)
[19:27] rauchg_: it's better than anything else out there 
[19:27] rauchg_: and it's the de facto standard
[19:27] ajsie: yeah
[19:27] rauchg_: and it has pretty colors 
[19:27] isaacs: ACTION likes colors
[19:27] ajsie: node ecosystem is just awesome
[19:27] isaacs: rauchg_: it'd be nice if node had a reliable way to detect if stdout is not a terminal, though.
[19:27] rauchg_: s/node/isaacs
[19:27] isaacs: rauchg_: those colors are a pita when piped to a file or pbcopy
[19:28] rauchg_: yep indeed 
[19:28] isaacs: lotta [31m stuff all over
[19:28] MiiCode2 has joined the channel
[19:28] sschuermann has joined the channel
[19:28] sschuermann: re
[19:28] rauchg_: but i guess you can include a flag ?
[19:28] isaacs: i guess.
[19:28] rauchg_: npm -n | pbcopy 
[19:28] ajsie: npm kinda kicked seed.js's ass huh?
[19:29] rauchg_: --no-colors 
[19:29] rauchg_: ;P
[19:29] rauchg_: ajsie: just a different approach
[19:29] aurynn: --powerlevel=9001
[19:29] rauchg_: --powerlevel=OVER_NINE_THOUSAND
[19:29] CIA-31: node: 03Ryan Dahl 07master * rceb5331 10/ (src/node.cc test/simple/test-sigint-infinite-loop.js): 
[19:29] CIA-31: node: Force exit on SIGINT but still reset flags on stdio fds
[19:29] CIA-31: node: Add test that one can ctrl+c out of a script spinning infinitely. - http://bit.ly/a4CMHP
[19:30] mjr_: I did not know about pbcopy.  Pretty slick.
[19:31] mjr_: Not in homebrew though?  What a disaster.
[19:32] rcy has joined the channel
[19:32] isaacs: mjr_: pbcopy is a darwin native
[19:32] rwaldron_ has joined the channel
[19:33] isaacs: rauchg_: i'm gonna add a colors config, i think
[19:33] davidsklar has joined the channel
[19:33] isaacs: maybe put an easter egg in there where so you can do --colors OMG and it'll rainbowify everythign
[19:33] Anti-X: for profit!
[19:34] Anti-X: i think colors may be the ??? in your business plan
[19:34] isaacs: ajsie: i think seed.js is not really strictly for node, though, right?
[19:34] mjr_: isaacs: any progress on the multi-repo failover stuff?
[19:34] isaacs: mjr_: yeah, turns out that that cap theorem is a real asshole.
[19:34] mjr_: oh whatever you call it
[19:34] ajsie: isaacs: i wonder that too
[19:34] ajsie: maybe it wasnt
[19:34] CIA-31: node: 03Ryan Dahl 07master * r2629296 10/ src/node_stdio.cc : Add isatty for isaacs - http://bit.ly/bcmeRw
[19:34] ajsie: http://github.com/seedjs/seed
[19:34] isaacs: ryah_: thanks!
[19:35] synthomat: how do i get a variable output in HAML without a tag?
[19:35] ajsie: seems to be
[19:35] Anti-X: man, joyent really put you to work, huh?
[19:35] ryah_: np
[19:35] agnat: agile :-D
[19:35] synthomat: "= @variable" does not work
[19:35] ajsie: ryah_: you are ryan dahl?
[19:35] rasputnik has joined the channel
[19:35] matt_c has joined the channel
[19:36] ryah_: ajsie: i am
[19:37] EyePulp: lies!
[19:37] ajsie: cool .. just curious )(
[19:37] Anti-X: he's a fed
[19:37] Anti-X: posing as a famous programmer
[19:37] EyePulp: hide your stuff!
[19:37] ajsie: he's not? =)
[19:37] bradleymeck: ryah_ do you know if X has built in clipboard or just xt/gtk/etc?
[19:37] Anti-X: not if he's the fed :p
[19:37] ajsie: :)
[19:38] EyePulp: he wrote node to lure in people with a JS fetish.  It's a trap.
[19:38] aurynn: IT is a trap.
[19:38] aurynn: A fast, fun trap.
[19:38] ajsie: an asynchronous trap
[19:38] aurynn: You'll be trapped later.
[19:38] aurynn: Not now.
[19:39] programble has joined the channel
[19:39] ajsie: by then it will be too late
[19:39] mjr_: we'll call you back to let you know that you can get out of the trap
[19:39] EyePulp: hah
[19:39] ryah_: bradleymeck: i'm pretty sure it does - not sure
[19:40] bradleymeck: ugg cant find docs on it in the manual, *continues to dig*
[19:40] mjr_: I'm pretty sure native X11 has a clipboard service, but they call it something funny
[19:40] bradleymeck: its not selection or clip...
[19:41] mjr_: pasteboard?
[19:41] ajsie: high concurrency for trapping all of us
[19:41] Anti-X: copyboard
[19:41] Anti-X: i just had to
[19:42] Anti-X: it doesn't seem to have a nem
[19:42] Anti-X: name*
[19:42] bradleymeck: mjr_ apparently its just xstore/fetch(typehere)...
[19:43] meandi has joined the channel
[19:44] Anti-X: xclip
[19:44] ajsie: why did node.js kick off the js server side popularity and not the others before?
[19:44] ajsie: it was the async calls that made the trick?
[19:45] Anti-X: it was probably ryah_'s charisma
[19:45] Anti-X: that's how it all starts
[19:45] ajsie: :)
[19:45] ajsie: but seriously
[19:46] ajsie: asynch right? is that the only thing that differs node.js from its predecessors
[19:46] Draggor has joined the channel
[19:46] derencius has joined the channel
[19:47] Anti-X: v8
[19:47] v8bot: Anti-X: undefined
[19:47] Anti-X: not you, shut up
[19:47] ajsie: oh yeah v8
[19:48] ajsie: v8 + asynch = node.js
[19:48] v8bot: ajsie: v8 <code> is no longer supported (except in PM).  Try v8: <code> or v8> <code>
[19:48] ajsie: not you, shut up
[19:48] Anti-X: so stop responding to 'v8' then, you stupid piece of code
[19:51] elijah-mbp has joined the channel
[19:51] jesusabdullah: It's funny, because this behavior was actually introduced in order to avoid problems of it responding to conversation
[19:52] rpflo has joined the channel
[19:53] Anti-X: don't you think the transition period might be due for termination?
[19:53] lupomontero has joined the channel
[19:53] jesusabdullah: Anti-X: I do, but it's not my bot :P
[19:53] Anti-X: then make it so!
[19:53] Anti-X: you are jesus
[19:54] jesusabdullah: I can only convert water into alcohol
[19:54] jesusabdullah: Not a miracle worker!
[19:54] Anti-X: who says that's not what i wanted?
[19:54] isaacs: i think the answer to that (why did nodejs kick off ssjs when everyone else didn't) is because nodejs is not really about ssjs except incidentally.
[19:54] isaacs: node was almost node.hk, actually
[19:54] isaacs: (haskell)
[19:54] jesusabdullah: hk?
[19:54] jesusabdullah: Huh
[19:54] halfhalo: lol
[19:54] jesusabdullah: Interesting
[19:54] halfhalo: '
[19:54] Anti-X: sounds like hell
[19:54] jesusabdullah: node.hong kong
[19:55] isaacs: Anti-X: i agree, but ryah_ seems to think haskell is cool.
[19:55] isaacs: :)
[19:55] Anti-X: the fool
[19:55] jesusabdullah: I think it would've found less use as a haskell platform
[19:55] isaacs: jesusabdullah: yeah, of course.
[19:55] jesusabdullah: though haskell has some cool ideas
[19:55] synthomat: eh, does HAML for node.js understand all commands of HAML, anyway?
[19:55] jesusabdullah: The ssjs thing is cool though
[19:55] lupomontero: haskell is pretty good, but javascript is simply everywhere
[19:55] jesusabdullah: Indeed
[19:56] Anti-X: synthomat, you should look into Jade
[19:56] Anti-X: it's similar
[19:56] Anti-X: less clutter
[19:56] Anti-X: ironically
[19:56] jakehow has joined the channel
[19:56] dguttman has joined the channel
[19:56] synthomat: or ejs?
[19:57] synthomat: jade is similar to haml, isn't it?
[19:57] Anti-X: yeah
[19:57] isaacs: yeah, also, js has a cultural bias *towards* non-blocking IO
[19:58] isaacs: which makes it a unique fit fora fully-nonblocking IO platform
[19:58] ryah_: ajsie: the stars were aligned
[19:59] jesusabdullah: hah
[19:59] bradleymeck: any chance we can get waf bumped up to 1.6?
[19:59] ryah_: the http parser plays a more important roll in node than is realized
[20:00] ryah_: node's popularity
[20:00] ryah_: people were not able to parse http before it
[20:00] ryah_: somewhat literally
[20:00] tjholowaychuk: synthomat: +1 jade
[20:00] ajsie: ryah_: =)
[20:00] ryah_: chunked http requests - impossible
[20:01] ajsie: ryah_: was it for company projects you coded node.js then made it open-source 
[20:01] ajsie: or was it itself a project in the beginning
[20:01] pquerna: ryah_: i replied. can always whiteboard this somewhere if i'm being too dense i guess
[20:01] ryah_: http parser + libev + web sockets coming to maturity + javascript vm wars 
[20:02] digitalspaghetti: i'm starting to like jade
[20:03] MiiCode2 has joined the channel
[20:03] ryah_: pquerna: i think the http client should not try to "pipe" to the transport layer
[20:03] Anti-X: synthomat, though it should be noted, tjholowaychuk +1's it because he's the author
[20:03] bradleymeck: tj hows progress on documenting the ast for jade's compile function
[20:03] ryah_: but it might pipe to gzip
[20:03] tjholowaychuk: hahah
[20:03] tjholowaychuk: bradleymeck: havent started :(
[20:03] tjholowaychuk: sorry
[20:03] ryah_: gtg i'll reply on list
[20:03] bradleymeck: im busy haha
[20:03] pquerna: k
[20:03] aurynn: node has relaly forced me to learn JS, and learn it well.
[20:03] bradleymeck: just wondering
[20:03] Anti-X: who needs anything else
[20:03] Anti-X: really
[20:04] tjholowaychuk: typically you only realy need to override visitTag() though
[20:04] digitalspaghetti: aurynn: yea, i was lucky i did a lot of JS so really liked it, but i'm still learning new stuff every day
[20:04] tjholowaychuk: really depends what you are doing
[20:04] ollie has joined the channel
[20:04] digitalspaghetti: O'Reillys JavaScript The Definitive Guide 5th Edition is my bible :D
[20:05] Anti-X: then you must be the worst heckler the priest ever met
[20:05] mikeal has joined the channel
[20:05] pquerna: ryah_: i think thats implying that somehting like a "File Like object' interface, read(), write(), etc (SSL, Files, Sockets)
[20:06] Anti-X: "for it is written" "haha, no it's not! it says prototype blababla"
[20:06] digitalspaghetti: oh i don't go in for all that, i'm Ignostic
[20:06] Anti-X: agnostic
[20:06] digitalspaghetti: no, Ignostic
[20:06] Anti-X: but even then, sometimes you need to be in church.. weddings etc
[20:06] MikhX has joined the channel
[20:07] digitalspaghetti: http://en.wikipedia.org/wiki/Ignosticism
[20:07] digitalspaghetti: Also, oooooh: http://oreilly.com/catalog/9780596805531/
[20:07] digitalspaghetti: 6th edition ftw!
[20:09] Anti-X: ssjs is so much more fun than browser js, because you know the code is always supported
[20:09] digitalspaghetti: i know what i'll get for my birthday :D
[20:09] digitalspaghetti: (along with my new Kindle)
[20:09] digitalspaghetti: well, technically first kindle rather than new
[20:09] evanmeagher has joined the channel
[20:10] synthomat: Anti-X, tjholowaychuk: thanks for the advice, jade works better than haml :-)
[20:11] synthomat: node.js as an novice is like pain in the ass ^^
[20:11] er1c_ has joined the channel
[20:11] Anti-X: i've never had arse pains, so i can't say
[20:12] Anti-X: please don't let that kill the conversation!
[20:12] Anti-X: :P
[20:13] abstractj has joined the channel
[20:14] synthomat: which conversation? :D
[20:14] jesusabdullah: Dawg LET ME TELL YOU about ASS PAINS
[20:14] jesusabdullah: When I say I should've used Preparation H...
[20:16] synthomat: i work in a hospital, i thin i know what arse pain is :D
[20:16] synthomat: haha
[20:16] ollie has joined the channel
[20:16] Anti-X: did you get jar guy to your hospital?
[20:16] halfhalo: GAH!!!!
[20:16] halfhalo: ACTION is having issues with downloading files using node
[20:17] ngw has joined the channel
[20:17] Anti-X: to node or from node?
[20:17] halfhalo: to node
[20:17] synthomat: but i think if the patients had a choice, they would take node.js over arse pain :D
[20:19] webr3 has joined the channel
[20:19] Anti-X: i saw an ad on tv... in prime time... "do you have haemmorhoids or anal tearing (..)"... dude.. whatever you're shoving up there, just don't do it... also: IM EATING!
[20:19] twoism has joined the channel
[20:20] Yuffster has joined the channel
[20:20] synthomat: :D
[20:20] digitalspaghetti: nice, i;m having a look at a couple of JS books on kindle preview, and they mention node :D
[20:20] halfhalo: DAMMIT NODE JUST DOWNLOAD THE FREAKING FILE FOR ME CORRECTLY AND DON'T BE LIKE THIS
[20:21] breccan__ has joined the channel
[20:21] path[l] has joined the channel
[20:21] Anti-X: it's my birthday on saturday, can i have your kindle?
[20:21] ceej has joined the channel
[20:21] halfhalo: ACTION kicks node
[20:21] digitalspaghetti: no, it's my birthday too :D
[20:21] Anti-X: ^5
[20:21] digitalspaghetti: 23rd October crew!
[20:21] Anti-X: deffo
[20:23] halfhalo: ACTION wishes request could handle files
[20:23] richcollins has joined the channel
[20:26] digitalspaghetti: halfhalo: you could always call an external app like wget to download the file
[20:26] halfhalo: true...
[20:30] tilgovi has joined the channel
[20:32] jimt_ has joined the channel
[20:33] hellp has joined the channel
[20:34] bradleymeck: anyone on a non-gnome, but X based linux? if so, can you test if http://gist.github.com/639285 spews out clipboard contents
[20:34] ryan[WIN]: sorry i'm gnome'd :<
[20:35] ryan[WIN]: someone's gotta be running kde or xfce around here though
[20:35] bradleymeck: yea most of us are prolly
[20:35] bradleymeck: wonder what horror that does on cygwin
[20:35] Rixius has joined the channel
[20:35] Rixius: Does Node 2.0 build on 10.4.11?
[20:36] Rixius: i mean 0.2.0 >.>
[20:36] ph^ has joined the channel
[20:36] ryan[WIN]: speaking of horrors, i've been working on getting node to compile on mingw
[20:36] muk_mb1 has joined the channel
[20:36] bradleymeck: hows it going?
[20:36] derencius_ has joined the channel
[20:36] ryan[WIN]: not entirely sure how it even builds with the current waf setup
[20:37] ryan[WIN]: the msvc and cygwin targets appear to be...
[20:37] ryan[WIN]: how should i say it
[20:38] ryan[WIN]: it's like slaying the hydra
[20:38] ryan[WIN]: i've been getting further along just ignoring waf altogether and seeing how all the parts come together
[20:39] pquerna: mingw would be so nice.
[20:39] ryan[WIN]: last time i dove into the node build process it was pre-waf so i'm catching up
[20:39] ryan[WIN]: well it seems within reach
[20:40] ryan[WIN]: but getting a mingw build may require me setting up an entirely custom build process at first
[20:40] ryan[WIN]: then figuring out how to describe so someone else can fit it in with the waf method
[20:40] deepthawtz has joined the channel
[20:40] digitalspaghetti: Is there no clang for windows yet?
[20:40] Anti-X: don't bother with mingw yet.. people can install cygwin
[20:40] ryan[WIN]: Anti-X, mingw is really important
[20:40] ryan[WIN]: some of us shun cygwin :D
[20:41] Anti-X: some of you are really weird
[20:41] jesusabdullah: eww cygwin :(
[20:41] jesusabdullah: I don't really like it! But at least it works!
[20:41] Anti-X: cygwin is teh pwn
[20:41] jesusabdullah: no :(
[20:41] sczxcz234 has joined the channel
[20:41] Anti-X: it toally is, shut up
[20:41] bencc has joined the channel
[20:41] Anti-X: totally even
[20:41] jesusabdullah: native lennox is much better
[20:41] jesusabdullah: Drives me nuts having to cygwin it up
[20:41] jesusabdullah: Glad it exists though
[20:41] jesusabdullah: cause, I mean
[20:42] jesusabdullah: windows :6
[20:42] ryan[WIN]: cygwin has significant overhead
[20:42] ryan[WIN]: you won't notice it in many respects but when you get down to serious cpu and i/o
[20:42] Anti-X: well you're not supposed to run a server through cygwin
[20:42] Anti-X: but for dev it's fine
[20:42] ryan[WIN]: what do you think nodejs is for though
[20:42] ryan[WIN]: :)
[20:42] MiiCode2 has joined the channel
[20:42] jesusabdullah: Writing cheaterbots for counter-strike
[20:42] jesusabdullah: obviously
[20:42] Anti-X: yeah set up a leenoox box for server
[20:42] jesusabdullah: ACTION wonders if people still play cs
[20:43] Anti-X: some do
[20:43] jesusabdullah: 1.5
[20:43] Anti-X: i've seen them
[20:43] jesusabdullah: pre-steam
[20:43] jesusabdullah: Hell yeah
[20:43] ryan[WIN]: yes but there are a lot of companies that have contracts and windows machines and legacy stuff
[20:43] jesusabdullah: Someone needs to make a html5 fps still
[20:43] bradleymeck: can it lack vertical changes?
[20:43] jimt has joined the channel
[20:44] c4milo has joined the channel
[20:44] xla has joined the channel
[20:44] bradleymeck: i wonder how to deal w/ latency client side though
[20:45] Anti-X: ryan[WIN], just make ready made executables
[20:45] Anti-X: that was a weird sentence
[20:45] Anti-X: but who cares! it's 2010
[20:45] ryan[WIN]: the biggest challenge i can see into getting everything mingw seems to be libev and libeio
[20:46] rasputnik has left the channel
[20:47] femtoo has joined the channel
[20:49] ryan[WIN]: the best way to actually compile and build with mingw is to use msys (which surprisingly few people use--probably why mingw package includes it nowadays)
[20:49] ryan[WIN]: it has winders versions of automake and bash and crap so you can run configure scripts
[20:50] synthomat: gnargh
[20:50] Validatorian: I'm having a difficult time with require.paths -- I'm getting an error whenever I run a script out of a specific folder... so I had to add: require.paths.unshift('/usr/local/lib/node/.npm/html5/active/package/deps/jsdom/lib') -- not cool.  What would I do to be able to run this anywhere? I've already tried copying /lib to ~/.node_libraries, but that didn't fix it
[20:51] Validatorian: copying the files in /lib*
[20:51] bradleymeck: what error
[20:51] isaacs: Validatorian: where's your actual code?
[20:52] derencius has joined the channel
[20:52] Validatorian: bradleymeck: TypeError: Cannot read property 'core' of undefined, a jsdom thing
[20:52] Validatorian: isaacs: ~/webroot/test.js
[20:52] gilesgoatboy has joined the channel
[20:53] isaacs: Validatorian: ok... can you gist the code so that i can see what it's doing?  or perhaps gist a reduced test case?
[20:53] Validatorian: yea, 1s
[20:53] bradleymeck: i would think there are differing versions of jsdom going on around here... /me goes to check something
[20:54] tg has joined the channel
[20:54] Validatorian: http://gist.github.com/639331 isaacs 
[20:54] isaacs: ok, line 1: require.unshift("lib")
[20:54] isaacs: that's a problem
[20:55] isaacs: require.paths should always all be full paths.
[20:55] tosuk has joined the channel
[20:55] Validatorian: noted
[20:55] isaacs: require.paths.unshift(__dirname+"/lib")
[20:55] isaacs: does that fix the issue?
[20:55] isaacs: (it might)
[20:56] Validatorian: isn't __diname the directory you're running the script from?
[20:56] isaacs: Validatorian: __dirname is the dir where the script lives
[20:56] isaacs: process.cwd() is the current working dir
[20:56] isaacs: (where you are when you ran "node blah.js")
[20:56] Validatorian: it lives at ~/webroot, not where /libs is
[20:57] Validatorian: tried it anyhow, doesn't work
[20:57] ryan[WIN]: usually where people fail in getting things migrated from cygwin to mingw is understanding the differences in lunix and win32api
[20:58] Validatorian: I want to be able to run the script from anywhere -- I would have thought that adding the jsdom stuff to ~/.node_libraries would have done that
[20:58] Validatorian: could npm be overriding that, somehow?
[20:58] isaacs: Validatorian: so, why are you unshifting ("lib") onto require.paths, then
[20:58] isaacs: ?
[20:58] isaacs: i mean, that's just odd
[20:59] Validatorian: that code was already in there from the example (which required running it in that folder)
[20:59] tg has joined the channel
[20:59] Validatorian: sorry for the confusion :)
[20:59] isaacs: ok.
[20:59] isaacs: where does it actually throw, and what error
[20:59] isaacs: ?
[21:00] Validatorian: throws on 'document: new jsdom.dom.level1.core.Document()', error: TypeError: Cannot read property 'core' of undefined
[21:00] isaacs: ok, so jsdom.dom.level1 is undefined
[21:00] Validatorian: right
[21:00] Validatorian: because level1 can't be found
[21:00] Validatorian: the folder
[21:01] isaacs: ok... you should probably bug tmpvar about this
[21:01] Validatorian:  /usr/local/lib/node/.npm/html5/active/package/deps/jsdom/lib/jsdom/level1/core.js
[21:02] Validatorian: okay
[21:02] phiggins: heh. good work whomever put nodejsbot in #nodejs http://skitch.com/dantehicks/dhuax/nodejs-higginsforpresident.net
[21:02] isaacs: Validatorian: i don't see level1 getting loaded on jsdom
[21:02] isaacs: Validatorian: leave html5 out of it for now
[21:02] bradleymeck: it is pulling it from the standard place not deps looking at the html5 code, it seems
[21:03] Validatorian: isaacs: Aria (html5 creator) has her own fork of jsdom, so it could be an issue there, rather than with tmpvar's version
[21:03] isaacs: Validatorian: seems that way
[21:04] isaacs: Validatorian: seems like html5 might be doing require("jsdom") rather than doing require("../deps/jsdom") or some such
[21:04] isaacs: static deps don't help if you don't link to them statically :)
[21:04] jimt has joined the channel
[21:04] isaacs: phiggins: nice
[21:05] noahcampbell has joined the channel
[21:05] Validatorian: well, putting require.paths.unshift('/usr/local/lib/node/.npm/html5/active/package/deps/jsdom/lib'); in makes the script work, so I'm wondering why putting the same files in ~/.node_libararies doesn't have the same effect
[21:06] saikat has joined the channel
[21:06] isaacs: Validatorian: because jsdom is showing up *before* the one in ~/.node_libraries
[21:06] isaacs: Validatorian: but, yeah, doing it that way sucks.
[21:07] ryah_: pquerna: you there?
[21:07] pquerna: ryah_: yes
[21:07] Validatorian: alright, thanks isaacs 
[21:07] isaacs: Validatorian: np :)
[21:08] ryah_: pquerna: so.. file like interface?
[21:08] pquerna: ryah_: well, that seems to be what you are saying it should behave like
[21:08] ehaas has joined the channel
[21:08] pquerna: 'protocols' just call write and read on some end of a stream.  though we don't have a read() call today really
[21:08] ryah_: pquerna: well, write() but not read()
[21:09] bradleymeck: lib/html5/parser.js:31& 32, patch those 2 and I think it should be all green (submit a patch too ;)) 
[21:09] pquerna: okay
[21:09] pquerna: so, how should read work?
[21:09] ryah_: pquerna: data events
[21:09] saikat_ has joined the channel
[21:09] devinus has joined the channel
[21:09] ryah_: i may be totally misunderstandig you
[21:09] pquerna: ryah_: yes, but those same data events would contain both encrytped data for the tcp socket, and cleartext data for the http
[21:10] pquerna: because they are already being piped to the tcp stream
[21:10] ryah_: so http.js should be abl to use either a tls stream or tcp stream
[21:10] pquerna: yes
[21:10] nerdEd has joined the channel
[21:10] ryah_: oh.
[21:10] ryah_: i get it now :)
[21:11] ryah_: it's duplex but has two endpoints
[21:11] pquerna: http.js <-data secure data-> tcp
[21:11] pquerna: yes
[21:11] pquerna: exactly
[21:11] ryah_: yeah
[21:12] ryah_: well - two solutions.. 
[21:12] ryah_: secureThing.clearEnd
[21:12] ryah_: secureThing.encENd
[21:12] pquerna: yes
[21:12] ryah_: or change the stream API to support both ends somehow
[21:12] pquerna: that was the first proposal from micheil last night
[21:12] pquerna: i can make it work
[21:12] pquerna: that way
[21:13] ryah_: i.e. have 'dataIn' event and 'dataOut' events
[21:13] pquerna: tim smart didn't like it, proposed just calling it a filter that consumed from two streams.
[21:13] pquerna: ryah_: hmm. kinda confusing.
[21:13] pquerna: ideally the server and client code wouldn't change
[21:13] ryah_: agreed
[21:13] hoffa_ has joined the channel
[21:13] pquerna: so words like 'in' and 'out' are pretty weird
[21:13] ryah_: so the tls stream is really like a pipe
[21:13] ryah_: with two sides
[21:14] ryah_: or, rather, a socketpair
[21:15] ryah_: i guess a gzip stream would also be like a socketpair
[21:15] ceej has joined the channel
[21:15] pquerna: kinda. though in http's case, not as muc
[21:15] pquerna: its not common to compress both bodies
[21:15] pquerna: (though mod_deflate does support it)
[21:15] pquerna: 'inflating' of incoming request bodies
[21:16] pquerna: so i guess someone is using it
[21:16] ryah_: oh, right
[21:16] pquerna: though its not really special like ssl
[21:16] pquerna: ssl needs shared state on both sides of its pair
[21:16] pquerna: most of the other examples, don't
[21:17] fyskij has joined the channel
[21:17] MikhX has joined the channel
[21:17] jamesarosen has joined the channel
[21:17] alex_b_ has joined the channel
[21:17] ryah_: so i think we need some better nominclature
[21:18] ryah_: hm
[21:18] SvenDowideit has joined the channel
[21:18] ryah_: disgresing - do you prefer httperf or ab, pquerna 
[21:18] ryah_: or something else?
[21:18] mjr_: ab seems like it cheats
[21:18] pquerna: i would like to find time to rewrite flood
[21:19] mikew3c has joined the channel
[21:19] pquerna: but i use flood
[21:19] mikeal: it uses threads
[21:19] pquerna: when i need to do stuff
[21:19] pquerna: with real numbers
[21:19] mikeal: ab is kind of standard
[21:19] ryah_: mikeal: what uses threads?
[21:19] mikeal: ab
[21:19] pquerna: http://httpd.apache.org/test/flood/
[21:19] pquerna: ab lies
[21:19] mikeal: it does, but people trust those lies
[21:19] mikeal: it comes pre-installed on my mac, we can't ignore it
[21:19] ryah_: mikeal: ab doesn't use threads
[21:19] pquerna: you also will have a tough time really pushing multi-gigabit with it
[21:19] mjr_: Yeah, ab totally lies.  "incomplete requests" 
[21:20] pquerna: flood can do this, even fi its kinda getting crufty
[21:20] mikeal: i mean, sunspider is an aweful benchmark
[21:20] mikeal: but you have to care about it
[21:20] ryah_: ab gives the best stats imo
[21:20] ryah_: i havent tried flood
[21:20] pquerna: yes, for a simple benchmark, ab is nice
[21:20] pquerna: flood gives you raw data in a log file
[21:20] pquerna: then there are scripts to create stats from it
[21:20] ryah_: and ab can create a larger load than httperf in my experience
[21:21] ryah_: pquerna: response time for individual req?
[21:21] pquerna: yes
[21:21] pquerna: time to first byte, etc
[21:21] ryah_: oh, nice
[21:21] isaacs: anyone check out seige?
[21:21] dgathright has joined the channel
[21:21] isaacs: i have some friends who swear by it, but i never went thorugh the trouble to install it
[21:22] mjr_: java
[21:22] mikeal: a customer is using this expensive enterprise java http test tool for testing couchdb
[21:22] mikeal: and after working with them for a while i came to the conclusion that it's significantly worse and harder to add test to than my relaximation stuff
[21:23] mikeal: but i don't think we should use node to test node
[21:23] mikeal: so it's out
[21:23] tjholowaychuk: isaacs: seige is kinda cool
[21:23] tjholowaychuk: better config
[21:23] mjr_: But mikeal, your shit is not very "enterprise"
[21:23] tjholowaychuk: IMO
[21:23] mikeal: but it does make me think different about all these fancy tools
[21:23] tjholowaychuk: and you can hit a flat list of urls
[21:23] mikeal: mjr_: it gives you a pretty graph
[21:23] mikeal: :)
[21:23] mjr_: I loves me some graphs
[21:23] mikeal: http://graphs.mikeal.couchone.com/#/graph/6a174582ead9d38a9200967573024a7c
[21:23] jesusabdullah: Someone should plot some data for me
[21:24] jesusabdullah: It's 4-d
[21:24] pquerna: i think someone could write a kickass benchmarking tool using http parser + libev + following some patterns in flood.
[21:24] pquerna: enotime etc, etc
[21:24] ryah_: pquerna: yes
[21:24] ysynopsis has joined the channel
[21:24] jesusabdullah: ACTION dislikes flot :(
[21:24] ryah_: what's enotime?
[21:25] pquerna: ENOTIME
[21:25] pquerna: no time to complete my dreams.
[21:25] mjr_: If you don't understand, just say it louder.
[21:25] aurynn: Optimization of time is hard.
[21:25] ryah_: has anyone looked at the benchmark/plot.R ? 
[21:25] aurynn: and then when you achieve cool things, you get more work as a result.
[21:26] ryah_: it makes nice graphs
[21:27] ryah_: need to hook it up to a post-commit and publish it to a website
[21:28] mikeal: i'm more in to storing data rather than graphs and creating graphs in the browser
[21:28] mikeal has joined the channel
[21:29] mjr_: I, too, want to render graphs in the browser.
[21:30] mjr_: Then you can support zooming, scrolling, etc.
[21:30] mjr_: And proper scaling for assholes with giant monitors or reasonable people with their onboard laptop display.
[21:30] rwaldron_ has joined the channel
[21:30] pquerna: ryah_: http://github.com/tobami/codespeed
[21:31] pquerna: ryah_: http://speed.pypy.org/
[21:31] pquerna: off the shelf go go go
[21:31] mjr_: I wish there was a good way to do histograms client-side.  All of the libs I've seen want you to feed it filtered and quantized data.
[21:33] pquerna: its really simple, run the benchark, make it post the result to an api
[21:33] pquerna: pretty graphs all happen
[21:33] benburkert has joined the channel
[21:34] ryah_: pquerna: nice
[21:34] mikeal: flot is a great tool to slap together a graph
[21:34] ryah_: pquerna: the pypy site is a demo of codespeed?
[21:35] pquerna: ryah_: yes
[21:35] elijah-mbp has joined the channel
[21:35] rwaldron_ has joined the channel
[21:35] mikeal: but protovis is amazing
[21:35] mikeal: you can do insane visualizations
[21:35] ryah_: pquerna: have you used it?
[21:35] Anti-X: why would you want insane visualizations
[21:35] Anti-X: what's the use of that
[21:35] mjr_: mikeal: does protovis make histograms from raw data?
[21:35] pquerna: ryah_: i have not
[21:36] mikeal: it can
[21:36] mjr_: mikeal: I looked at it, and it seemed like it doesn't.
[21:36] mikeal: it can do anything
[21:36] mjr_: protovis: make me some coffee
[21:36] pquerna: (other than, using the pypyspeed site)
[21:36] bentruyman has joined the channel
[21:36] mikeal: http://vis.stanford.edu/protovis/ex/
[21:36] mjr_: Having something like that pypy site for node would be excellent.
[21:37] mikeal: do you mean pypi
[21:37] chrischr1s has joined the channel
[21:37] pquerna: no, pypy
[21:37] pquerna: the future of python
[21:37] zomgbie has joined the channel
[21:37] mikeal: i'm not the biggest fan of that site
[21:37] mikeal: i'm familiar with pypy
[21:37] pquerna: a jit written in python, what can go wrong :)
[21:38] mikeal: nothing obviously
[21:38] mikeal: :)
[21:38] aurynn: hehe
[21:38] pquerna: http://speed.pypy.org/timeline/?exe=1,3&base=2%2B35&ben=django&env=tannit&revs=1000
[21:39] pquerna: ACTION really wants to use pypy sooooon
[21:39] pquerna: will make twisted so fast
[21:39] mjr_: Wow, maybe I should go back to python.
[21:39] mikeal: they use jqplot
[21:39] twoism has joined the channel
[21:39] mikeal: twisted is like node.js in Java in Python
[21:39] mikeal: best quote ever
[21:40] mjr_: pypy looks fast 
[21:40] c4milo has joined the channel
[21:40] mikeal: it takes a minute to get fast, if i remember correctly
[21:40] mikeal: i'm not a fan of plots like this
[21:41] badaxx has joined the channel
[21:41] tg has joined the channel
[21:41] mikeal: plotting an exact number for every checkin is painful
[21:41] badaxx has joined the channel
[21:41] mikeal: because then the tests or the box changes and the baselines all break
[21:41] zomgbie_ has joined the channel
[21:42] mikeal: what you want to do is log and chart the difference between two tests run at the same time between two checkins
[21:42] mikeal: and if you want to plot over time you just continue to chart the difference between each checkin
[21:42] mikeal: it's more exhaustive but it doesn't have baseline issue
[21:42] brainproxy has joined the channel
[21:42] mikeal: issues
[21:43] ryah_: libev 4.00 is out
[21:43] mattly has joined the channel
[21:43] mikeal: if these actually ran the test against c-python each time it would be more useful
[21:44] pquerna: you could do that
[21:44] pquerna: it runs them with c-jit and non-just each time
[21:44] mikeal: right, but that code is in the same repo
[21:44] mikeal: so a change could happen to both and cause it to shift
[21:44] mikeal: you need to compare against a baseline every time you test
[21:45] pquerna: the speed thing doesn't care where your code is from, you just post it the data points
[21:45] mikeal: it sucks but you'll be really happy you did the first time the tests or box changes out from under you
[21:45] zomgbie has joined the channel
[21:45] ryah_: so i want to make some names for stream stuff.
[21:45] mikeal: yeah, that's how my stuff works to, i generate a graph for anyone that wants to test
[21:45] mikeal: but i don't chart over time like this
[21:45] ryah_: a "stream pair" will be something like SSL - a duplex thing with two end points
[21:46] ryah_: a "stream" is more or less like a socket - one end point of a "stream pair"
[21:46] pquerna: okay
[21:46] bentruyman has joined the channel
[21:48] ryah_: so- here's the question
[21:48] ryah_: say we have a gzip module - which we'd like to use stream stuff with
[21:48] femtooo has joined the channel
[21:48] ryah_: generally let's say it's not duplex
[21:48] ryah_: one directional
[21:49] ryah_: i think the interface for this being a single object that you write to and recv 'data' events from is wrong
[21:49] ryah_: (although simpler)
[21:49] ryah_: it should rather be like a pipe(2) 
[21:49] ryah_: like SSL, having two end points
[21:49] ryah_: one readable the other writable
[21:49] ryah_: or - what do you think?
[21:50] pquerna: the pipe metaphore i the more accurate for ssl.
[21:50] bradleymeck: i like separation, but thats coming from my days in D... soo long ago
[21:50] elijah-mbp has joined the channel
[21:50] pquerna: i'm not sure what you mean to do with gzip
[21:51] ryah_: g = new Gzip
[21:51] ryah_: g.in.write("blah")
[21:51] ryah_: g.out.pipe(socket)
[21:51] pquerna: okay
[21:52] pquerna: and in the gzip case, the 'in' sink, would not emit data centers
[21:52] pquerna: *data events
[21:52] aurynn: how much control do I have over the event loop?
[21:53] pquerna: s = new SecureStreamPair();     s.in.on('data', ....);    s.in.write('foo');      s.out.pipe(socket)   socket.pipe(s.out)
[21:53] ryah_: it seems there's something semantically different between a gzip transformer and a duplex tcp socket
[21:53] mikeal: why have two streams?
[21:53] mikeal: for input and output?
[21:54] jimt_ has joined the channel
[21:54] ryah_: for ssl it's necessary
[21:54] mikeal: ryah_: i agree about them being different
[21:54] ryah_: for gzip it's optional - but worth considering
[21:54] mikeal: but what does that mean for sending it to a pipe
[21:55] mikeal: myStream.pipe(gzip) or myStream.pipe(gzip.in)
[21:55] mikeal: seems kind of redundant to make it two streams to just accomplish a simple transform
[21:55] ryah_: yeah
[21:55] ryah_: i agree, it's redundant - i'm just wondering if it make more sense somehow ...
[21:55] ryah_: maybe not
[21:55] creationix has joined the channel
[21:56] mikeal: it might for ssl, because it's a special case
[21:56] ryah_: in the SSL case, say you're talking to one end point
[21:56] mikeal: but for most i don't think so
[21:56] ryah_: you're reading cleartext and writing cleartext
[21:56] mikeal: well, here is a question
[21:56] ryah_: in the GZIP case you'd be writing cleartext and reading compressed-text
[21:56] mikeal: does the ssl stream need to be readable at all?
[21:56] mikeal: you aren't going to pump the ssl stream to another stream
[21:56] StanAngeloff has joined the channel
[21:56] mikeal: you can't actually
[21:57] pquerna: why not?
[21:57] mikeal: you would pipe one stream to two different ssl streams
[21:57] mikeal: but the output from the ssl stream can only be received by one client
[21:58] mikeal: if you want the data going to it that is plain text to go to two places then just pipe the stream you are going to send to the ssl stream to two ssl streams
[21:58] Athox has joined the channel
[22:03] ryah_: mikeal: so, if i understand you correctly: ssl doesn't fit into the stream paradigm because it only has one receiver?
[22:03] mikeal: no, i think it's a writable stream
[22:03] mikeal: you write to it
[22:03] mikeal: and it handles sending that to the client you told it to
[22:03] mikeal: it's not readable
[22:04] mikeal: by other node streams or pipes
[22:04] Blackguard has joined the channel
[22:04] mikeal: oh no wait
[22:04] mikeal: i was thinking about the data that it's encrypted
[22:04] mikeal: ok
[22:05] mikeal: so, it's a stream
[22:05] mikeal: and it's only job is encrypt/decrypt data
[22:05] mikeal: for all data that is "read" from it is decrypted
[22:05] ryah_: i think SSL is a stream pair. you can write on both ends, recv 'data' events on both ends
[22:05] mikeal: and data that is written to it is send plain and encrypted by it
[22:07] ryah_: ideally we'd be able to eat our own dog food and tlsStream.enc.pipeDupex(socket)
[22:07] ryah_: (pipeDuplex = enc.pipe(socket) and socket.pipe(enc)
[22:08] mikeal: that's an idea
[22:08] mikeal: we might be getting too hung up on abstractions
[22:08] ryah_: yeah
[22:08] mikeal: i think to the user it needs to be one object
[22:08] ryah_: i retract what i said about gzip
[22:08] johngbrooks has joined the channel
[22:08] mikeal: and they can read and write to/from
[22:08] ryah_: maybe it shoul djust be a duplex strema
[22:09] mikeal: if internally it implements 4 streams that do different stuff, fine
[22:09] mikeal: if someone, for some reason, wants to see the encrypted bits they can hook in to the internals
[22:09] pquerna: fucking hell can someone write a scribe clone in node that is better please
[22:09] mikeal: whether those internals are a stream or not, i'll leave that to whoever implements it
[22:09] modular has joined the channel
[22:10] bradleymeck: pquerna which scribe?
[22:10] c4milo: the log server ? 
[22:10] c4milo: distribuited log server 
[22:10] pquerna: thats the one
[22:10] ryah_: var p = new crypto.Pair()
[22:11] ryah_: p.front.pipeDuplex(socket)
[22:11] ryah_: p.back.write('hello world')
[22:11] ryah_: ? :)
[22:11] mjr_: I wrote my own distributed log server in node, redis, and couchdb.  Hopefully I'll be able to release it at some point since it isn't core at all.
[22:11] sirevanhaas has joined the channel
[22:12] bradleymeck: mmm i got a large cluster computing manager thats almost done, might be able to set it up... but would be odd
[22:12] pquerna: ryah_: seems reasonable enough.
[22:13] ryah_: var g = new gzip.Stream()
[22:13] ryah_: g.write("compress me")
[22:13] ryah_: g.pipe(socket)
[22:13] twoism has joined the channel
[22:14] creationix: so does pipe send the data to the socket?
[22:14] grahamalot has joined the channel
[22:14] davidascher has joined the channel
[22:15] ryah_: creationix: http://github.com/ry/node/blob/6570cd99e51adb082d0e0076a1205cd867f4ce41/lib/stream.js#L10-55
[22:15] pquerna: creationix: yes, the gzip stream in this example would call write() on the socket it was pipe'd to
[22:15] creationix: nice, so this is an alternative to pump then?
[22:15] ryah_: creationix: pump is being renamed to pipe
[22:15] ryah_: methodized
[22:15] ryah_: if you will
[22:16] creationix: I like
[22:16] creationix: that way subclasses of Stream can inherit it right?
[22:16] ryah_: yeah
[22:17] bradleymeck: is utf8 completely compatible w/ null terminating (ie no nulls in the middle)
[22:17] nerdEd has joined the channel
[22:17] ryah_: bradleymeck: yes
[22:17] micheil: morning folks
[22:17] bradleymeck: thank god, just got worried
[22:17] tjholowaychuk: ACTION was always wondering why there was no abstract Stream
[22:17] tjholowaychuk: morning
[22:17] ryah_: micheil: morning
[22:18] creationix: micheil: is Friday looking to be a good day?
[22:20] TomsB_ has joined the channel
[22:20] ezmobius has joined the channel
[22:20] ryanfitz has joined the channel
[22:21] pquerna: ryah_: okay, if that pair() style api is what we want, i'll knock it out in a few after $production calms down.
[22:22] grahamalot has joined the channel
[22:23] Blackguard has joined the channel
[22:24] nsm has joined the channel
[22:24] pquerna: also giants game soon.
[22:24] pquerna: hmm.
[22:26] micheil: with the streams, why not just have the base stream, which is the single direction, make GZIP inherit from that, then have a dual direction stream, and have SSL inherit from that?
[22:26] diorahman has joined the channel
[22:26] micheil: creationix: yah, friday's looking good
[22:27] creationix: awesome :)
[22:29] jashkenas has joined the channel
[22:29] ysynopsis has joined the channel
[22:29] cnu has joined the channel
[22:30] genbit has joined the channel
[22:32] Tim_Smart has joined the channel
[22:33] Ori_P has joined the channel
[22:34] bradleymeck: ACTION waves his fists at the gods to have a dual inheritance scheme
[22:35] micheil: bradleymeck: I don't think the gods are waving back..
[22:35] bradleymeck: ACTION is an athiest anywho
[22:36] diorahman has joined the channel
[22:36] micheil: bradleymeck: same. :P
[22:36] micheil: well, rahter, I'm agnostic.
[22:36] bradleymeck: its easier to say atheist if you arent a specific religion
[22:37] johngbrooks has joined the channel
[22:37] bradleymeck: anywho, im off! see you all later
[22:37] bradleymeck has left the channel
[22:37] Aria has joined the channel
[22:38] mjr_: also, "agnostic" has changed meaning in technology.  Now it means, "I don't care what you believe, but you have to believe something"
[22:39] CIA-31: node: 03Ryan Dahl 07master * r3b861db 10/ (78 files in 11 dirs): Upgrade V8 to 2.5.1 - http://bit.ly/d4ElqK
[22:39] CIA-31: node: 03Ryan Dahl 07master * r174a3a9 10/ (16 files): Upgrade libev to 4.00 - http://bit.ly/bWdKGi
[22:39] mjr_: double deps upgrade
[22:40] nerdEd has joined the channel
[22:41] mikeal: werd
[22:41] mikeal: Joyent is sponsoring the food on wednesday
[22:41] mikeal: http://oakjs.com/
[22:41] ryah_: :)
[22:41] mikeal: doing dumplings from Shan Dong
[22:41] mikeal: fuck meetup pizza
[22:41] mikeal: :)
[22:43] mikeal: i'll make sure we has some vegetarian dumplings for you ryah_ :)
[22:44] deepthawtz has joined the channel
[22:45] micheil: ryah_: are we still wanting to rewrite the argv parser?
[22:45] micheil: ryah_: and do we still think that having a V8::IsFlag method would be good?
[22:45] mjr_: mikeal: bummed I can't make oak.js.  I want to represent.
[22:46] mjr_: But Hawaii is really nice.
[22:46] mikeal: haha
[22:46] mikeal: can't disagree with that :)
[22:46] ryah_: micheil: hm - yeah - did you ever figure out what the story is on windows with getopt?
[22:46] micheil: no I haven't had any luck there
[22:46] micheil: ryah_: I've been in exams since friday (last) so haven't really had a chance to look further in to it
[22:47] ryah_: micheil: it seems like that might be a problem
[22:48] ryah_: (what do options even look like on windows? :/)
[22:48] micheil: I'm thinking at the moment that maybe duplicating v8's flag parser would be the way to go
[22:48] micheil: ryah_: same on every other system, don't they?
[22:48] gf3 has joined the channel
[22:49] ryah_: micheil: yeah maybe - it would be nice to have some programmatic interface into v8's option parser
[22:49] ryah_: it's kind of crappy to just pass them a string
[22:49] ryah_: er option setting
[22:50] necrodearia has joined the channel
[22:50] ryah_: % ./node -e process.versions
[22:50] ryah_: { node: '0.3.0-pre',
[22:50] ryah_:   v8: '2.5.1',
[22:50] ryah_:   ares: '1.7.3',
[22:50] ryah_:   ev: '4.0' }
[22:50] micheil: mozilla is hardly standard.. https://developer.mozilla.org/En/Command_Line_Options
[22:50] mjr_: This -e business is pretty great
[22:51] micheil: ACTION doesn't know of -e... neat
[22:51] mikeal: don't get me started
[22:51] genbit has joined the channel
[22:51] tjholowaychuk: ryah_: was that you that snuck the console.log() in for --eval ?
[22:51] tjholowaychuk: im 99% it wasnt me lol
[22:51] mikeal: one some platforms is a bash script that starts a bin, on some it's not
[22:51] ryah_: tjholowaychuk: yes
[22:51] tjholowaychuk: ah k haha
[22:51] tjholowaychuk: im not insane
[22:51] mikeal: when it's a bash script it launches another process and you can't make it keep the groupid
[22:51] ryah_: :)
[22:51] mikeal: FF is terrible to launch
[22:51] micheil: oohh.. man I'm slow, -e short flag for --eval
[22:51] tjholowaychuk: maybe we should have a different flag, so that you can $ node --eval 'something' andLoadAModule.js
[22:52] tjholowaychuk: without "undefined" from console.log()
[22:52] Tim_Smart: micheil: http://github.com/Tim-Smart/node/compare/filter
[22:52] Tim_Smart: outgoing -> read
[22:53] micheil: k, I'll check it in a moment.
[22:53] bencc1 has joined the channel
[22:55] micheil: hmm.. I wonder if I can use my h4n to remove static from the radio..
[22:56] Gruni has joined the channel
[22:56] dnolen has joined the channel
[22:57] Tim_Smart: ryah_: Any thoughts on a filter API? http://github.com/Tim-Smart/node/compare/filter#diff-1
[22:58] sonnym has joined the channel
[22:59] ryah_: Tim_Smart: it doesn't leave room for modifying the data asyncly
[22:59] ryah_: Tim_Smart: e.g. gzip might fork out to a thread or process
[22:59] Tim_Smart: ryah_: I had that, but removed it
[22:59] Tim_Smart: gzip is usually a job for pipe
[23:00] ryah_: there are not so many situations where you'd want to modify it inline...
[23:00] ben_alman has joined the channel
[23:00] ryah_: stringencoding being one of them
[23:00] ryah_: gzip maybe another
[23:00] ryah_: but not ssl, for example
[23:00] Tim_Smart: I'll add it back in :)
[23:01] mikeal: this filter API seems really big
[23:01] mikeal: i also don't know if i understand it
[23:02] Tim_Smart: mikeal: Think duplex, and some filters require something different for incoming data and outgoing.
[23:02] Tim_Smart: I.e. SSL
[23:02] mikeal: which other one?
[23:03] Tim_Smart: Anything that requires encoding + decoding.
[23:03] Nohryb has joined the channel
[23:03] mikeal: wouldn't the purpose of that stream just be to do that encoding/decoding
[23:04] mikeal: wouldn't it just mutate it's writes to data events?
[23:04] creationix has joined the channel
[23:04] Tim_Smart: mikeal: Not if you can't modify the stream, e.g. a net.Stream
[23:04] mikecsh has joined the channel
[23:04] mikeal: waht?
[23:04] Tim_Smart: So it leaves the underlying stream un-touched, and you get a new interface.
[23:05] mikeal: the default stream interface doesn't allow mutation?
[23:05] Tim_Smart: It does, but its more we don't want mutation.
[23:05] mikeal: it's that mainly the point
[23:05] mikeal: isn't
[23:05] mikeal: most streams will mutate
[23:06] mikeal: or opt out of mutating because they aren't applicable
[23:06] mikeal: this is all getting really interfacey
[23:06] mikeal: we don't have to embed every use case in to the interface, that's what like code is for
[23:06] Tim_Smart: mikeal: OK. Say I had a read stream, and want to pipe to two write streams, each write stream has a different filter associated.
[23:07] mikeal: sure
[23:07] Tim_Smart: You can then attach two different filters to the read stream, and pipe them to the associated write stream.
[23:07] mikeal: i don't get why it's "associated", why isn't the filter logic part of the stream
[23:07] mikeal: wait a second
[23:07] stepheneb has joined the channel
[23:07] mikeal: when would you do that
[23:07] mikeal: the ordering of the mutations will matter
[23:08] mikeal: and the mutations may keep a buffer before they write
[23:08] mikeal: so what outgoing stream can take disjointed chunkes from two tilters in to the same write stream?
[23:08] siculars has joined the channel
[23:08] Tim_Smart: mikeal: Two different write streams...
[23:09] Tim_Smart: This allows for things like "I want to pipe the decrypted data to a gzip, and the raw stream to a dump file"
[23:09] mikeal: so readStream.pipe(filter1) filter1.pipe(writer1) readStream.pipe(filter2) fitler2.pipe(writer2)
[23:10] mikeal: but also none of this will work with the back pressure logic you actually want to have associated with the pipe chain
[23:10] mikeal: ok, then those are two seperate read streams
[23:10] mikeal: you don't need a "stream" and an associated other thing
[23:10] mikeal: just make them both streams and use pipe
[23:10] Tim_Smart: mikeal: new Filter(read).pipe(write1); new Filter(write).pipe(write2)
[23:10] themiddleman has joined the channel
[23:11] Tim_Smart: Sorry type-o in the second one.
[23:11] mikeal: i get it
[23:11] mikeal: i don't understand why
[23:11] mikeal: and i don't understand why there is so much code associated with that object
[23:12] mikeal: you've got like 80 lines of code for what is essentially a proxy stream with a cryptic interface for mutation
[23:12] Tim_Smart: mikeal: Most of the code is associated with the adding of multiple layers.
[23:12] mikeal: so, those layers all break on back pressue
[23:12] mikeal: that's why none of this is actually going to work
[23:12] genbit has joined the channel
[23:12] Tim_Smart: mikeal: Layers inside a filter.
[23:12] mikeal: what you really want to have is 
[23:12] synthomat: wohooo, i made a little auth-wrapper for express :)
[23:12] synthomat: just a concept
[23:13] norviller has joined the channel
[23:13] [[zz]] has joined the channel
[23:13] mikeal: readStream().pipe([filter1, filter2], {requireAllDrain:false})
[23:13] synthomat: http://pastie.org/1239474
[23:13] synthomat: if somebody wants to have a look :)
[23:13] mikeal: Tim_Smart: i'm still not really getting the purpose of the layers
[23:14] Tim_Smart: mikeal: Not the pipe()able layers, the internal layers.
[23:14] mikeal: yeah, i don't understand what they are used for
[23:15] mikew3c_ has joined the channel
[23:15] tjholowaychuk: synthomat: we have route middleware for that, you dont need to have app.checkAuth().get() you can do app.get('/', checkAuth, ..)
[23:15] Tim_Smart: Modifying write() calls is out of the question, is why I didn't integrate it into pipe()
[23:15] tjholowaychuk: etc
[23:15] synthomat: reload
[23:15] synthomat: gnargh :D
[23:15] tjholowaychuk: and the authorized global == bad
[23:15] blaines has joined the channel
[23:15] tjholowaychuk: very bad lol
[23:16] mikeal: you modify data between your write call and the data event
[23:16] synthomat: tjholowaychuk: i know, globals are a no go :D
[23:16] synthomat: its just a concept ;-)
[23:16] tjholowaychuk: ah
[23:16] synthomat: didnt know about other methods
[23:16] tjholowaychuk: its not bad cuz its global, its bad cuz it will give everyone access :p
[23:16] Tim_Smart: mikeal: Which will require mutating the event listeners.
[23:16] synthomat: hehe
[23:16] mikeal: Tim_Smart: a stream author should implement their own write method
[23:17] Tim_Smart: mikeal: No, we aren't talking about stream authors though, we are talking about filter authors.
[23:17] mikeal: yeah, i'm not making a distinction
[23:17] mikeal: i'm saying everyone implements the same interface
[23:18] mikeal: because it's not hard, and fairly simple
[23:18] Tim_Smart: They get handed a stream, and want to mutate the data, while keeping the stream intact.
[23:18] mikeal: dude
[23:18] mikeal: you aren't listening
[23:18] synthomat: tjholowaychuk: a okay, you pass multiple callbacks to .get(...) then you can switch to the next callback by calling next() ?
[23:18] mikeal: you want to mutate data, you implement a stream
[23:18] mikeal: you get data from wherever and mutate it before your data event
[23:18] Tim_Smart: Then pipe this mutation to another stream.
[23:18] mikeal: the pipes push data from one stream to another
[23:19] mikeal: pipes send data events to write methods
[23:19] tjholowaychuk: synthomat: the functions < fn.length -1 are middleware
[23:19] mikeal: you aren't modifying "the original stream" you're modifying the data send you your write method
[23:19] tjholowaychuk: that apply to that specific route only
[23:19] mikeal: which you essentially own
[23:19] Tim_Smart: mikeal: Ah, but then how do you handle duplex.
[23:19] mikeal: do, duplex is an edge case
[23:19] synthomat: okay
[23:19] mikeal: so, duplex is an edge case
[23:19] mikeal: really, it is
[23:19] synthomat: will give it a look
[23:20] synthomat: eh have a look at it ^^
[23:20] mikeal: and we can handle that by using two internal stream abstractions for the duplexing
[23:20] Tim_Smart: mikeal: Anything that requires encryption / decryption to TCP is an edge case then.
[23:20] Tim_Smart: Which is the main use for filters.
[23:20] mikeal: so, that is one stream object
[23:20] mikeal: and we can solve the duplex problem for that stream
[23:20] mikeal: other streams that do the same thing are going to be rare
[23:20] mikeal: using that stream may not be rare
[23:20] richcollins has joined the channel
[23:21] mikeal: you're creating an API for people to implement SSL in, but there is one of those :)
[23:21] mikeal: most people are not implementing SSL
[23:21] mikeal: most people are writing a template API
[23:21] rnewson has joined the channel
[23:21] mikeal: or a compressor
[23:22] mikeal: or some logic that turns SQL responses in to JSON objects that are then converted by user code to HTML
[23:22] mikeal: they need a simple API for creating streams and mutating data, probably writing their own APIs in between the write() method and the data event
[23:23] mikeal: implementing SSL we do once, *maybe* twice
[23:23] Tim_Smart: Intercepting 'data' events is a little tricky. You have to remap all the listeners.
[23:23] mikeal: "intercepting"
[23:23] mikeal: no, you don't
[23:24] mikeal: pipe sends them to your write method
[23:24] synthomat: tjholowaychuk: next(new Error('Unauthorized')); <- will this be catched by app.error() ?
[23:24] mikeal: there is only one write method
[23:24] mikeal: once you call the data event it's not your responsibility anymore
[23:24] synthomat: or by the next middleware / callback in the param-list?
[23:24] micheil: mikeal: I still think a saner approach for SSL so to have a SecureReadStream and SecureWriteStream'
[23:24] tjholowaychuk: synthomat: yup
[23:24] synthomat: k
[23:24] tjholowaychuk: synthomat: only middleware with an arity of 4
[23:24] tjholowaychuk: are error handlers
[23:25] mikeal: SSL is a beast and we can figure it out, but it's dissimilar to most other use cases for streams 
[23:25] stepheneb has joined the channel
[23:25] MiiCode2 has joined the channel
[23:25] mjr_: Current streams seem kinda good for everything except SSL\
[23:25] paulr has joined the channel
[23:26] mikeal: i don't know how we got on this train where we think the complications in SSL are indicative of a ton of other use cases
[23:26] omygawshkenas has joined the channel
[23:26] mikeal: most people who write a stream are going to setup their own APIs for handing the data and turning it in to something useful to be written in between
[23:27] mikeal: they won't map all of those in-between APIs to the stream interface, they'll be domain specific
[23:27] Tim_Smart: mikeal: Well any decryption / encryption model is SSL-like.
[23:27] lianj: mikeal: eventmachine does ssl well enough, and they dont need to do a big job. i thought node.js supported ssl from day one
[23:27] mikeal: with SSL we want them to map directly to the stream interface because we expect to pipe that data directly to another stream
[23:28] mikeal: lianj: 1) ssl is mostly broken in node 2) eventmachine doesn't handle back pressure the way node does so it's API is going to differ greatly
[23:28] drudge: tjholowaychuk: wow, some drastic mongoose changes :P
[23:28] tjholowaychuk: drudge: :p
[23:28] drudge: tjholowaychuk: so far looks much cleaner
[23:28] tjholowaychuk: drudge: in 1.0 ?
[23:28] lianj: mikeal: thanks
[23:29] drudge: yeah
[23:29] ben_alman has joined the channel
[23:29] jherdman has joined the channel
[23:29] hassox has joined the channel
[23:29] tjholowaychuk: drudge: take it you didnt check it out before? i like nathan's new schema builder
[23:29] tjholowaychuk: really cool
[23:29] tjholowaychuk: pluggable
[23:29] tjholowaychuk: just helping out with some things
[23:29] ben_alman has joined the channel
[23:29] mikeal: alright, i gotta go to the store
[23:29] drudge: this is the first i've seen in the 1.0 branch
[23:29] mikeal: i'll do a big ass email later if i get a chance
[23:29] mtodd_ has joined the channel
[23:30] Tim_Smart: mikeal: OK say you wanted a generic JSON filter you could throw around in your code base. You would need to decode incoming data, and encode outgoing.
[23:30] mikeal: Tim_Smart: the JSON filter probably doesn't emit data events
[23:30] Tim_Smart: But maybe you wanted to use the raw text stream at the same time.
[23:30] mikeal: ever
[23:31] drudge: tjholowaychuk: defining a model before was a bit verbose, this looks great
[23:31] tjholowaychuk: yeah this one way dominates
[23:31] mikeal: it emits a different event for those JSON objects and user code takes that data, does something with it, and writes it to some other stream
[23:31] mikeal: so it can just be a writable stream that isn't readable
[23:32] mikeal: which is why it's different than the SSL duplex problem where we want all these extra data seperated and directly pipable
[23:32] mikeal: pipeable
[23:33] rpflo has joined the channel
[23:33] tjholowaychuk: drudge: nathan started some cool doc generation stuff too
[23:33] tjholowaychuk: for your schemas
[23:33] tjholowaychuk: generates markdown/html docs
[23:33] drudge: where is that at?
[23:33] mikeal: ok, going to the store
[23:33] tjholowaychuk: examples/documentation.js
[23:34] tjholowaychuk: I might add .dot support sometime
[23:35] genbit has joined the channel
[23:38] sprout has joined the channel
[23:38] drudge: someone needs to make a good gui for mongo
[23:40] ashleydev has joined the channel
[23:40] TheEmpath: does trying to grab elements from an array with number-like strings get casted to an int?  a = new Array(); a['1'] = 'moo'; log(a['1']);
[23:40] micheil: ryah_: hmm.. http://www.opensource.apple.com/source/Kerberos/Kerberos-47/KerberosFramework/Kerberos5/Sources/util/windows/getopt_long.c
[23:40] TheEmpath: is that no different than a[1]?
[23:41] TheEmpath: cuz i think i hit a trouble spot :(
[23:41] ooooPsss has joined the channel
[23:41] Me1000 has joined the channel
[23:42] micheil: a["1"] != a[1]
[23:42] TheEmpath: basically, i dont want my array to adjust the index automatically based on the length.
[23:42] MikhX has joined the channel
[23:42] micheil: a["1"] is like obj["1"]
[23:43] TheEmpath: but if i look for a['4'] it iwll look for the 5th element of the array, not the element indexed with '4'
[23:44] tjholowaychuk: drudge: whats wrong with the shell?
[23:44] tjholowaychuk: its pretty sweet
[23:44] drudge: oh i love the shell, but you know, sometimes i want to just poke
[23:45] drudge: without all the typing :)
[23:45] TheEmpath: now that is very confusing... v8 verifies it, but my script doesnt
[23:46] drudge: going to give futon4mongo a shot
[23:47] drudge: tjholowaychuk: who am i kidding, i'm just looking for an excuse to write a mac app
[23:48] tjholowaychuk: ah :)
[23:48] tjholowaychuk: good call
[23:48] tjholowaychuk: ill beta test!
[23:48] tjholowaychuk: haha
[23:48] drudge: haha nice
[23:49] TheEmpath: well ive definitely hit a case where strings for array ids get treated like ints
[23:49] TheEmpath: because when i add a + "_id" to it, my index mapping works
[23:49] drudge: submitted my first iOS app powered by our mongo/express powered backend
[23:49] sivy has joined the channel
[23:49] TheEmpath: lemme see if i can duplicate it independantly
[23:55] charlenopires has joined the channel
[23:58] softdrink has joined the channel
[23:58] MikhX has joined the channel
[23:58] tg has joined the channel
[23:59] tilgovi has joined the channel
