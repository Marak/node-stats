[00:03] <deanlandolt> JimBastard: thanks...i already jumped on the io train a year ago...haven't done anything with it but now i have to renew and i was hoping i could do better than 100/year :-/
[00:03] <JimBastard> whats your io?
[00:03] <JimBastard> dean.io?
[00:03] <JimBastard> if not im buying that
[00:06] <deanlandolt> heh...go ahead and waste 100 bucks...no, it's bl.io
[00:06] <_ry> sweet.. got the default 'error' handler working
[00:06] <_ry> ACTION loves errors
[00:06] <_ry> this is going to make node like 100% better
[00:07] <mjr_> That's a lot of percents.
[00:07] <maushu> 100/year? What.
[00:07] <_ry> it's also breaking tests
[00:07] <deanlandolt> maushu: yeah, .io domains are a bit on the pricey side
[00:07] <_ry> which is to say, discovering broken parts of tests
[00:08] <maushu> It's $50 after first year.
[00:08] <deanlandolt> i thought it was worth it because i wanted bi.bl.io for a big authority database...one place to point to reference specific concepts
[00:08] <mjr_> what's the default error handler?  Different than for uncaught exceptions?
[00:08] <_ry> mjr_: if you don't listen for 'error' it throws
[00:08] <deanlandolt> maushu: oh? i hadn't looked...thanks for the heads up -- that doesn't hurt as bad
[00:08] <_ry> i.e. unhandled errors kill the program
[00:08] <RayMorgan> _ry: yay!
[00:13] <mjr_> Yeah, that silent error thing has bothered me for a while.  Glad it's getting fixed.
[00:15] lifo has joined the channel
[00:23] <CIA-77> node: 03Ryan Dahl 07master * r6abdf05 10/ (6 files in 3 dirs): 
[00:23] <CIA-77> node: Unhandled 'error' events kill program
[00:23] <CIA-77> node: By default 'error' throws. addListener to prevent this. - http://bit.ly/a0LFPL
[00:23] <_ry> ^-- okay hopefully that doesn't break everyone
[00:23] <_ry> it's good practice
[00:24] dnolen has joined the channel
[00:26] joshholt_ has joined the channel
[00:28] captainbenis has joined the channel
[00:30] mattly has joined the channel
[00:30] lifo has joined the channel
[00:31] <CIA-77> node: 03Ryan Dahl 07master * r0633e5c 10/ lib/events.js : Optimize for few args in EventEmitter.emit - http://bit.ly/d6U7fl
[00:34] ssteinerX has joined the channel
[00:37] <konobi> is bentomas on IRC?
[00:39] tekky has joined the channel
[00:46] <_ry> konobi: sometimes
[00:52] steadicat has joined the channel
[00:53] <CIA-77> node: 03Ryan Dahl 07master * rc9e27b1 10/ (8 files): Unify ErrnoException creation - http://bit.ly/aYMeyt
[00:59] <_ry> so i've almost removed src/node_events.cc now
[01:00] ithinkihaveacat_ has joined the channel
[01:00] <_ry> i wonder if tehre is a C++ wizard floating about who wants to help abstract some stuff...
[01:04] isaacs_ has joined the channel
[01:07] <Ned__> is there anything like printf/sprintf for node ?
[01:10] <kriskowal> Ned__ you can get it from narwhal-lib
[01:10] <kriskowal> works fine on node
[01:10] <kriskowal> http://github.com/kriskowal/narwhal-lib/blob/narwhal-lib/lib/printf.js
[01:10] <Ned__> righto, ta :-)
[01:11] <kriskowal> printf doesn't, but sprintf will without alteration
[01:11] <Ned__> cool
[01:13] <blazzy_> node seems to have some const issues with the latest openssl.
[01:20] zackattack has joined the channel
[01:22] pedro has joined the channel
[01:27] <blazzy_> just adding const will probably break it for older versions :/
[01:29] ditesh|cassini has joined the channel
[01:30] <blazzy_> can someone tell me what the signature of SSL_CTX_new looks like on their system?
[01:34] quirkey has joined the channel
[01:38] zackattack has joined the channel
[01:40] <blazzy_> damn it's not what I hoped it would be.
[01:42] ncb000gt has joined the channel
[01:42] towski has joined the channel
[01:51] tlrobinson_ has joined the channel
[01:54] stepheneb has joined the channel
[01:54] isaacs has joined the channel
[01:57] whoahbot has joined the channel
[02:00] whoahbot has joined the channel
[02:13] joshbuddy has joined the channel
[02:16] <ncb000gt> _ry: you around?
[02:19] quirkey has joined the channel
[02:23] bpot has joined the channel
[02:23] isaacs has joined the channel
[02:42] saikat has joined the channel
[02:47] micheil has joined the channel
[02:50] Aria has joined the channel
[02:56] joshbuddy has joined the channel
[02:56] tlrobinson_ has joined the channel
[02:58] silentrob has joined the channel
[02:59] softdrink has joined the channel
[03:05] JimBastard has joined the channel
[03:08] <micheil> is JimBastard.
[03:08] <JimBastard> sup
[03:28] PyroPete1 has joined the channel
[03:33] icey has joined the channel
[03:45] Yuffster has joined the channel
[03:49] tekky has joined the channel
[03:50] fizx has joined the channel
[03:51] fizx has joined the channel
[03:54] ncb000gt has left the channel
[04:04] dnolen has joined the channel
[04:08] kriskowal has joined the channel
[04:13] zaach has joined the channel
[04:14] micheil has joined the channel
[04:30] fictorial has joined the channel
[04:33] <fictorial> Error: ESPIPE, Illegal seek for /proc/$pid/smaps - weird
[04:38] nsm has joined the channel
[04:40] silentrob has joined the channel
[04:41] <brainproxy> when I json.stringify a hash with node, and then later do the equivalent with ruby, the two end up different; the ruby output has escaped double quotes
[04:41] <brainproxy> and I think this is causing me some problems
[04:41] <brainproxy> anyone seen this?
[04:41] <micheil> hmm.. odd
[04:42] <brainproxy> flow here is like this:
[04:42] <brainproxy> json.stringify, redis client used to move the val from node to redis
[04:42] <brainproxy> ruby pulls it off
[04:43] <brainproxy> some magic happens, and a similar string is supposed to be put back into redis
[04:43] <brainproxy> but when I manually pop stuff off some lists in redis; i see the stuff coming from node looks different than the stuff coming from ruby
[04:44] <micheil> what do you get in each?
[04:44] <brainproxy> i think this is then causing node to barf on those values when they're pulled out of redis once again and hit w/ a json.parse function
[04:44] <micheil> "{\"test\":\"test\"}"
[04:44] <micheil> (via ruby)
[04:44] <brainproxy> yeah, like that when ruby works it
[04:44] <brainproxy> without backslashes when node works with it
[04:44] <micheil> '{"test":"test"}'
[04:45] <micheil> which are both the same thing
[04:45] <brainproxy> okay, then maybe it's something else causing the node barf
[04:45] <micheil> node is simply using an alternative string delimeter
[04:45] <brainproxy> when node hits the values with json.parse, it comes to a halt
[04:45] <brainproxy> callaback error reported
[04:46] <brainproxy> it's odd and I'm (obviously) struggling to figure out what exactly is going on
[04:47] <micheil> node> JSON.parse("{\"test\":\"test\"}") => { test: 'test' }
[04:47] <micheil> works fine for me.
[04:47] <brainproxy> hmm, yes, I've seen it work in very simple contexts too, just testing
[04:47] <micheil> are you using json.parse or JSON.parse
[04:47] <brainproxy> but when it's called within some other things
[04:47] <brainproxy> oh, i think JSON.parse
[04:48] <micheil> check.
[04:48] <brainproxy> uppercase
[04:48] <micheil> because that may be your error
[04:48] <brainproxy> just checked
[04:48] <micheil> okay.. odd
[04:48] <micheil> is the code on github?
[04:48] <brainproxy> i can do a gist, just a sec
[04:48] <micheil> k
[04:49] <brainproxy> https://gist.github.com/ab5833685470b059ac24
[04:50] <brainproxy> I was able to make something similar work with eval a few days ago
[04:50] <brainproxy> but I was trying to do it properly
[04:50] <brainproxy> with the JSON stuff
[04:51] bpot has joined the channel
[04:51] quirkey has joined the channel
[04:52] <micheil> why are you doing JSON.parse only to re-stringify?
[04:53] <brainproxy> sorry, i just copied from a recent mess around version, i was grasping at straws and testing something
[04:53] <brainproxy> having it like that made it symmetric with something else
[04:54] <micheil> what's the error you actually get?
[04:54] softdrink has joined the channel
[04:54] <brainproxy> i'm firing it all up now
[04:54] <brainproxy> just a sec
[04:57] <brainproxy> IOWatcher.callback (net:329:16)
[04:57] <brainproxy> node.js:814:9
[04:57] <brainproxy> thar 'tis
[04:58] <micheil> hmm..
[04:58] <fictorial> that's usually an unhandled exception in my experience
[04:58] <fictorial> something is throwing from within a callback and it's ending up in the ether
[04:58] <fictorial> I haven't been able to pinpoint it though
[04:58] <micheil> brainproxy: is this on HEAD?
[04:59] <brainproxy> no, 1.9.0 and 1.9.1
[04:59] <brainproxy> using nvm
[04:59] <micheil> oh
[04:59] <brainproxy> I can try head too
[04:59] <brainproxy> but last time I tried, didn't make a diff
[04:59] <fictorial> let me know if I can help with anything about my redis client - g'night though!
[04:59] <brainproxy> I had moved on to other things in the last couple of days, but now having to get past this...
[05:00] <micheil> hmm.. in 0.1.91 it's this.fd = null;
[05:00] <brainproxy> tanks, fictorial 
[05:00] <micheil> and in 0.1.90 it's the emitter for the data on a network stream
[05:00] <brainproxy> let me see if I get the exact same error
[05:01] <brainproxy> yah, same error exactly with either
[05:01] <brainproxy> let me use head
[05:02] <brainproxy> ohh... must compile :)
[05:02] joshholt_ has joined the channel
[05:03] <brainproxy> crap nvm's tossing an install error and I don't have it installed for root
[05:04] <brainproxy> anyone know quick fix for that; nvm head compile wants to stick something in /usr/local.....
[05:04] <brainproxy> oh may be reading that wrong
[05:04] <softdrink> â€¦whyyyyyyy did i not try zshell earlier?
[05:06] <brainproxy> w/ HEAD I get:
[05:06] <brainproxy> IOWatcher.callback (net:353:16)
[05:06] <brainproxy> node.js:748:9
[05:08] RayMorgan has joined the channel
[05:09] bolson has joined the channel
[05:10] bolson has left the channel
[05:10] bolson has joined the channel
[05:11] rtomayko has joined the channel
[05:23] <brainproxy> yeah, as long as I keep that JSON.parse out of there, it all works like a hose
[05:29] sudoer has joined the channel
[05:33] sveimac has joined the channel
[05:39] nsm has joined the channel
[05:48] <creationix> brainproxy: which version of nvm are you using?
[05:49] JimBastard has joined the channel
[05:49] <brainproxy> hmm, not sure, recent; i just did a git pull though and it brought in about 112 changes
[05:51] <brainproxy> i've got to crash .. I'll get back to it tomorrow; thanks for the input :)
[05:55] whoahbot has joined the channel
[06:21] dgathright has joined the channel
[06:32] kjeldahl has joined the channel
[06:35] dgathright_ has joined the channel
[06:44] markwubben has joined the channel
[06:47] sh1m has joined the channel
[06:49] hassox has joined the channel
[06:50] teemow has joined the channel
[06:51] javajunky has joined the channel
[06:53] fizx has joined the channel
[06:53] fizx has joined the channel
[06:55] dgathright has joined the channel
[06:59] <creationix> brainproxy: I mean, are using my version or visionmedia's version, they work very different
[06:59] <creationix> anyway I'm off to bed as well
[07:18] <tlrobinson> who runs ElusiveHippo.com?
[07:20] kixxauth has joined the channel
[07:21] teemow has joined the channel
[07:23] admc has joined the channel
[07:24] tlrobinson_ has joined the channel
[07:24] felixge has joined the channel
[07:24] felixge has joined the channel
[07:47] kixxauth has joined the channel
[08:08] felixge has joined the channel
[08:08] felixge has joined the channel
[08:09] ewdafa has joined the channel
[08:10] <micheil> felixge: hey, do you know if by using defineProperty or similar if you can create a method missing style function?
[08:10] <micheil> or an array accessor thing?
[08:10] javajunky has joined the channel
[08:11] <micheil> (eg, ruby style, def []; ... end;  MyClass[key] = value)
[08:11] <micheil> or MyClass[key](args)
[08:13] piranha has joined the channel
[08:13] FoxFurry1 has joined the channel
[08:14] <felixge> micheil: no, you can't
[08:14] <felixge> v8 does not implement: 'no_such_method'
[08:14] <micheil> hmm.. okay
[08:15] <micheil> ACTION is looking over the new stuff for pusherapp, and trying to figure out the implementation details
[08:15] <micheil> which base64, md5, and HMACSHA256 libraries would you recommend?
[08:31] tbassetto has joined the channel
[08:35] xla has joined the channel
[08:43] TomY has joined the channel
[08:44] xla has joined the channel
[08:46] N` has joined the channel
[09:02] cmlenz has joined the channel
[09:18] dgathright has joined the channel
[09:19] towski has joined the channel
[09:30] botanicus has joined the channel
[09:47] rtomayko has joined the channel
[09:47] squeeks_ has joined the channel
[09:47] squeeks_ has left the channel
[09:55] hellp has joined the channel
[10:18] herbySk has joined the channel
[10:21] zackattack has joined the channel
[10:21] derbumi has joined the channel
[10:22] javajunky has joined the channel
[10:32] saikat has joined the channel
[10:39] malkomalko has joined the channel
[10:39] maushu has joined the channel
[10:40] <maushu> Soooo... anyone knows anymore frameworks like sammy.js?
[10:55] CodeOfficer has joined the channel
[11:00] ssteinerX has joined the channel
[11:01] maritz has joined the channel
[11:16] jamesduncan has joined the channel
[11:58] <tbassetto> Is it just me or the ^HEAD doesn't compile? After a recent "git pull" I couldn't do "make clean" or "make" anymore. I get "cannot find config.h"
[12:09] <herbySk> Don't someone know how to force architecture not to be x86 but x86_64? is there some env variable or something to do it without chenging the files?
[12:16] micheil has joined the channel
[12:36] Gruni has joined the channel
[12:48] rolfb has joined the channel
[13:09] zackattack has joined the channel
[13:13] gwoo has joined the channel
[13:14] micheil has joined the channel
[13:18] quirkey has joined the channel
[13:40] jherdman has joined the channel
[13:45] dnolen has joined the channel
[13:55] pjb3 has joined the channel
[14:02] gf3 has joined the channel
[14:05] joshbuddy has joined the channel
[14:05] joshbuddy has joined the channel
[14:06] jedschmidt has joined the channel
[14:09] piranha has left the channel
[14:12] sudoer has joined the channel
[14:14] dnolen has joined the channel
[14:21] <fictorial> brainproxy: try to see what the typeof the value you are sending to JSON.parse.  Is it instanceof Buffer by any chance?
[14:21] Yuffster has joined the channel
[14:22] nsm has joined the channel
[14:31] stepheneb has joined the channel
[14:32] softdrink has joined the channel
[14:33] creationix has joined the channel
[14:35] JAAulde has joined the channel
[14:38] <fictorial> anyone have a clue why I cannot read /proc/X/smaps using Node?  http://gist.github.com/376596
[14:38] <fictorial> _ry: ---^
[14:52] <fictorial> weird, I can read that file with python, perl, and even cli 'cat'
[14:52] tek has joined the channel
[14:58] steadicat has joined the channel
[15:06] softdrink has joined the channel
[15:10] alex-desktop has joined the channel
[15:11] stepheneb has joined the channel
[15:14] kriskowal has joined the channel
[15:19] nsm has joined the channel
[15:19] zackattack has joined the channel
[15:20] ditesh|cassini has joined the channel
[15:24] indexzero has joined the channel
[15:27] silentrob has joined the channel
[15:28] rektide has joined the channel
[15:28] <fictorial> patched (same gist)
[15:30] nefD has joined the channel
[15:31] idoru has joined the channel
[15:32] <fictorial> _ry: sent pull request; check it out - thanks
[15:34] Nohryb has joined the channel
[15:38] charlesjolley has joined the channel
[15:43] devinus has joined the channel
[15:45] pdelgallego has joined the channel
[15:47] <nefD> blargh.. i need a way of converting html special character codes (ie: &lt; becomes <) in a string from within node
[15:47] <nefD> was hoping to avoid having to manually do so myself :P
[15:49] sh1mmer has joined the channel
[15:50] RayMorgan has joined the channel
[15:52] joshbuddy has joined the channel
[15:52] <nefD> hmm phpjs might be a good fit
[16:08] hsuh has joined the channel
[16:10] tekky has joined the channel
[16:11] <inimino> ew :(
[16:14] zackattack has joined the channel
[16:15] bpot has joined the channel
[16:15] jaw6 has joined the channel
[16:18] silentrob has joined the channel
[16:20] nsm has joined the channel
[16:21] sveimac has joined the channel
[16:21] trochala has joined the channel
[16:22] Nohryb has joined the channel
[16:23] ahc has joined the channel
[16:23] jedschmidt has joined the channel
[16:24] <trochala> Hello, the docs about `writeStream.write(data)` mention a callback parameter but the signature says only data is accepted
[16:30] joshbuddy has joined the channel
[16:30] joshbuddy has joined the channel
[16:33] jaw6 has joined the channel
[16:37] <fictorial> hey guys - I'm constructing a sandbox for node since it really has all the pieces of the puzzle to do so.  I'm just putting them together.  
[16:37] drhodes has joined the channel
[16:37] <fictorial> One of the things I want to assert is that untrusted code does not use too much RAM.
[16:37] <fictorial> how would you as the user of the sandbox expect to be able to twiddle that knob?
[16:38] <fictorial> "do not allow more than X KB RSS?"  "do not allow more than 10% of available RAM to be used?"
[16:38] <fictorial> here's a sample script I am using on linux to find these values BTW: http://gist.github.com/376770
[16:38] isaacs has joined the channel
[16:44] indiefan has joined the channel
[16:45] Nohryb has joined the channel
[16:46] <MattJ> fictorial: fixed value
[16:46] <MattJ> the application can calculate what 10% is if it needs to :)
[16:46] <fictorial> heh
[16:47] <fictorial> perhaps I should just allow both? 
[16:47] <MattJ> Is there a compelling reason to?
[16:48] <fictorial> it's hard to pin down a fixed value that would make sense given unknown v8 overhead, state of GC.  If your app picked 8 MB as the kill switch value that might be fine on one server but not on another.
[16:49] lifo has joined the channel
[16:49] <fictorial> add a feature or two in the child worker and your kill switch number is thrown off as well.  that's why I am fishing for comments though
[16:50] <MattJ> But then sometimes the same code is going to fail, and sometimes it won't
[16:50] derbumi has joined the channel
[16:51] <fictorial> hmmm
[16:51] <nefD> blargh. having trouble attaching and running an event on an httpRequest object once all data has been received..
[16:52] <fictorial> is the GC completely deterministic?  if I sampled the memory usage (RSS) of a script for 20 seconds say 100 times in a row, would it have the same footprint each time for each sample?  If not, then the code will fail sometimes when using an absolute value as well.
[16:52] <fictorial> s/times/runs/
[16:53] <nefD> AH! nevermind.. PEBKAC strikes again
[16:55] <fictorial> MattJ: thanks for the input.  I will at least start with both options - if there's a consensus that percentage is dumb, then I will remove it.
[16:55] <inimino> fictorial: I'd do a percentage
[16:55] <fictorial> ok both it is - 
[16:57] <fictorial> BTW if anyone has anyway of finding out the memory usage on OS X of *another* process from node (note: not process.memoryUsage) I'd be forever grateful
[16:59] botanicu_ has joined the channel
[17:01] hellp has joined the channel
[17:02] <_ry> hello
[17:02] <nefD> allo
[17:06] <jedschmidt> alo
[17:07] kriskowal has joined the channel
[17:09] fizx has joined the channel
[17:11] zackattack has joined the channel
[17:16] mjr_ has joined the channel
[17:16] fizx has joined the channel
[17:16] steadicat has joined the channel
[17:16] towski has joined the channel
[17:25] charlesjolley has joined the channel
[17:25] towski_ has joined the channel
[17:29] N` has joined the channel
[17:31] malkomalko has joined the channel
[17:33] <Nohryb> fictorial: top -l 1 -F -stats vsize -pid 64254 | grep PhysMem
[17:35] rictic has joined the channel
[17:35] <fictorial> Nohryb: thanks but that shows global stats on OS X.  I was looking for per-process.  Also, I was kind of hoping to not have to exec a process to find that out.  It might not be possible with Node now but that's ok.
[17:37] zackattack has joined the channel
[17:40] <mjr_> You want an OSX syscall to check your RSS?
[17:41] <_ry> it doesn't already have one?!
[17:41] steadicat has joined the channel
[17:41] <_ry> god. apple and their minimalism.
[17:41] <mjr_> No, there is one.  I can't remember it off-hand, but I've used it before.
[17:42] <_ry> herbySk: ping
[17:42] <_ry> herbySk: is it okay if i send v8 that patch? or do you want to do it?
[17:43] <CIA-77> node: 03Brian Hammond 07master * r40820ec 10/ lib/fs.js : Leave pos as undefined to allow reads from unseekable files like /proc/x/smaps on Linux - http://bit.ly/daL8Ki
[17:43] <_ry> fictorial: thanks
[17:43] <fictorial> _ry: great, thanks
[17:44] tlrobinson_ has joined the channel
[17:45] rvanrooy_ has joined the channel
[17:46] brianmario has joined the channel
[17:47] derbumi has joined the channel
[17:50] pjb3 has joined the channel
[17:51] joshbuddy has joined the channel
[17:51] joshbuddy has joined the channel
[17:51] <rvanrooy_> hi all, anyone using node with websockets?
[17:53] <CIA-77> node: 03Krishna Rajendran 07master * r7a34afb 10/ src/node_crypto.cc : openssl 1.0.0 constification - http://bit.ly/c5tfrL
[17:55] stephenlb has joined the channel
[17:57] jedschmidt has joined the channel
[17:58] <herbySk> _ry: ok
[18:00] indiefan has joined the channel
[18:01] shoeman22 has joined the channel
[18:02] shoeman226 has joined the channel
[18:03] <_ry> herbySk: re EPIPE
[18:03] <_ry> herbySk: there should probably be a try-catch around write() in net.js
[18:03] <_ry> well
[18:04] <_ry> EPIPE actually should be sent as an 'error' i think
[18:08] steadicat has joined the channel
[18:08] <shoeman226> hello, is there a clean way to access a method you're overwriting from the new method you're in?  Kind of like parent or super?
[18:09] <shoeman226> I know I can do var old_method = JSON.stringify;  JSON.stringify = function(obj) {... return old_method(obj); }  but is there a better way to do it?
[18:10] <mjr_> shoeman226: that's how I'd do it.
[18:12] zackattack has joined the channel
[18:14] <shoeman226> hmm, ok that's kind of what I'm thinking too...I'm using node.js to learn functional programming, so I'm trying to avoid side effects as much as possible, so I was just curious if there was a better way to do it, thanks
[18:15] jedschmidt has joined the channel
[18:16] charlesjolley has joined the channel
[18:16] WALoeIII has joined the channel
[18:17] mattly has joined the channel
[18:20] <Nohryb> fictorial: there's OSErr GetProcessInformation (
[18:20] <Nohryb>    const file:///Developer/Documentation/DocSets/com.apple.adc.documentation.AppleSnowLeopard.CoreReference.docset/Contents/Resources/Documents/documentation/Carbon/Reference/Process_Manager/Reference/reference.html#//apple_ref/doc/c_ref/ProcessSerialNumber *PSN,
[18:20] <Nohryb>    file:///Developer/Documentation/DocSets/com.apple.adc.documentation.AppleSnowLeopard.CoreReference.docset/Contents/Resources/Documents/documentation/Carbon/Reference/Process_Manager/Reference/reference.html#//apple_ref/doc/c_ref/ProcessInfoRec *info
[18:20] <Nohryb> );
[18:20] <mjr_> Let me just fetch that URL from your filesystem.
[18:20] <Nohryb> but it's a carbon api :-(
[18:21] <fictorial> Nohryb: That's not going to be in Node.js :)
[18:21] <fictorial> mjr_: :)
[18:21] <fictorial> I was half-looking for the OS X equivalent of /proc on Linux
[18:28] maushu has joined the channel
[18:28] noonat has joined the channel
[18:33] kixxauth has joined the channel
[18:34] okito has joined the channel
[18:35] okito has joined the channel
[18:36] alexiskander has joined the channel
[18:46] aconbere has joined the channel
[18:47] <aconbere> I'm reading through the FS and Path api's wondering what the best way to walk through a FS tree is.
[18:47] <aconbere> my normal set of tools for something like this (.isDir, etc.) are missing :)
[18:47] <isaacs> aconbere: use fs.stat to determine if it's a directory, and then fs.readdir to read the dir and get an array of its contents.
[18:48] <isaacs> aconbere: isDir == fs.statSync(file).isDirectory()  or async: fs.stat(file, function (e, s) { s.isDirectory() })
[18:48] <isaacs> aconbere: if you want to treat links differently, use lstat instead of stat
[18:48] <isaacs> stat follows link
[18:48] <isaacs> s
[18:51] <aconbere> isaacs: thanks, that's exactly what I was looking for
[18:51] <aconbere> I was playing around with various readdir conditions
[18:51] <aconbere> and failing
[18:51] <aconbere> :)
[18:53] admc has joined the channel
[19:06] <_ry> i love the v8 changelog
[19:07] <_ry> "Performance improvements on all platforms."
[19:07] <_ry> every release :)
[19:07] <mjr_> everybody wins
[19:08] <_ry> not mozilla
[19:08] <inimino> heh
[19:09] <inimino> http://arewefastyet.com/ they're on it
[19:09] <mjr_> Watching this thing on Rocket: http://www.onilabs.com/  
[19:09] <mjr_> Kind of interesting.
[19:10] towski has joined the channel
[19:11] <aconbere> is there a package for common functional programming idioms that people like? map, reduce, filter, takeWhile, etc.
[19:11] <aconbere> in the browser I would probably use something like underscore.js
[19:11] <aconbere> ooo... I should check the modules wiki page
[19:11] <isaacs> aconbere: yeah.  it's called ES5, and it's built into v8 :P
[19:11] <inimino> aconbere: make sure you learn what JavaScript already has...
[19:11] <isaacs> aconbere: but, there are some cool things out there.
[19:12] <isaacs> aconbere: underscore.js works in node.  so does my _ify.
[19:12] <inimino> map, filter, reduce, are all native Array.prototype methods
[19:12] <inimino> and you could write takeWhile on top of forEach
[19:13] <isaacs> also check out creationix's "proto" lib.  it's got a few handy things.
[19:13] <inimino> or a for loop...
[19:13] <isaacs> like a fast Object.forEach
[19:13] <creationix> :)
[19:14] <aconbere> hah, so I guess a followup would be... if these things are in EcmaScript 5, is there better documentaion for that then then spec pdf?
[19:14] <creationix> the node wiki has a lot of them
[19:14] <creationix> I made a page for ecma5 stuff implemented in v8
[19:14] <inimino> function takeWhile(a,p){var i,l,r=[];for(i=0,l=a.length;i<l;i++){if(p(a[i]))r.push(a[i]);else break}return r}
[19:14] qFox has joined the channel
[19:15] <inimino> aconbere: the MDC pages are pretty good
[19:15] <inimino> `g mdc Array methods
[19:15] <gbot2> Array - MDC - https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Array
[19:15] <creationix> true, we've got pretty much all the array stuff from mozilla except for "generics"
[19:15] <creationix> I think that's what they're called at leasy
[19:15] <inimino> generics?
[19:16] <inimino> generators?
[19:16] <inimino> array comprehensions?
[19:18] <indexzero> generics
[19:18] <CIA-77> node: 03Ryan Dahl 07master * re72b7b8 10/ (117 files in 13 dirs): Upgrade V8 to 2.2.4.2 - http://bit.ly/d0sa2l
[19:18] kriskowal_ has joined the channel
[19:19] <indexzero> that's what they're called, but you don't need generics in javascript since it doesn't have a formal type system
[19:19] <indexzero> you could enforce it yourself, but that would be more trouble than it's worth imo
[19:19] <inimino> what kind of generics does Mozilla have?
[19:19] <nefD> blargh, having a hell of a time figuring out how to parse xml with node =\
[19:20] <inimino> oh, the direct methods on Array: https://developer.mozilla.org/en/New_in_JavaScript_1.6#Array_and_String_generics
[19:22] saikat_ has joined the channel
[19:23] cmlenz has joined the channel
[19:23] towski has joined the channel
[19:24] <creationix> inimino: yes, those are them
[19:24] hsuh has left the channel
[19:24] <nefD> anyone have any suggestions?
[19:24] <inimino> yeah, ES5 didn't pick those up
[19:26] <inimino> ACTION </lunch>
[19:29] quirkey has joined the channel
[19:29] <aconbere> nefD: there's a wrapper around libxml out there
[19:30] <nefD> aconbere:  I messed around with a bit, but without any decent examples I'm not making any headway, unfortunately
[19:32] <nefD> at this point im not averse to simply using a bash script or CLI app to convert the feed into JSON (spawned as a child process) and pipe the input back into my node script :P
[19:33] <creationix> nefD: that works, but if your child process isn't persistent it's going to be very slow
[19:34] <isaacs> nefD: check out either libxmljs or sax-js
[19:34] <aconbere> so I hate to keep asking stupid questions, but just getting a feel for what the community uses. What do people generally use for testing? JSpec... JUnit...?
[19:35] <nefD> I suppose I should just keep banging at libxmljs.. just haven't actually been able to pull through any usable results yet :P
[19:35] <aconbere> so many options...so few recomendations
[19:35] <aconbere> :)
[19:35] <deanlandolt> QUnit's CommonJS-compliant
[19:35] <deanlandolt> should run on node -- haven't tried it yet
[19:36] <creationix> I just hack together my own test runner for each project
[19:38] <creationix> someone needs to build me a real-time brainstorming tool, with graphviz and general vector diagramming support
[19:39] <creationix> in node of course, to make it cool
[19:49] <isaacs> inimino: hey, i'm exploring a few ideas about semicolons.  afaict, the only place where relying on semicolon insertion actually causes *problems* is when you start the next ilne with a (
[19:49] dnolen has joined the channel
[19:49] <isaacs> inimino: i was wondering if you knew of any other cases where \n is not sufficient to end the line, when you probably mean to end the line?
[19:54] <inimino> isaacs: yes, () and [] are the only cases that come to mind
[19:55] <isaacs> interesting.
[19:55] <inimino> [a,b,c].forEach(...)
[19:55] <isaacs> and you could avoid that easily enough by starting the line with ;(...) or ;[...] instead of ( or [ directly
[19:55] <inimino> would be interpreted as a property access of 'c' on the previous line
[19:55] <inimino> yes, which is what I do
[19:55] <inimino> ;() and ;[] whereever I use those constructs
[19:56] <inimino> which looks a little odd, but it's not that frequent
[19:56] <isaacs> right
[19:56] <isaacs> i'm sort of considering a linter/pretty-printer that converts javascript code into things that are demonstrably better for bug-visibility
[19:57] <inimino> that would be cool
[19:57] <inimino> need a JavaScript parser? :)
[19:57] <isaacs> i do actually disagree with you somewhat about whitespace.
[19:57] <isaacs> but that could be an option, i suppose.
[19:57] <isaacs> personally, i find whitespace between tokens to make it a lot easier to distinguish certain types of things.
[19:57] <inimino> ah
[19:57] <isaacs> like function foo ()  vs foo()
[19:57] <isaacs> or if () vs fi()
[19:58] <isaacs> if() looks like a function call to me.
[19:58] <inimino> ah
[19:58] <isaacs> one of dc's rules that i really took to.  (don't wanna say his name, or else the bot gets excited)
[19:58] <inimino> I can see how if you are used to making that distinction with whitespace, it could look that way
[19:59] <isaacs> it makes the names of important things stand out a bit
[19:59] <inimino> I'm probably on the extreme end wrt whitespace
[19:59] <isaacs> yeah
[19:59] <isaacs> pre-minified ;P
[19:59] <inimino> hehe
[20:00] <isaacs> also, i like putting variables each on their own line, joined with the ,
[20:01] <inimino> right
[20:01] <inimino> yeah, I only do that occassionally
[20:01] <inimino> like here: http://boshi.inimino.org/3box/nhttpd/httpd.js
[20:01] <isaacs> mostly because i've found editing the middle of lines is more error-prone than adding/removing whole lines.
[20:01] <isaacs> so var a,b,c,d,e,f,g is a bit more likely to have an edit in the middle
[20:02] <inimino> if I'm assigning and declaring things in a global or file scope
[20:02] <inimino> yes
[20:02] <inimino> 'dd' is hard to beat for convenience
[20:02] <isaacs> dd?
[20:02] <inimino> in vim
[20:02] <isaacs> oh, yeah
[20:03] <inimino> but when I'm reading, I'd rather have the var statement out of my way
[20:03] <inimino> it's a detail
[20:03] <inimino> anyway, if you are going to write that pretty-printer and linter let me know
[20:03] <inimino> I can help
[20:03] <inimino> and the world really could use a better JSLint
[20:04] joshbuddy has joined the channel
[20:05] <isaacs> really, it'd be awesome to have a program that can read ANY valid js file, build the parse tree, and then print it out in a canonical format.
[20:05] <isaacs> JSLint is fine and all, but i want JSTidy
[20:05] <isaacs> i used to author html by hand a lot, and having  akeystroke for tidy made it way easier than any other type of markup format.
[20:06] <mjr_> that would also help for inspecting minified code
[20:06] <isaacs> mjr_: or inimino's code :)
[20:06] <mjr_> zing!
[20:07] <inimino> hehe
[20:07] <inimino> isaacs: well the read and parse tree I can do :)
[20:07] <inimino> so you just need to write a pretty-printer
[20:07] <isaacs> i wrote something like that for JSON that i use in textmate.  but it only handles actual json.
[20:07] <inimino> yeah, JSON would be nice too
[20:07] <isaacs> if you have { foo : bar() } then it'll fail
[20:08] <inimino> with nice indentation
[20:09] ryan[WIN] has joined the channel
[20:10] <isaacs> yeah, i guess i could just use your PEG kit to parse the code, and then write the pretty-printer myself.
[20:10] <isaacs> with options to control whitespace, tabs-vs-spaces, etc.
[20:10] <inimino> yeah
[20:11] <inimino> you want me to write you a stub file and you can fill in the details?
[20:12] <inimino> ACTION starts
[20:12] <aconbere> minitest seems solid enough
[20:14] <aconbere> I think that while my eyes prefer function() and if()
[20:14] <aconbere> there are many better arguemetns for fuction () and if ()
[20:15] <aconbere> one of those things I had to retrain my brain for
[20:16] drhodes has joined the channel
[20:16] <MattJ> aconbere: You're erlang iirc?
[20:16] <aconbere> Polyglot :)
[20:16] <MattJ> :)
[20:17] <aconbere> I was doing erlang for money a year or so ago, but now I'm at a much more traditional web startup (and loving it)
[20:17] saikat__ has joined the channel
[20:17] <aconbere> mostly it seems like my job has become rewriting javascript that people wrote haphasardly over the years
[20:17] <MattJ> Ha
[20:18] saikat_ has joined the channel
[20:18] <inimino> good job security ;)
[20:18] <aconbere> haha
[20:19] <mjr_> javascript does seem to attract people who don't mind haphazard code.
[20:19] <aconbere> in this case I think it was more, that they were never javascript developers. So they're code reads like people figuring out a language, learning the norms, etc.
[20:19] <aconbere> their
[20:19] <aconbere> ugh...
[20:20] saikat_ has joined the channel
[20:20] <mjr_> oh yeah.  It also somehow has the reputation that you can and should just start writing programs in it before actually learning anything about it.
[20:20] isaacs has joined the channel
[20:20] <aconbere> yep
[20:20] <aconbere> like... it's just something you use to get the job done... it's not a real programming language, why would I care to actually learn it?
[20:21] <MattJ> That used to be me :(
[20:21] <mjr_> Yeah, I used to be that guy.
[20:21] <mjr_> ha
[20:21] <MattJ> :P
[20:21] indiefan has joined the channel
[20:22] <aconbere> other than learning more about Node (which has been pretty awesome), http://github.com/aconbere/elements_of_javascript_style is my other side project.
[20:22] <isaacs> aconbere: i kinda feel that way about "real" programming languages, too...
[20:22] <isaacs> it's just something you use to get the job done.
[20:23] <aconbere> haha
[20:25] mythz has joined the channel
[20:25] mythz has left the channel
[20:26] rtomayko has joined the channel
[20:29] ryan__ has joined the channel
[20:29] <ryan__> man.. the host is donw
[20:29] sztanpet has joined the channel
[20:31] RayMorgan has joined the channel
[20:34] _ry has joined the channel
[20:34] kevwil has joined the channel
[20:37] ePi1 has joined the channel
[20:37] <isaacs> inimino: hey, i know you are kind of an iconoclast wrt github.  how would you like to get that stub to me to flesh out?  email works if i'm not in here when you want to reach me: i@izs.me
[20:38] <isaacs> inimino: or, if you like, a github repo that i can fork is also nice.
[20:38] <ePi1> hi - i just cloned the repo using git, and tried to do "make" but i get this error: Project not configured (run 'waf configure' first)
[20:38] <ePi1> make: *** [all] Error 1 
[20:38] <ePi1> i also get another error if i try to do what it says and run waf configure
[20:38] <isaacs> ePi1: ./configure
[20:38] <ePi1> oh - i thought it just meant to be in that directory. Thanks!
[20:41] bmizerany has joined the channel
[20:45] <inimino> isaacs: I'll just email you a link... if you've got a super-high tolerance for really ugly UIs you can play with it in the browser...
[20:45] <inimino> should be done soonish
[20:45] <isaacs> awesome
[20:46] <isaacs> i'm staring at code right now that's gone through more hands than i want to know, andit's atrocious
[20:46] kriskowal has joined the channel
[20:46] <isaacs> indents ranging from 2-8 spaces, or tabs, or nothing... all kinds of mishmoshed copypasta, it's horrid.
[20:46] <isaacs> it hurts.
[20:55] darkf has joined the channel
[20:57] zackattack has joined the channel
[21:03] isaacs has joined the channel
[21:09] <CIA-77> node: 03Ryan Dahl 07master * r16f0240 10/ lib/net.js : 
[21:09] <CIA-77> node: Catch errors from stream events in net.js
[21:09] <CIA-77> node: Pipe into 'error' event. - http://bit.ly/cNy5Gf
[21:09] Nohryb has joined the channel
[21:09] <mape> Anyone happen to know what font is used for the node.js logo?
[21:12] <inimino> isaacs: what's your usual browser?
[21:13] <aconbere> so
[21:13] <aconbere> I'm modestly familiar with working with promises from twisted and EM
[21:14] <aconbere> I'm working on a little filesytem walking function, and if I mayke it all sync, it's pretty simple
[21:14] <aconbere> (pass my callback around, call it once for each group of data)
[21:14] <mjr_> simple and LAME
[21:14] <aconbere> if I make it async
[21:14] <fictorial> here's an alpha of a sandbox based on the extra things needed -- it's likely full of corner case bugs and needs a lot of testing -- http://github.com/fictorial/jefe -- would love feedback
[21:14] <fictorial> thanks
[21:14] <aconbere> I can do that, until I want to collect data from them
[21:14] <herbySk> _ry: not that it helped... EPIPES appearing at the same places
[21:15] <aconbere> then I have to know more about when each of the async calls completes
[21:15] <aconbere> since they chain themeselves, this seems to start getting tricky
[21:15] <maushu> mape, this is the future!
[21:15] <mape> And the time is now?!
[21:16] <maushu> Yes.
[21:16] tekky has joined the channel
[21:16] <mjr_> aconbere: it is indeed tricky. Many people use libraries like conductor to make this easier: http://github.com/creationix/conductor
[21:16] <mape> Neat
[21:16] <maushu> Wait a second for me to identify the font using wicked future tools.
[21:16] <mape> maushu: what font is this? ;O
[21:16] <maushu> No idea.
[21:17] teemow has joined the channel
[21:17] <mjr_> who made that original graphic on the site?
[21:17] <maushu> I need to clean the image first and pass it through a font identifier.
[21:17] <aconbere> mjr_: sounds fancy :)
[21:17] <mape> http://new.myfonts.com/WhatTheFont/ rather
[21:18] <mape> Didn't find a good one
[21:18] <mape> Just figured it was an free/open font
[21:21] <_ry> herbySk: EPIPE isn't bad though - or ?
[21:21] keeto has joined the channel
[21:22] <herbySk> _ry: test fails
[21:22] <mjr_> Is this the person that came up with the original website logo?  http://groups.google.com/group/nodejs/msg/cff9b5ff8c289b4b
[21:22] <_ry> yeah i'm a bit torn
[21:22] <_ry> i want epipe to emit error for stdout
[21:22] <_ry> so that node script.js | head -1
[21:22] <_ry> works
[21:22] <_ry> but i suppose for sockets, it should just close the connection...
[21:23] <_ry> mjr_: yes
[21:24] <maushu> mape, I used my awesome skills and reach a conclusion.
[21:24] <herbySk> I'm not opposing the logic, but if it is awaited, it should be written in the test... mow I run tools/test.py and get 6 failing tests
[21:24] <maushu> *reached
[21:24] <mjr_> mape: maybe you could email him?
[21:25] <maushu> ACTION pokes mape.
[21:25] <mape> Yeah, it isn't that important
[21:25] <mape> ACTION vï¿½lter maushu 
[21:25] <mjr_> _ry: is it bad if epipe emits error on sockets?  Isn't that more consistent with the "you must handle errors" philosophy?
[21:25] <maushu> My conclusion is...
[21:25] <maushu> ...I have no idea.
[21:25] <maushu> Just kidding, the font is http://new.myfonts.com/fonts/ingrimayne/jennerik/extra-bold/
[21:26] <isaacs> inimino: i'm usually on firefox
[21:26] <mape> Nah it is not
[21:26] <inimino> isaacs: ok, me too, that should work
[21:27] <inimino> isaacs: I sent you an email
[21:27] <isaacs> nice
[21:27] <mape> maushu: http://gyazo.com/198c1604af9f6e69348884a70c599c01.png
[21:27] <mape> notice the serif on the S
[21:27] <maushu> You dare?!
[21:27] <_ry> mjr_: it's not really an error though
[21:27] <_ry> mjr_: jsut means that the other side has closed
[21:28] <mjr_> I guess "error" is a bit strong, but it certainly will (or should) be an error if you try to write to the stream after that.
[21:28] <_ry> so maybe in duplex connections it shouldn't be an error
[21:29] <_ry> i wonder why freebsd doesn't get a readable event
[21:29] <maushu> mape, he could've changed the letters a little.
[21:29] <maushu> I do that sometimes to fit the theme.
[21:29] <_ry> it should get an EOF
[21:29] <aconbere> so ... are the async FS calls event Emitters?
[21:29] <mape> Hmm I guess
[21:29] <_ry> aconbere: they're just callbacks
[21:29] <maushu> mape, have you asked the guy who did it?
[21:29] <aconbere> k
[21:30] <mape> maushu: Nah I just found out I wanted to ask
[21:30] <herbySk> _ry: Why at all does all those test that use child processes throw an error? If I call a child process, read its input and the close my side, it should be error if child tries to write more, but does it? If yes, tests are written badly, if not, why EPIPES are there?
[21:30] <mape> But I'll solve it some other way
[21:30] <herbySk> _ry: or the problem is somewhere else?
[21:31] dandean has joined the channel
[21:31] <_ry> herbySk: i suspect the problem is that freebsd sucks
[21:31] <_ry> and you should use an actual operating system
[21:31] <_ry> however, we should probably work around it
[21:31] <mjr_> boom, take your Power to Serve and serve up some Linux.
[21:32] <herbySk> religious wars aren't good idea... I believe *BSD way more than linux. now what?
[21:32] <_ry> maybe we should try to read before writing
[21:32] <_ry> (uh, in net.js)
[21:32] <_ry> that way we'd catch eof
[21:33] <_ry> but in the case of stdout we wouldn't read cause it's not duplex
[21:33] <_ry> so we'd still emit epipe
[21:33] <_ry> i wonder if that's going to slow down shit though
[21:34] <maushu> Anyone knows how to link articles of different languages in wikipedia?
[21:34] <maushu> We need to link the node.js articles en and de.
[21:35] <maushu> Ah wait, found it.
[21:35] <maushu> Don't panic!
[21:38] joshbuddy has joined the channel
[21:40] fizx has joined the channel
[21:42] <aconbere> this is what I've got
[21:42] <aconbere> I'm not super happy with the async bits
[21:42] <aconbere> http://paste.pocoo.org/show/205478/
[21:43] <aconbere> ^ any help would be much appreciated
[21:43] <aconbere> ACTION wonders if a gist would be nicer
[21:43] <isaacs> aconbere: gists are prefered, yes.  you can fork them.
[21:43] <maushu> ...damn moonspeak.
[21:43] <isaacs> aconbere: imo, this should be fs.walk, not path.walk
[21:43] <aconbere> http://gist.github.com/377225
[21:44] <aconbere> yeah
[21:44] <aconbere> I agree
[21:44] <isaacs> python doesn't know the difference between fs and path, but node doesn't suffer the same problem.
[21:44] <maushu> "Dies ist eine ungesichtete Version. Die ï¿½nderung muss gesichtet werden, bevor sie Benutzern standardmï¿½ï¿½ig angezeigt wird."
[21:44] <aconbere> heh
[21:44] <maushu> What the hell that means.
[21:44] <aconbere> there is one ugesichtete version?
[21:44] <maushu> ugesichtete
[21:44] siculars has joined the channel
[21:44] <maushu> Bless you.
[21:45] <aconbere> there is one blessed version?
[21:45] <maushu> No, I though you sneezed.
[21:45] <aconbere> haha
[21:45] <maushu> A guy is trying to be helpful and this thing shows up.
[21:46] <ashb> draft version i think
[21:46] <maushu> Wat.
[21:46] <maushu> But I published, I think.
[21:46] <maushu> I don't speak german version of moonspeak.
[21:46] <ashb> 'The amendment must be viewed before they displayed to users by default is.'
[21:47] <ashb> go go google translate
[21:47] <maushu> Well, someone will fix it.
[21:50] botanicus has joined the channel
[21:51] <isaacs> inimino: i'm not seeing output on the right, and there's a "Too much recursion" error
[21:51] <maushu> <- Updating examples.
[21:53] drostie has joined the channel
[21:53] mattly has joined the channel
[21:56] <aconbere> isaacs: http://gist.github.com/377231
[21:56] <aconbere> .walkSync that should actually work :P
[21:56] <aconbere> bah... wont pass through lint though
[21:58] <isaacs> aconbere: you should be careful of circular directories.  it might be wise to use lstat instead for that reason.
[21:58] <isaacs> and check for  isSymbolicLink()
[21:59] <isaacs> also, what about calling it fs.tree so that it matches the tree funciton?
[21:59] mattly_ has joined the channel
[21:59] <isaacs> and then you could make it work just like the tree command, so it returns a bunch of stat objects, each one having a "children" array if it's a directory
[22:02] <maushu> What is the name of node.js license?
[22:02] <mape> MIT?
[22:02] <maushu> I guess, I need confirm since wikipedia never lies!
[22:03] <maushu> ACTION pokes _ry.
[22:03] <deanlandolt> maushu: http://github.com/ry/node/blob/master/LICENSE
[22:03] <deanlandolt> github doesn't lie
[22:04] <aconbere> isaacs: link to tree?
[22:04] <aconbere> (I'm having a hard time tracking down what exactly that is)
[22:04] <isaacs> aconbere: man tree
[22:04] <isaacs> aconbere: if that doesn't work, try sudo apt-get install tree
[22:04] <isaacs> aconbere: or, on a mac, brew install tree or sudo port install tree
[22:04] <maushu> deanlandolt, name of the license, not the license itself.
[22:04] fizx has joined the channel
[22:04] <deanlandolt> maushu: that's a modified MIT
[22:04] <maushu> ...
[22:04] <_ry> maushu: ?
[22:04] <maushu> Great, what I put in the article then.
[22:05] <_ry> what?
[22:05] <deanlandolt> it just explicitly states that the included deps are under their own license (though that part's probably not necessary, should be implied)
[22:05] <maushu> But the deps are also MIT.
[22:05] <deanlandolt> _ry: he was just asking what license node is under specifically
[22:05] <_ry> MIT
[22:05] <deanlandolt> maushu: they didn't used to be
[22:05] <_ry> maushu: not exactly
[22:05] <_ry> v8 is bsd
[22:06] <_ry> openssl has its own thing
[22:06] <maushu> "v8 has an MIT license."
[22:06] <deanlandolt> _ry: they're all listed as MIT actually
[22:06] <_ry> (we link to it, not static compiled)
[22:06] <_ry> oh
[22:06] <maushu> _ry, your LICENSE lied to me then!
[22:06] <_ry> well - close enough :)
[22:06] <maushu> ACTION hits LICENSE with a stick.
[22:06] <maushu> Bad file.
[22:06] <_ry> we're still linking to gnutls
[22:06] <aconbere> Oooo
[22:06] <_ry> with is lgpl
[22:06] <aconbere> gotcha
[22:07] <_ry> but node's code is all MIT
[22:07] <maushu> Well, I will put MIT. If some one comes asking... blame mape or something.
[22:08] <deanlandolt> maushu: it's MIT
[22:08] <deanlandolt> linking to an LGPL lib doesn't affect your license
[22:08] <maushu> Great.
[22:08] <deanlandolt> though i really wish the MIT just /called itself out/ as MIT -- i see that question a lot
[22:09] <maushu> We need a bigger logo on the article. Ruby on Rails has a 150px. WE CANNOT BE UNDONE BY THEM.
[22:09] <aconbere> isaacs: I think fs.tree might be a different function. or an optional arg, one nice thing about walk, is that you don't have to worry about the size of that data structure.
[22:09] <maushu> ACTION increases logo size. Let the battle begin.
[22:09] <aconbere> walk could hypothetically work on very very large directories
[22:09] <aconbere> (minues the fact that /my/ walk uses recursion)
[22:09] <aconbere> bad me
[22:11] <herbySk> aconbere: wgicg wouldn't be a sin if it is a tail recursion and v8 has it optimized... has it?
[22:11] <herbySk> s/g/h/g
[22:12] <inimino> isaacs: oh, really, hm
[22:12] <isaacs> herbySk: v8 does not have TCO
[22:12] <_ry> http://tjholowaychuk.com/post/543953703/express-vs-sinatra-benchmarks
[22:13] <aconbere> as far as I understand there are fundemental issues with regards to TCO in javascript
[22:13] <herbySk> c'est la vie
[22:13] <inimino> isaacs: hm, I can't reproduce... what Firefox version?
[22:14] derbumi has joined the channel
[22:14] <isaacs> inimino: navigator.buildID = "20100401064631"; navigator.userAgent = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3"
[22:15] <isaacs> probably a plugin or something
[22:15] <isaacs> inimino: webkit says: HTTP/1.1 [object Object] unknown
[22:15] <isaacs> Connection: keep-alive
[22:15] <isaacs> Transfer-Encoding: chunked
[22:15] <isaacs> 6e2
[22:15] <isaacs> (sorry for the flood)
[22:16] <inimino> is that Safari?
[22:17] <inimino> hm, OS X so I guess so
[22:18] <isaacs> yeah
[22:18] <isaacs> i'll try on webkit 58136
[22:18] <isaacs> just a sec...
[22:18] <inimino> I'll try on OS X
[22:19] dnolen has joined the channel
[22:20] <aconbere> what's the prefered location for optional arguments in a function that accepts a callback?
[22:20] <isaacs> yep, same in webkit nightly
[22:20] <aconbere> still at the end, after the callback?
[22:20] <isaacs> aconbere: no, in the middle.
[22:20] <isaacs> aconbere: just handle it :)
[22:20] <isaacs> aconbere: cb is *always* last
[22:23] <inimino> isaacs: ok, Fx 3.6.3 works on OS X for me (with no extensions loaded) but I see the same on Safari, I'm looking into it
[22:24] <_ry> herbySk: i'm not sure how to fix your EPIPE problem yet
[22:24] <maushu> http://en.wikipedia.org/wiki/Node.js <- Getting better.
[22:24] <_ry> i think i want to do a release now
[22:25] <_ry> any little patches that i'm forgetting?
[22:25] <maushu> ...NO.
[22:25] <maushu> Don't! I just updated wiki page right now. ;_;
[22:25] <maushu> ACTION facepalms.
[22:26] <maushu> *sigh* They will thinkin I'm spamming or something. :_:
[22:30] <isaacs> _ry: i think i had a few, but i don't know if they qualify as "little"
[22:30] mattly has joined the channel
[22:31] <mjr_> _ry: new doc viewer in this release?
[22:31] <_ry> mjr_: oh right - i haven't got anything from mope
[22:31] <mjr_> mape!
[22:31] <_ry> mape
[22:31] <mjr_> get on it, man
[22:31] <mape> Oh yeah 
[22:32] <mape> So what would be the best way to do it (haven't really used git/contributed)
[22:32] jaw6 has joined the channel
[22:32] <mjr_> patch that shit
[22:32] kriskowal_ has joined the channel
[22:32] <isaacs> _ry: want an fs.tree function?
[22:32] <_ry> isaacs: walk subdires?
[22:32] <isaacs> _ry: http://gist.github.com/377246
[22:32] <maushu> Make a tree from a directory origin?
[22:33] <isaacs> aconbere inspired me
[22:33] <_ry> i've been thinking we need a high-level fs library
[22:33] <_ry> but i don't want that yet
[22:33] <isaacs> suresure
[22:33] <isaacs> it'd be nice to have a maxdepth arg.
[22:33] <_ry> esp file copying
[22:33] <isaacs> it can run for a long time
[22:33] <_ry> (with progress)
[22:34] <_ry> (should be part of a general pump())
[22:34] <maushu> Wouldn't that be overkill?
[22:34] <isaacs> _ry: imo, there should be a fs.copy operation with a "progress" callback.
[22:35] <isaacs> that would rock
[22:35] <mjr_> yeah, copy files could look a lot like copy from URL to file, etc.
[22:35] <isaacs> and it's possbile all in js
[22:35] <_ry> yep
[22:36] <mjr_> mape: do you need some help with the github mechanics for your doc stuff?
[22:37] <mape> mjr_: That would be splendid yeah
[22:37] <mjr_> first thing is get a github account if you don't have one.
[22:37] <mape> That I do
[22:37] <mape> Have all that setup
[22:37] <mape> Even pushed a module, so that fair I'm set
[22:38] <mjr_> OK, so fork ry/master on the github site.
[22:38] <inimino> isaacs: that Safari thing is coming from the server, it's still running node 0.1.25... I'm about ready to switch over to 0.1.91 in a day or two, so hopefully that'll fix it
[22:38] <mjr_> mape: let's just take this to PM and not bother everybody with the back and forth
[22:38] <mape> Jup 
[22:40] <brainproxy> anyone know of a library or documented methodology for calculating delta/diffs across javascript objects
[22:40] <_ry> pump, get rid of coupling, pipeline http req, http client pool, liveedit debug support
[22:41] <_ry> oh and sharing fds via workers
[22:41] <_ry> it's going to be great.
[22:42] <mjr_> yeah, world domination
[22:43] <mjr_> Hopefully issue 77 and output buffer control come along with pump
[22:43] <_ry> yeah.. got to figure out some of those things
[22:43] <mjr_> Because I know those two things are holding back many people from a lot of more serious uses of node.
[22:43] <mjr_> Although maybe you want people to not use node for serious stuff just yet
[22:44] pjb3 has joined the channel
[22:48] <_ry> mape: for the next version can we just generate it from this: http://github.com/evilstreak/markdown-js/blob/master/lib/markdown.js
[22:48] <_ry> :)
[22:48] <aconbere> isaacs: awesome! now I can kill my version :)
[22:48] <mape> _ry: Nice
[22:49] <mjr_> ronn sounds like such a great solution, but doesn't really live up, IMO
[22:49] <mjr_> so brittle
[22:52] cruxst has joined the channel
[22:54] <mape> _ry: http://github.com/mape/node should be ready to go 
[22:55] <mjr_> I did a make doc on OSX, and the output looks like this:  http://ranney.com/doc/
[22:55] <mape> :)
[22:55] <_ry> coop
[22:55] <_ry> cool
[22:56] <maushu> Is the ssl functions in the api?
[22:56] saikat has joined the channel
[22:56] <mjr_> doesn't look like it
[23:01] <aconbere> heh
[23:01] <aconbere> maybe it's reasonable to release some of these little functions in a wrapped up library
[23:01] binary42 has joined the channel
[23:01] <mape> _ry: I don't need to do a pull request on gh right?
[23:02] <_ry> mape: nope, i've got it
[23:02] <_ry> mape: thanks
[23:02] <mape> np :)
[23:06] JimBastard has joined the channel
[23:06] indiefan has joined the channel
[23:08] cruxst has joined the channel
[23:13] batasrki has joined the channel
[23:16] <_ry> is this helpful? http://nodejs.org/docs/
[23:18] careo has left the channel
[23:19] <mjr_> Seems pretty useful.
[23:19] <mjr_> Hopefully Google will end up linking people to the most recent one.
[23:22] <isaacs> inimino: still getting "InternalError: too much recursion"
[23:23] <maushu> I feel that node.js just got too complicated, I will use 0.0.1 from now on.
[23:24] <mjr_> just like bands, the old stuff is always better.  You know, before they sold out.
[23:24] saikat_ has joined the channel
[23:28] <_ry> http://nodejs.org/docs/v0.0.1/api.html#tcp_connection
[23:28] mattly has joined the channel
[23:29] <_ry> file io, tcp, http
[23:29] <_ry> what more do you need?
[23:31] <mape> mjr_: logged in on wrong twitter account? :P
[23:31] <mjr_> uhoh
[23:31] <mjr_> hilarious
[23:32] <mjr_> I made an account for my 3yo son that I use for testing the twitter API
[23:32] <mjr_> He doesn't post much.
[23:32] <mape> He loves irish?
[23:33] <mjr_> no, I got that one from reading your stream, again as the wrongaccount.
[23:33] <mape> hehe 
[23:37] <maushu> Madness.
[23:37] <maushu> Whats next, vpf four kids?
[23:37] <maushu> *vps
[23:37] <maushu> *for our
[23:38] <maushu> Damn, im sleepy.
[23:38] <mjr_> I have a hilarious video of him reading from JavaScript: The Good Parts.
[23:39] <mjr_> stashed somewhere on a hard drive that I may one day discover unless I forget about it.
[23:39] <maushu> He already codes? Smart kid.
[23:39] <mjr_> yeah, he still doesn't get event-based programming though.  Kids these days and their threads.
[23:44] <JimBastard> you cant handle my jquery fu   $($('#currentActions th')[1]).data('sorter', {"field":"formatted_electricity","order":"DESC","type":"numeric"});
[23:44] xla has joined the channel
[23:45] <mape> assigning an object to a DOM element using the jQuery datastore?
[23:47] <maushu> JimBastard, assigning a json object to a key on the second th inside the element of id #currentActions?
[23:47] <maushu> Madness.
[23:47] <JimBastard> well paul_irish said .eq(1) fixes that
[23:47] <JimBastard> but its just funny to see
[23:47] <JimBastard> but im doing databinding
[23:48] <JimBastard> and mvvm type stuff
[23:48] <brainproxy> anyone have any further ideas on JSON.parse bombing out when used within a callback
[23:48] <JimBastard> presentation model
[23:48] <brainproxy> i just tried HEAD with nvm
[23:48] <brainproxy> but same thing
[23:50] <CIA-77> node: 03mape 07master * rb299b4b 10/ (doc/api_footer.html doc/api_header.html doc/doc.js): Update API doc - http://bit.ly/99kajj
[23:50] <CIA-77> node: 03Ryan Dahl 07master * rbb4ae17 10/ doc/index.html : Link to old versions - http://bit.ly/amH5w7
[23:50] <CIA-77> node: 03Ryan Dahl 07master * rcaa828a 10/ (AUTHORS ChangeLog doc/api_header.html doc/index.html wscript): bump version - http://bit.ly/ckDCP5
[23:53] <isaacs> this docs are HOT
[23:54] <isaacs> nicely done!
[23:54] malkomalko has joined the channel
[23:54] <mape> Only issue might be cache
[23:55] <mape> Hmm doesn't even have expires, owell
[23:57] saikat has joined the channel
