[00:01] <micheil> jaywalk: If you'd like some assistance with websockets, I'm not available not, but feel free to email me (micheil@brandedcode.com) or email to the nodejs mailing list, and I'll respond when I get a chance
[00:02] <micheil> Rik`: you were FF dev, right?
[00:02] <micheil> Rik`: see jaywalk's message re ff4b2pre
[00:02] <jaywalk> micheil: the initial bumps were just me getting used to it, it's working now thanks. :) But I sure will if I find something more :)
[00:02] <micheil> okay, sure thing
[00:02] <mape> tjholowaychuk: what are you using to do the fancy test coverage?
[00:03] <tjholowaychuk> mape: my code does all the reporting
[00:03] <tjholowaychuk> but http://github.com/visionmedia/node-jscoverage
[00:03] <tjholowaychuk> does the instrumenting 
[00:03] <mape> Ah yeah, meant the ncurses like stuff
[00:03] ph^ has joined the channel
[00:03] <tjholowaychuk> ah its just ansi escape sequences
[00:03] <tjholowaychuk> \x1b[31m' + hits + '\x1b[0m
[00:04] <tjholowaychuk> shit like that
[00:04] <mape> Ah k
[00:04] <batasrki> any mongoose maintainers present?
[00:04] <mape> Guess I should play around with ncurses
[00:04] <tjholowaychuk> i havent either no worries
[00:04] <tjholowaychuk> tons of things i still have not had time to check out
[00:06] <tjholowaychuk> ryah: know anything about JsonAstBuilder in v8?
[00:07] <mape> Hmm error opening terminal: xterm-color .. and screen
[00:07] <mape> mscdex: There?
[00:09] <MrTopf1> something seems to be wrong with utf8 and umlauts.. when I send a utf8 strings with 1 umlaut and use s.length as content-length then 1 character is missing in the result in the browser
[00:11] tzmartin has joined the channel
[00:12] <micheil> I've really gotta try out vows one day,.
[00:12] <MrTopf1> maybe buffers help..
[00:13] Aaaarg_ has joined the channel
[00:13] meder has joined the channel
[00:14] creationix has joined the channel
[00:17] <mscdex> mape: eye yam
[00:17] <mape> Tried running the node-ncurses example and got Error opening terminal: screen.
[00:17] <mape> same when not in screen but x-term
[00:17] hpoydar has joined the channel
[00:17] <mscdex> huh...
[00:18] <mscdex> which example?
[00:18] <mape> all
[00:20] <mscdex> looking into it
[00:20] <mape> Thanks
[00:21] <mscdex> hrm... i compiled it clean and it works for me :S
[00:21] <mscdex> over putty anyway
[00:22] <mscdex> my server is headless
[00:22] JimBastard has joined the channel
[00:22] <mape> On osx, running the app on debian
[00:22] <mscdex> i'm running the examples on ubuntu
[00:22] <mscdex> weird
[00:23] <mape> Same on Error opening terminal: xterm-color.
[00:24] <mscdex> maybe missing terminfo
[00:24] <mscdex> let me fire up a debian vm
[00:24] <micheil> ACTION is away.
[00:25] ryah has joined the channel
[00:25] <mscdex> the boss is back!
[00:28] tjholowaychuk has joined the channel
[00:28] jaywalk has joined the channel
[00:29] sechrist has joined the channel
[00:32] <jaywalk> mape: haha you should see the social effects your project creates :)
[00:33] <mape> fighting? :P
[00:33] <jaywalk> oh no it's all friendly :)
[00:34] <jaywalk> but lets say highlights are more common, and people joining the chan from new areas of the world aren't left alone ;)
[00:34] <mape> hehe
[00:35] joemccann has joined the channel
[00:36] <joemccann> whatup folks?
[00:36] <mscdex> hmmm, i ran the examples on a debian lenny vm without a problem
[00:36] <mape> wth.. I'm using lenny, default shell
[00:36] jimmyjazz14 has joined the channel
[00:36] <joemccann> anyone had success setup the node.js daemon feauted here:  http://howtonode.org/deploying-node-upstart-monit
[00:37] <mscdex> mape: you have /usr/share/terminfo ?
[00:37] <mape> yeah
[00:37] <joemccann> seems like my paths are getting fuct
[00:37] <mscdex> hmm
[00:37] <joemccann> even after declaring HOME=/root
[00:37] <mscdex> what does this return: echo $TERM
[00:38] <joemccann> for example, can't find module "express" is the error im getting
[00:38] LionMadeOfLions has joined the channel
[00:38] <joemccann> of course if i cd to the location and enter "node server.js"
[00:38] [[zz]] has joined the channel
[00:38] <joemccann> everything is fine
[00:39] <mape> mscdex: screen
[00:39] <joemccann> but the "exec sudo..." in the upstart script is f'ing with the paths
[00:39] <joemccann> any suggestions?
[00:39] <mscdex> oh yeah
[00:39] <mape> mscdex: or xterm-color
[00:39] <shimondoodkin> make cd first
[00:39] <shimondoodkin> before executing node
[00:40] <shimondoodkin> also you may try my setup http://github.com/shimondoodkin/nodejs-autorestart
[00:40] <joemccann> shimondoodkin:  so swap the node call with the path of the app?
[00:40] kersny has joined the channel
[00:41] benbinary has joined the channel
[00:42] <shimondoodkin> i dont know i guess: exec sudo -u username  cd /var/www ; /usr/local/bin/node /where/yourprogram.js 2>&1 >> /var/log/node.log
[00:42] <mscdex> mape: maybe try exporting the TERMINFO variable before running an example: export TERMINFO=/usr/share/terminfo
[00:43] <mscdex> there's definitely a screen terminfo file
[00:43] <mscdex> many of them actually
[00:43] <mscdex> so it's not finding it for some reason
[00:43] rnewson_ has joined the channel
[00:44] rnewson_ has joined the channel
[00:44] <shimondoodkin> my solution for this was that i have created a bach file with all in it
[00:44] <shimondoodkin> s/bach/bash/
[00:47] <shimondoodkin> joemccann: on the page of your link there is a response from Jacek Becela, with respawnat the end, the way he uses sh might help you
[00:47] <joemccann> shinmondoodkin: still didn't work and not writing to the node.log either, but the daemon.log verifies that the process is immediately being terminated
[00:48] <shimondoodkin> if i might i would suggest you use my setup for better results
[00:48] <joemccann> yeah looks ez enough
[00:48] <joemccann> thx tho
[00:49] <joemccann> oh wait, typo in the "cd /var/www..." suggestion
[00:49] <joemccann> trying again
[00:49] <shimondoodkin> you might need to use sh -c
[00:50] <shimondoodkin> to make it one command
[00:50] <mscdex> mape: also try setting the TERM environment variable to either "vt100" or "xterm"
[00:51] <mscdex> mape: looks like it may be related to OSX
[00:51] <mape> Hmm
[00:51] <mape> but the shell doesn't run in osx?
[00:52] <mscdex> or try setting TERM=linux
[00:52] <mscdex> that's what i have on my debian vm
[00:52] <mscdex> fwiw
[00:52] jxson has joined the channel
[00:53] _frankie has joined the channel
[00:53] <mape> hmm k, I'll have a look at it a little later
[00:53] <mscdex> ok, if none of those work, let me know and i'll dig deeper
[00:54] <jaywalk> mape: heh, the check before the error in raphael has the comment // rough assumption :)
[00:55] <jaywalk> why it fails in ff but not in chromium is a mystery though I guess
[00:58] <shimondoodkin> does anybody uses any dhtmleditor with node, like ckeditor/tinymce... ?
[00:58] joshbuddy has joined the channel
[00:58] <shimondoodkin> how do you serve the dhtmleditor's files?
[00:59] <shimondoodkin> and also how the file browser works with node
[01:01] <maushu> shimondoodkin, huh, you send the files through the node's http server?
[01:02] <shimondoodkin> probably yes, i just ask if somebody already solved all of the problems
[01:03] amuck has joined the channel
[01:08] benbinary has joined the channel
[01:10] <mape> Anyone here used excanvas?
[01:11] <mape> God damit IE is a pile of shit
[01:12] <mde> I'm with you, man. I've spent the last two days in it.
[01:13] bpot has joined the channel
[01:14] mischief has joined the channel
[01:14] <mischief> aha!
[01:14] jxson_ has joined the channel
[01:14] <joemccann> shimondookin:  gonna try your lib...thx again
[01:15] <mischief> i'm having some trouble successfully compiling node.js on openbsd 4.7 x64.. can anyone help me out?
[01:17] <mischief> i tried both the tarball on the site and the git repo, and applied this patch to deps/v8/src/platform-openbsd.cc http://s3.amazonaws.com/four.livejournal/20100526/0001-Implement-OS-ReleaseStore-for-OpenBSD.patch
[01:17] <shimondoodkin> there is somewhere a pach for freebsd that was not apliied for open bsd if i remember correctly
[01:17] isaacs has joined the channel
[01:17] <mischief> the patch i just linked?
[01:18] <shimondoodkin> i dot know i just read something like this in this chat room
[01:18] <shimondoodkin> *dont
[01:18] <mape> Yay, internal jQuery error is always helpful when debugging jQuery >_<
[01:19] <mischief> well the actual problem during compiling is rather peculiar.. let me paste it
[01:19] <shimondoodkin> also you can paste it in gist
[01:20] <mischief> i am not pasting it here :P just a moment
[01:22] sh1mmer has joined the channel
[01:22] isaacs has joined the channel
[01:23] <isaacs> anyone have any suggestions for javadoc-ish style code-comment-driven documentation building things?
[01:23] <isaacs> preferably not obsessivly class-focused?
[01:23] <isaacs> (that means yuidoc and jsdoc are out)
[01:25] <mscdex> mischief: i just compiled node on openbsd 4.7 x64 the other day after applying that patch
[01:25] <mischief> http://gist.github.com/470319 thats the error
[01:25] <mischief> mscdex, see above.. maybe you can tell me whats wrong
[01:26] <mscdex> mischief: is this the head version of node?
[01:26] <mischief> i pulled it from git yesterday
[01:26] <mscdex> ok
[01:26] <mischief> mscdex, are you using gcc 3.3.5 that is included with OpenBSD base or are you using a different compiler/version?
[01:26] <mscdex> mischief: you have to use gcc 4.x
[01:26] <mischief> mscdex, that is what i am using
[01:26] derferman has joined the channel
[01:26] <mscdex> you are using 4.x?
[01:27] <mischief> mscdex, yes gcc-4.2.4p0v0 and the same version g++ from openbsd packages
[01:27] <mischief> i did CC=egcc CXX=eg++ export CC CXX; ./configure; make
[01:30] <mscdex> hmm, all i did was just symlink /usr/bin/g++ to /usr/local/bin/eg++ and similarly for gcc
[01:30] <mscdex> i doubt that'd make a difference though
[01:30] bradleymeck has joined the channel
[01:30] rodrigo3n has left the channel
[01:31] Apage43 has left the channel
[01:32] <mscdex> well apparently someone had the same problem on node 0.1.28 back in february...
[01:35] <mischief> alright, well i am re-downloading a fresh copy and i am going to re-apply the patch
[01:35] <mischief> mscdex, you're telling me you used the same patch as i linked above and it ran successfully for you?
[01:36] <mscdex> well, i actually just went and copied and pasted the new lines in manually and didn't really apply the patch
[01:36] <mscdex> using git or patch or whatever
[01:36] <mscdex> it's only a few lines or so
[01:36] <mischief> oh :| i used patch
[01:36] <difekta> we're doing some "load testing" and getting a 'too many open files' error.
[01:37] <mischief> check your ulimit
[01:37] <mscdex> difekta: ulimit -a
[01:38] KaptianKrispy has joined the channel
[01:38] <KaptianKrispy> hello
[01:38] <mscdex> hola
[01:39] <KaptianKrispy> can anyone tell me if there is a way to get the line number in a script? something similar to __filename __dirname ?
[01:39] <difekta> how do you gracefully throttle a server to prevent this kind of crash?
[01:40] <mscdex> KaptianKrispy: not afaik, unless an exception is thrown or something
[01:40] <KaptianKrispy> how do the stack trace functions get it?
[01:40] <mscdex> difekta: keep track of how many connections you have open
[01:40] <KaptianKrispy> or is it only available in an exception?
[01:40] <difekta> well, do you just queue connections if there are too many?
[01:40] <difekta> can you get a callback for when the number of connections goes down?
[01:41] <mischief> perhaps http.ServerRequest.pause()
[01:41] <mscdex> serverrequest.pause() pauses that individual request stream
[01:42] <mischief> well the docs say it could be used for throttling..
[01:43] <mscdex> difekta: you can change the maximum number of open files by issuing something like: ulimit -n 10240
[01:43] <mscdex> mischief: for throttling a specific request
[01:43] <difekta> but ultimately there is some limit.
[01:43] <mischief> ACTION twiddles his thumbs as node.js builds again
[01:43] <mscdex> KaptianKrispy: i think it's only available in C++ land, not 100% sure though
[01:44] <mscdex> difekta: the kernel should be queueing any extra connections
[01:45] <difekta> well, it crashes node.
[01:46] <mscdex> difekta: i don't know then, i've only seen people report the problem recently
[01:46] <difekta> k thanks.
[01:46] <difekta> is node easy to scale?
[01:46] <mischief> mscdex, can you tell me what this mksnapshot thing is for?
[01:47] <mape> difekta: Well it can handle a lot
[01:47] <mape> And depends on how the app is built
[01:47] <difekta> we're a marketing company. think of tends of thousands of tracking pixels being requested.
[01:48] <mape> Most likely the database that will be the issue then
[01:48] <mape> What kinda data is tracked?
[01:48] <mscdex> mischief: i'm not familiar enough with v8 to answer that
[01:48] <difekta> MongoDb.
[01:48] <difekta> but yeah, i see your point.
[01:49] <mape> I've done something very close, and from what I remember I could push 20k pixels per sec
[01:49] mjr_ has joined the channel
[01:49] <mape> but that didn't connect to mongo
[01:49] <mischief> mscdex, well how can i further research this issue?
[01:49] <difekta> what was the DB?
[01:49] <mape> So yeah, mongo will most likely be the slow point
[01:50] <mscdex> mischief: so g++ -v reports 4.2.4?
[01:50] <mape> difekta: just an js object
[01:50] <difekta> no persistence?
[01:50] <mape> Nope, so that will lower performence a lot
[01:50] <mischief> mscdex, eg++ reports 4.2.4
[01:50] <mape> but since you can just spawn more node processes it scales as long as you have cpu and the db can handle it
[01:50] <difekta> luckily mongo is insanely fast.
[01:50] <mscdex> mischief: out of curiousity, can you post your "Configured with" line too?
[01:51] <mape> it scales linearly so :)
[01:51] <mischief> mscdex, http://gist.github.com/470337
[01:52] Aria has joined the channel
[01:52] <mscdex> yeah that's what i got too
[01:52] <mscdex> hmm
[01:52] <mjr_> mscdex: I think you and I are the only ones that think Crockford Files is funny.  Are we too old for the internet?
[01:53] <difekta> oh, node and mongo are fine. ruby died.
[01:53] <mscdex> mjr_: possibly
[01:53] <difekta> we had too many requests coming from a ruby process
[01:53] <mape> difekta: so yeah, should be a good fit, just make sure you save the gif as a buffer so no time is spend serving it, and then you just track the data to the db
[01:54] <shimondoodkin> is Crockford Files= javascript files?
[01:55] <difekta> oh cool. thanks.
[01:56] <difekta> can't you just respond with text? a non-image?
[01:56] <difekta> wonder whether any problems would ensue if you returned an invalid gif.
[01:56] <shimondoodkin> and call it with javscript tag...
[01:56] <mscdex> mischief: if you haven't already, post on the mailing list about your compilation issue. ryah is on vacation yet, but he may be able to figure out the cause when he gets back?
[01:57] <mape> difekta: in some browsers it will look shitty
[01:57] viktors has joined the channel
[01:57] <mape> and a 1px transperant gif is like 30bytes
[01:57] <mischief> mscdex, this post from nearly a year ago seems to describe the same problem http://code.google.com/p/chromium/issues/detail?id=25936
[01:58] <mscdex> mischief: i saw that, but the root cause of that instance looks unrelated to what the issue is here
[01:58] <mischief> but of course that is under chromium, not node :)
[01:59] <difekta> mape can you point me to a howto on saving the gif as a buffer?
[01:59] <mape> difekta: I'll give you some code, 1sec
[01:59] <difekta> http://franciscotreacy.com/note/visitor-tracking-with-nodejs/
[02:01] <difekta> sure, that would be appreciated.
[02:01] <difekta> you live in SF?
[02:01] <difekta> come work for us. :D
[02:01] <mape> No, Sweden
[02:01] <difekta> oh. nevermind.
[02:01] <mape> Got a job so I can move? ;)
[02:01] <mscdex> shimondoodkin: The Crockford Files: http://img638.imageshack.us/img638/9730/crockfordfiles.png
[02:01] donspaulding has joined the channel
[02:01] <difekta> lol. probably sooner or later we will actually.
[02:02] <shimondoodkin> :)
[02:02] <mape> difekta: http://gist.github.com/470352
[02:03] <mape> oh, hmm
[02:03] <shimondoodkin> thanks mape
[02:03] <mischief> mscdex, how should i go about posting the problem on the mailing list? ive never used one before :)
[02:03] <shimondoodkin> i just was looking for it
[02:03] <shimondoodkin>  ;-)
[02:03] <mscdex> mischief: create a new post here: http://groups.google.com/group/nodejs
[02:04] <mischief> that's where i am at
[02:04] <mape> shimondoodkin: sharing is caring
[02:04] <mscdex> mischief: just click the "+ new post" link on the right
[02:06] markwubben has joined the channel
[02:07] <mjr_> mape: if you seriously want a job in the US, I'm sure you could hook that up.
[02:07] <mjr_> Sencha seems to be hiring everybody that's good at JavaScript.
[02:08] amuck has joined the channel
[02:08] <mape> Isn't getting a green card a pita?
[02:08] <mjr_> not as big of a pain as finding good people.
[02:08] <mjr_> You need to get a company to sponsor your "H1B visa" for a while.
[02:08] <mjr_> And then eventually you can get your green card, etc.
[02:08] <mape> Hmm k
[02:09] <mjr_> Everybody that I've worked with in the SF Bay Area has sponsored a bunch of people on H1B's.
[02:09] everton has left the channel
[02:09] <mjr_> Sure, Sweden has the most beautiful women in the world, but SF has the most beautiful jobs in the world.
[02:09] <mape> For sure
[02:10] <jaywalk> mjr_: are you sure that's a good trade-off though? is it worth it? :)
[02:10] <mjr_> jaywalk: it all depends on how you like to spend your time.
[02:10] <mscdex> heh
[02:11] <jaywalk> mjr_: I guess it does. I don't like having to choose though and imagine I don't have to ;)
[02:12] <mjr_> Yeah, US cities like NYC are a good tradeoff then.
[02:12] <mjr_> I've never seen a better place in the world for new tech jobs than SF though.
[02:14] <satori> It's got to be better than Sydney.
[02:14] <mape> What are the living expenses like in SF?
[02:14] <Aria> High.
[02:14] <mape> Compared to the pay
[02:14] <Aria> Not sure there.
[02:15] <mape> How many % to go rent?
[02:16] <mape> Where are the SF peeps when you need them
[02:16] statim has joined the channel
[02:16] <mischief> in SF i presume
[02:16] <mjr_> holy shit, housing in SF sucks.
[02:16] <mjr_> Sooo expensive.
[02:17] <mischief> yep
[02:17] <mjr_> It's like NYC expensive.
[02:17] <mape> So like 50% with a decent salary?
[02:17] <mjr_> Yeah, pretty much.
[02:17] <mape> Just for renting?
[02:17] <pquerna> yes.
[02:17] <mjr_> I dunno, I haven't rented in a while.  I've entered the world of property ownership a while back.
[02:17] <mjr_> But it's super fucking expensive.
[02:17] <pquerna> not 50%
[02:17] <pquerna> but still high compared to mostother parts of the bay area
[02:17] <mjr_> The good news is that salaries are generally quite good.
[02:17] <mischief> you could look for a job or living space outside of sf, maybe commute
[02:18] <mape> And is that central or just all around like 30min+ commute?
[02:18] malkomalko has joined the channel
[02:18] hassox has joined the channel
[02:18] <mjr_> Which is why I live in Oakland, right on the other side of the Bay Bridge.
[02:18] <pquerna> i would only do that if you found a place withint a 5 minute walk of BART
[02:18] <mjr_> pquerna: you live in the city?
[02:18] <pquerna> i've given up car ownership for now :)
[02:18] <pquerna> yes, noe valley
[02:19] <mjr_> You are SF-ing it up.  Home + work in the same city.
[02:19] <pquerna> #sfurban
[02:19] <mape> So in what range is a start salary?
[02:19] <mjr_> mape: SF has tons of drawbacks, but if you are good at what you do, and from what I've seen, you are, it can be very rewarding to work in SF or the Silicon Valley area.
[02:19] <mape> Tried to find data on it but seems US people don't like talking salary
[02:20] <bradleymeck> yub, the land of lawsuits
[02:20] <mjr_> Yeah, it all depends on what kind of deal you can negotiate.
[02:20] <mape> So pay vs benefits?
[02:20] <pquerna> my first job in the bay area i was paid 86k a year.
[02:20] <mjr_> Good programmers can usually find jobs over $100K/yr.
[02:20] <pquerna> you can very likely do better :x
[02:21] <mjr_> How much over depends on who you know and how good you can negotiate.
[02:21] <pquerna> they gave me raises quickly, to prevent the tempting 100k jobs :)
[02:21] <mape> And living expenses for a month is?
[02:21] <pquerna> but i was terrible at negotiating :)
[02:21] <mjr_> If you are single, you can live quite comfortably at $100,000/yr.
[02:21] <Aria> ACTION snorts a little.
[02:22] <pquerna> in the city, a 'decent' single room, no roomates/shared stuff, prolly $1500 a month.
[02:22] ajpiano has joined the channel
[02:22] <mscdex> jeesh
[02:23] <mjr_> Aria: can you decode your snort?
[02:23] <Aria> ACTION laughs. I'm feeding a family of three on $30,000/year ;-)
[02:23] <mape> Can't imagine having a hard time living on 8k a month, that is like 4 times what I do here
[02:23] <Aria> Not in SF, mind you.
[02:23] <Aria> But just ... yeah. Boggling amounts of money to me.
[02:23] <mape> Or well not 4 times, 3 times
[02:23] <pquerna> mape: wel, thats pre-tax
[02:23] <mjr_> It is crazy how much housing costs here, and how the salaries have to compensate for that.
[02:24] <mape> Plus everything is expensive as a fucking joke here in sweden
[02:24] <pquerna> the state+feds will take about 50% in the end
[02:24] <mape> Ah k
[02:24] <pquerna> then minus housing
[02:24] <mape> Bought a Aeron chair a while back and that cost $2k in sweden
[02:24] <pquerna> but most programers in the bay area have enough money for random toys, they aren't struggling.
[02:25] <satori> I have had a couple of 100K+ jobs before.... The money is nice, but i don't miss it. These days I am self/unemployed and no longer depressed.
[02:25] <mape> Seems like you can get em for like 850 in the US
[02:25] <pquerna> in the bay area? cheaper
[02:25] <pquerna> even new is like 700 i thought
[02:25] <mjr_> Oh yeah, we bought our entire office full of Aeron chairs for $300/ea on craigslist.
[02:25] <pquerna> used just troll craigslists for a bit
[02:25] <mjr_> But I think they are like $1,200 new.
[02:26] <mjr_> pquerna has seen how many Aeron chairs I have in my office.  
[02:26] <mape> Common metrics is to just take the cost before tax in the us and double it to get the prices in Sweden
[02:26] <mape> Plus we get everything late
[02:26] <mape> And we have shitty weather
[02:26] <mjr_> mape: my point is, this is really where you should be if you are into new tech.  It can be very rewarding.
[02:26] <mape> But then again we have free healtcare and whatnot
[02:26] <pquerna> of course, move to california, wait in lines for the iphone 4, the american dream!
[02:27] <satori> heh
[02:27] <mape> mjr_: Yeah, guess it is a lot easier to find people that share the intrest
[02:27] <satori> pquerna: Been watching the new Futuramas eh?
[02:27] <pquerna> new Futuramas?
[02:27] <mjr_> when you go to parties or meet random people, you can usually tell people what you do, and they'll understand.
[02:27] <pquerna> OMG
[02:28] <mape> pquerna: Hehe yeah, nah just feels like vibe is different.
[02:28] <pquerna> NEW futuramas
[02:28] <satori> yar
[02:28] <satori> 3 so far
[02:28] <mjr_> I did not know about those.
[02:28] <satori> latest was awesome iphone satire
[02:28] <skampler> a .se node.js company would be cool
[02:28] <mape> I have been to NY so kinda god a feel for US (if that even compares to SF). Couldn't finish a single meal, the portions are just silly
[02:29] <mape> skampler: Yeah, start a Lunarstorm competitor and get rich!
[02:29] <pquerna> you can eat in asian fusion small portion restaruants in sf if you like :D
[02:29] <satori> mape: I ordered kids meals for that reason :P
[02:29] <pkrumins> :D
[02:29] <mape> Hehe yeah, and I got a nice barbie-doll as well!
[02:30] <mape> Gotta love mcdonalds
[02:30] <mape> satori: Well I do own nodejs.se so.. :P
[02:30] <mscdex> yuck mcdonalds
[02:30] <skampler> mape: since lunarstorm is dead.. yeah :)
[02:32] <mape> Guess it would be nice to move to the US but the grass is always greener on the other side
[02:32] <pkrumins> I am also moving to the US
[02:32] <mjr_> pquerna: I just finished a major rewrite of dgram.js:  http://github.com/mranney/node/blob/master/lib/dgram.js
[02:32] <mape> pkrumins: Where are you now?
[02:32] <pkrumins> Latvia
[02:32] <mjr_> pquerna: that repo also has several tests, but I haven't finished the docs yet.  
[02:32] <mape> Ah, the land of oppertunity
[02:33] <mape> How is the tech scene there?
[02:33] <pquerna> jaywalk: reading it
[02:33] <pquerna> s/jaywalk/mjr/
[02:34] <pkrumins> mape, I am not sure because I don't follow local tech news
[02:34] <pkrumins> mape, but I guess almost nonexistent.
[02:34] donspaulding has joined the channel
[02:35] <mape> Yeah all we get in Sweden are "social media experts"
[02:35] <pkrumins> Like that, yes.
[02:35] <mape> Ie people with twitter that like to hang around with other people that have twitter and talk about disruptive media
[02:36] <pkrumins> Same nonsense here.
[02:36] JimBastard_ has joined the channel
[02:36] <JimBastard_> you around malkomalko ?
[02:38] <pquerna> mjr_: yeah.. the whole port before host thing still bugs me, i'm not sure what to do in dgram vs consistency with everything else :-/
[02:43] aheckmann has joined the channel
[02:48] <mjr_> pquerna: we need an address "type" or convention.  The variable argument parsing thing is super awkward.
[02:49] <mjr_> it leads to things like port, host, etc.  Oh, but sometimes "port" is actually a pathname in the filesystem.
[02:49] <mjr_> awkward.
[02:49] <mjr_> I'd like to see us move away from the magic, "we'll just figure out the socket type based on what port looks like" scheme.
[02:50] <mjr_> Anyway, time for me to eat and drink.
[02:50] tmpvar has joined the channel
[02:51] <tmpvar> im considering using the "visitor pattern" for providing functionality to a treelike structure (in js).  am I going insane with OOP?
[02:52] <Aria> Probably.
[02:54] <Aria> Since functions can have state in javascript via a closure, making a whole object to do it seems silly.
[02:54] <Aria> What treelike structure? What sort of function does it have?
[02:55] phiggins has joined the channel
[02:57] wilmoore has joined the channel
[02:58] <SubStack> tmpvar: I just built something to do that yesterday
[02:58] <SubStack> http://substack.net/posts/b63efc/Tree-Traversal-and-Transformation-in-Javascript 
[03:05] <tmpvar> SubStack, pure awesome.
[03:05] <SubStack> :D
[03:06] <tmpvar> hrm
[03:06] <tmpvar> so this proves I'm not insane lol
[03:06] <SubStack> or it proves that insanity enjoys company
[03:06] <SubStack> I did feel a little insane writing this
[03:06] <tmpvar> lol
[03:06] <tmpvar> i like it, nice and clean
[03:08] <tmpvar> its not exactly what I need, but very close (im not going to be working with raw json)
[03:08] <tmpvar> and it needs to function in the browser
[03:08] <tmpvar> in the good browsers anyhow ;)
[03:09] <SubStack> MIT license, have at it
[03:11] <tmpvar> cool, I'm refactoring my "composer" project into a more general purpose lib : http://github.com/tmpvar/carena/blob/master/lib/carena.js -- incase you were wondering :)
[03:12] <maushu> What happened to good old Function.toString()?
[03:14] ben_alman has joined the channel
[03:18] softdrink has joined the channel
[03:22] mw has joined the channel
[03:24] <SubStack> maushu: but first you've got to find them ;)
[03:24] ben_alman has joined the channel
[03:25] <maushu> And find them we shall! POWER UP ENGINES! FULL SPEED AHEAD!
[03:28] <satori> What are the obsatcles to compiling node on windows with mingw rather than cygwin?
[03:28] stepheneb has joined the channel
[03:30] mikeal1 has joined the channel
[03:32] <tmpvar> the deps
[03:32] <shimondoodkin> what are the deps? 1 i guess is threads
[03:33] <tmpvar> libeio is a major issue
[03:33] <satori> ahh
[03:33] <shimondoodkin> hehe
[03:33] <satori> needs posix'y stuff?
[03:33] <pkrumins> why is this: npm ! Error: You must compile node with ssl support to use the adduser feature
[03:33] <tmpvar> http://gist.github.com/403301
[03:34] <tmpvar> ^^ conversation with schmorp
[03:34] <pkrumins> oh, perhaps to send credentials to npm server securely
[03:34] <tmpvar> the guy who wrote libeio
[03:35] <satori> thx. explains everything
[03:37] <mape> please don't waste my time
[03:37] <tmpvar> yeah, he spanked me
[03:37] <tmpvar> lol.
[03:38] <tmpvar> bad tmpie, bad.
[03:38] <mape> hah, "wow, of course not"!
[03:38] isaacs has joined the channel
[03:39] <pkrumins> node-base64 now also has decode method. :)
[03:39] <pkrumins> just pushed.
[03:45] <mape> nice
[03:46] <shimondoodkin> good
[03:46] <skampler> fictorial: ping
[03:46] shahbaz has joined the channel
[03:52] coobr has joined the channel
[04:03] joshbuddy has joined the channel
[04:03] liucougar has joined the channel
[04:09] spot|3 has joined the channel
[04:18] phiggins has joined the channel
[04:22] jbr has joined the channel
[04:35] gabe_hollombe has joined the channel
[04:35] <gabe_hollombe> is there any way to fire off something like a synchronous child_process.exec ?
[04:35] <mape> why do you need it to be blocking?
[04:35] <satori> Why synchronous?
[04:36] <mape> noders, attack! :D
[04:36] <satori> lol!
[04:36] <gabe_hollombe> =-)  
[04:36] <satori> ASYNC OR DIE!!
[04:37] <satori> Seriously though, why can't you just wait for an async result before doing what needs doing.
[04:37] <gabe_hollombe> I understand that it'll be blocking, but this is a script that will be running as a sort of shell script and I want to check the results of another shell command before I continue 
[04:37] <mape> the wrap it in a callback?
[04:37] <gabe_hollombe> yeah, I know I can do that. I'm ok with the async way if i have to
[04:38] <satori> ^ do that. call the second shell scipr in the firsts callback handler
[04:38] <gabe_hollombe> but in this case a blocking call would be OK with me
[04:38] <Aria> Hehe. Sync leads to evil ;-)
[04:38] <gabe_hollombe> so I'm just asking if it's possible is all
[04:38] <Aria> Allow one, and people start using them out of expedience and then boom
[04:38] <mape> don't think there is an api for it
[04:40] <mape> Aria: how is the html parsing going?
[04:40] <satori> You could also write a third shell script to wrap the other two :P
[04:40] <Aria> Pretty darn good.
[04:40] jbr has joined the channel
[04:40] <Aria> It works, I'm about to rework the API into something I hope is final
[04:40] <Aria> And making it play super nice with jsdom
[04:40] <mape> awsome
[04:40] <gabe_hollombe> mape: nod. thanks for your attention
[04:40] <mape> gabe_hollombe: hope it works out :)
[04:41] <mape> Aria: it's covering all the tests now?
[04:41] <Aria> If I can get servers to stop crashing on me, I'll spend some time on it
[04:41] <Aria> No, but it covers more than the reference code.
[04:41] <mape> :/
[04:41] ThePub has joined the channel
[04:41] <Aria> And the fails are weird edge cases
[04:41] <mape> yeah, guess it can't handle everything
[04:42] <Aria> Not yet!
[04:42] <mape> so does the fails mean total failure or just that it transforms the output?
[04:42] <Aria> Just that it doesn't make the same output the testsuite expects.
[04:42] <Aria> There should be few or no complete kabooms.
[04:42] <Aria> Those are bugs no matter what.
[04:43] <mape> but if I insert a lonely <table> in the middle of the html does it strip it, close it or just go home crying?
[04:45] mtodd has joined the channel
[04:48] Guest25764 has joined the channel
[04:50] <Aria> I believe that gets stripped.
[04:50] <Aria> I'd have to check the spec
[04:51] <mape> as long as it doesnt break down all together Im a happy camper
[04:51] <Aria> that's the idea
[04:51] jsilver has joined the channel
[04:54] <jsilver> *PING*
[04:56] <Aria> PONG
[04:56] <jsilver> excellent
[04:56] <jsilver> i knew i'd find you here
[04:56] <jsilver> hi
[04:56] <Aria> Hello.
[04:57] <jsilver> what's coding on
[04:57] <jsilver> if anything
[04:57] <mape> jsilver: http://github.com/mape/connect-assetmanager
[04:58] <jsilver> click-izzle
[04:58] <tmpvar> SubStack, you still around?
[04:58] <jsilver> mape: whoa
[04:58] <jsilver> mape: that reminds me of ruby asset manager
[04:58] gilbertleung has joined the channel
[04:59] <jsilver> cool++
[04:59] <gilbertleung> hi
[04:59] <tmpvar> mape, nice :)
[04:59] technoweenie has joined the channel
[04:59] <gilbertleung> nodejs / js newbie here
[04:59] <gilbertleung> when i require something
[04:59] <gilbertleung> require("somelib")
[04:59] <mape> hopefully people find it handy/use it
[04:59] <gilbertleung> is there anyway to avoid polluting the current namespace ?
[04:59] <jsilver> connect is like RACK isnt it
[05:00] <gilbertleung> e.g require("somelib") as "somename"
[05:00] <jsilver> are you using any other connect frameworks
[05:00] <mape> from what I gathered yeah
[05:00] <mape> no just pure connect
[05:00] <mape> gilbertleung: they are isolated
[05:00] <jsilver> gilbertleung, var = require('module'); i believe sets var to the scope
[05:00] <mape> so as long as you don't add stuff to global it is ok
[05:00] <tmpvar> gilbertleung, something like..  var ns = { sys : require("sys") }; ?
[05:00] <malkomalko> mape, with your asset manager, can you load up all files by regex?
[05:00] <jsilver> yes
[05:01] <malkomalko> like if I wanted to load up all the files in my JS directory ending in _awesome.js?
[05:01] <jsilver> gilbertleung, if you use var it isn't global
[05:01] <gilbertleung> wups, i think i misunderstood require
[05:01] <mape> malkomalko: hmm no, but do you really want that? there are priority in what order files go?
[05:01] <gilbertleung> thanks anyways =)
[05:01] <malkomalko> some projects take a lot of JS
[05:01] <jsilver> np
[05:01] <malkomalko> it'd be nice to be able to specific just one or two paths 
[05:01] <malkomalko> instead of listing out every js file
[05:01] <mape> and in what order?
[05:02] <tmpvar> random order, ftw
[05:02] <malkomalko> one sec, let me go grab a link 
[05:02] <mape> like 'jquery.js', '*', 'jquery.myproject.js' ?
[05:02] <malkomalko> http://documentcloud.github.com/jammit/
[05:03] <malkomalko> configuration section
[05:03] <mape> ah neat, haven't seen that before
[05:03] <malkomalko> yah, use that in my ruby projects
[05:03] <malkomalko> some projects have a shitload of js, and only some of the order is really important
[05:04] <mape> yeah
[05:04] <malkomalko> it's just a thought, I would find it useful
[05:04] <mape> for sure, wouldn't be hard to do
[05:05] <jsilver> w0rd
[05:05] <jsilver> cool thing mape
[05:06] <jsilver> what's the word about Connect right now
[05:06] <jsilver> is it the hot thing now
[05:06] <mape> flaccid
[05:06] <mape> Guess it really just needs more modules
[05:07] <mape> The core seems solid
[05:07] <jsilver> interesting
[05:07] programble has joined the channel
[05:08] <jsilver> WELL HELLO THAR!!!!!!!!!!
[05:09] <jsilver> what's the name of the bot that wargamez.mape.me uses?
[05:09] <mape> WarBot
[05:09] <jsilver> lul
[05:09] DarthShrine has joined the channel
[05:10] <mape> Aria: what is your github handle?
[05:10] <Aria> aredridel
[05:10] <mape> thanks
[05:12] <jsilver> Aria, are you female? LuL
[05:12] <jsilver> or are you female... online
[05:12] <Aria> Everyone always asks me that.
[05:12] <jsilver> :P
[05:12] <jsilver> i guess not...
[05:12] <jsilver> :(
[05:12] <jsilver> i was hoping that you would be the nerdy javascript hipster chick of my dreams
[05:12] <jsilver> lul
[05:13] <mape> you'll probly find someone in school
[05:13] <jsilver> tru
[05:14] <jsilver> not one that knows JavaScript tho
[05:14] <jsilver> :P
[05:14] <jsilver> or Ruby
[05:14] <mape> what grade are you in?
[05:14] sztanpet has joined the channel
[05:15] <jsilver> I'm not in School right now but I may go study Software Development at a local college for fun
[05:15] <jsilver> I'm just doing indie consulting stuff right now
[05:16] <tmpvar> haha
[05:16] <satori> I'm unemplyed, err, I mean doing indie consulting stuff, too.
[05:16] <jsilver> meh to that, i'm actually making money 
[05:16] <satori> jk
[05:16] <jsilver> its okay
[05:17] <jsilver> ive had to validate it to a lot of ppl
[05:17] <jsilver> my friend's parents, who helps me hate ruby on rails
[05:17] <jsilver> its kinda funny
[05:17] <jsilver> they put me on the spot to 1. explain what this thing is 2. explain why can't it be learned in college etc etc
[05:18] <Aria> Oh, jsilver, if only you knew the irony of wishing I was the hipster girl of your dreams.
[05:18] <jsilver> !
[05:18] sztanpet has joined the channel
[05:18] rictic has joined the channel
[05:18] <jsilver> so anyway
[05:18] <jsilver> oh yeah and then they said it was okay "As a Hobby"
[05:18] <jsilver> Lul
[05:19] <jsilver> i'm just all
[05:19] <mape> Aria: Your all corp? hehe
[05:19] <jsilver> Do you, I'll worry about me
[05:19] <jsilver> Lol
[05:19] <satori> So ur friends parents are Ruby haters? What do they think of node?
[05:19] <jsilver> they don't even know what it is
[05:19] <jsilver> or care
[05:19] <jsilver> they just know they hate RoR
[05:19] beelzabub1 has joined the channel
[05:19] <Aria> Ever so much more amusing than that.
[05:19] <jsilver> Do tell
[05:20] <mape> You burn trees for fun in your spare time?
[05:20] <jsilver> Lollin'
[05:20] <beelzabub1> hey guys
[05:20] <beelzabub1> quick question about js2c
[05:20] <mape> And listen to Krafwerk while doing it
[05:20] <beelzabub1> do you know what format it puts the data into?
[05:20] <satori> I just gave up with js2c
[05:20] <beelzabub1> is it utf8?
[05:20] <beelzabub1> ascii?
[05:20] <beelzabub1> whatever format the source is in?
[05:21] <tmpvar> "this is my pocket calculator .. <beep> <boop>"
[05:21] <satori> I was using ANSI I think
[05:21] <beelzabub1> ok - so externalasciistring should work on it, right?
[05:21] <satori> js2c works well enough, but I could get require to work on my internalized scripts
[05:21] <jsilver> Aria: is it the fact that you have Penis
[05:21] <Aria> Married, transsexual, hippie, hipster-hatin, 29-year-old rural geek.
[05:22] <mape> tmpvar: I'm the operator with my pocket calculator!
[05:22] <Aria> Or in a word, yes. 
[05:22] <jsilver> word
[05:22] <jsilver> cool dude
[05:22] <jsilver> Lol
[05:23] <mape> Meh I'm thinking hipster == hippie
[05:23] <beelzabub1> i've been tasked with making some optimizations to nodejs at work
[05:23] <jsilver> wrong
[05:23] <mape> so hippie are the indie tight pants people?
[05:23] <beelzabub1> so going through a few things on my checklist
[05:23] <mape> *hipster
[05:23] <beelzabub1> (palm)
[05:23] <jsilver> somewhat
[05:23] <jsilver> it's urban people on an intellectual vibe
[05:23] <satori> beelzabub1: I was trying to do it with addon code
[05:23] steadicat has joined the channel
[05:23] <jsilver> it's the nerdy kids you see hanging out at a coffeeshop
[05:23] <jsilver> riding fixxy bikes
[05:23] <mape> In other words, people who listen to Oasis?
[05:23] <beelzabub1> satori: can you clarify what you are referring to?
[05:23] <jsilver> acting "too" cool
[05:24] <tmpvar> lol, you think those are hipsters?
[05:24] <technoweenie> hipsters are the kids that dress like george costanza
[05:24] <satori> js2c
[05:24] <jsilver> oh yeah
[05:24] <tmpvar> haha.
[05:24] <jsilver> and totally over-the-top vintage dressing
[05:24] <tmpvar> the "ironic" kids
[05:24] <jsilver> "too" cool attitude
[05:24] <beelzabub1> satori : i thought js2c was from v8
[05:24] <mape> Aria: So how can you be a hippie and still use computers? Or do you have somekinda "hempbook"? :P
[05:24] <technoweenie> http://startfinish.sspeier.com/?p=443
[05:24] <Aria> Oh heck yes.
[05:24] <technoweenie> hippie doesnt mean amish
[05:25] <Aria> Communication technology fits in right nicely.
[05:25] <satori> beelzabub1: yeah it is, but node uses it to stuff scripts in the binary, I tried to do the same with binaryaddons with limited success
[05:25] <mape> tmpvar: hippie is hugging trees doing lsd kinda people?
[05:25] <beelzabub1> what are binaryaddons?
[05:25] <mape> using hemp clothes living in the rural areas?
[05:25] <satori> <name>.node files
[05:25] <Aria> LSD optional.
[05:25] gb_str has joined the channel
[05:25] <jsilver> actually
[05:26] <jsilver> I think LSD is kinda bad for you
[05:26] <jsilver> :P
[05:26] <beelzabub1> ahh - so kinda like pre-serialized files?
[05:26] <Aria> beelzabub1: Compiled C++, actually
[05:26] <satori> beelzabub1: They are just char arrays in a header file
[05:26] <mape> http://5by5.tv/bigwebshow/11 for those interested in Nicole Sullivans work on OOCSS
[05:27] <SubStack> tmpvar: pong
[05:27] <beelzabub1> i think i'm missing an important part of the background - let me explain the way i think this works & then you can explain why I'm an idiot :)
[05:27] <satori> sure :P
[05:27] <tmpvar> SubStack, here is the start of my implementation: http://gist.github.com/470440
[05:27] <beelzabub1> js2c grabs all the node.js library code & creates a giant header with those files "blobbed" into char arrays
[05:28] <beelzabub1> then you load each file into v8 on-demand
[05:28] <SubStack> tmpvar: neat. I considered adding a stop condition to mine
[05:28] <beelzabub1> & by load i mean give to v8 to compile
[05:28] <satori> That is correct. Though I think node may precompile them at startup
[05:28] <SubStack> still might, I only just wrote it last night after all
[05:28] <beelzabub1> not that I saw, but i may be wrong
[05:28] <tmpvar> SubStack, I think by passing walker as an optional second param to the callback could be really beneficial in the future
[05:29] <beelzabub1> in any case, what are binaryaddons?
[05:29] <satori> Just a dynamic c++ lib that node can load and use like a regular js module
[05:29] <SubStack> tmpvar: if you can find a use for it client-side
[05:29] <satori> called <name>.node by convention
[05:29] <beelzabub1> oh - ok. i think i get it
[05:30] <beelzabub1> ok ok - got it
[05:30] <beelzabub1> dydlib for JS
[05:30] <beelzabub1> rather dlopen
[05:30] <tmpvar> SubStack, I'll show you a use here in a couple mins if you are around
[05:30] <satori> exactly
[05:30] <SubStack> tmpvar: traverse should work in browser-side javascript too once the exports line is removed
[05:30] <beelzabub1> ok
[05:31] mikeal1 has joined the channel
[05:31] <beelzabub1> right now i'm focusing on getting the pre-compile cache framework going
[05:31] <SubStack> would be pretty simple to add branch and walk stop conditions
[05:32] <beelzabub1> hopefully the lawyers will sign off on the contributor agreement so i can upstream my work
[05:32] joshbuddy has joined the channel
[05:32] <satori> beelzabub1: How come your hacking the the standard lib loading stuff? out of curiosity?
[05:33] <beelzabub1> oh i wasn't
[05:33] <beelzabub1> i was just looking at why you use String::New
[05:33] <beelzabub1> it makes more sense to create an externalizedstring
[05:33] <beelzabub1> but i want to benchmark how big an effect that has
[05:34] <beelzabub1> (created a little bit of profiling infrastructure to measure delta cpu & memory easily) 
[05:34] <satori> k
[05:34] <satori> What is externalized string?
[05:35] <satori> another v8 type?
[05:35] <beelzabub1> also, the other thing (once i get the framework going as opposed to a proof-of-concept), we can store the pre-compiled js2c within node in addition to the source
[05:35] <beelzabub1> yup
[05:35] <beelzabub1> basically lets you point to a buffer outside of v8
[05:35] <beelzabub1> sorry - ExternalString
[05:35] <beelzabub1> that way it doesn't allocate any memory for it & whatnot
[05:36] <satori> Cool. I didn't know about that.
[05:36] <beelzabub1> yup
[05:36] <beelzabub1> i have 1 month to do all this work before i start working on the kernel team :)
[05:36] <satori> It would be neat to have a single binary web application. Deployment would be a breeze
[05:37] <beelzabub1> hmm - cool idea
[05:37] <beelzabub1> didn't even think of that logical conclusion
[05:37] <beelzabub1> i'm focusing solely on our needs
[05:37] <beelzabub1> :)
[05:37] <SubStack> satori: you could do that with a vm
[05:37] <technoweenie> having a binary node app would be sweet
[05:38] <technoweenie> we have an internal app that we sell that could benefit from that (we compile jruby to war files or something now)
[05:38] <beelzabub1> so is ExecuteString only ever called by Load?
[05:40] mtodd has joined the channel
[05:43] <sh1mmer> sorry if this is a dumb question, but what is process.binding doing?
[05:44] <mape> sh1mmer: for c thingys
[05:44] <sh1mmer> for example dns.js uses var dns = process.binding('cares'); and var binding      = process.binding('net');
[05:44] <Aria> It's a handle to the internal libraries.
[05:44] <Aria> Which expose a low-level javascript interface to their C++ cores.
[05:45] <sh1mmer> that makes sense so process.binding('net'); is giving access to what? berkley sockets?
[05:47] <sh1mmer> oh I see, it's node_net
[05:47] <Aria> Yeah. 
[05:47] <sh1mmer> ACTION is dumb
[05:47] <sh1mmer> thanks for clearing up the obvious
[05:47] <Aria> hehe. It's not obvious, really. It's supposed to be entirely hidden, really.
[05:48] <sh1mmer> We should expose it. It's useful
[05:48] <Aria> Oh?
[05:48] <sh1mmer> I'm about to start writing a DNS server
[05:48] <Aria> To anything but require('net') ?
[05:48] <sh1mmer> I need access to UDP
[05:48] <Aria> Heh, UDP should be exposed in better fashion by require('net')
[05:49] <Aria> shouldn't need to muck with the raw binding
[05:49] <sh1mmer> right now there isn't a UDP binding though
[05:50] <mape> Why can't people who interview just listen to the person they are interviewing rather then trying to look smart
[05:50] <beelzabub1> because interviews work both ways, don't they
[05:50] <Aria> Huh. I thought the was one now.
[05:51] <sh1mmer> Aria: I could be wrong. I'm looking at what Mikael is doing dgam.js I assume he's smarter than me
[05:51] <sh1mmer> so I'm looking at what he's doing
[05:51] <satori> require("net") is the wrong place for UDP. 
[05:51] <satori> net is all about streams. UDP is not
[05:51] <sh1mmer> satori: 
[05:51] <sh1mmer> right
[05:52] <sh1mmer> that's also a good point
[05:52] Rik` has joined the channel
[05:52] <sh1mmer> also UDP is a much less common case than streams, probably
[05:52] <satori> Yeah, but it is useful. I wrote a node module to do UPNP with UDP.
[05:52] <satori> useful for running test servers on a home network
[05:52] <sh1mmer> satori: can has link?
[05:53] <satori> I will githib it in a bit...
[05:53] <Rik`> micheil: I was sleeping so couldn't read but yeah, I'm an evangelist for Mozilla
[05:53] <satori> not very pretty though....I used rexeg to parse xml :P
[05:53] <sh1mmer> satori: regex is nom.
[05:54] <satori> the xml was so simple that it seemed like overkill to have a dependancy on an xml parser
[05:54] <satori> but yeah, it's ugly
[05:56] <SubStack> xml is so ugly
[05:56] <sh1mmer> yes, yes it is
[05:56] <mape> but it has namespaces!
[05:56] <SubStack> -_-
[05:56] <satori> sh1mmer: will post it l8r tonight. Can't access my home net atm.
[05:56] <sh1mmer> satori: okie
[05:57] rictic has joined the channel
[05:58] <tmpvar> xml namespaces are the devil
[05:58] <Aria> Hehe. I like 'em.
[05:58] <satori> UPNP is fairly basic. Just broadcast a pseudo GET request in a UDP packet, and listen for responses. Then simple SOAP req to the router that answers to do port fwds etc.
[05:58] <beelzabub1> anyone seen this before:   SyntaxError: Unexpected token ILLEGAL
[05:58] <beelzabub1> ?
[05:59] <Aria> Got a character that's not a legal token at all in there?
[05:59] <Aria> Something that could only belong inside a string
[05:59] <beelzabub1> that's what i figured - how can i debug the problem?
[06:00] <beelzabub1> why don't they print out the character code for it?
[06:00] <tmpvar> SubStack, http://github.com/tmpvar/carena/blob/master/index.html#L166 -- and demo: (bottom of page)  http://tmpvar.com/project/carena/
[06:00] <Rik`> micheil: I'm not gonna be around this weekend, so if you need to contact me, rik24d on twitter or gmail
[06:00] <sh1mmer> satori: "simple SOAP" ? isn't that an oximoron?
[06:01] <satori> it's simple when you treat the entire req as as a string and do a string.replace with the important bits :P
[06:01] jakehow has joined the channel
[06:01] <tmpvar> wow
[06:02] <sh1mmer> god i hate soap.
[06:02] <sh1mmer> ACTION wrote a soap library in javascript a while ago
[06:02] <tmpvar> talk to isaacs about xml and regex
[06:02] <mape> tmpvar: he tried to parse xml with regex? :S
[06:03] <sh1mmer> isaacs is dangerous with regex
[06:03] <SubStack> tmpvar: neat demo!
[06:03] <tmpvar> i think he started to
[06:03] <mape> isn't that like... not a good idea at all, in any case or form
[06:03] <tmpvar> SubStack, thanks :)
[06:03] <mape> unless you know exactly what html is generated
[06:04] <SubStack> sh1mmer: does it convert soap to json?
[06:04] <SubStack> that'd be a pretty great library to have around
[06:04] <sh1mmer> SubStack: well sort of
[06:04] <sh1mmer> SubStack: it uses e4x
[06:04] <mape> isn't soap just xml?
[06:04] <satori> yeah
[06:04] <SubStack> hah, "just" xml
[06:04] <sh1mmer> but you can't convert XML to JSON because there isn't implicit typing
[06:05] <SubStack> can xml really ever be "just" xml?
[06:05] <sh1mmer> mape: it's an envelope format
[06:05] <sh1mmer> which happens to be in XML
[06:05] <mape> its always just xml, which can be taken any way
[06:05] <mape> so a standard
[06:05] <satori> What happened to you XML? You used to be cool.
[06:06] <Aria> Java.
[06:06] <tmpvar> right
[06:06] <tmpvar> people started abusing it
[06:06] <sh1mmer> I have half an XML-RPC library which converts to JavaScript
[06:06] <mape> He grew old and his thinner younger brother JSON got all the girls?
[06:06] <tmpvar> hehe
[06:06] <satori> :)
[06:07] bpot has joined the channel
[06:07] <sh1mmer> XML-RPC has a type system expressed in XML so you can convert to JSON/JavaScript objects
[06:11] Validatorian has joined the channel
[06:11] Neil has joined the channel
[06:12] <mischief> mscdex, still around?
[06:22] SamuraiJack has joined the channel
[06:22] xer0xMA has joined the channel
[06:26] <beelzabub1> hey satori - what's the easiest way to specify a different compiler to build with?
[06:26] chrischris has joined the channel
[06:28] JimBastard has joined the channel
[06:28] <JimBastard> hey how can i get expressjs running in php
[06:28] <JimBastard> fuck, tj isnt here
[06:28] <JimBastard> nm
[06:28] <JimBastard> :-)
[06:39] qFox has joined the channel
[06:41] <mscdex> mischief: yep
[06:41] <mischief> mscdex, do you still have the source tree on that OBSD x64 box?
[06:42] <mscdex> yeah
[06:43] <mscdex> it's just a copy of node head
[06:43] <mscdex> master tarball
[06:44] <mischief> sigh.. i really wish it would work for me
[06:44] unomi has joined the channel
[06:45] chrischris has joined the channel
[06:47] tyfighter has joined the channel
[06:49] <mscdex> mischief: http://mscdex.net/upload/ry-node-b1901cd.tar.gz
[06:51] <mischief> on its way, thanks. ill do a diff and see if anything has changed
[06:52] LionMade0fLions has joined the channel
[07:00] rictic has joined the channel
[07:07] tyfighter has joined the channel
[07:08] everton has joined the channel
[07:09] <satori> beelzabub1: you mean with waf?
[07:09] <beelzabub1> yup - i found my co-workers patches for arm, so i'm all set
[07:10] <satori> cool.
[07:10] <mscdex> arm patches... hehe
[07:10] <satori> hehe
[07:11] <satori> I only learned enough about waf to get my project to compile on linux. haven't really looked into past that
[07:12] <mscdex> you could probably set the CC and CXX environment variables to the compiler
[07:12] <mscdex> also
[07:12] <beelzabub1> don't want to start a flamewar, but I really like CMake
[07:12] <beelzabub1> there were some other things
[07:12] <beelzabub1> like you can't run the tests when cross-compiling
[07:12] <mscdex> ah
[07:12] <satori> I hear lots of peeps say cmake is superior, but I'm not familiar with that either
[07:12] <beelzabub1> & no snapshot allowed
[07:13] <satori> I am a recent immigrant from windowsland
[07:13] <beelzabub1> the thing i like about cmake is that it's got IDE support
[07:13] <beelzabub1> so Qt creator, Eclipse, Visual studio, etc
[07:13] chrischris has joined the channel
[07:13] <satori> What IDE do you use?
[07:13] <beelzabub1> plus it's got a really to use language
[07:13] <beelzabub1> started recently to use qt creator
[07:13] <beelzabub1> i really love it
[07:14] <SubStack> oh gods, cmake
[07:14] <SubStack> why must all Makefile replacements suck so much?
[07:14] <beelzabub1> how does cmake suck?
[07:14] <satori> I am still mostly working in windows using linux vm ssh sessions.
[07:14] <SubStack> beelzabub1: curses
[07:15] <beelzabub1> i think a lot of that are complaints from older versions
[07:15] <mscdex> cmake cmake run
[07:15] <mscdex> :-D
[07:15] <mscdex> ncurses!
[07:15] <beelzabub1> the onyl thing bad about cmake is that it doesn't support the "configure" style
[07:15] <SubStack> and it breaks my flow of ./configure --configure=$PREFIX
[07:15] <beelzabub1> which does suck
[07:15] <beelzabub1> lol
[07:15] <beelzabub1> so you have to write a configure shell script specific to the project
[07:15] <SubStack> it's some strange -D thing in cmake that I always forget
[07:16] <beelzabub1> -DVAR=VALUE
[07:16] <SubStack> and I *always* install to a prefix
[07:16] <beelzabub1> i agree
[07:16] <beelzabub1> CMAKE_INSTALL_PREFIX
[07:16] <beelzabub1> but you're correct
[07:16] <beelzabub1> having ./configure is very nice
[07:16] <SubStack> how hard would it be for them to add a ./configure too?
[07:16] <beelzabub1> i'm really surprised they don't have some kind of cmake --generature-configure
[07:16] <beelzabub1> pretty hard
[07:16] <beelzabub1> at least back-port wise
[07:16] <SubStack> I've seen some projects that use cmake stick some hand-rolled thing in there
[07:16] <beelzabub1> because there's really no standard way to express options in a central location
[07:16] <SubStack> but it's far from common
[07:17] <satori> I did what node does and wrapped waf in a simple makefile, cause I like ./configure && make too
[07:17] <SubStack> er, s/--configure/--prefix/ above >_<
[07:17] MattJ has joined the channel
[07:17] <SubStack> irc is hard
[07:19] <SubStack> I think the biggest problem with make and autoconf replacements is that the people writing them thing that the people who compile packages actually give a shit about their stupid build system
[07:19] <JimBastard> SubStack: try using the trout
[07:19] <JimBastard> ACTION slaps SubStack with a wet trout.
[07:19] <SubStack> JimBastard: noted
[07:20] <SubStack> whenever I type some command and get smacked with an ncurses menu system I ^Z kill %% iyt
[07:20] <SubStack> s/iyt/it/
[07:21] <SubStack> I hate surprises.
[07:22] <mscdex> ncurses!
[07:24] teemow has joined the channel
[07:35] DracoBlue has joined the channel
[07:36] everton has joined the channel
[07:37] b_erb has joined the channel
[07:42] nuba has joined the channel
[07:51] <mscdex> mischief: any luck?
[07:51] <mischief> zero
[07:51] <mischief> same story with mksnapshot
[07:52] <mischief> there are no differences worth noting between my source and yours
[07:53] <mscdex> well, the only difference like i mentioned earlier that i know of is that i instead made /usr/bin/g++ a symlink to /usr/local/bin/eg++ and /usr/bin/gcc a symlink to /usr/local/bin/egcc
[07:53] <mscdex> otherwise what if you install openbsd 64bit in a vm?
[07:53] <mscdex> if you really have spare time
[07:54] <mscdex> see if it is the same
[07:54] <mscdex> *shrugs*
[07:54] felixge has joined the channel
[07:54] felixge has joined the channel
[07:57] everton has joined the channel
[07:57] felixge has joined the channel
[07:58] admc has joined the channel
[08:03] admc_ has joined the channel
[08:05] <mischief> mscdex, unfortunately openbsd doesnt run will in most vm technologies.. guess i can fire up vmware to test this
[08:05] <mscdex> i use virtualbox and have no problems
[08:06] <mscdex> i run a lot of different distros in vms
[08:17] femto has joined the channel
[08:18] jbr has joined the channel
[08:25] grahamalot has joined the channel
[08:28] amuck has joined the channel
[08:31] MattJ has joined the channel
[08:31] Gruni has joined the channel
[08:33] teemow has joined the channel
[08:33] jetienne has joined the channel
[08:53] ph^ has joined the channel
[09:00] <JimBastard> does anyone know any good software for routing midi data to applescript 
[09:01] <JimBastard> or just creating custom desktop shit based on a midi interface
[09:01] <JimBastard> errr, controller
[09:05] cloudhead has joined the channel
[09:05] <manveru> cloudhead: oi :)
[09:10] <manveru> cloudhead: do you use cradle directly or do you build some kind of orm around it?
[09:10] <JimBastard> resourcer!
[09:10] <JimBastard> ACTION is using it right now
[09:10] <JimBastard> http://github.com/cloudhead/resourcer manveru 
[09:10] <manveru> heh
[09:11] <JimBastard> (unreleased)
[09:11] <JimBastard> you can use cradle standalone if you want
[09:11] <JimBastard> and hardcode your models or something
[09:11] <manveru> yeah...
[09:11] <JimBastard> resourcer is in active development 
[09:11] <manveru> i ended up with half an orm, but figured someone has done it already
[09:12] <JimBastard> oi
[09:12] <manveru> thanks :)
[09:12] <JimBastard> you should commit some patches to resourcer, join the dark side :-)
[09:12] <JimBastard> http://github.com/cloudhead/resourcer/tree/master/test/ 
[09:12] <JimBastard> more of those please!
[09:12] <JimBastard> are you using vows?
[09:12] <manveru> i tried using vows
[09:13] <manveru> but got weird errors
[09:13] sztanpet has joined the channel
[09:13] <JimBastard> how long ago?
[09:13] <manveru> yesterday
[09:13] <JimBastard> what kind of weird errors?
[09:13] <manveru> using latest vows for coffee
[09:13] <JimBastard> its a bit temperamental if you dont set your vows up right
[09:15] <manveru> http://gist.github.com/470591
[09:15] <JimBastard> heh that looks clean lol
[09:15] <JimBastard> let me see the code
[09:15] <JimBastard> one sec
[09:16] <JimBastard> ACTION summons cloudhead 
[09:17] <manveru> :)
[09:17] <cloudhead> manveru: oi
[09:18] <cloudhead> checking out your gist
[09:18] <cloudhead> ACTION can't read coffee
[09:18] <JimBastard> yeah im thinking its like a real minor issue
[09:18] <cloudhead> hm ok maybe I can
[09:18] <JimBastard> manveru: can you post the code that coffee generates?
[09:19] <manveru> JimBastard: http://gist.github.com/470591#file_spec.js
[09:20] <JimBastard>   topic: function() { ?
[09:20] <manveru> it's async...
[09:21] aubergine has joined the channel
[09:21] <cloudhead> manveru: you using the github version?
[09:21] <JimBastard> is it not passing the callback though?
[09:21] <manveru> the vows page doesn't explain how to do that
[09:21] <manveru> cloudhead: yes
[09:21] <cloudhead> ah
[09:21] <cloudhead> ok
[09:21] <cloudhead> I see what might be the problem
[09:21] <cloudhead> coffee script does an implicit return
[09:22] <JimBastard> >><<
[09:22] <manveru> that is bad?
[09:22] <JimBastard> its a 90/10 thing for coffeescript i think
[09:22] <cloudhead> well, it depends what model.create returns
[09:22] <JimBastard> if thats the issue
[09:22] <cloudhead> if it doesn't return anything, ie `undefined`, then it's fine
[09:22] <cloudhead> if it returns anything else, it's a problem
[09:22] <cloudhead> because Vows will use that as the topic
[09:22] <cloudhead> and not the callback
[09:23] <manveru> it returns what cradle returns
[09:23] meder has joined the channel
[09:23] <cloudhead> ah, which is a promise
[09:23] <manveru> yeah
[09:23] <cloudhead> yea, so try it without returning anything
[09:24] <cloudhead> I'm not sure what happens actually when both callback is passed and a promise is returned
[09:24] Dmitry1 has joined the channel
[09:25] <manveru> ok, now they pass and i still get the error
[09:25] <JimBastard> morning Dmitry1 
[09:25] <JimBastard> :-)
[09:25] <Dmitry1> It is actually evening for me :)
[09:25] <JimBastard> ahaha
[09:25] <manveru> cloudhead: i have the feeling that the topic property tries to be too many things at once
[09:26] <JimBastard> i just watched your jsconf video, good stuff
[09:26] <JimBastard> i was in and out of the actual presentation, didnt catch it all
[09:26] <Dmitry1> JimBastard: Thanks
[09:26] <JimBastard> do you know if anyone is working on a raph based UI library?
[09:26] <JimBastard> like UI components and what not
[09:27] <Dmitry1> Noone, as to my knowledge.
[09:27] <manveru> anyway, i'll try resourcer
[09:27] <JimBastard> would that make sense to build?
[09:27] <JimBastard> ive been working on a lot of behaviors stuff with progressive enhancement
[09:27] <manveru> cloudhead: maybe you could add resourcer to npm?
[09:28] <JimBastard> ive got code for using html5 data-attribute to apply behaviors on top of DOM
[09:28] <manveru> i can use the tarball for now, but would be nice to get updates later :)
[09:29] <cloudhead> manveru: yea, I guess I should
[09:29] <cloudhead> manveru: what kind of error are you getting now?
[09:30] <manveru> same error
[09:30] <cloudhead> manveru: I managed to reproduce your error by returning a promise, but when I removed the return, it went away
[09:30] <manveru> i return undefined now instead
[09:30] <manveru> maybe some other return is causing problems too?
[09:30] <manveru> btw...
[09:30] <cloudhead> well, both of your topics should return `undefined`
[09:30] <manveru> http://github.com/cloudhead/resourcer/blob/master/lib/resourcer.js#L7-16
[09:31] <manveru> wouldn't it be nicer to require core once instead?
[09:31] <JimBastard> unreleased!
[09:31] <JimBastard> patch that shit biotch!
[09:31] <JimBastard> ACTION is talking to manveru 
[09:31] <manveru> oO
[09:31] <JimBastard> :-D
[09:31] <cloudhead> you can't really
[09:32] <cloudhead> cause um
[09:32] <cloudhead> well, actually now I would get the module object or something
[09:32] <cloudhead> the alternative is to iterate
[09:33] <manveru> var core = require('resourcer/core'); resourcer.use = core.use; ...
[09:33] <cloudhead> ohhh
[09:33] <cloudhead> I see what you mean
[09:33] <cloudhead> yea, because it's cached I prefer to have 1 variable less : )
[09:33] <manveru> less I/O... though i'm not sure how node handles requires
[09:33] <cloudhead> it's all cached
[09:33] <cloudhead> by path
[09:33] <cloudhead> so it just returns the object
[09:33] <manveru> ok
[09:34] <cloudhead> but yea, could be nicer with an extra assignment
[09:34] <manveru> can i patch? :)
[09:35] <cloudhead> well, then you may aswell try to figure it out with the `module` object
[09:35] <cloudhead> :>
[09:35] <manveru> figure what out?
[09:35] <cloudhead> how to consolidate all the dependencies
[09:36] <cloudhead> I think `module.exports = require('core')`
[09:36] <cloudhead> then add on to that
[09:36] <manveru> oh...
[09:36] <cloudhead> would work
[09:36] <manveru> you export all?
[09:36] <cloudhead> yea
[09:36] <cloudhead> I just didn't know how at the time
[09:36] <manveru> well, then that makes sense :)
[09:36] <cloudhead> and didn't want to iterate
[09:44] <manveru> weird, that doesn't quite seem to work
[09:51] tav has joined the channel
[09:51] <cloudhead> manveru: require() can be a pita
[09:51] <cloudhead> when there's lots of moving parts
[09:53] <manveru> not sure what's happening... maybe recursion issue?
[09:55] <cloudhead> what's it telling you?
[09:55] <cloudhead> technically it should be equivalent to requiring them separately
[09:55] <manveru> not quite equivalent
[09:55] <manveru> exports has some stuff already
[09:55] <cloudhead> different paths maybe
[09:56] <manveru> it says mixin is not defined
[09:56] <manveru> i checked, it's there
[09:57] maritz has joined the channel
[09:58] <cloudhead> hmm
[09:58] <cloudhead> yea it's giving me the same error
[09:59] <JimBastard> cloudhead: what timezone are you in?
[09:59] <manveru> UTC+9/JST
[10:00] <JimBastard> hee hee maybe i shoul dbe sleeping
[10:00] <cloudhead> JimBastard: GMT+1 right now
[10:00] <cloudhead> yea you should be ^_^
[10:00] <JimBastard> yeah, i dunno its 6am here
[10:00] <cloudhead> lol
[10:00] <JimBastard> me and indexzero are doing a broodmother push
[10:00] <mscdex> 6am here too. time to code!
[10:00] <JimBastard> im about to drink some coffee and dive into it
[10:01] <JimBastard> got the api stubbed out a few weeks ago, gonna implement some methods booyaa
[10:01] <manveru> cloudhead: you're from switzerland?
[10:01] <JimBastard> cloudhead is an international man of mystery
[10:01] <JimBastard> cloudhead is an international man of mystery #bastardfacts
[10:02] <manveru> i'm from austria, but live in japan since a couple of years
[10:02] <JimBastard> i got my theremin in the mail today, i was up for hours playing with that shit. might as well stay up
[10:03] <cloudhead> manveru: cool, yea I'm from .ch
[10:03] <cloudhead> moved to canada a while ago
[10:03] <beelzabub1> hmmm - so ScriptData::Precompile apparently doesn't have any real impact that I could measure
[10:03] <beelzabub1> need to look over my test case
[10:03] <beelzabub1> (well - serializing ScriptData:: Precompile & then using ScriptData::New on next runthrough)
[10:04] <manveru> now on to figuring out how to actually use resourcer
[10:04] <manveru> does it do lazy view creation?
[10:04] <cloudhead> yea
[10:05] <JimBastard> i got one manveru 
[10:05] <manveru> one what?
[10:05] <cloudhead> JimBastard: did indexzero take notes by any chance?
[10:05] aliem has joined the channel
[10:05] <cloudhead> I need to start writing docs for it ><
[10:05] <JimBastard> manveru: http://gist.github.com/470608
[10:05] <JimBastard> thats an example perhaps
[10:05] <JimBastard> i dunno
[10:06] <JimBastard> (top secret codes)
[10:06] <JimBastard> :p
[10:06] <manveru> lol
[10:06] <JimBastard> does that help?
[10:06] <cloudhead> manveru: it's DataMapper inspired
[10:06] <cloudhead> and then some
[10:07] <manveru> JimBastard: i guess?
[10:07] <JimBastard> >.<
[10:07] <JimBastard> cloudhead: maybe we can convince indexzero to write some docs
[10:07] <JimBastard> unless you want to do it
[10:08] <manveru> cloudhead: so filter is a shortcut for a map view?
[10:09] <manveru> no specs for reduce though
[10:10] Dmitry1 has joined the channel
[10:10] <manveru> and no support for attachments?
[10:10] <JimBastard> we were talking about that at nyc.js, the attachments
[10:11] <manveru> i use them a lot in my apps
[10:11] <manveru> and they're usually the most awkward to handle :)
[10:11] <JimBastard> yeah maybe you want to have an object representing your attachment and then set that as a property on your resource?
[10:11] <JimBastard> i dunno
[10:11] <JimBastard> >.<
[10:12] <manveru> no
[10:12] <manveru> all i need is a PUT to db/doc/attachment
[10:12] <JimBastard> ohh, you can do that up
[10:12] <manveru> if possible streaming from the request object
[10:12] <JimBastard> easu
[10:13] <manveru> and for GET, streaming the other way :)
[10:13] <manveru> i've got it implemented in cradle...
[10:13] <cloudhead> manveru: filter creates a certain type of map view
[10:14] <cloudhead> streamed attachments are supported in cradle
[10:14] <manveru> was just searching for a nice way to separate my model from the controller logic
[10:14] <cloudhead> but aren't part of resourcer yet
[10:15] <manveru> ok, i'll add that if i can
[10:16] proppy has joined the channel
[10:16] <proppy> hi
[10:17] <JimBastard> hi proppy 
[10:20] <proppy> typo spotted in node/LICENSE http://gist.github.com/464407 
[10:21] Alystair has joined the channel
[10:23] <JimBastard> github issue or submit a patch proppy 
[10:23] <JimBastard> irc at 6am eastern is kinda dead
[10:23] <mscdex> nonsense
[10:24] <JimBastard> im losing it anyway time to go code
[10:28] <micheil> what's up?
[10:31] <proppy> mscdex: nonsense ?
[10:31] <mscdex> proppy: yes, at the comment regarding it's dead in here at 6am
[10:31] <mscdex> ;-)
[10:31] <proppy> :)
[10:32] <proppy> mscdex: the more lively it is there, the more http://wargamez.mape.me/ is fun to watch
[10:32] <mscdex> micheil: not much, working on adding to and fixing parts of the node docs
[10:32] <micheil> hmm..
[10:38] stagas has joined the channel
[10:40] tzmartin has joined the channel
[11:03] Avius has joined the channel
[11:05] mies has joined the channel
[11:13] hpoydar has joined the channel
[11:13] satori has joined the channel
[11:20] meder has joined the channel
[11:23] claudiu__ has joined the channel
[11:34] Blackguard has joined the channel
[11:37] aheckmann has joined the channel
[11:37] femtoo has joined the channel
[11:42] markwubben has joined the channel
[11:44] mklappstuhl has joined the channel
[11:46] <claudiu__> hello, I am running a django based website, looking a bit over nodejs and the http://github.com/felixge/node-paperboy for serving the wesite static files
[11:47] <claudiu__> would you recommend it ? compared to nginx ?
[11:47] V1 has joined the channel
[11:49] <V1> Does anyone know if theres a module available for hypertable?
[11:50] <shimondoodkin> claudiu_: i don't know exactly but i would probaby use nginx for serving static files. unless you server files from memory then i woul use node for static files
[11:51] <shimondoodkin> s/woul/would
[12:00] <claudiu__> :)
[12:01] <shimondoodkin> V1: maybe this good for you: http://github.com/cwolves/nodeCassandra/blob/master/thrift.js
[12:01] <V1> I checked it out
[12:01] <V1> but when i saw his other .js files that where stuffed with PHP code... I gave up ;)
[12:02] <shimondoodkin> hehe i see
[12:08] <SubStack> http://github.com/substack/dnode # hooray for me!
[12:09] <SubStack> in that I completely changed the protocol and it still works
[12:11] <felixge> claudiu__: paperboy is not really optimized
[12:13] <shimondoodkin> SubStack: nice
[12:15] <SubStack> shimondoodkin: ^_^
[12:16] <shimondoodkin> V1: found another one ...kind of same.. http://github.com/danieldkim/cassandra-node-bridge 
[12:17] <claudiu__> felixge: ok :) thank you :)
[12:17] <SubStack> it's like an asynchronous DRb for node that can also transparently marshal callbacks in arguments so they execute on the side that defined them
[12:17] aubergine_ has joined the channel
[12:17] riottaba has joined the channel
[12:17] <V1> The downside of those projects just like jsondra is that they required another language to work, ruby or python
[12:20] malkomalko has joined the channel
[12:20] <V1> I would be rather double to have eventmachine and nodejs running on the same servers, or python twisted. You might aswell ditch nodejs than and go with those other event languages 
[12:22] <shimondoodkin> twisted is kind of good if you know python
[12:22] <malkomalko> top of the mornin
[12:23] <V1> What would be possible is use the Node.js buffers to speak with cassandra deamon
[12:23] <V1> As they support binary.
[12:23] <V1> as only protocol*
[12:24] siculars has joined the channel
[12:25] pavan_ has joined the channel
[12:28] leepa has joined the channel
[12:33] markwubben has joined the channel
[12:34] donspaulding has joined the channel
[12:37] femto has joined the channel
[12:52] hpoydar has joined the channel
[12:54] <micheil> this is seriously one hot way to do documentation: http://jqapi.com/
[12:55] <mape> micheil: code parser?
[12:55] <micheil> not sure
[12:55] <micheil> I just think it looks good
[12:55] <micheil> (sorta what I was aiming to do with the node.js doc)
[12:56] <leepa> air version - very cool
[12:57] <micheil> eh'' I'm slightly less interested in a downloadable.
[12:57] <micheil> just in a html version.
[13:02] <mscdex> i've been working on the api.markdown again this morning
[13:03] <mape> mscdex: If you want it into the offical website you might want to wait a bit with that
[13:03] <mscdex> :S
[13:05] <mscdex> why is that?
[13:06] <mape> There is a new doc being built
[13:06] <mscdex> you mean the layout?
[13:07] <mape> layout/design/markup
[13:07] <mscdex> isn't that for 0.2 though?
[13:07] <mape> asap I would believe
[13:07] <mscdex> or no?
[13:07] <mscdex> oh
[13:12] <mape> micheil: was wondering, is websocket info compressed in any way?
[13:12] <mape> or is it possible?
[13:13] <micheil> mape: no.
[13:13] <micheil> well., no to the first question
[13:13] <micheil> as for compression, it's just text.
[13:14] <micheil> if you can compress it, you can effectively get compression
[13:14] <micheil> eg, sending and receiving bson data or json
[13:14] <micheil> *over
[13:14] <mape> Yeah, wondering if gziping would speed things up or if the decoding takes more time
[13:14] <micheil> mape: do you have an email address I can contact you on?
[13:14] <mape> or other compression
[13:14] <mape> micheil: mape@mape.me
[13:14] <micheil> well, I don't think I'd do gzipping
[13:14] <micheil> depends on the specific server throughput requirements.
[13:15] <micheil> Mr.Doob needed extremely low latency, so he uses a very very small and string based protocol
[13:15] <micheil> (custom)
[13:15] <micheil> PusherApp like to use JSON data, as does Sockets,io
[13:15] <mape> for bw issues or cpu?
[13:16] <micheil> well, as soon as you start encoding data, you have this sort of thing happening:
[13:16] <micheil> latency = network i/o latency + (transcoding latency * 2)
[13:17] <mape> Yeah, so I guess the content needs to be big enough to warrant the transcoding
[13:17] <micheil> exactly.
[13:17] <micheil> just like minifying html generally isn't really worth it.
[13:18] <mape> sure it is
[13:18] <mape> The parsing doesn't get slower just because you remove whitespace and other redundant things
[13:19] <mape> And if the html is big enough surely it is worth to gzip it
[13:19] <micheil> mape: minifying != gzipping.
[13:19] <micheil> gzipping is protocol levle.
[13:19] <mape> Jup, that is why I added an and
[13:19] <micheil> okay
[13:20] <mape> But if you can shave of 8-10% of the html size by stripping whitespace there is no reason not to
[13:20] <mape> Unless you have to do it on each page load
[13:20] <mape> Then it might become an issue
[13:20] <mape> But for cached pages I see no reason not to do it
[13:21] <mape> And even if they are dynamic you can pre strip the whitespace and just fill in the blanks
[13:21] <micheil> yeah, true
[13:21] <micheil> but there's always that issue.
[13:21] <micheil> latency = network i/o latency + (transcoding latency * 2)
[13:22] <mape> Well there is no transcoding added when you strip redundant stuff in the html
[13:22] <mape> The parser still does what it always does
[13:22] <mape> just less stuff to fetch over the wire
[13:25] <mape> But yeah, would be interesting to see in what cases using compressing is worth it when working on websocket projects
[13:26] <mape> Hmm there should really be an idea bucket for node, have a page where people can add interesting ideas and have people vote if they would like to see it or not
[13:26] <mape> And then people would be able to attach links to each entry
[13:27] <DracoBlue> mape: http://wargamez.mape.me/ looks great, should it update itself?
[13:28] <mape> DracoBlue: What do you mean with update itself?
[13:28] <mape> It should show data in real time yeah.
[13:28] <DracoBlue> ah, I see.
[13:28] <mape> But the code won't autoupdate no ;)
[13:28] <DracoBlue> I had it running for something like 1 hour and came back, and it was not updated.
[13:28] <DracoBlue> hehe ;)
[13:28] <micheil> mape: do you have a realname there?
[13:28] <DracoBlue> now it works great
[13:28] <mape> micheil: Mine?
[13:28] <micheil> yah
[13:28] <mape> Mathias Pettersson
[13:28] <micheil> k
[13:29] <mape> Putting together a mail bomb to send me? 
[13:30] davidwalsh has joined the channel
[13:31] <micheil> mape: yeah, something like that.
[13:32] <mape> Awsome
[13:36] JSNewbie has joined the channel
[13:38] <micheil> mape: check your emails ;P
[13:39] <mape> kk
[13:45] pato_ has joined the channel
[13:45] <mape> micheil: Hmm sure that is a good fit? Wargames isn't really a good example, mrdoobs sketchpad is cooler i that respect
[13:46] <alcuadrado> hi everybody
[13:47] <mape> Hey
[13:47] <alcuadrado> I'm really interested in node.js, but I have some doubts
[13:47] <mape> Spill em :)
[13:47] <alcuadrado> about what kind of projects is it more suitable for..
[13:47] proppy has joined the channel
[13:47] <proppy> hi
[13:48] <proppy> mape: showing up wargamez to a buddy there
[13:48] <mape> proppy: :)
[13:48] <mape> micheil: Long range!
[13:48] <proppy> ahah :)
[13:48] <micheil> mape: keep it to email, thanks.
[13:48] <mape> k
[13:48] stepheneb has joined the channel
[13:49] ph^ has joined the channel
[13:49] <mape> alcuadrado: So what are you looking at using it for?
[13:50] kersny has joined the channel
[13:50] <alcuadrado> nothing in mind, that's the problem hehe, I'm a php developer, and love php, but i'm think i'm falling in love with js :P
[13:50] <alcuadrado> so node.js cautch my attention
[13:50] <mape> alcuadrado: Well what is lacking now is an all in one web framework
[13:51] <alcuadrado> that was one of my doubts
[13:51] sveimac has joined the channel
[13:51] <alcuadrado> I've seing many interesting modules, but no full-stack fw
[13:51] <mape> Yeah, connect is trying to solve that on a low level but still nothing that just works for everyone.
[13:52] <mape> Which I guess is good to stay away from bloat but bad if you just one one thing to do all things.
[13:53] <alcuadrado> never heared about connect
[13:53] <alcuadrado> i'll take a look at that
[13:53] <alcuadrado> what a name for a web framework
[13:54] <alcuadrado> forgot about googling it without "node.js" :P
[13:54] <alcuadrado> forget*
[13:55] <mape> alcuadrado: If you check the bottom of http://github.com/mape/connect-assetmanager
[13:55] <micheil> alcuadrado: well, we'd just have to call it Cake.js or NodeOnCode.
[13:55] <micheil> or NodeOnWheels, or Dode
[13:55] <mape> Shows pretty much how you would do a small site that uses some connect middleware and serves static files
[13:56] <alcuadrado> cool, thanks for the link :)
[13:57] <alcuadrado> micheil, didn't catch your comment, are you a dev of connect?
[13:57] <micheil> alcuadrado: no, just saying that Connect is a perfact name for what it is.
[13:57] <micheil> it Connects your applications together
[13:57] <micheil> it's a glue with extras.
[13:57] <micheil> (chunky bits anyone?)
[13:58] <mape> And some default applications
[13:58] MrTopf has joined the channel
[13:58] <alcuadrado> I didn't mean it is a bad name, just that it's very common
[13:58] piratepenguin has joined the channel
[14:00] <alcuadrado> is there any preference for doing this http://www.pastie.org/1038808 insetad of this http://www.pastie.org/1038810 in the javascript community? I've seen that many times..
[14:01] <mape> alcuadrado: one is anonymous and the other isn't
[14:02] <alcuadrado> yeah, i know
[14:02] <alcuadrado> but they are almost givin a name at the same time (assigning it to a variable)
[14:03] <micheil> alcuadrado: I use one in a certain circumstance, the other in another.
[14:03] <micheil> function Server(args){ // is a constructor
[14:04] <micheil> var mixin = function(args){ // is a standard function
[14:05] bburky has joined the channel
[14:05] <alcuadrado> I see...
[14:05] <micheil> that's my own little standard
[14:05] <micheil> it's probably nothing that has any actual performance difference
[14:05] <alcuadrado> cool, that was my main wonder
[14:05] <alcuadrado> maybe that was a performance issue
[14:06] <alcuadrado> BTW, I've seen many arguments against using that inheritance model (using functions as constructors) in favor of usign Object.create(), most of them from crockford and alex sexton...
[14:06] <alcuadrado> but in fact, I'm not very used to prototypal inheritance
[14:06] <mape> alcuadrado: Hehe you will see a lot of different arguments for and against things in javascript :)
[14:07] <mape> Its organized anarchy
[14:07] <Avius> real difference is that "function a() {}" is 'moved' to the top of the scope, so it can be referenced above where it is defined
[14:08] <micheil> ACTION never uses much inheritance or anything
[14:08] <micheil> but my code is simple.. really.
[14:10] <alcuadrado> mape, that's one of the most disapointing this of JS I think... whenever I read about something iteresting, it get a bitter taste about the lack of standarization..
[14:10] <mape> alcuadrado: And php is better?
[14:10] <alcuadrado> avaius, thanks for the technical explanation
[14:10] <micheil> mape: call of the day.
[14:10] <alcuadrado> in fact, php is a piece of shit
[14:10] <micheil> Avius: really?
[14:10] <alcuadrado> but a lovely piece of shit :)
[14:11] <mape> hehe
[14:11] <micheil> heh heh.. it has bloat & float problems..
[14:11] <Avius> positive micheil
[14:11] <micheil> Avius: any actual references for that?
[14:11] ollie has joined the channel
[14:11] y has joined the channel
[14:12] <alcuadrado> but in that aspect, it may be better, every language has it's good parts
[14:12] <Avius> not any i can link, but its easily tested
[14:12] <shimondoodkin> hellomaybe somebody knows why- var Buffer=require('buffer').Buffer; fs.readFile(filename, function (err, data) {var buf=new Buffer(data,'utf8'); throws me wrong argument error in buffer?  
[14:12] brandon_beacher has joined the channel
[14:14] <micheil> shimondoodkin: can you give us the exact error?
[14:14] <shimondoodkin> http://gist.github.com/470732
[14:14] <shimondoodkin> one moment
[14:15] rictic has joined the channel
[14:15] <micheil> okay.. so.. get and set are keywords in ES5, yeah?
[14:16] <micheil> like, set vname = function(){ ... };
[14:16] <micheil> then you can do: vname = "test";
[14:16] <micheil> which gets called as vname("test")
[14:16] <micheil> but it's faster, yeah?
[14:18] <shimondoodkin> http://gist.github.com/470732 - < with error on top
[14:18] <Avius> i think it's just syntactic sugar, would love to see some benchmarks though
[14:19] maushu has joined the channel
[14:21] sechrist has joined the channel
[14:22] donspaulding has joined the channel
[14:23] c4milo has joined the channel
[14:25] rictic has joined the channel
[14:27] bradleymeck has joined the channel
[14:28] <shimondoodkin> http://gist.github.com/470742 simple script same error
[14:30] bburky has left the channel
[14:32] <Avius> i think its the fine print in the readFile description
[14:32] <Avius> "If no encoding is specified, then the raw buffer is returned."
[14:33] <micheil> Avius: that'd be it.
[14:33] <shimondoodkin> so i already have a buffer?
[14:33] <micheil> yeah
[14:33] <shimondoodkin> hey you right ive specified encoding and it worked
[14:33] <shimondoodkin> thanks
[14:39] steadicat has joined the channel
[14:42] stagas has joined the channel
[14:48] <mape> micheil: Seems the firefox 4.0 Beta 1 doesn't send a trigger onclose :/
[14:51] sechrist has joined the channel
[14:52] technoweenie has joined the channel
[14:58] charlesjolley- has joined the channel
[15:01] steadicat has joined the channel
[15:02] athenot has joined the channel
[15:08] <micheil> yeah. there's something odd with the closes atm
[15:09] V1 has joined the channel
[15:10] <micheil> things for node-websocket-server v1.3.20: better support for sub-protocols, origins, and related.
[15:13] ph^__ has joined the channel
[15:16] <mape> micheil: Think there is a bug in the echo example
[15:16] <mape> conn.broadcast instead of server.broadcast
[15:19] jashkenas has joined the channel
[15:22] rictic has joined the channel
[15:29] jakehow has joined the channel
[15:31] amerine has joined the channel
[15:31] <shimondoodkin> hello! mabe somebody knows  any httpserver keep alive example for node js ?
[15:32] <shimondoodkin> any frameork / github project
[15:33] bradleymeck has joined the channel
[15:36] <Avius> i believe node takes care of that for you
[15:45] b_erb has joined the channel
[15:47] aubergine_ has joined the channel
[15:47] <micheil> mape: no, that's right.
[15:48] <mape> micheil: I have to use server?
[15:48] <micheil> mape: the current origin/development@HEAD is broken though
[15:48] <mape> hmm k
[15:48] <micheil> conn.broadcast -> sends to all connections except the sending connection
[15:48] <micheil> server.broadcast -> sends to all connections
[15:48] <mape> ah nice
[15:49] <micheil> yeah, a nice little goodie for v1.3.00
[15:49] benburkert has joined the channel
[15:57] gilbertleung has joined the channel
[15:57] <satori> I promised I'd post this for sh1mmer when i got home. My simple hackish UPNP module with node UDP http://gist.github.com/470802
[16:02] khug has joined the channel
[16:06] bradleymeck has joined the channel
[16:06] khug has joined the channel
[16:09] athenot has joined the channel
[16:09] V1 has joined the channel
[16:14] demolithion has joined the channel
[16:19] amerine has joined the channel
[16:21] sveimac has joined the channel
[16:22] <c4milo> .
[16:23] <KaptianKrispy> is anyone using Connect?
[16:28] ajpiano has joined the channel
[16:34] <KaptianKrispy> anyone out there?..... *cricket* *cricket*
[16:35] <gwoo> seems quiet today
[16:35] <KaptianKrispy> ya very
[16:35] <shimondoodkin> try other time
[16:35] <shimondoodkin> waht you need? anyways
[16:35] <gwoo> KaptianKrispy: some people are using Connect
[16:35] <KaptianKrispy> I'm having an issue with Connect and Sessions
[16:36] <KaptianKrispy> getting syntax errors in the Connect source...
[16:36] <shimondoodkin> yes there are some
[16:36] <shimondoodkin> what you have?
[16:36] <KaptianKrispy> one sec. I'll pastie the code and error
[16:37] siculars has joined the channel
[16:38] <KaptianKrispy> here is the error on the console
[16:38] <KaptianKrispy> http://pastie.org/1038907
[16:38] <KaptianKrispy> code is coming
[16:40] <KaptianKrispy> here is the code its using
[16:40] <KaptianKrispy> http://pastie.org/1038910
[16:40] <KaptianKrispy> one sec... the line numbers are off
[16:41] <KaptianKrispy> ok fixed line numbers
[16:41] Aria has joined the channel
[16:42] <KaptianKrispy> afk brb
[16:44] amerine has joined the channel
[16:46] <KaptianKrispy> back
[16:46] <shimondoodkin> looks like you have not created the session store
[16:46] <shimondoodkin> http://extjs.github.com/Connect/session.html
[16:47] <KaptianKrispy> Well, I looked at that, but then I also looked at what the session.js file is doing
[16:47] <KaptianKrispy> http://pastie.org/1038915
[16:47] isaacs has joined the channel
[16:47] <KaptianKrispy> line 33
[16:50] <shimondoodkin> yes i see
[16:51] <KaptianKrispy> I am just trying to figure out how to enable sessions in a Connect stack
[16:51] <KaptianKrispy> I feel I am missing something obvious...
[16:52] pgriess has joined the channel
[16:52] <shimondoodkin> in your setup you dont have cookie decoder
[16:54] <KaptianKrispy> I just added it and still it does not work
[16:54] <KaptianKrispy> same error
[16:57] <KaptianKrispy> got it
[16:57] <KaptianKrispy> there is an error in the example that Connect provides
[16:57] <shimondoodkin> waht was it?
[16:57] <KaptianKrispy> its the way they show how to load the MemoryStore object
[16:57] <KaptianKrispy> they have: var MemoryStore = require('connect/middleware/session/memory').MemoryStore;
[16:57] <KaptianKrispy> when it should be
[16:57] <KaptianKrispy> var MemoryStore = require('connect/middleware/session/memory');
[16:58] <shimondoodkin> lol
[16:58] <KaptianKrispy> in their example it was trying to use MemoryStore.MemoryStore which is undefined
[16:58] mtodd has joined the channel
[16:59] <shimondoodkin> actualy that what i was thinking about  that memory is indeed undefined it cant lie
[17:04] joshbuddy has joined the channel
[17:20] piratepenguin has joined the channel
[17:21] rolfb has joined the channel
[17:23] amuck has joined the channel
[17:24] steadicat has joined the channel
[17:29] dnolen has joined the channel
[17:30] rolfb has joined the channel
[17:34] amuck has joined the channel
[17:34] ollie has joined the channel
[17:38] kevm_ has joined the channel
[17:41] twomashi has joined the channel
[17:43] jakehow has joined the channel
[17:44] amerine has joined the channel
[17:44] charlesjolley- has joined the channel
[17:45] twomashi has left the channel
[17:49] chrischris has joined the channel
[17:50] aheckmann has joined the channel
[17:54] piratepenguin has joined the channel
[17:58] amerine has joined the channel
[17:59] admc has joined the channel
[17:59] admc_ has joined the channel
[17:59] chrischris has joined the channel
[18:03] softdrink has joined the channel
[18:04] amerine has joined the channel
[18:06] mikeal1 has joined the channel
[18:08] jherdman has joined the channel
[18:08] liucougar has joined the channel
[18:10] Yuffster has joined the channel
[18:11] V1 has joined the channel
[18:12] <sh1mmer> I wish I had an office
[18:12] <sh1mmer> ACTION sighs
[18:12] <micheil> I use my bedroom, so, could it be worse then that?
[18:13] <micheil> ACTION waits for dojo to build.
[18:14] <mape> micheil: Having to work from the bathroom would be pretty awfull
[18:14] <micheil> yeah, that would be
[18:15] amerine has joined the channel
[18:15] <shimondoodkin> i have a bed in the office at home
[18:16] <shimondoodkin> local businesses i know offer me a place in ther office, but is easyier at home expect hte cildren and the noize arount that is present sometimes.
[18:17] <shimondoodkin> sh1mmer: mybe some of your frinds might give you asome place for free...
[18:17] <shimondoodkin> sh1mmer: mybe some of your friends might give you some place for free...
[18:17] <sh1mmer> micheil: I share my bedroom with a handsome, but noisy dame
[18:18] <tmpvar> strong jaw?
[18:18] <micheil> sh1mmer: that.. could be a good thing.
[18:18] <sh1mmer> it's not a terrible thing ;)
[18:19] <sh1mmer> shimondoodkin: we are moving to a bigger place soon, I just really need a 'cave' as rands calls it
[18:20] riottaba_ has joined the channel
[18:21] <shimondoodkin> yeah .. i also want to get out from my cave... to see some world around
[18:21] <Validatorian> anybody know where I can find an example of auth using ExpressJS? (I want to have user accounts)
[18:22] <mikeal1> isaacs: you around?
[18:22] streblo has joined the channel
[18:23] <isaacs> mikeal1: only for a few more minutes, what's up?
[18:23] <mape> Why on earth would public be a reserved word :(
[18:23] <mikeal1> wondering what you think about mappings?
[18:23] <sh1mmer> mape: _JAVA_script
[18:24] <mape> _ECMA_script
[18:24] <isaacs> mikeal: well, the initial pass was pretty unsatisfactory for npm's use case.  i looked at kriskowal's revised version, but haven't really thoroughly examined it.
[18:24] <sh1mmer> mape: heritage
[18:24] <mikeal1> it's implemented a few places
[18:24] <isaacs> kewl
[18:24] <mikeal1> do you think it's in wider use than the npm package regisry
[18:24] <mikeal1> or is it npm by a mile
[18:24] <isaacs> mikeal: i'm really not sure
[18:25] <isaacs> this is a marathon, not a sprint ;)  i'm more concerned with making an awesome package manager than i am in feature parity with other systems.
[18:25] <isaacs> that being said, if people are using it, and it's not horrible, i see no reason not to implement it
[18:26] <jashkenas> isaacs: one vote from me for keeping npm as minimal as possible.
[18:26] <isaacs> jashkenas: so, the issue there, i think, is that npm has a very similar feature already, which is kind of wonky and confusing, and almost no one uses.
[18:26] <jashkenas> ah, well then.
[18:26] <isaacs> implementing mappings (or whatever it evolves into) IS definitely the goal.
[18:27] <jashkenas> (I'm just scarred from the current shitstorm surrounding bundler)
[18:27] <isaacs> what was the shitstorm?
[18:28] <jashkenas> Just that it's been the main stumbling block preventing people from using Rails 3 for the last 6 months or so. And that it's now changed it's architecture to reinvent RubyGems and try to replace it, in a half-assed way ... when really RubyGems just needs to be fixed.
[18:28] <jashkenas> (imho)
[18:29] <mikeal1> isaacs: it would require changes to how you do the requre.path stuff
[18:29] <mikeal1> possibly
[18:29] <isaacs> mikeal: it might actually be easier.
[18:29] <isaacs> mikeal: like i said, i didn't really thoroughly examine it, so this is all somewhat uneducated guessing.
[18:29] <isaacs> jashkenas: yeah, that sounds like a shitstorm, alright.
[18:30] <jashkenas> whoa, googling turns up this: http://amplicate.com/sucks/bundler
[18:32] <isaacs> jashkenas: yeah, that IS the kind of complexity i'm trying to avoid
[18:33] <isaacs> mikeal: why do you ask?
[18:33] <mikeal1> well
[18:33] <mikeal1> i don't think Mappings is a good solution
[18:33] <mikeal1> and it's being asserted that Mappings/C is the leading solution
[18:33] <mikeal1> what it really is, is the leading spec
[18:34] <mikeal1> but not the leading solution
[18:34] <jashkenas> link?
[18:34] <mikeal1> http://wiki.commonjs.org/wiki/Packages/Mappings/C
[18:35] amerine has joined the channel
[18:35] MrTopf has joined the channel
[18:37] <isaacs> mikeal: so, here's my problem with mappings/c: it's basically not "A" solution so much as a way to specify a whole bunch of different information about each dependency.
[18:37] <isaacs> mikeal: it's not really any different than doing overlay:{npm:{dependencies....}, nodules:{dependencies...}}
[18:38] <isaacs> mikeal: if you have to specify a zip url, tarball url, git url, name, and version, for every dep, that's freaking ridiculous.
[18:38] HansInEffect has joined the channel
[18:38] <isaacs> mikeal: it's one of these things that's so full of compromise it doesn't accomplish anything.  i'd rather have to change my implementation, and have a spec that works for us all, than have a complicated spec.
[18:38] bpot has joined the channel
[18:38] <HansInEffect> So which node.js package manager should I be using? npm, kiwi, seed.js?
[18:39] <isaacs> HansInEffect: npm
[18:39] <mikeal1> it does look almost impossible to implement
[18:39] <HansInEffect> isaacs: You sure that answer isn't biased? ;)
[18:39] <jashkenas> speaking of which....
[18:39] <isaacs> HansInEffect: oh, it's super biased.
[18:39] <isaacs> :)
[18:39] <jashkenas> charlesjolley-: http://seedjs.org/ is down.
[18:39] Apage43 has joined the channel
[18:40] <isaacs> jashkenas: charlesjolley is talking about contributing to/building upon npm
[18:40] <charlesjolley-> oh weird
[18:40] <charlesjolley-> thx
[18:40] <isaacs> charlesjolley-: hey there :)
[18:40] <jashkenas> that would be great.
[18:40] <isaacs> mikeal: well, mappings/c is easy enough to implement if you just don't use the extra info.
[18:40] <charlesjolley-> I am conducting a feasibility assessment. see if I can merge in the seedjs work somehow
[18:40] <charlesjolley-> or do them together...
[18:40] <HansInEffect> Wouldn't it be better to get the node.js community behind one package manager?
[18:41] <jashkenas> isaacs: you got plans for the npmjs.org homepage? I bet you could solicit the mailing list to get a volunteer to put up some docco, if you don't have time...
[18:41] <isaacs> mikeal: but the problem is that someone's going to do something like mappings:{foo:{zipball:<url>}} and npm will barf on it, and they'll be like "why doesn't it work"
[18:41] <HansInEffect> sort of like gems for ruby
[18:41] <jashkenas> HansInEffect: it is, behind npm, pretty much.
[18:41] <HansInEffect> jashkenas: okay, cool that's what I wanted to know :)
[18:41] <mikeal1> you need to be able to extract and install tarballs, parse a catalog format, and override the namespace in a Modules implementation
[18:41] <mikeal1> override the namespace only in the context that this module is loaded actually
[18:42] <isaacs> mikeal: yeah, it's like "well you want this, and he wants that, so let's put it all in one megaobject"
[18:42] <isaacs> yeah, and the overriding namespace thing will *only* work with npm if you're going through the "main" module.
[18:42] <isaacs> i can't possibly shim everything in the lib dir, that'd be absurd.
[18:43] <isaacs> nodules can do it, because it's a module loader.
[18:43] <mikeal1> i want main to be required
[18:43] <isaacs> +1 on that.
[18:43] <mikeal1> i just sent that
[18:43] <mikeal1> you should +1 it on the list
[18:43] <isaacs> yeah
[18:45] <isaacs> doing so now.
[18:46] <HansInEffect> One more question for everyone: Is there an npm package for the commonjs jsdom library?
[18:46] <isaacs> HansInEffect: npm install jsdom
[18:46] <HansInEffect> sweet
[18:46] <HansInEffect> thanks
[18:46] saikat has joined the channel
[18:46] <isaacs> HansInEffect: in fact, that was the one i (attempted to) publish and install in my "hey, guys, use npm" live demo at bayjax a few months back ;)
[18:48] <HansInEffect> isaacs: good choice.  Being able to construct a page with DOM functions on the server is pretty cool.
[18:48] <isaacs> HansInEffect: it was just because elijah had given a demo of jsdom right before me.
[18:49] <isaacs> HansInEffect: turns out, it failed, because mjsunit.runner is a dependency, and it has a "." in the name, which is not technically "allowed", so it barfed.
[18:49] <isaacs> dots are allowed now.
[18:49] <isaacs> npm is very liberal :)
[18:49] <mikeal1> my favorite thing is just using jQuery for screen scrapping in node :)
[18:49] <HansInEffect> isaacs: Good I like Dots...  Chewy goodness in different colors.
[18:50] <isaacs> mikeal: what about if, instead of directories.lib, we had a "modules" section that exposed certain modules under the package namespace:
[18:51] <isaacs> mikeal: {name:"foo", "modules":{ "bar" : "./lib/bar" }} then require("foo/bar") would give you .../path/to/lib/bar.js
[18:51] <mikeal1> so, after we finish the vote on Packages/1.1 i want to tackle this
[18:52] <mikeal1> as it is now there isn't anything in the spec that enforces modules be private
[18:52] <isaacs> mikeal: in node, it's "index.js", not "main.js"
[18:52] <mikeal1> so like, even if you don't specify directories.lib, a package installer could look for lib and expose all the modules for import from the package namespace
[18:52] <isaacs> sure
[18:53] <mikeal1> isaacs: haha, that shows how long it's been since i've not used npm with node :)
[18:53] <isaacs> and you can of course do crap like require(".npm/foo/package/lib/bar")
[18:53] <isaacs> hehe
[18:53] <isaacs> er, require(".npm/foo/active/package/lib/bar")
[18:53] <mikeal1> yup
[18:53] <mikeal1> i would like better support for public/private definitions 
[18:53] <isaacs> but that's Very Not Right.
[18:54] <mikeal1> but we aren't going to be able to get rid of the "everything under lib is exposed by default" when lib is defined
[18:54] <isaacs> i know that people will object to having a package only expose ONE module.
[18:54] <isaacs> but i don't like the "expose everything under lib" either
[18:54] <mikeal1> because all the people building these mega packages will bitch 
[18:55] <jashkenas> what's wrong with having all the modules be accessible?
[18:55] <mikeal1> jashkenas: it leads to bad things
[18:55] <mikeal1> like, i have lib/dep/base64.js
[18:55] <mikeal1> and it's hacked for my own needs
[18:55] <mikeal1> and other people decide to be lazy and just import that instead of adding their own dependency for it
[18:55] <mikeal1> and then you remove it
[18:55] <isaacs> jashkenas: so, the way that npm does namespacing, so that require("foo") gets you the "foo" version that your package required, is that it sets up a shim to your module where require.paths is precisely set.
[18:56] <jashkenas> yeah, but that's their bad.
[18:56] <mikeal1> you need a way to say "this is private, you can't import it"
[18:56] <mikeal1> Modules in general is private by default
[18:56] <isaacs> jashkenas: but if EVERYTHING in "lib" is being exposed, then require("foo/bar") won't have that stuff working right.
[18:56] <isaacs> so if foo/lib/bar.js does require("baz"), there's no telling what it'll get.
[18:56] <jashkenas> isaacs: gotcha.
[18:56] <mikeal1> jashkenas: well, it's not clear that you *shouldn't* import something from another modules submodules
[18:57] <mikeal1> i mean, when you're doing things like 
[18:57] <mikeal1> require('name/sub')
[18:57] <isaacs> jashkenas: now, IF you're requireing foo/lib/bar.js starting from the main module, it'll work perfectly.
[18:57] <mikeal1> why not do require('name/dep/base64')
[18:57] <mikeal1> it's not clear what your best practice should be with the current defaults
[18:57] <mikeal1> yeah, within lib/main.js you can do require('./dep/base64')
[18:58] [[zz]] has joined the channel
[18:58] <mikeal1> that will *always* work
[18:58] <isaacs> jashkenas: also, relative links will be weird.  if you have ./lib/bar.js and ./dep/baz.js, let's say, and you do require("foo/bar"), and ./lib/bar.js does require('../dep/baz"), then it'll try to load require("foo/baz") which is nothing.
[18:58] keeto_ has joined the channel
[18:58] <isaacs> directories.lib makes the API surface of packages huge by default, which is doing it wrong.
[18:59] <isaacs> it's convenient, but at the expense of creating a LOT of unresolveable edge cases.
[18:59] <mikeal1> isaacs: you replied to the wrong email :)
[18:59] <isaacs> hahaa
[18:59] <isaacs> whoops
[19:00] luddep has joined the channel
[19:00] <mikeal1> people are still commenting on this damn blog post
[19:01] <isaacs> mikeal: mogo?
[19:01] <isaacs> mongo
[19:01] <mikeal1> yeah
[19:01] <mape> The mongo assault? :P
[19:01] <mape> hehe
[19:01] <mikeal1> nobody has actual technical discrepancies 
[19:01] <isaacs> you know, the reaction to that really left a bad taste in my mouth about mongodb.
[19:01] <mikeal1> they seem to have done a good job getting Rails developers :)
[19:01] <isaacs> it seems like there's a lot of "nuh uh! mongodb is AWESOME and you SUCK!" without any actual information or counterarguments.
[19:02] <mikeal1> i have this picture in my mind of like this Ruby Rebel
[19:02] <mikeal1> this developer who needs insane write performance because they are gonna be bigger than Twitter
[19:03] <mikeal1> and when you bring up boring things like durability and corruption they are liek "shut up old man!"
[19:03] <isaacs> hahaha
[19:03] <isaacs> srsly
[19:03] <mikeal1> one person actually said that MongoDB's view of durability being completely different than the rest of the database world was just them "thinking outside the box"
[19:03] <mikeal1> those exact words
[19:03] <mikeal1> it's amazing
[19:03] <isaacs> WOW.
[19:04] <isaacs> it's like saying that not wearing seatbelts is a whole new view of safety in cars, and that's thinking outside the box.
[19:04] <isaacs> because you can avoid accidents by just driving faster.
[19:04] <mape> isaacs: if you could drive the car faster I'm sure some people would do that though :P
[19:04] <mikeal1> the sad thing to me is that some of the more grown up mongodb users are pointing to action items for their next release
[19:04] <jashkenas> mikeal1: perhaps you should post to the wiki page, if you're looking to educate folks with your take on it. http://www.mongodb.org/display/DOCS/Comparing+Mongo+DB+and+Couch+DB
[19:05] amerine has joined the channel
[19:05] <mikeal1> but the 10gen people just keep saying that single server durability isn't important you and just need to run 3 servers
[19:05] siculars has joined the channel
[19:05] <mikeal1> jashkenas: this isn't a MongoDB vs CouchDB thing, it's a MongoDB vs Databases thing
[19:05] <jashkenas> they just have a "Durability" section on that page.
[19:06] <mikeal1> it's actually more relevant to their "replace MySQL/Postgres with MongoDB" story than it is to CouchDB
[19:06] <mikeal1> i don't really care about the CouchDB vs MongoDB stuff
[19:07] <mikeal1> they look similar on the outside but we have totally different user cases and targets right now
[19:07] <mikeal1> and what MongoDB is trying to do, get Rails and Django developers to using them over RDBMS, would be a good thing for those developers if they grew up a little and took durability seriously
[19:09] <isaacs> i wonder how many noders are actually *using* directories.lib
[19:09] <isaacs> i should do a little informal poll, maybe suggest removing that feature from nopm.
[19:09] <mikeal1> the worst thing that could happen is people move to MongoDB in droves and then get a really bad taste in their mouths when they lose a ton of their data and just decide "fuck NoSQL!"
[19:09] <isaacs> *npm
[19:09] <jashkenas> mikeal1: Your condescension towards "those developers" is pretty incredible.
[19:09] <jashkenas> isaacs: I'm not.
[19:10] <mikeal1> "those developers" i mean the developers at 10gen
[19:10] <jashkenas> ah.
[19:10] <mikeal1> not "those developers" in relation to Rails/Django people
[19:10] <mikeal1> some really good friends of mine still write Django apps which is why i kinda care about this
[19:10] chrischris has joined the channel
[19:11] <mikeal1> most people just figure a database is going to store their data and not corrupt it
[19:11] <jashkenas> I think that the hardest thing about it is that no one can ever trust benchmarks or anecdotes.
[19:11] <mape> mikeal1: Would fixing what you are talking about destroy performance?
[19:11] <mikeal1> MySQL and Postgres spent a long time getting people to think that way
[19:11] <mikeal1> mape: yes and no
[19:11] <mikeal1> at first, yes, because mongodb is only fast because they have no durability
[19:12] <mape> That might be a big sticking point, if they come out with a new version that is better but slower..
[19:12] <mape> People might be pissed
[19:12] <mikeal1> but if they changed some of the defaults and added better durability they could work on the same kind of optimizations everyone else does to get things really fast
[19:12] <mikeal1> it's really easy to write a database that is fast but loses data or lets you write to it without knowing if what you wrote is accessible yet
[19:13] <mikeal1> that's simple
[19:13] <mikeal1> it's just not fit for general consumption
[19:13] <mikeal1> i mean
[19:13] <mikeal1> it's a lot harder to say "here is what we are focusing on and we'll drop features for performance and keep durability"
[19:13] <mikeal1> look at nStore
[19:13] <mikeal1> write speed is much faster than mongodb
[19:14] <mikeal1> and it's durable
[19:14] <mikeal1> just, no indexing :)
[19:14] <mape> and no replication?
[19:14] <mikeal1> not yet
[19:14] jbr has joined the channel
[19:14] <mikeal1> depending on how tim wants to do replication, it can probably work without a drop in performance
[19:14] <mikeal1> unless he wants to go the whole MVCC route
[19:14] <mikeal1> then it might be a little bit of a drop
[19:15] <mikeal1> but if he did that we could probably write a replicator to CouchDB :)
[19:16] <mikeal1> wow, this game is getting rained out 
[19:17] sechrist has joined the channel
[19:19] <mape> world cup?
[19:19] <mikeal1> yup
[19:20] sechrist has joined the channel
[19:22] sechrist has joined the channel
[19:28] <MrTopf> rain would be good here, too. Or less temperature more likely ;-)
[19:28] <MrTopf> code quality also seems to be correlated to temperature 
[19:35] aubergine has joined the channel
[19:37] <V1> woah compiling node from trunk on my VM is sloooooowww
[19:37] <V1> 'build' finished successfully (2m17.935s)
[19:38] <mscdex> V1: do you have multiple cores/CPUs available in the VM?
[19:38] <V1> let me check
[19:38] <MrTopf> hmpf
[19:38] <mape> mscdex: Doesn't node do that automagicly now if you have a high enough python version? :)
[19:39] <mscdex> mape: not 100% sure
[19:39] <V1> 1 processor 1024mb
[19:39] <V1> that's all :p
[19:40] <mape> I'm pretty sure it does, rmsm did the patch, didn't work for me since debian runs with a "old" python
[19:40] <mape> so I have to change the wscript file manually if I recall correctly
[19:40] <mscdex> V1: if the host machine has multiple cores/CPUs, try allowing the VM access to them, it'll compile quicker
[19:41] <V1> Would be a good idea next time indeed. But thanks god, I don't plan to compile that often ;)
[19:41] <mscdex> mape: i've always had 2.6.x installed, so i've never run into such a problem
[19:41] <mape> Yeah debian seems to enjoy stable/tested software
[19:41] <mscdex> V1: on my core i7-860, it takes about 30sec or so to build node's current master branch
[19:42] <mape> about a minute on my q6600 server
[19:42] <V1> not to bad
[19:42] <mape> But then again I don't know a lot about compiling, even though I always do a make clean I assume it doesn't compile everything?
[19:42] <mscdex> if you make clean it starts fresh i'm pretty sure
[19:43] <mape> Hmm k, well then I guess it's pretty quick
[19:43] <mscdex> unless it detects the build directory and reuses parts of that, i dunno, because make clean doesn't delete the build directory
[19:45] <V1> I'm already glad it's running ;) Waiting for compiling doesn't bother me that much
[19:45] <mape> leaves time for sword fighting
[19:46] <V1> hmz, node even compiles slow on my iMac but what ever :p
[19:46] <mscdex> leaves time for watching some of The Crockford Files
[19:47] <V1> Crockford Files or Crockford Facts?
[19:48] <mscdex> The award winning series, The Crockford Files
[19:49] <mscdex> V1: http://img638.imageshack.us/img638/9730/crockfordfiles.png
[19:50] <V1> oooh I aaa, I remember it from yesterday when mjr posted the "origional" version
[19:50] <pquerna> ivan: http://journal.paul.querna.org/articles/2010/07/10/overclocking-mod_ssl/
[19:50] <ivan> pquerna: awesome
[19:52] amuck has joined the channel
[19:53] kersny has joined the channel
[19:56] aubergine has joined the channel
[19:59] <ivan> I got sidetracked reading older posts :)
[20:00] <mape> vuvuzelas..
[20:01] <ivan> pquerna: I discovered a thing with Safari 4-5/Win the other week: it blocks on downloading the entire .crl file each time you connect (which is mandatory, unlike everywhere else)
[20:02] <pquerna> even if OCSP is available?
[20:02] <ivan> I don't know, I didn't try it
[20:02] <ivan> I was in way over my head with the basic stuff
[20:02] <ivan> I was making dozens of certs with pyOpenSSL with all those crufty X.509 options
[20:02] <pquerna> hehe
[20:03] <pquerna> ssl is complicated, x509 is complicated, cryptography itself is complicated.  multiply it all together and its all too hard and complicated.
[20:03] <pquerna> its why i like the Keyczar project, just wish it was more active.
[20:04] <ivan> if only all this complication made SSL in browsers actually secure anything
[20:05] <pquerna> lol
[20:05] <ivan> hopefully Google will crush the CAs after they finish SPDY
[20:05] <pquerna> and if only there weren't evil CAs and companies that sell off the shelf man in the middle devices for ssl
[20:05] <jashkenas> anyone in here ever tried to secure client-server communication over ajax, without using SSL?
[20:06] <ivan> you can modify the javascript in transit
[20:06] <pquerna> I've had client side js do HMACs and hashing of things.
[20:06] <pquerna> but ivan's point is the most important one 
[20:06] <pquerna> unless your javascript comes in over ssl, its kinda all pointless :)
[20:06] <pquerna> so you might as well just use ajax things over ssl 
[20:06] <jashkenas> interesting. I was more worried about the snooping case than the rewriting one.
[20:06] <pquerna> yes, its all about managing risk
[20:07] <pquerna> you can client side hash passwords for example
[20:07] <jashkenas> without exposing the salt to a listener?
[20:07] <mape> Isn't there RSA implementations for js?
[20:07] <pquerna> that would prevent random snooping from seeing cleartext passwords
[20:07] TobiasFar has joined the channel
[20:07] <pquerna> the salt isn't secret
[20:07] <pquerna> you can expose it
[20:08] isaacs has joined the channel
[20:13] <mscdex> hmm, something is afoot with querystring
[20:15] pzich_ has joined the channel
[20:15] <mscdex> does anyone here use querystring.stringify with an array as the first argument?
[20:15] sztanpet has joined the channel
[20:16] <isaacs> mscdex: yeah, that'd be weird
[20:16] <isaacs> mscdex: you'd HAVE to give it a name, then
[20:16] <mscdex> well, it's not just that, but the munging doesn't work correctly
[20:16] <mape> isn't qs stuff only key/value?
[20:16] <mscdex> the [] gets escaped
[20:17] <mscdex> and the way munging works is kind of awkward
[20:17] <isaacs> mape: it supports stuff like qs.stringify({ a : { foo: "bar" }, b : [1, 2, 3]})
[20:17] <isaacs> mscdex: it's a defacto standard, which is always tricky
[20:17] <mape> yeah I mean get/post can't be done without a key
[20:18] amerine has joined the channel
[20:18] <isaacs> oh, hey, looks like arrays are actually broken.
[20:18] <isaacs> it's doing b[1] instead of just b[]
[20:18] <isaacs> wonder when that happened.
[20:18] <mscdex> isaacs: to get something like "foo[]=bar&foo[]=baz" you have to do qs.stringify([bar, baz], null, null, true, 'foo');
[20:19] <mscdex> but then the [] is escaped in the output
[20:19] <mape> from my experience qs parse was always kinda wonky, parsed ?id=2 as {'?id':'2'}
[20:19] <isaacs> mscdex: that's by design
[20:19] <isaacs> mape: ? isn't part of the query string.
[20:19] <mscdex> it shouldn't be escaping the []
[20:19] <mscdex> for munging
[20:19] <isaacs> mscdex: says who?
[20:19] <isaacs> [] are not ascii
[20:19] <isaacs> er, not safe
[20:19] <isaacs> they are ascii :)
[20:20] <mape> isaacs: Then I guess it is just me, just fetched the portion in the req object that contained it
[20:20] <mscdex> the munging from what i understand is for PHP-style query strings
[20:20] <mscdex> so you can have foo[]=bar&foo[]=baz
[20:20] <isaacs> mscdex: exactly
[20:20] <isaacs> and that should give you { foo : ["bar", "baz" }
[20:20] <mscdex> huh?
[20:21] <isaacs> mscdex: the [] means "array"
[20:21] <mscdex> i know
[20:21] <isaacs> [key] means "object"
[20:22] <mscdex> isaacs: what would you expect "qs.stringify({foo: ['bar', baz']}); to output?
[20:22] <mape> with the missing ' ?
[20:22] gwoo has joined the channel
[20:22] <mscdex> no, that's a typo
[20:22] <isaacs> mscdex: foo[]=bar&foo[]=baz (but escaping the []s)(
[20:22] mikeal1 has joined the channel
[20:22] <isaacs> mikeal: hey
[20:23] <mikeal1> hiya
[20:23] <isaacs> mikeal: just realized, i need to retract my +1 for making "main" required
[20:23] <mscdex> that is what it does, but that's not what the docs originally said
[20:23] <isaacs> mikeal: i want stuff like nave/nvm to be installable with a package.json, even though there's no javascript program involved.
[20:23] <mscdex> it seems you would not want the []'s escaped if you're wanting PHP-style output
[20:23] <mikeal1> right
[20:23] <mikeal1> that makes sense
[20:24] <mikeal1> i want to add language to the spec that when it's not there require('name') should fail
[20:24] <isaacs> mscdex: escaping the [] makes them more safe, and it's still a perfectly valid query string
[20:24] <isaacs> mikeal: yeah, that's fine.
[20:24] <isaacs> mikeal: so require("nave") fails, even if you have { "dependencies" : { "nave" : ""}} for some reason
[20:25] <mscdex> isaacs: so then why not escape them when you have a key (i.e. foo[bar]=baz) ?
[20:25] <mikeal1> right
[20:25] <isaacs> mscdex: it should still escape them
[20:25] <mscdex> hmm let me try again
[20:25] <isaacs> mscdex: i'm not saying it DOES escape them necessarily, just that it's a bug if it doesn't.
[20:25] <mikeal1> isaacs: actually, does nave even want a lib directory?
[20:26] <isaacs> mikeal: nave is a shell script
[20:26] <isaacs> mikeal: it has a bin, but that's about it
[20:26] <mikeal1> you should bring up that use case
[20:26] <isaacs> mikeal: http://github.com/isaacs/nave/blob/master/package.json
[20:26] <mikeal1> because right now either main or lib are required
[20:26] <isaacs> yeah, that's wrong
[20:26] <isaacs> and, actually, i'm pretty well decided on dropping support for lib.
[20:26] <mikeal1> is bin specified?
[20:26] <isaacs> um... maybe?
[20:27] <mikeal1> hrm...
[20:27] <isaacs> mikeal: we should just use this as the spec: http://github.com/isaacs/npm/blob/master/doc/json.md#readme
[20:27] <isaacs> fuckit
[20:27] <isaacs> ;P
[20:27] <mscdex> ok it does escape them that way too, so then the docs are wrong
[20:27] <mikeal1> yeah, so "bin" is only specified under "directories"
[20:27] <jashkenas> isaacs: what does "lib" become?
[20:27] <isaacs> mscdex: awesome.
[20:27] <isaacs> jashkenas: ignored.
[20:28] <isaacs> mikeal: right, but not like, "link these files to some PATHable place with this name"
[20:28] <jashkenas> so if I have "lib: '.'" now, in npm-next I should have?
[20:28] <mikeal1> isaacs: so, you're spec for bin differs from Packages/1.1.1
[20:28] <isaacs> mikeal: i see.
[20:28] <isaacs> jashkenas: in npm-next, then, the "directories" hash would be completely ignored.
[20:29] <isaacs> jashkenas: as it is, i'm *only* using it for lib
[20:30] <isaacs> mikeal: in general, i think my main complaints with the packages spec has been that it's way too folder-centric rather than module-centric
[20:31] <isaacs> mikeal: that's just not portable.
[20:31] terov has joined the channel
[20:32] <mikeal1> i agree
[20:32] <terov> hey folks, having a hard time getting the example.js application exposed to the broader world (i.e., accessible on other than the local box), despite following some apache guides.
[20:32] <mape> Still think it would be a good idea to have an article on a best practise on how to build/structure modules for node
[20:33] <terov> 69.164.199.218:8124 should yield the hello world, but no dice. thoughts?
[20:33] <mape> terov: it denies connections
[20:34] <terov> peculiar--is it apache conf that i should be tinkering with?
[20:35] <maushu> terov, probably.
[20:36] <terov> thanks folks--will keep chipping away at it :)
[20:36] <mape> terov: Get no errors on the node app?
[20:36] <maushu> That or you set the ip to localhost.
[20:36] <terov> mape: none
[20:36] <terov> mashu: ah! if i use the machine's ip, will it be exposed to the broader world?
[20:36] <mape> listen(port, null) ?
[20:36] <terov> got it.
[20:36] <terov> will give it a go. many thanks :)
[20:37] <mikeal1> isaacs: just fired off a new email
[20:37] <mikeal1> i'm proposing removing directories
[20:38] stepheneb has joined the channel
[20:38] <terov> mape: worked perfectly. thanks a bundle :)
[20:38] <mape> np :)
[20:39] benburkert has joined the channel
[20:39] Alystair has joined the channel
[20:40] athenot has joined the channel
[20:50] <mape> isaacs: why not talk to elliottcable here? Twitter seems like the worst medium for a debate
[20:51] <mscdex> ACTION nudges maushu 
[20:51] <maushu> Wat.
[20:51] <mscdex> _announcer to announcey?
[20:51] <mscdex> *no
[20:51] <elliottcable> isaacs 3» what mape said
[20:52] <maushu> Hmm.
[20:52] <isaacs> ACTION agrees :)
[20:52] <maushu> ACTION pokes _announcer.
[20:52] <mape> elliottcable: And I don't see why you don't like comma first, I've grown quite fond of it
[20:52] <elliottcable> isaacs 3» though it’ll have to wait a moment, talking to inimino in ##Paws about other stuff
[20:52] <maushu> OH GOD! HES DEAD!
[20:52] <mscdex> egad!
[20:53] _announcer has joined the channel
[20:53] <maushu> ACTION throws phoenix down at _announcer.
[20:53] <mscdex> i don't care for comma-first in code either
[20:53] <maushu> Nevermind, hes alive again.
[20:53] <Aria> Yeah, nor I. That's about the only thing in that document I dislike though.
[20:53] <mape> Only issue I have with your style isaacs is that no one else uses it. But then again someone has to take the arrows ;)
[20:53] <_announcer> Twitter: "@mrdoob Ha, whoops. I know what you meant. Accidently hashed that instead of #nodejs." -- Francois Laberge. http://twitter.com/francoislaberge/status/18222635384
[20:53] <mscdex> wb _announcer!
[20:53] <mape> What is the issue with it=
[20:53] <Aria> (I dislike any complicated indenting, and my English-speaking brain likes its punctuation after.)
[20:53] <mape> *? Besides the fact one isn't used to it
[20:54] <elliottcable> Aria 3» thank you.
[20:54] <elliottcable> ACTION high-fives
[20:54] <Aria> My own style is relatively similar to isaacs', though, otherwise.
[20:54] <elliottcable> Aria 3» oh! I never /invited you so we could chat about unschooling
[20:54] <mscdex> Aria: same here
[20:54] <Aria> ACTION high-fives.
[20:54] <Aria> Hehe. Any time, elliottcable.
[20:54] <elliottcable> the single biggest problem for me is not indenting empty lines
[20:54] <elliottcable> Aria 3» ‣##Paws, I’ll pick you up in a bit, lemme chat with isaacs first
[20:54] V1 has joined the channel
[20:54] <mape> Aria: Well comparing code to text is well.. It isn't structured in the same way at all
[20:55] <Aria> No, but I like re-using as much of the lexical structure I have in my head anyway. I switch between code and docs rather a lot.
[20:55] <elliottcable> so, isaacs: compare, http://drp.ly/1ld9ey vs. http://drp.ly/1ldag4
[20:55] <Aria> (and I think about code in similar ways)
[20:55] <elliottcable> isaacs 3» and don’t suggest I fixed my tools, I specifically enabled the invisibles view to demonstrate this problem
[20:55] <isaacs> elliottcable: why not just turn off \n highlighting?
[20:55] <isaacs> elliottcable: that seems 100% unnecessary
[20:56] rauchg_ has joined the channel
[20:56] <jashkenas> And I think that there have been more lines written in this room *about* isaac's style than written *in* it....
[20:56] <Aria> I used to indent a lot of whitespace, but now that git complains about it, I stopped.
[20:56] <isaacs> mape: the thing about good ideas is that almost no one has them.
[20:56] <elliottcable> isaacs 3» no, it’s the other way around: There is *no* argument that I’ve ever heard, of any sort, for not indenting empty lines to match the code around them (except “git spits up!!!” to which I reply, from a much more justified position than your own when you said the same thing, “fix your fucking tools”)
[20:56] <mape> Aria: Well like isaacs says, stuff at the end of a line isn't as obvious as the first char, so if the end is important why not move it to the start?
[20:56] <isaacs> elliottcable: i really don't feel like "fixing" git or v8 or every web browser in the world.
[20:56] <elliottcable> wheras there’s a very, very good argument *to* maintain one level of indentation: when you go to add code to an empty line, you’ll want the caret aligned with the existing text.
[20:56] <mape> isaacs: I guess I could find a quote of a dictator that said that as well ;)
[20:57] <elliottcable> sure, there’s editor features that will automatically indent it as you start typing or whatever; but you shouldn’t have to rely on a specific editor feature to edit comfortably
[20:57] <isaacs> mape: the same could be said of really profoundly bad ideas, of course ;)
[20:57] <elliottcable> editors should *enable* you, but not be *required*
[20:57] <mape> hehe
[20:57] <isaacs> elliottcable: at some point, you just kind of have to accept that the tool is what it is, and deal with it.
[20:57] <Aria> mape: I get the sentiment. But I find it hard to write and jarring to read -- and it's not like brains have to have the most important thing first to understand them. 
[20:57] <elliottcable> if I can’t edit with a particular style just fine in Nano, then that style is fundamentally flawed
[20:57] <Aria> (... Unless you speak a language that's SVO structured.)
[20:57] kevm_ has joined the channel
[20:57] <isaacs> WOW this is a lot of conversation all at once.
[20:57] <elliottcable> v8? Every web browser in the world? WTF?
[20:57] <mape> Aria: It makes it easier
[20:58] <isaacs> elliottcable: re: tabs, end-of-line whitespace, and named functions.
[20:58] <elliottcable> v8 doesn’t give two shits what you do to empty lines. o_O
[20:58] <isaacs> elliottcable: tabs are 8-spaces in web browsers.
[20:58] <mape> isaacs: But yeah, the tab thing, have any examples where it messes up?
[20:58] <Aria> mape: I don't think it does, really. In fact, I think it's mostly line-noise, and focuses on microstructure, when what I want to see when I'm reading is macrostructure.
[20:58] <isaacs> elliottcable: v8 has much nicer stack traces when functions are named.
[20:58] <elliottcable> oh, named functions, I’ll concede you: if only for pragmatism; I absolutely hate named functions, but if you absolutely have to have the backtraces to develop… *shrug* I can understand that
[20:58] <elliottcable> I’m talking solely about indenting code-less lines, here, though
[20:58] <isaacs> elliottcable: git diffs are uglier with eol whitespace.
[20:58] <Aria> Named functions, hell yes. Neeeed.
[20:58] <Aria> Though JS is weird about them.
[20:59] <elliottcable> isaacs 3» only if you have that “feature” enabled; which is a silly thing to do
[20:59] <isaacs> Aria: actually, only IE is weird about them.
[20:59] <Aria> Hehe.
[20:59] <elliottcable> and I agree re: hard tabs
[20:59] <Aria> Nah, just the way the namespacing works on named functions is weird.
[20:59] <mscdex> IE shall burn!
[20:59] <elliottcable> I agree that two spaces should be used, I mean
[20:59] <elliottcable> I *don’t* agree that tabs are “more correct” and that we’re only using spaces as a necessary evil
[20:59] <isaacs> elliottcable: i like tabs better in principle.
[20:59] <Aria> Heh. I use tabs, and ts=2
[20:59] <isaacs> they let everyone configure their editor however they like.
[20:59] <mape> Tabs are better si.. what he said
[20:59] <elliottcable> I think two spaces are quite correct, and hard tabs shouldn’t be used anywhere outside of the command-line for the output of structured text to be consumed by `awk`
[21:00] <isaacs> but i read a lot of code on github, and in web browsers, so.. yeah.
[21:00] <Aria> (and I change ts when the code is confusing, and seeing the nesting wider is useful.)
[21:00] <elliottcable> ACTION nods
[21:00] <elliottcable> 100% agreed
[21:00] <Aria> Yeah. . . 
[21:00] <mape> I always keep the tabs at 8 spaces
[21:00] <elliottcable> I believe everybody should just standardize on a number of spaces; I prefer 2 spaces, but I’d *much* rather utilize 4 spaces 100% of the time, than ever, ever, ever see a single damned hard-tab in a source file
[21:00] <isaacs> Aria: 100% agree.
[21:00] <mape> And since most people hate that, it's easier to keep it to tabs rather then me having 8 spaces
[21:00] amerine has joined the channel
[21:00] <isaacs> elliottcable: i actually DONT believe everyone should.
[21:00] <elliottcable> … and I think insane people like mape should be thrown in the canal to drown >,> :D
[21:01] <Aria> Hehe. I really prefer tabs, because I prefer 2 or 3, and others prefer wider -- and tabs lets that be an editor preference.
[21:01] <isaacs> elliottcable: i mean, that's a bit like saying that everyone should always view code in 16pt.
[21:01] <mape> elliottcable: Meh get a larger monitor and stor your whining!
[21:01] <elliottcable> put it this way:
[21:01] <isaacs> elliottcable: i'm sure you'll say that's way too huge, but i have terrible vision, and literally *cannot* code smaller.
[21:01] <Aria> (also, it can be semantic: tab for indent, space for alignment) (I also don't mind coding with non-fixed-width fonts.)
[21:01] <elliottcable> “configurable indentation in editors” would be nice
[21:01] <elliottcable> but hard-tabs are *not* that, IMHO
[21:01] <isaacs> Aria: I <3 every word that you're writing right now.
[21:01] <Aria> They're a poor substitute for that.
[21:02] <elliottcable> they were, some place way back in the antiquity of text editing, when writing code and writing documents were the same thing
[21:02] <mape> But so yeah, doesn't this just end in 'have post commit hooks in github that fixes style"?
[21:02] <Aria> But they work, but like all things with charcode < 128, they're overloaded.
[21:02] <elliottcable> but nowadays, tabs have a very specific, and different, semantic attached to them in the programmer world: field-seperator
[21:02] <mape> Since everyone wants to code the way they code
[21:02] <isaacs> elliottcable: then it sounds like, all bluster and nerd rage aside, all you really care about is whitespace at the end of lines, using braces when there's only one thing there, and comma-first?
[21:02] <Aria> elliottcable: I have never, ever, ever had a field separator in my code. now THOSE are things I keep strictly separate.
[21:02] <elliottcable> mape 3» that’s a horrible solution; no *tool* can format code as readably and intelligently as a human can; trust me, I’ve tried to write them
[21:02] <Aria> (Text and code, though, I don't.)
[21:03] <mape> elliottcable: Doesn't that just mean you aren't very good at writing those tools?
[21:03] <elliottcable> isaacs 3» yeah; there’s other things that bug me, but nothing I couldn’t ignore to work with other people
[21:03] <Aria> Yeah, that does tend to fail, mape.
[21:03] <elliottcable> mape 3» *what Aria said*
[21:03] <_announcer> Twitter: "@ Tessarakt node.js, so Javascript (and mongodb driver)." [de] -- Christian Scholz. http://twitter.com/mrtopf/status/18223115578
[21:03] <mape> Aria: same to you
[21:03] <isaacs> elliottcable: everything else is basically just following nodejs standards.
[21:03] <isaacs> elliottcable: the cb stuff is an architectural decision that has yielded a LOT of benefits.
[21:03] <elliottcable> mape 3» the problem is that style rules as simplistic as the ones isaacs wrote *don’t* cover everything; to write a true, determinstically-accurate description of ‘a coding style’ is *monsterously* complex
[21:03] <mape> If you can parse the language you can format it
[21:04] <Aria> My own solution is do things my way when I write my own code -- it resembles isaacs' style mostly, though I'm torn on the semicolon thing unless the code is v8-specific. When I write with others, I follow their style. No matter how weird to me.
[21:04] <elliottcable> Aria 3» agreed 100%
[21:04] <isaacs> Aria: the semicolon thing is actually supported 100% the same in every JS engine.
[21:04] <mape> elliottcable: that is what you have test coverage for?
[21:04] <isaacs> Aria: even NN4 and IE5
[21:04] <elliottcable> Aria 3» if I were to, in fact, contribute to npm; I’d follow that document without a moment’s hesitation
[21:04] <elliottcable> Aria 3» the point of *this* discussion, is that I wish to influence others to avoid making the decision to utilize that style in their projects
[21:04] <mape> But you just hate isaacs so that isn't an issue? :P
[21:04] <Aria> Yeah? I'd swear I ran into something in IE recently that got confused without semicolons.
[21:05] <elliottcable> Aria 3» because while I *will* utilize that style when working on a project, I will hate it; and I wish to minimize the number of projects that apply it
[21:05] <Aria> That said, I was under deadline, so definitely don't quote me.
[21:05] <isaacs> mape: nono, elliottcable and i have nothing but good friendliness, as far as i can tell.
[21:05] <mikeal1> the only thing i know that breaks on semicolons are the compressors
[21:05] <isaacs> this is all just standard good natured nerd sparring
[21:05] <elliottcable> Aria 3» which, honestly, is the point of any stylistic discussion; in the long run, it’s alrways the choice of the project’s author, and anybody who doesn’t abide by that when “contributing” is really just an asshole
[21:05] <isaacs> mikeal: they actually don't.
[21:05] <mape> isaacs: bah come one, I want a cat fight here
[21:05] <mikeal1> closure did last time i checked
[21:05] <Aria> elliottcable: Good we agree on that at least ;-)
[21:05] <isaacs> mikeal: jsmin, yuicompressor, and closure compiler ALL handle my style without any issues.
[21:05] <elliottcable> mape 3» no, I love isaacs
[21:06] <mikeal1> it's probably been fixed
[21:06] <elliottcable> mape 3» the only person in the JS community I could honestly be said to hate is that holowaychuk dude
[21:06] <mape> isaacs: How much knowledge does it take to not screw up the closure like compressors when not using ; ?
[21:06] <mape> elliottcable: He slept with someone you love?
[21:06] <mikeal1> IMHO it's just easier to say "use semicolons" than say "use then in these cases but not the rest"
[21:06] <mikeal1> i'll continue to not care about style
[21:06] <mikeal1> and omit semicolons when i forget them :)
[21:06] <elliottcable> other than him, it’s full of unadulterated awesome: isaacs, inimino, many of hte best Rubyists I’ve ever known (look at Aria!), ryah himself, etc etc etc etc
[21:06] <elliottcable> oh, cloudhead of corurse
[21:07] JimBastard has joined the channel
[21:07] <mape> mikeal1: Isn't that what you have lint for? :)
[21:07] <isaacs> mikeal: but it's easier to notice when my semicolons are missing, since they're at the start of the line, or they're a syntax error.
[21:07] amerine has joined the channel
[21:07] <mikeal1> lint is super bitchy about a lot of stuff
[21:07] <mikeal1> lint doesn't even like comma first
[21:07] <mape> mikeal1: just tune it down
[21:07] <isaacs> mape: the best linter is the human brain, if you just use a style that adapts to its strengths.
[21:07] <JimBastard> man, there was the hottest french canadian chick just here 
[21:07] <mape> mikeal1: The way I have it configured I'm fine doing , first
[21:07] <elliottcable> crap y’all I have to go
[21:07] <elliottcable> “21:03:16 <+inimino> elliottcable ⋱ this is way more important than someone being wrong on the Internet about hard tabs.”
[21:07] <JimBastard> im torn between my disdain for candadians and my love for hot chicks
[21:07] <elliottcable> so I have to pay attention to him :x
[21:07] <elliottcable> bbl
[21:07] <isaacs> hahah
[21:07] <mape> isaacs: My brain is a rut, I don't trust it one bit
[21:08] <elliottcable> isaacs 3» no hard feelings, for real :3
[21:08] <mikeal1> yeah, but you can't standardize a community in "lint but turned down"
[21:08] <isaacs> nono, of course not.
[21:08] <mikeal1> s/in/on
[21:08] <isaacs> i was curious about actual information that might change my mind.
[21:08] <JimBastard> we talking about code styling?
[21:08] <mape> mikeal1: you can never standardize a community unless the syntax is forced like python, and I guess you can mess that up as well
[21:08] <inimino> isaacs: we just need a better lint :-)
[21:08] <isaacs> criticism is always welcomed, if informative.  or interesting.  or if there's a lot of profanity, then that can be fun, too.
[21:08] amerine has joined the channel
[21:08] <isaacs> inimino: INORITE!
[21:08] <JimBastard> inimino: what do you have against lint?
[21:08] <elliottcable> isaacs 3» if you’d change your mind about the empty newlines (I suspected your only reason was git’s default settings, which I have *yet* to see an explanatio nfor, and I’ve been asking people for ages)… then I suspect we could agree on everythinge lse
[21:09] <mikeal1> that's just not true
[21:09] <mikeal1> we require all the tests pass
[21:09] <mikeal1> before code gets committed
[21:09] <inimino> JimBastard ⋱ JSLint specifically?
[21:09] <mape> elliottcable: WHAT? You want indented newlines?
[21:09] <JimBastard> yeah
[21:09] <mikeal1> you can easily make lint part of the tests
[21:09] <inimino> JimBastard ⋱ about a dozen things, you'll probably see the blog post if I ever publish it
[21:09] <JimBastard> i dont think you can do comma first style with lint
[21:09] <JimBastard> got ya, ive read that ill re-read
[21:09] <elliottcable> isaacs 3» meh I just say fuck a lot. As I was once told, it apparently makes me look like a “big, angry, cuddly teddybear”
[21:09] <mikeal1> we just need to standardize the style, write an encorder (modified lint) and check it in
[21:09] <mape> JimBastard: sure, if you scale it back
[21:09] <jaywalk> mape: if we want to be able to update locations during runtime of wargames, what would be the easiest modification? we have many hosts that dns resolve can't find :)
[21:09] <JimBastard> wait
[21:09] <elliottcable> (this by a male on Twitter, nonetheless :x)
[21:09] <JimBastard> sorry, i thought you were talking about the other thing you published sorry
[21:10] <JimBastard> i gotta poop
[21:10] <JimBastard> bbl
[21:10] <mikeal1> encforcer
[21:10] <mikeal1> er enforce
[21:10] <mikeal1> enforcer
[21:10] <isaacs> JimBastard: have fun!
[21:10] <mikeal1> i cannot type
[21:10] <jaywalk> mape: if we just update cache.json, will that have any effect?
[21:10] <mikeal1> EPIC POO!
[21:11] <mape> jaywalk: on the message event add a match for !location [0-9]+.[0-9]+,[0-9]+.[0-9]+ which overwrites the users location and then push an update
[21:11] <mape> jaywalk: it will if you restart the app, the cache is only there for crash persistans
[21:11] <mape> *ens
[21:11] <jaywalk> mape: as I thought, thanks :)
[21:11] <jashkenas> are there any programming languages that have unix-style pipes built-in? i.e. pipe a value into a function, instead of putting the function first?
[21:11] <inimino> JimBastard ⋱ I went through every error or warning that JSLint gave on jQuery, which was quite a few, and I found most of them either questionable or arguably wrong
[21:11] <elliottcable> 21:10:25 < mikeal1> EPIC POO!
[21:11] <elliottcable> …
[21:12] <Aria> jashkenas: zsh, ksh, bash...
[21:12] <elliottcable> JimBastard 3» yes, I hate JSLint
[21:12] <jashkenas> Aria: outside of shell?
[21:12] <elliottcable> Aria 3» I think he means a non-shell-scripting language >,>
[21:12] softdrink has joined the channel
[21:12] <Aria> ACTION laughs. Isn't that begging the question, since once it grows pipes, it's a shell language?
[21:13] <Aria> But haskell, too, does.
[21:13] <jashkenas> Aria: thanks.
[21:13] <jashkenas> "hello world" | print
[21:14] <jashkenas> here's a good link: http://stackoverflow.com/questions/1457140/haskell-composition-vs-fs-pipe-forward-operator
[21:14] <mape> jaywalk: be sure to push that back, neat feature to have
[21:16] <mape> Aria: So the thing about it being hard format code after a specific style, does that mean coffeescript and tons of bugs?
[21:16] <jaywalk> mape: if I get things decent I will for sure :)
[21:16] amerine has joined the channel
[21:16] <jashkenas> mape: tons of bugs? do tell.
[21:17] <mape> jashkenas: ? === 'question'
[21:17] <JimBastard> inimino: it depends on what settings you give it right?
[21:18] <mape> I have no idea if it does, but if coffeescript works it shouldn't be impossible to parse js and format it
[21:18] <JimBastard> inimino: i had to JSLINT our entire production codebase at work, pretty strict settings, only took half a day or so
[21:18] <inimino> JimBastard ⋱ I started with the defaults, but most of the ones I found that I considered wrong were actually not even options
[21:18] <JimBastard> word
[21:18] steadicat has joined the channel
[21:18] <inimino> a lot of it depends on coding style, and on how "advanced" the code is (whatever that means)
[21:18] <JimBastard> some of the stuff was a bit annoying, but aside from not allowing comma first it was not too bad
[21:18] <Aria> mape: I'm not sure I follow
[21:18] <mape> I can't seem to understand how i++ is strange/tricky/hard to get
[21:19] <jashkenas> mape: parsing CoffeeScript is *way* harder than parsing JavaScript. ... yes you can get a parse tree, and yes you can print the code in a consistent style. But the generated-style will never be as nice as a handwritten one.
[21:19] <JimBastard> yeah inimino , i usually structure my code to be very easy to read, opposed to succinct 
[21:19] <inimino> but cross-browser code is a lot more likely to legitimately use things that JSLint doesn't like
[21:19] <mape> Aria: You said that post commit hooks don't work since to can never format things proper
[21:19] <mape> jashkenas: In a logical sense, not consistens?
[21:20] <Aria> Yeah, not all the time -- though specific errors that have no exceptions can be tidied. (PLD Linux has a tool for this for RPM spec files.)
[21:20] <jashkenas> In the sense that you use linebreaks and logical structure for semantic reasons -- to the reader of the code -- and the AST-to-source generator just always does the same thing, regardless.
[21:21] benburkert has joined the channel
[21:21] <jashkenas> auto-formatted will always be more consistent and less readable, imo.
[21:23] <jashkenas> Take "if not" versus "unless" in Ruby or CoffeeScript. They mean the same thing, but you would use the first to imply that this is a likely occurrence ... and you'd use an "unless" to imply that the case isn't likely to happen. 
[21:23] <jashkenas> which one does the generator produce? it doesn't know.
[21:24] <Aria> (Oddly, a languge could optimize around that, now that we have branch prediction and they're actually different)
[21:25] <_announcer> Twitter: "http://mrdoob.com/projects/multiuserpad/ a nice node.js app" -- Jose Pablo Barrantes. http://twitter.com/jpablobr/status/18224129612
[21:26] <mape> Man mrdoobs thing never die, people love scribbling :D
[21:26] saikat has joined the channel
[21:27] riottaba has joined the channel
[21:31] amuck has joined the channel
[21:34] dgathright has joined the channel
[21:36] athenot has joined the channel
[21:36] jbr has joined the channel
[21:36] <isaacs> mikeal: re: viewing package.json after load..
[21:36] <isaacs> .
[21:36] <mape> Not pigeons! Squabs
[21:37] endergen has joined the channel
[21:37] <mikeal1> sure
[21:37] <dgathright> Just made my node-yql module available via NPM.  First time packaging anything up, so if anyone (*cough* isaacs *cough*) has a chance to check it out and see if I screwed up, I'd appreciate it. :)  npm install yql, source @ http://github.com/drgath/node-yql
[21:38] <mape> dgathright: got github?
[21:38] <mape> ..
[21:38] <isaacs> mikeal: i could expose this in npm pretty triviall
[21:38] <endergen> Has anyone taken a crack at Porting a <canvas> implementation to node.js server side. Would allow you to have server side generate images using the exact same code as the client side.
[21:38] <sh1mmer> dgathright: we should get that on the yahoo repo ;)
[21:38] <mape> ACTION dies
[21:38] <jashkenas> endergen: I'd love to have that ...
[21:38] <isaacs> mikeal: BUT, i'm very very VERY loathe to EVER see code that does require("npm")
[21:38] <endergen> Has anyone heard about anything like that.
[21:38] <mikeal1> i was thinking about what you could do on the npm side (and on the couchdb side) to accomplish the same goal
[21:38] <endergen> @jashkenas, exactly
[21:39] <mape> dgathright: Really should add some easy examples and output to the readme on github :)
[21:39] <mikeal1> but they wouldn't be compatible with each other without spec support
[21:39] <mikeal1> but something *just* for npm would be great for a proof of concept
[21:39] <dgathright> mape: Yeah, was just looking at the README and thought it was a little weak.  I'll work on that now
[21:40] <mape> isaacs: Is npm still going strong on the couch part of the local repo?
[21:40] <endergen> Ok, peace. No one's heard of it, will ask again later when this channel is more busy.
[21:40] <inimino> isaacs ⋱ s/loathe/loath/ ^.^
[21:40] <mape> endergen: Well..
[21:41] <mape> Just check the specs and wrap that in something that allows you to draw?
[21:41] efphe has joined the channel
[21:41] <efphe> hello
[21:41] <efphe> I encountered node.js and I'm a little bit courious
[21:42] <isaacs> mikeal: require("fs").readFileSync(require("path").join(require("npm").dir, "npm", "active", "package", "package.json")).toString()
[21:42] <isaacs> mikeal: not pretty, but not terribly hard, either
[21:42] PyroPeter has joined the channel
[21:42] <isaacs> mikeal: i could add that as a utility function easily enough
[21:42] <isaacs> mape: at the moment, yes. not forever.
[21:42] <mikeal1> npm has already done so much work to resolve package.json
[21:42] <isaacs> mikeal: yeah
[21:42] <isaacs> it'd be better to pull it out of its cache or somethign
[21:43] <mikeal1> it would be awesome if i could just require('npm').info(require('mustache'))
[21:43] <efphe> if I understand fine, is node.js a framework as twisted, to make (generally) server apps? if yes, why one should use node.js instead of twisted?
[21:43] <isaacs> mikeal: hmm..... yeah...
[21:43] <isaacs> except that that would just be passing in the exports object, not a reference to the module itself
[21:43] <isaacs> no way to know where it's coming from
[21:43] <isaacs> mikeal: it'd be more like require("npm").info("mustache", cb)
[21:43] <Aria> efphe: Because it's fast, light, javascript is a neat language, and because being a separate language, nobody's tempted to write blocking libraries that you have to hack into an async shape.
[21:43] <mape> efphe: Courious in anything specific? :)
[21:43] <mikeal1> that would work
[21:44] <mikeal1> does it need to be a callback?
[21:44] <Aria> efphe: So it's all async, all the way down.
[21:44] <mikeal1> i assumed npm would load it's database and meta info synchronously
[21:44] <isaacs> mikeal: yeah, it's doing either fs OR http
[21:44] <isaacs> .
[21:44] <mape> efphe: its faster, and in js, and scales well
[21:44] <mikeal1> why http?
[21:44] <isaacs> mikeal: i'm actually planning to remove all the sync stuff everywhere
[21:44] <mikeal1> it would be for a module that's already installed
[21:44] <isaacs> mikeal: yeah, it coudl do that syncly
[21:45] <isaacs> mikeal: but the issue is, i want npm to work as a little workerbee node in a giant hive of registries and node instances.
[21:45] <mikeal1> right, i'm not objecting to passing a callback
[21:45] <mikeal1> i just had this assumption that all this info would already be cached
[21:45] <isaacs> mikeal: i wanna be able to say "new version of (fab) was released.  my swarm, install it!"
[21:46] <isaacs> mikeal: yeah, probably.  if the server is running, it likely will be.
[21:46] <isaacs> there's a lot to comb through there.
[21:46] <isaacs> i won't get that done this summer.
[21:46] <isaacs>  /o\
[21:47] liucougar_ has joined the channel
[21:47] <isaacs> dgathright: seems like it's workin :)
[21:47] kloeri has joined the channel
[21:48] <efphe> oh tahnk you for your replies
[21:48] <efphe> i like really much node.js
[21:48] <efphe> it's really interesting
[21:48] <efphe> initially
[21:49] <efphe> i was looking for some machinery allowing me to code apps mixing local/remote features (think at web sql and so on)
[21:49] <isaacs> dgathright: this is unnecessary: , "dependencies" : []
[21:49] <efphe> and i encountered node.js
[21:49] <efphe> but I think I won't use it, I love python too much to write server side with a different language
[21:49] programble has joined the channel
[21:50] <mikeal1> efphe: just wait a little while
[21:51] sztanphet has joined the channel
[21:51] <mikeal1> you'll start to find problems that are just painful to solve in Python
[21:51] <efphe> oh
[21:51] <mikeal1> i was a Python guy :)
[21:51] <efphe> which kind of problem do you think about?
[21:51] adinardi has joined the channel
[21:52] <mape> The GIL?
[21:52] <mikeal1> no
[21:52] <mikeal1> not performance issues directly
[21:52] <mape> ACTION throws stuff in the fire without any knowledge about python
[21:52] <mikeal1> blocking by default as a model for network services is painful
[21:52] <efphe> twisted?
[21:52] <efphe> gil is not so dramatic
[21:52] <mikeal1> like, when you have a WSGI server handling HTTP requests and you need to talk to two IO sources
[21:52] <programble> im a python guy...
[21:52] <efphe> in fact, benchmakrks proof that
[21:53] <mikeal1> you're going to have to artificially block that thread while waiting on one of them the service is not synchronous
[21:53] <Aria> GIL is no issue at all. Node is single-threaded, so it's essentially like that.
[21:53] <mikeal1> and then it's side effect after side effect
[21:53] <efphe> mikeal, this is a really isolated problem?
[21:53] <mikeal1> Aria: that's not a proper characterization
[21:53] <mikeal1> GIL problems are exposed by threads
[21:53] <mikeal1> node doesn't have any
[21:53] <programble> ACTION just doesn't use threads in python
[21:54] <programble> causes problems
[21:54] <programble> easier to not
[21:54] <mape> Aria: Other then that people are trying to do threads to increase performance?
[21:54] <Aria> True, but the biggest criticism is that it slows it down to one thread at a time.
[21:54] amerine has joined the channel
[21:55] aho has joined the channel
[21:55] bradleymeck has joined the channel
[21:55] <efphe> for some old-python guy, it sounds to me really, really strange to know he's working server with js, really, it sounds strange
[21:56] <Aria> If you're used to JS being browser-only and a toy language, it's true.
[21:56] <Aria> But really it's a delightful language, and rather powerful.
[21:56] <mape> Isn't that just hating the DOM api?
[21:56] <efphe> Aria, i absolutely agree
[21:56] <Aria> Nah, JS used to leak memory, have crappy closures or not work right....
[21:56] <efphe> js is a good language
[21:56] <programble> web server in JS is like IRC bot in PHP
[21:56] <efphe> sure
[21:56] <Aria> But it grew up fast. And long ago.
[21:56] <efphe> but py is another worls
[21:56] <efphe> but py is another world
[21:56] <programble> but JS > PHP
[21:57] <bradleymeck> i just want to be sure js doesnt take on pythons "rule of least surprise"
[21:57] <Connorhd> wow, just saw the wargames thing, pretty cool :)
[21:57] athenot has joined the channel
[21:57] <mape> Connorhd: :)
[21:58] <Connorhd> graphs/maps are awesome
[21:59] kloeri has joined the channel
[21:59] sat has joined the channel
[21:59] <mape> Indeed, people tend to like them
[22:01] <isaacs> bradleymeck: yo
[22:01] <sh1mmer> I really need to learn vi
[22:01] <isaacs> bradleymeck: so, i'm playing with ls on your fork, but i'm not sure how this is supposed to work
[22:01] <efphe> sh1mmer, vimtutor
[22:02] <sh1mmer> efphe: I know, I know
[22:02] <efphe> eheh :)
[22:02] <sh1mmer> I'm mostly just sick of textmate crashing
[22:02] <sh1mmer> it's such a piece of shit
[22:02] <isaacs> bradleymeck: mustache.js isn't in the repo.  when i built it from jan's thing and put it there, i'm still seeing a lot of {{}} stuff
[22:02] <isaacs> sh1mmer: i agree.  and yet, like an abused housewife, i keep going back to it.
[22:02] <programble> sh1mmer: you dont need to learn vi
[22:02] <programble> sh1mmer: you need to learn emacs
[22:02] <isaacs> sh1mmer: it appologizes, and i really believe it.  it says "this is the last time, baby, i promise"
[22:03] <isaacs> sh1mmer: you guys just don't know textmate like i know textmate.
[22:03] sztanpet has joined the channel
[22:03] <sh1mmer> programble: or not.
[22:03] <programble> or yes
[22:03] <sh1mmer> isaacs: after writing a bunch of plugins I know textmate well enough to know this is an abusive relationship
[22:03] <sh1mmer> :D
[22:04] <mape> programble: so what is the killer feature for emacs vs vim?
[22:04] <mape> I'm sure Allan will release TM2 like next week
[22:05] jsilver has joined the channel
[22:05] <sh1mmer> oh sure.
[22:05] <jashkenas> http://gmane.org/plot-rate.php?group=gmane.editors.textmate.general
[22:05] <mape> http://istextmate2outyet.com/ :(
[22:05] <programble> mape: the fact that emacs can do *anything*
[22:06] <mape> programble: A gui?
[22:07] <programble> GUI Emacs is equal with GVim
[22:08] benburkert has joined the channel
[22:09] <mape> bundles and snippets?
[22:09] <programble> define bundles
[22:10] aheckmann has joined the channel
[22:10] <mape> group of snippets/commands to do nifty things
[22:10] <mape> well so, why emacs over vim?
[22:10] <programble> define snippets and commands
[22:11] <mape> snippet = tab string to make things, command = generate things through scripts
[22:11] <programble> ok well there is YASnippet which does the snippet stuff
[22:12] <bradleymeck> isaacs use my fork, couldnt just throw it in the repo, github is too smart
[22:12] <programble> and well, emacs is practically MADE for commands
[22:12] <programble> vim can't win, emacs can do anything
[22:12] <Aria> So can vim, you know.
[22:12] <mape> programble: Well that doesn't help at all.
[22:12] <bradleymeck> odd that you cant include it like that
[22:12] <Aria> The only problem is, nobody wants it to
[22:12] <isaacs> bradleymeck: can you just put your mustache.js file into the npm repo?  ./lib/utils/mustache.js
[22:13] <programble> yeah, vim users have low expectations
[22:13] <Aria> ACTION laughs.
[22:13] <mape> So emacs is the vim for old young people?
[22:13] <Aria> (and here I am, a vi user. Like non-vim vi)
[22:13] <bradleymeck> ill move that over tonight, not on my dev machine, over at another persons house
[22:13] <mape> ACTION splits
[22:13] <mape> Aria: So why vi over vim?
[22:13] <isaacs> bradleymeck: with some copyright stuff at the top giving janl credit, of course.
[22:13] <Aria> It started faster than vim6 and I never went back.
[22:13] <isaacs> bradleymeck: sure, no rush, of course.
[22:14] athenot has joined the channel
[22:14] <programble> so why vi/m over emacs?
[22:14] <Aria> It's really wicked fast. In a workflow that exits the editor, that's nice
[22:14] <bradleymeck> has that already luckily
[22:14] <programble> lemme guess
[22:14] <programble> its smaller
[22:14] <programble> its on everything
[22:14] <mape> Aria: vim is really that much slower?
[22:14] <programble> and thats basically all you got
[22:14] <Aria> Vim6 was.
[22:14] <Aria> Vim 7 isn't.
[22:14] <mape> So why not use vim?
[22:14] <Aria> 'cause I still keep typing 'vi' ?
[22:15] <mape> And what is the difference between vi and vim? colors?
[22:15] <Aria> Also, all I want to do is edit. And in actions larger than insert-a-character.
[22:15] jashkenas has left the channel
[22:15] <Aria> Depends on what vi is on your system
[22:15] <Aria> Most linuxes ship a statically linked mini-vim as vi
[22:15] <MrTopf> can I actually include JS files which do not follow the CommonJS spec? e.g. datejs 
[22:15] <Aria> I've used nvi
[22:15] mikecampo has joined the channel
[22:16] <programble> you know the beatles song "all you need is love"
[22:16] <programble> s/love/emacs/
[22:16] <programble> hahaha
[22:16] <mape> MrTopf: easiest way is to just add exports.thingyYouWant = thingyYouWant;
[22:16] <mape> in the bottom
[22:17] <mape> and var thingyYouWant = require('./relative/path/thing').thingyYouWant;
[22:17] <MrTopf> I guessed so but I thought that maybe there is a way without changing the external thing
[22:17] <mikecampo> has anyone run a node application on aws?
[22:17] <MrTopf> but will do so then
[22:17] <programble> no one has arguments against emacs i see
[22:18] <programble> ACTION proclaims himself winner
[22:18] <MrTopf> mikecampo: I assume many do, I only tested it quickly (but then again I only experiment with node the last couple of days anyway)
[22:18] <mape> programble: And you have none for?
[22:18] <programble> mape: it can do anything. thats mine
[22:18] <mape> programble: It can't is mine
[22:18] <mape> Who wins?
[22:18] <programble> mape: you lie. i speak the truth. i win
[22:19] <Aria> (my argument against emacs: It encourages yak shaving.)
[22:19] <mape> No one knows you you are, neither do they know me, equal, so vim is as good as emacs then.
[22:19] <mape> And I have Arias vote!
[22:19] <mape> Guess I win
[22:19] <programble> right
[22:19] <programble> ok then
[22:20] <programble> when you can use vim for irc, ill agree to that
[22:20] <mikecampo> MrTopf: Okay cool. I created a server that listens on port 80 (or any port), except it's not binding to all interfaces, just localhost. So I'm not able to connect to it externally
[22:20] <Aria> You can use vim for irc ;-)
[22:20] <programble> and tetris
[22:20] <programble> and running a shell
[22:20] <programble> and M-x butterfly
[22:20] <programble> and SLIME
[22:20] <mikecampo> MrTopf: So I'm just wondering how to listen on all interfaces
[22:20] <mape> programble: That just.. Doesn't add to anything?
[22:21] <isaacs> mikecampo: did you put "localhost" in the Server#listen(port, hostname) call?
[22:21] amerine has joined the channel
[22:21] <programble> mape: its just reinforcing my argument. you want emacs to do it, it can
[22:21] <mape> I'm sure I could google and find n amount of apps one could run on vi(m)?
[22:21] <isaacs> mikeal: ie, myServer.listen(8080, "localhost") vs myServer.listen(8080)
[22:21] <isaacs> er, mikecampo ^
[22:21] <mape> programble: So listing random stuff it can do is a sign of how good it is?
[22:21] <mikecampo> isaacs: I've tried localhost and 127.0.0.1 ... also tried the elastic IP that I attached to my instance, but that doesn't work
[22:21] <programble> i dont see why not
[22:22] <programble> oh also, you can just type
[22:22] <isaacs> mikecampo: don't specify a hostname.
[22:22] <programble> its not retarded like vi/m
[22:22] <mikecampo> isaacs: Okay, let me give that a try
[22:22] <isaacs> mikecampo: also, is the box visible from the client you're trying?
[22:22] <mape> programble: So how is emacs different to vim? in the insert mode?
[22:23] <programble> uh
[22:23] <mikecampo> isaacs: well the port is open in the security group. SSH works
[22:23] <programble> you have to get into insert mdoe
[22:23] <programble> ever notice how EVERY other text editor just lets you type, move the cursor, etc just like that?
[22:23] <mape> programble: Uh is the "fuck you" way of just explaining how it works
[22:24] <mape> So there is no reason vim? has insert mode?
[22:25] <programble> you still havnt given any arguments against...
[22:26] <mikecampo> isaacs: that worked. thanks a lot! I've been trying to figure that one out for a couple days
[22:26] <mape> programble: Since I'm don't really have any issue either way. Just want to know why. Guess that isn't a ok?
[22:26] <isaacs> mikecampo: yeah, you can do it that way to only listen on one particular hostname or IP easily.
[22:27] <isaacs> mikecampo: but 127001 and localhost are obviously only available locally
[22:27] <efphe> mape, this is powerful because you can command your text without editing
[22:27] <programble> mape: what do you use?
[22:27] <efphe> for example, if you press "yyp"
[22:27] <efphe> you're copying a line
[22:27] <efphe> you're not writing yyp on your "file"
[22:27] <mape> programble: I use textmate for general editing and vim for editing on my server
[22:27] <efphe> if you want to write yyp in your file, you go in insert mode
[22:27] <programble> if you press C-k C-y C-y your copying a line
[22:28] <mape> efphe: yeah so that makes sence
[22:28] <programble> ok
[22:28] <efphe> ei guys
[22:28] <programble> if you type kyy it goes in your file
[22:28] <efphe> can I ask a question i find difficult with js?
[22:28] <programble> if you dont want it to
[22:28] <programble> you hold control
[22:28] <mape> So vim? is more keys based and emacs is more hotkey based?
[22:29] <programble> same thing
[22:29] <efphe> mape, yes sounds good
[22:29] <mikecampo> isaacs: I always thought it would listen to incoming connections when bound to localhost. Glad I have that cleared up now :)
[22:29] <efphe> how do you preserver the `this` object coding in js with an OO paradigm and, at the same time, using async calls?
[22:30] <efphe> which is the best strategy? this limit is making me crazy
[22:30] <mikecampo> efphe: need to use a closure
[22:30] <efphe> i continue to build really bad written lines of code to avoid it
[22:30] kloeri_ has joined the channel
[22:30] <efphe> mikecampo, could you provide an example please?
[22:31] <efphe> if i have:
[22:31] <efphe> foo= function() {
[22:31] <mape> efphe: save the this reference to self in the base?
[22:31] <efphe> ie?
[22:31] <efphe> what are you meaning mape ?
[22:31] <mape> var self = this; ?
[22:31] <efphe> suppose i have the following scenario:
[22:31] <efphe> foo= function() {
[22:32] <efphe>  this.bar= function() {alert(this.baz)}
[22:32] <mape> efphe: gist/pastbin is awsome
[22:32] <efphe>  }
[22:32] <efphe> ok
[22:32] <mape> *e
[22:32] <efphe> wait i'm pasting
[22:33] <efphe> http://dpaste.com/216799/
[22:33] <efphe> if I use obj.bar as callback, `this` is "wrong" :)
[22:33] <efphe> how can I make it "right"?
[22:34] <mape> yeah so save the this reference as var self = this; in the base function
[22:34] amuck has joined the channel
[22:34] <efphe> (note also that this seems to be really more elegant in py)
[22:34] <mape> or look at call
[22:34] <efphe> mape, could you pastebin please?
[22:34] <efphe> or write a pair of lines here?
[22:35] <mape> efphe: http://dpaste.com/216800/
[22:35] MrTopf1 has joined the channel
[22:35] <mape> efphe: or https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Function/call
[22:36] <mape> Guess that doesn't really apply to your case but good to know
[22:36] <efphe> oh
[22:36] <efphe> that's an elegant trick
[22:36] <efphe> maybe it's trivial for you
[22:36] jakehow has joined the channel
[22:36] <MrTopf1> so does this require() thing also work if the module patches existing types (as Date in the datejs case)? 
[22:37] <mikecampo> efphe: this may help you http://howtonode.org/why-use-closure or this http://howtonode.org/what-is-this
[22:37] <beelzabub1> how do i tell waf to rebuild just v8?
[22:37] <mape> efphe: Yeah so this is a pita, so usually it is a good idea to save a reference at the base of a the function you use most
[22:39] <mape> but that will break apart if you nest tons, so just keep it relative and things turn out good in the end
[22:40] <MrTopf1> Hm, copying that file into my js file also does not work so I guess the problem is somewhere else
[22:41] <mape> MrTopf1: if it extends the Date prototype it should work outside of the module
[22:42] <beelzabub1> Uggh - found a bug in v8
[22:43] <MrTopf1> mape: I was thinking so.. as said, probably some other problem (and getting late here)
[22:43] <efphe> <mape> but that will break apart if you nest tons, so just keep it relative and things turn out good in the end <-- i can't understand this
[22:43] <efphe> what are you meaning?
[22:43] <efphe> if I nest objects?
[22:43] <mape> MrTopf1: still 1h ahead :)
[22:44] <efphe> yes this could be a problem
[22:44] <mape> efphe: Because of the scope if you keep saving self = this that will override the previous reference
[22:44] <efphe> if i use 'self' trick on a method of a nested object... do I have what I expect?
[22:44] <efphe> let me pastebin
[22:44] <MrTopf1> mape: subjective lateness ;-)
[22:45] sechrist has joined the channel
[22:45] <mape> MrTopf1: Hehe, strange enough most of the activity in the channel right now is euro
[22:45] <MrTopf1> I guess I should maybe make sure I am actually working on a Date object 
[22:45] <mape> Guess the US peeps are busy getting dunken
[22:45] <efphe> http://dpaste.com/216806/
[22:46] <efphe> when I'll call foo.something.bar(), do I have 1 or 2?
[22:46] bmizerany has joined the channel
[22:47] <MrTopf> but so much for quickly formatting a date ;-)
[22:47] zaach has joined the channel
[22:49] <mape> efphe: well buz doesn't use self in bar, but if it was you should get 2 on foo.something
[22:49] <mape> I believe, beers are tearing me down here but yeah. Should is the word I would use
[22:49] softdrink has joined the channel
[22:50] mikeal1 has joined the channel
[22:52] benburkert has joined the channel
[22:52] <efphe> yes mape it is, thank you
[22:52] <mape> Luck is on my side this night
[22:53] <efphe> :)
[22:53] mitkok has joined the channel
[22:55] <MrTopf> yeah, finally working.. now it's kinda silly that I spend to much time on this..
[22:55] <MrTopf> something's wrong with that weather
[22:56] <_announcer> Twitter: "Looking for a way to get at a HTTP POST a chunk at a time as it is uploaded (Rack doesn't do this). node.js http.Server does though!" -- John Leach. http://twitter.com/johnleach/status/18228330719
[22:58] bmizeran_ has joined the channel
[22:59] <isaacs> beelzabub1: what's the v8 bug?
[22:59] <beelzabub1> opened upstream 775
[23:00] <beelzabub1> had to do with passing a v8 string to ScriptData::Precompile
[23:00] pufuwozu has joined the channel
[23:02] kersny has joined the channel
[23:06] <efphe> mmm mape let me ask another question if possible, because I encountering some UFO
[23:06] <efphe> I have an object
[23:06] <efphe> say foo
[23:06] jsilver has joined the channel
[23:06] <efphe> one of his attribute is another object, say bar
[23:06] <mape> pastebin!
[23:06] <efphe> now, sometimes it happens, and I'm absolutely ignoring why, it seems obscure
[23:07] <efphe> that doing:
[23:07] <efphe>  foo.bar.someAtrribute= 1
[23:07] <efphe> doesn't work!
[23:07] <efphe> foo.bar.someAttribute remains unaltered!!!
[23:07] <efphe> I'm really going crazy: what should I know about js?
[23:08] <efphe> are there some attributes to be considered "readonly"?
[23:08] kersny has joined the channel
[23:08] DarthShrine has joined the channel
[23:08] carlocci has joined the channel
[23:11] steadicat has joined the channel
[23:14] <mscdex> efphe: we need to get the gist of it ;-)
[23:15] <efphe> eh
[23:15] <efphe> ok
[23:18] <_announcer> Twitter: "A #nodejs client library for #pincaster :  http://bit.ly/9zDuZW #nosql" -- Frank Denis. http://twitter.com/jedisct1/status/18229340479
[23:18] mediacoder has joined the channel
[23:19] <mscdex> never heard of pincaster... but it sounds interesting
[23:23] amerine has joined the channel
[23:27] <_announcer> Twitter: "node-yql is all NPM'd up & ready to go! Now using YQL inside #nodejs is as easy as "$ npm install yql"  http://github.com/drgath/node-yql" -- Derek Gathright. http://twitter.com/derek/status/18229790404
[23:29] <_announcer> Twitter: "@johnleach so just use node.js then, what's the problem! IIRC Mongrel will also let you read HTTP Posts as they're uploaded." -- Alice Kærast. http://twitter.com/kaerast/status/18229879230
[23:54] cloudhead has joined the channel
