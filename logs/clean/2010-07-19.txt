[00:02] rictic has joined the channel
[00:03] jherdman has joined the channel
[00:05] <mikeal> Tim_Smart: did you get my email about node knockout?
[00:06] twomashi has joined the channel
[00:07] twomashi has left the channel
[00:07] <ThePub> Tim_Smart: hmm, that is pretty cool.
[00:08] <Tim_Smart> mikeal: Yup. That's cool.
[00:09] <Tim_Smart> ThePub: Yeah. Maybe a bit too much high level-ness and magic for my liking,
[00:11] <ThePub> Yeah, too much magic is usually bad.
[00:12] <maqr> so redis returns GETs async, right?
[00:13] <maqr> you'd think there'd be a way to get the length upfront, so you could set Content-Length first, then async output what's in the data store
[00:13] TrisMcC has joined the channel
[00:14] [[zz]] has joined the channel
[00:14] <mikeal> all IO in Redis is non-blocking
[00:14] <_announcer> Twitter: "Vows looks excellent for Node JS BDD http://vowsjs.org" -- Josh Price. http://twitter.com/joshprice/status/18874167594
[00:14] <mikeal> the Redis protocol always sends the size of what it's sending to you
[00:14] meder has joined the channel
[00:15] amerine has joined the channel
[00:15] <mikeal> it might not be exposed from the node-redis client tho
[00:15] <maqr> yeah, i don't think it is
[00:16] <mikeal> it's probably just the one callback huh
[00:16] <maqr> yeah, i'm looking at the source now, there's got to be a way to get that
[00:17] <maqr> not that it really matters, but i might as well do things right
[00:17] <TrisMcC> Is github broken right now?
[00:19] <maqr> looks ok here
[00:20] <TrisMcC> connect repo seems down
[00:21] <skampler> maqr: you get a buffer back in the callback, so i think the length is just buffer.length 
[00:22] <maqr> skampler: it's all written as function(err,value) for the callbacks... but does that mean that value is always the entire value? the callback is never called more than once?
[00:23] <skampler> yes, in my experience
[00:24] <maqr> so i guess it is buffered then
[00:24] LionMade0fLions has joined the channel
[00:24] <maqr> i wonder how that goes if you have a 1gb string
[00:25] <maqr> i guess it'd wait for the whole string to come back from redis, then pass it to the callback
[00:25] <maqr> oh well, good enough
[00:25] [[zz]] has joined the channel
[00:25] <TrisMcC> connect moved to /senchalabs/...nevermind then
[00:26] <maqr> TrisMcC: that'll do it :)
[00:27] victorstan has joined the channel
[00:29] victorstan has joined the channel
[00:33] unscene has joined the channel
[00:34] <unscene> issacs_home: does how do I specify dependencies in npm.  I didnt find it in the docs
[00:34] <mape> unscene: check the json man
[00:34] <unscene> yeah maybe i just glossed over it
[00:34] <maqr> mikeal: i'm caching with redis :)
[00:35] <mikeal> redis is good at that
[00:35] <mape> unscene: http://github.com/isaacs/npm/blob/master/doc/json.md
[00:35] <mikeal> you do need to write some of the memcached expiration features on your own
[00:35] <unscene> mape: thanks thats what i was looking for
[00:35] <mape> np
[00:35] <maqr> mikeal: i'm not sure what else i could need with it, i check if it's expired yet or not, then i serve from cache, or i calculate and store in cache
[00:36] tmpvar_ has joined the channel
[00:36] <mikeal> right, with memcached you can set the expiration when you put it in, and then it just won't be there after expiration
[00:36] <mikeal> Redis is awesome tho
[00:36] <maqr> mikeal: that's what redis does too
[00:37] <satori_> What happens if an entity is cached but never requested again? Does memcache just keep it around?
[00:37] <mikeal> where is that documented?
[00:37] <maqr> mikeal: 'EXPIRES'
[00:37] <mikeal> satori_: if you tell it not to expire it'll never expire
[00:37] <maqr> err, 'EXPIRE'
[00:37] <maqr> http://code.google.com/p/redis/wiki/ExpireCommand
[00:37] <satori_> i mean't with memcache
[00:38] <maqr> mikeal: https://gist.github.com/e8295b450bffe0618ec8 :)
[00:39] <mikeal> that would be cleaner with sys.pump :)
[00:39] <maqr> mikeal: obviously that needs to be made generic and refactored, but it totally works
[00:39] <maqr> mikeal: yeah, i don't know how to do that yet
[00:40] <mikeal> do you need encoding?
[00:40] <maqr> not really, i'm just assuming everything is utf8
[00:40] <Tim_Smart> Buffers are hawt ;)
[00:40] <mikeal> redis will store arbitrary binary
[00:40] <mikeal> var buf = []
[00:40] <mikeal> then in your data listener to .push
[00:40] <mikeal> er do
[00:41] <maqr> mikeal: oh, good call
[00:41] <mikeal> awe crap, that won't work
[00:41] <maqr> mikeal: why not?
[00:41] <mikeal> this redis library is no good
[00:41] <maqr> :o
[00:41] <mikeal> the value has to be one object, which means you'll have to create another buffer with all the slices
[00:41] <mikeal> which is lame and slow
[00:41] <mikeal> this library was written before buffers and streams landed and you can kinda tell
[00:42] <Tim_Smart> Buffers aren't terribly cheap to create, as I found out.
[00:42] <maqr> i think it's the only library available? :/
[00:43] <unscene> so lets make it better :D
[00:43] <satori_> node creates and reuses large buffers internally to get around this.
[00:43] <Tim_Smart> s/terribly/somethinggood/
[00:43] <mikeal> pquerna is going to work on this
[00:43] <mikeal> node will keep a bunch of memory already allocated and give you buffers from slices of it
[00:43] <Tim_Smart> satori_: Last time I checked it did malloc for every new Buffer
[00:44] <mikeal> that should avoid the malloc overhead
[00:44] <Tim_Smart> Except for slices and such.
[00:44] <satori_> i mean inside net.js 
[00:44] <maqr> mikeal: this is about as good as i can get atm (minus abstracting it away for re-use): https://gist.github.com/e8295b450bffe0618ec8
[00:44] <satori_> buffers are allocated from a pool for streams
[00:44] paulwe has joined the channel
[00:44] <maqr> mikeal: ideally, i think the whole thing should stream in and out async, which doesn't seem to be the case here
[00:44] <Tim_Smart> satori_: Ah right/
[00:44] <mikeal> huh?
[00:45] <Tim_Smart> s/\//./
[00:45] isaacs has joined the channel
[00:45] <mikeal> maqr: yeah, that's because it was all written before we had streams :)
[00:45] <maqr> mikeal: oh :P
[00:45] <mikeal> this is one of the earliest node libraries i know of
[00:46] <Tim_Smart> Heh, and it's the only one on the modules list.
[00:46] <maqr> i don't think i'm qualified yet to update it :P
[00:50] <mikeal> maqr: yeah, that's as good as you can do until someone makes the redis lib better
[00:50] <satori_> which redis lib?
[00:50] <skampler> fictorial's
[00:50] <maqr> mikeal: i'm still pleased that i recognized what the lib should do, even if it doesn't do it... you guys are training me well :)
[00:51] <satori_> what about this one? http://mihai.bazon.net/blog/redis-client-library-javascript-node
[00:52] <maqr> i had not seen that
[00:52] <satori_> seems to support transactions and multibulk
[00:53] <maqr> that looks quite good, i wonder why it's not on github
[00:53] <satori_> interesting code too... throws functions instead of errors
[00:53] <unscene> hmmmm
[00:54] <maqr> ACTION detaches for a few minutes
[00:55] <mscdex> whew. i think long poll is finally fixed this time
[00:56] <mscdex> emulating a persistent connection across multiple xhr requests == yuc
[00:56] <mscdex> *yuck
[00:56] <_announcer> Twitter: "@wibblenut Sure does. That's what node's tag /was/.. see http://coder.io/tag/node.js" -- Peter √áoop√®r. http://twitter.com/peterc/status/18876559673
[00:56] <satori_> all in the name of backwards compatibility?
[00:56] <mscdex> more or less
[00:57] <satori_> those are usually the boring bits of any project :P
[00:57] <mscdex> hopefully the majority of people will either have a websocket-capable browser or will have flash installed
[00:57] <satori_> screw 'em if they don't.
[00:57] <mscdex> the remaining users have a choice between sse, multipart, or long poll
[00:57] <satori_> that's my philosphy
[00:58] <mscdex> yeah well you can't really do that at this point in time
[00:58] <mscdex> heh
[01:00] <mscdex> safari and chrome are the only two browsers that have stable releases that support websockets
[01:00] <satori_> yeah, but flash is near everywhere
[01:00] <mscdex> and lots of people have flash enabled, but there's also a lot of people that block flash
[01:00] <mscdex> or have a mobile device that either doesn't support flash or is disabled
[01:00] <mscdex> because flash on mobile = yuck
[01:00] <satori_> I don't think asking them to install/enable flash to use an advanced feature is asking too much.
[01:01] <satori_> yeah flash on mob is sucky
[01:01] <mscdex> i mean, afaik a lot of decent mobile browsers at least support xhr, so they could use long poll
[01:01] <paulwe> does comet work at all on mobile? i can't get socket.io working but regular xhr is fine...
[01:02] <paulwe> trying in mobile safari
[01:02] <satori_> mscdex: truedat.
[01:02] <mscdex> paulwe: i haven't tried personally, but i would think at least long poll should work if xhr is supported...
[01:02] <mscdex> and assuming that socket.io isn't broken some how
[01:02] <paulwe> nah, have it working correctly in browser
[01:03] <mape> paulwe: sure it works, I've used it on iphone/ipad
[01:03] <satori_> lots of phone networks use invisible proxies. Does socket.io play wel with proxies?
[01:03] <paulwe> and actually, socket logs the connection but the client never receives messages
[01:03] <mscdex> i mean.... if anyone wants to you know, donate me an ipod touch to test on.... i probably wouldn't mind ;-)
[01:04] <paulwe> lol
[01:04] <mscdex> as far as mobile browsers go, i have an android 1.6 device
[01:04] <_announcer> Twitter: "If your custom JS references content by node ID (nid), you're doing it wrong. #Drupal" -- Damien McKenna. http://twitter.com/DamienMcKenna/status/18877039837
[01:04] <mscdex> i wonder if dillo supports xhr
[01:05] <paulwe> mape: did it work out of the box or did you have to run it with some special options to get it working?
[01:05] <mape> out of the box
[01:06] <paulwe> ACTION grumbles
[01:07] <mscdex> maybe you two have differing versions?
[01:07] <mscdex> of the client and/or server-side?
[01:08] <paulwe> maybe, i'll try updating
[01:08] <mscdex> looks like dillo has no xhr support. bummer. it would be neat to have a lightweight browser like that be able to "stream" stuff
[01:11] joshbuddy has joined the channel
[01:11] <ThePub> always thought "lightweight" in terms of dillo meant, "strip out anything beyond html".
[01:12] <Tim_Smart> mscdex: Flash websockets? D:
[01:12] <mscdex> Tim_Smart: yeah?
[01:12] <Tim_Smart> Flash saddens my soul.
[01:12] <mscdex> ThePub: that's probably true, but still it would be neat to have just that extra piece in there :-)
[01:12] <mscdex> Tim_Smart: you're not alone, i'm only adding it for extra user coverage ;-)
[01:13] <Tim_Smart> mscdex: I usually take flashsocket out of socket.io transports whenever I end up using it :p
[01:15] <mscdex> Tim_Smart: well, this is for grappler. so you can use whatever you like really, but i'm working on a demo page that includes example connection tests for each type the server supports
[01:15] <Tim_Smart> Cool cool.
[01:16] aho has joined the channel
[01:16] <Tim_Smart> mscdex: Does the server automatically serve the client code?
[01:16] pydroid has joined the channel
[01:17] <Tim_Smart> Or haven't you got that far?
[01:17] <mscdex> Tim_Smart: the example server does
[01:17] <Tim_Smart> Cool cool.
[01:17] <mscdex> example server and example client-side code
[01:17] <mscdex> :-)
[01:34] ditesh|cassini has joined the channel
[01:38] [[zzz]] has joined the channel
[01:40] <phiggins> which node-based irc bot is the most popular/stable/fun
[01:40] <Tim_Smart> phiggins: Library to make a bot - or?
[01:42] <phiggins> basic say/read #somechannel is good enough
[01:42] [[zzzz]] has joined the channel
[01:42] <phiggins> eg: _announcer is?
[01:42] <phiggins> Tim_Smart: ^
[01:42] <Tim_Smart> Take a look at http://github.com/gf3/Jerk or something
[01:42] <mscdex> phiggins: http://github.com/martynsmith/node-irc
[01:43] <phiggins> WHO TO TRUST
[01:43] <phiggins> ACTION goes to both
[01:43] <mscdex> heh
[01:43] blaines has joined the channel
[01:43] ChrisPartridge has joined the channel
[01:45] <mape> phiggins: I've been using node-irc for all my stuff and it works nicely
[01:47] <Ned_> phiggins: I recommend node-irc ... but then I wrote it :p
[01:47] <Ned_> so I would ...
[01:47] <Ned_> ;-)
[01:47] <ChrisPartridge> Anyone know if the express framework has issues recieve POST data? Can't seem to see the data in req.params
[01:47] <Ned_> phiggins: I think the documentation is quite good though, you should be able to get up and running fairly quickly
[01:49] <phiggins> Object.prototype needs .mixin
[01:49] <pquerna> memory pools
[01:49] <phiggins> shhh pquerna is here
[01:50] <mscdex> do memory pools require regular cleaning?
[01:50] <mscdex> :-D
[01:50] <Tim_Smart> Heh, where did memory pools come from?
[01:55] Blackguard has joined the channel
[01:55] <pquerna> Tim_Smart: well, someone said my name a few hours ago about rejiggering net.js stuff.
[01:56] <pquerna> i'm thinking of just making a BufferedFileWriter tbh, that'll solve my own problem of extrating files
[01:58] <wattz> evening
[01:59] <jsilver> anyone played with sproutcore?
[01:59] <mscdex> it's so difficult to google "something.something"
[01:59] <mscdex> :-\
[01:59] <jsilver> yeah
[02:00] <wattz> sproutcore is pretty cool
[02:00] <mscdex> it treats the . as any punctuation, including a space
[02:00] <jsilver> im looking at stuff to play with
[02:00] <jsilver> sproutcore seems cool but kindy of appy
[02:00] <jsilver> i think that was the point tho
[02:00] <wattz> that's the point
[02:00] <jsilver> it seems like rails for JS...?
[02:01] <wattz> more like Cocoa
[02:01] <wattz> since it's a port of Cocoa
[02:01] <jsilver> it is?
[02:01] <jsilver> interesting
[02:01] <wattz> from Charles Jolley (formaly of Apple)
[02:01] <wattz> it's what powers me.com
[02:01] <jsilver> hm
[02:01] [[zzzz]] has joined the channel
[02:01] <jsilver> ahh
[02:01] <mscdex> i prefer my cocoa in hot water
[02:01] <jsilver> yeah
[02:02] <wattz> is there a way to restart a node process from within the process?
[02:02] <mscdex> i've tried it wattz, it's not easy
[02:02] <wattz> i wrote this file thing to restart when you save a file
[02:02] <wattz> because im tired of restarting everytime I save
[02:03] <wattz> guessi can just restart the server method
[02:03] <mscdex> basically the problem is getting the new process to take over the terminal's stdin, stdout, and stderr
[02:03] <wattz> yeah
[02:03] <wattz> that's what im hitting
[02:03] <mscdex> i think someone said you could do something with screen or something, but i never messed with it
[02:04] <wattz> just call server.end
[02:04] <wattz> then server. start again
[02:04] <mscdex> iirc i got as far as sending the current process's file descriptors to the new process, and that got the new process outputting to stdout
[02:05] <mscdex> but then i think i had the problem where it kept showing my bash prompt when i would hit enter, like the process wasn't in the foreground
[02:06] <mscdex> and 'fg' doesn't work because the shell didn't create the process
[02:06] <wattz> stopping and starting process
[02:06] <mscdex> i eventually gave up and went another route
[02:06] <wattz> err
[02:06] <wattz> stopping/starting server won't help because it doesn't reload the files/code
[02:07] <wattz> be so nice to call process.restart :D
[02:07] <mscdex> for sure
[02:07] <wattz> i guess i could call out to an sh script
[02:07] dgathright has joined the channel
[02:08] <mscdex> i mean, if you're talking about a daemon or something, then there shouldn't be a problem
[02:08] <wattz> well I have my little framework here im building from scratch 
[02:09] [[zzz]] has joined the channel
[02:12] <mscdex> i think it's funny how in the XHR doc on mozilla's website, it lists a couple properties as "non-standard", but "multipart" is not one of them
[02:12] <mscdex> because firefox is the only one that implements it
[02:15] <maqr> ChrisPartridge: yeah, express does have issues with post... it's actually connect that has the issue
[02:16] <maqr> ChrisPartridge: put the bodyDecoder call in the constructor instead of in configure(), and use req.body
[02:16] mostlygeek has joined the channel
[02:18] bpot has joined the channel
[02:25] charlenopires has joined the channel
[02:32] ddollar has joined the channel
[02:35] tilgovi has joined the channel
[02:37] steadicat has joined the channel
[02:38] Dylanrw has joined the channel
[02:42] victorstan has left the channel
[02:44] <_announcer> Twitter: "Nice - http://substack.net/posts/85e1bd/DNode-Asynchronous-Remote-Method-Invocation-for-Node-js-and-the-Browser" -- Aaron Heckmann. http://twitter.com/aaronheckmann/status/18883328427
[02:45] [[zz]] has joined the channel
[02:47] <SubStack> ^_^
[02:47] <SubStack> aheckmann: glad you like it!
[02:48] softdrink has joined the channel
[03:05] bradleymeck1 has joined the channel
[03:18] [[zz]] has joined the channel
[03:19] richcollins has joined the channel
[03:30] <ChrisPartridge> maqr: Thanks - figured it all out after finding a relevant example :)
[03:37] joemccann has joined the channel
[03:37] <joemccann> oi!
[03:39] <mscdex> io!
[03:39] <satori_> async io!
[03:39] <mscdex> node!
[03:41] <isaacs> bradleymeck: ping
[03:42] <SubStack> isaacs: I tried to make some headway on the npm build bug
[03:42] <jsilver> has anyone done anything with spoutcore and node? opinions on sproutcore?
[03:42] <SubStack> no luck though
[03:42] <isaacs> SubStack: i have it working
[03:42] <SubStack> oh really!
[03:42] <isaacs> SubStack: just doing a bit of cleanup at this point
[03:42] <isaacs> yeah
[03:42] <SubStack> excellent
[03:42] <isaacs> build.js is still a mess, but it's better.
[03:43] <SubStack> refactoring is hard
[03:43] <isaacs> ACTION shrugs
[03:43] <isaacs> it's not so hard.  just hard to get yourself to do it
[03:43] <isaacs> once you start, though, it's kind of satisfying
[03:43] <SubStack> well, it's much harder if you're not familiar with the codebase :p
[03:43] <isaacs> oh, true that ;)
[03:44] <isaacs> ACTION is very familiar with npm.  some might say... a little TOO familiar...
[03:44] <isaacs> trying to tackle the "uninstall doesn't uninstall" bug now
[03:45] <isaacs> 0.1.19 was a mess.  fixed some things, but broke a bunch of others.  (of course, the same could be said for most versions of npm, i guess)
[03:47] austinfromboston has joined the channel
[03:48] tmpvar_ has joined the channel
[03:53] eisd_ has left the channel
[04:09] bpot has joined the channel
[04:12] <jsilver> what's dnode?
[04:12] <jsilver> is it good?
[04:13] JimBastard has joined the channel
[04:15] <satori_> ask substack
[04:16] <jsilver> im playing with sproutcore right now
[04:16] <jsilver> the docs say its server agnostic
[04:16] <jsilver> thought that was cool
[04:16] <jsilver> and the focus on pure JS
[04:17] <SubStack> jsilver: it's awesome of course
[04:17] <satori_> heh
[04:18] <SubStack> it's a way to call methods and throw around callbacks between processes
[04:18] <jsilver> :D
[04:18] <SubStack> processes that might even be running on the browser!
[04:18] <jsilver> what
[04:18] <jsilver> dude
[04:18] <jsilver> you just fucked my mind
[04:18] <jsilver> fix it
[04:18] <jsilver> :D
[04:18] <jsilver> 8D
[04:19] <jsilver> d8-D
[04:19] <SubStack> ^_^
[04:19] <jsilver> that's how cool that is
[04:19] <jsilver> did you write it
[04:19] <jsilver> +100000000000000000000000 looks like the karma machine broke and spit out +1's all over the place !!!
[04:20] <jsilver> an some 0's
[04:20] <SubStack> yes I wrote it
[04:20] <Tim_Smart> Does it communicate via representions or refrences?
[04:20] <SubStack> references
[04:20] <SubStack> the protocol section of the readme talks about how
[04:21] <SubStack> http://github.com/substack/dnode 
[04:21] <_announcer> Twitter: "@jasonong would a restful json api written on top of node.js be interesting talk idea? is anyone going to just cover node so far?" -- Kenny Shen. http://twitter.com/kenny_shen/status/18889499459
[04:21] <mscdex> who can recommend a good javascript minifier?
[04:21] <jsilver> google closure compiler
[04:21] <mscdex> one that's available online
[04:22] <Tim_Smart> yahoo's one is the next best.
[04:22] <SubStack> it started out like json-rpc actually before I had heard of it, but then I realized that I didn't need specific result messages
[04:22] <Tim_Smart> Its online as well.
[04:22] <Tim_Smart> SubStack: So you are actually passing representations.
[04:23] <SubStack> Tim_Smart: how do you define those terms?
[04:23] <Tim_Smart> You obviously can't pass references between two different instances of a VM.
[04:23] <mscdex> is the google closure compiler available as an online service anywhere? :S
[04:23] <SubStack> the remote passes in a reference to its remote callback that the client can execute
[04:24] <SubStack> here I mean reference in the sense of an address
[04:24] <mscdex> without having to download anything?
[04:24] <SubStack> as opposed to a representation which I would interpret as something like Function.toString()
[04:24] <isaacs> arg, i hate making non-backwards-compatible changes.
[04:24] <isaacs> it's like signing up for annoyed users.
[04:24] <Tim_Smart> mscdex: http://closure-compiler.appspot.com/home ?
[04:24] <SubStack> which is more like what jsonp does
[04:25] <mscdex> Tim_Smart: cool. thanks
[04:25] <Tim_Smart> SubStack: So could I pass a file descriptor?
[04:25] <_announcer> Twitter: "@kenny_shen That wld be awesome. I was thinking of node.js after reading yr blogpost. :) You'll be presenting?" -- Jason Ong. http://twitter.com/jasonong/status/18889776241
[04:26] <SubStack> Tim_Smart: does node even have those?
[04:26] <Tim_Smart> Yup.
[04:26] <SubStack> anyways, you can pass arbitrary objects
[04:26] <Tim_Smart> Hence the filesystem api.
[04:26] <SubStack> if a file descriptor is just an object with some methods, then yes
[04:26] <isaacs> isn't a file descriptor typically a number?
[04:26] <isaacs> maybe you're thinking of a file stream?
[04:27] <isaacs> or you can wrap it in something, like npm does for its registry uploading stuff
[04:27] <SubStack> you can't use a function on the client to read in that descriptor though
[04:28] <SubStack> but you can call any functions embedded in the descriptor and they will execute on the side they were defined
[04:28] [[zzz]] has joined the channel
[04:28] <SubStack> for instance I use this kind of embedded function trick to do authentication
[04:28] <SubStack> http://github.com/substack/stackvm/blob/dnode/static/html/index.html 
[04:29] <austinfromboston> can you open a file, and send a callback to the browser for it to call when it wants the next chunk?
[04:30] <SubStack> yes
[04:30] <SubStack> pretty trivially
[04:31] blaines has joined the channel
[04:31] <austinfromboston> neat stuff
[04:32] <SubStack> ^_^
[04:32] [[zzzz]] has joined the channel
[04:33] <SubStack> isaacs: 597 more commits ¬ª O_O
[04:33] <SubStack> you crazy!
[04:33] <isaacs> really?
[04:33] <isaacs> 597?  that seems like a lot
[04:34] <isaacs> SubStack: oh, you're probably seeing that i rebased a branch, maybe?
[04:34] <SubStack> maybe github just hiccuped
[04:34] <SubStack> ah seems likely
[04:34] <isaacs> only 25 commits between v0.1.19 and HEAD
[04:34] <_announcer> Twitter: "@kenny_shen Hey you did well last year. Cldn't thank you enuff. A talk on node.js wld be sizzling hot. :)" -- Jason Ong. http://twitter.com/jasonong/status/18890298163
[04:35] <isaacs> SubStack: also i pulled bmeck's stuff onto ls2
[04:35] <_announcer> Twitter: "Pushing code to github. Hooray! I'm slowly becoming a node.js fanboy, this is bad. Must resist." -- Angelo DiNardi. http://twitter.com/adinardi/status/18890329898
[04:35] <isaacs> !tweet @adinardi You are wrong.  It is good.  Resistance is futile.
[04:35] <satori_> one of us. one of us.
[04:36] <mjr_> isaacs: any thoughts on how to debug my "can't npm publish at work, but I can at home" issue?
[04:36] <isaacs> mjr_: maybe it's a daytime thing?
[04:36] <mjr_> oh yeah, could be.
[04:37] <mjr_> They are two different machines, both macs, all up to date on everything, as far as I know.
[04:37] <isaacs> hm...
[04:37] <jsilver> playing with SproutCore. impressions so far good
[04:37] <mjr_> clearly there is something different.
[04:37] <isaacs> mjr_: can you try it on your work machine right now?
[04:37] <mjr_> Sadly, it has gone to sleep.
[04:37] <mjr_> I think it sleeps after one day.
[04:39] <Tim_Smart> SubStack: So I take it you can only pass stuff that is defined in JS - which is more the point I was getting at.
[04:39] <isaacs> mjr_: that's weird
[04:40] <_announcer> Twitter: "@adinardi node.js might get me to do server side coding again. It's so good." -- Steve Streza. http://twitter.com/SteveStreza/status/18890613369
[04:40] <Tim_Smart> So anything defined - or bound - in the C++ API is lost.
[04:40] <mjr_> isaacs: Hopefully I can catch you online sometime when I'm there.  Otherwise, at least now I know I can publish from my home machine if I need to.
[04:41] <SubStack> Tim_Smart: yes, but you can wrap those objects in closures and call them remotely
[04:41] <isaacs> mjr_: totally.  but that's not much of a solution, imo
[04:41] <mjr_> yeah, it sucks, but what can you do.  Let's get it fixed next time our schedules line up.
[04:41] <isaacs> absolutely
[04:42] <jsilver> i have to lol at the last tweet
[04:42] <jsilver> that's absurd
[04:42] <jsilver> server-side coding was always good!
[04:42] <jsilver> :)
[04:42] <isaacs> mjr_: the thing is, it looks like it's the same https-client issue, but it's happening when it's not over https
[04:42] <mjr_> Hey, has anybody noticed that querystring doesn't properly parse out large numbers as strings anymore?
[04:42] <mjr_> node> require('querystring').parse('id=918854443121279438895193');
[04:42] <mjr_> { id: 9.188544431212795e+23 }
[04:43] <mjr_> This used to work properly a few versions back, but seems to have broken recently.
[04:43] <isaacs> mjr_: it shouldn't even be parsing it as a number.
[04:43] <Tim_Smart> jsilver: I like to manually update my stat counters whenever someones visits my site. I can type + save my html files 100 times a second ;)
[04:44] <mjr_> Indeed, it should not.
[04:44] <mjr_> And yet, there it is.
[04:44] <_announcer> Twitter: "@adinardi I built an API for Favstar.fm in two hours using node.js. E.g. http://slice.stevestreza.com:8080/users/stevestreza/recent" -- Steve Streza. http://twitter.com/SteveStreza/status/18890834351
[04:44] <jsilver> i think the backend that sproutcore provides that's in ruby is event based
[04:44] <jsilver> i see 'select'
[04:44] derferman has joined the channel
[04:44] <jsilver> when i ctrl+c
[04:44] <jsilver> lol
[04:45] <isaacs> mjr_: querystring has seen a lot of surgery since it was included in node.
[04:45] <jsilver> Tim_Smart: LOL
[04:45] BlessYAHU has joined the channel
[04:46] <jsilver> lol, sproutcore's server sucks
[04:46] <jsilver> now i have an unkillable dead ruby process
[04:46] <jsilver> check this out guys
[04:46] <jsilver> ^C[2010-07-18 21:45:47] ERROR Interrupt:  /usr/lib/ruby/1.8/webrick/server.rb:91:in `select'
[04:46] <jsilver> [2010-07-18 21:46:15] ERROR SignalException: SIGTERM /usr/lib/ruby/1.8/webrick/server.rb:91:in `select'
[04:46] <jsilver> lol
[04:47] <JimBastard> !tweet @stevestreza woot! ^_^
[04:47] [[zzzz]] has joined the channel
[04:47] <jsilver> that didnt crash it
[04:47] <jsilver> it responds...
[04:47] <mjr_> isaacs: your name is all over git blame for querystring.js.  :)
[04:47] <jsilver> wtf
[04:47] <isaacs> mjr_: yeah, i wrote it originally.
[04:47] <jsilver> their packaged server doesnt respond to sigterm or ctrl+c
[04:47] <isaacs> mjr_: but then many hands made many cuts for many reasons...
[04:47] <isaacs> they were all well intentioned.
[04:48] <Tim_Smart> But they forgot how much intergers seems to fail in Javascript.
[04:48] <Tim_Smart> *integers
[04:50] <jsilver> why do integers fail in JS
[04:50] <mjr_> because there are only "doubles"
[04:50] <mjr_> A double precision floating point number is the only numeric type in JavaScript.
[04:51] <mjr_> Which works really well for many kinds of integer math, and even for many kind of floating point math.
[04:51] <mjr_> Just not all of either.
[04:51] <mscdex> anyone know offhand the max amount that will be buffered when socket.write returns false?
[04:51] <mjr_> mscdex: I think it grows without bound, does it not?
[04:51] <mscdex> hmm
[04:52] <mscdex> there's something funky going on
[04:52] tekky has joined the channel
[04:53] <mscdex> i serve 3 files: 5k, 22k, and 175kb. the first two are sent fine, but then on the third one firebug reports it downloaded it once at 22kb and then it apparently tried again and got the right amount that time
[04:53] <Tim_Smart> mscdex: Are you pumping the files?
[04:53] <mscdex> no
[04:54] <Tim_Smart> You probably should :D
[04:54] <mscdex> i have them stored in-memory
[04:54] <jsilver> why is a double the only numeric type
[04:54] <mscdex> as buffers
[04:54] <jsilver> oh
[04:54] <Tim_Smart> mscdex: Oh right. Someone should make a streamable interface to static variables.
[04:54] <mscdex> jsilver: because that's how javascript rolls
[04:54] <jsilver> lol
[04:55] <satori_> mscdex are you still serving them in chunks or just passing all of the Buffer to write()?
[04:55] <mscdex> Tim_Smart: well, that's why i was asking how much will be buffered if you send a decent size chunk to .write()
[04:55] <mscdex> satori_: the entire buffer
[04:55] <_announcer> Twitter: "I study a while node.js that the bug has bitten me" [es] -- Antonio Pardo. http://twitter.com/apardo/status/18891464527
[04:55] <Tim_Smart> If *should* be fine then :/
[04:55] <Tim_Smart> s/If/It/
[04:55] <mjr_> If you do one write, the same buffer will be used as the outgoing queue.  It should be very fast.
[04:56] <satori_> yeah.
[04:56] <mjr_> This sounds like a bug in your program though.  How would it hit exactly 22K the third time?
[04:56] <mscdex> well it is fast, but it looks like either the 22kb file is being sent again or only 22kb of the 175kb file the first time
[04:56] <mjr_> That's an odd number for a buffering bug.
[04:56] mostlygeek has joined the channel
[04:57] <mscdex> mjr_: the second file i send is 22kb
[04:57] <mscdex> it's exactly the same size down to the bytes
[04:57] <jsilver> yeah
[04:57] <mjr_> Yeah, that's my point.
[04:57] <Tim_Smart> mscdex: More likely the former rather than the later.
[04:57] <jsilver> the ruby component of sprout-core might suck
[04:57] <jsilver> it's event-based
[04:57] <mscdex> so why would it use the same size magically?
[04:57] joshbuddy has joined the channel
[04:57] <jsilver> but can't be killed
[04:57] <jsilver> weird
[04:57] <mscdex> for the 175kb file?
[04:57] <jsilver> never seen a ruby process i couldn't kill
[04:57] <mjr_> I dunno.  Magic is magic.
[04:57] <mscdex> hrm...
[04:58] <Tim_Smart> mscdex: Where is the code?
[04:58] <mscdex> Tim_Smart: i haven't pushed it yet
[04:58] <mscdex> i'll try pump
[04:58] <Tim_Smart> OK maybe gist the gist of it or something?
[04:59] <Tim_Smart> mscdex: You don't need to pump a single write :D
[04:59] <Tim_Smart> Because its a single write.
[04:59] <mjr_> Doing one giant write should be the best.  Is it possible that you are re-using the buffer, and that something is overwriting the length property?
[04:59] <mscdex> Tim_Smart: true, but if it's being screwy i may not have an option :P
[04:59] <satori_> single write should work and be fastest
[04:59] <mscdex> mjr_: no, they are separate buffers
[04:59] <Tim_Smart> mscdex: You will need to purposely break the buffer into chunks - and that is weird.
[05:00] <mscdex> i'll gist the relevant part
[05:01] dnolen has joined the channel
[05:01] <Tim_Smart> mscdex: Brilliant.
[05:03] <mscdex> here it is: http://gist.github.com/481033
[05:05] <jsilver> okay
[05:05] <jsilver> im reading the sprout core code
[05:05] <jsilver> looks good
[05:05] <jsilver> nice API
[05:06] <mscdex> here's firebug: http://i31.tinypic.com/28sv89c.png
[05:06] mostlygeek has joined the channel
[05:07] <Tim_Smart> mscdex: Look at line 38 more closely ;)
[05:07] bpot has joined the channel
[05:08] <mscdex> ah yep that's it. thanks.
[05:09] <mscdex> d'oh... it's still requesting the swf twice though. time for more investigating
[05:11] <jesusabdullah> Hmm
[05:11] <jesusabdullah> ACTION needs to rocks some try/catches
[05:12] <mscdex> awesome... flash websocket be workin now
[05:12] <jesusabdullah> Sweet :D
[05:17] <mscdex> ok, so this flash websocket implementation does something odd when it disconnects
[05:17] <mscdex> it sends 0xff and then 0x00
[05:17] <mscdex> which is incorrect UA framing
[05:17] <mscdex> :S
[05:18] spot|2 has joined the channel
[05:22] <CIA-76> node: 03J√©r√©my Lal 07master * r0fd1656 10/ lib/readline.js : Support DEL in the REPL. - http://bit.ly/c42MFm
[05:23] mikeal has joined the channel
[05:25] <mscdex> yes! @ commit
[05:25] <mscdex> now we just need home and end support
[05:25] <mscdex> :P
[05:27] <bean0r1___> lol
[05:29] <ryah> mscdex: ^a ^e
[05:29] <mscdex> but i want to use my dedicated keys :->
[05:29] <jesusabdullah> mscdex: What are you working on?
[05:30] <mscdex> jesusabdullah: just finishing up my heavy rework of grappler
[05:39] <isaacs> ryah: you there?
[05:40] <ryah> isaacs: 1/2 way
[05:40] <ryah> crappy intenet
[05:40] joshbuddy has joined the channel
[05:41] <isaacs> ryah: any reason you can think of, off the top of your head, that fs.readlink might just never return, and instead, process.exit() happens?
[05:42] <ryah> mm
[05:42] <ryah> no
[05:42] <isaacs> ok, then this is weird.
[05:42] <jesusabdullah> mscdex: grappler?
[05:43] <isaacs> ryah: npm.commands.deactivate works great when you do "npm deactivate foo".  but when calling that same function as part of an uninstall (deeper stack, maybe?), it aborts on the fs.readlink.
[05:43] <jesusabdullah> WOOT! Delete in the REPL?! YES
[05:43] <_announcer> Twitter: "Turns out @gfxmonk's #coffeescript addition would help node.js. A 'defer' keyword would allow sync-like calls while retaining async-ness." -- M@ McCray. http://twitter.com/darthapo/status/18893992537
[05:43] <mscdex> jesusabdullah: yeah, a "comet" server module
[05:55] micheil has joined the channel
[05:57] <jesusabdullah> mscdex: Cool! Link?
[06:01] <mscdex> jesusabdullah: one moment, about to push major changes to the repo
[06:02] saikat has joined the channel
[06:02] towski has joined the channel
[06:02] dgathright has joined the channel
[06:04] <isaacs> ryah: re ^^, twas user error
[06:07] <mikeal> ryah: i have keep-alive workin
[06:07] <mikeal> the issue is, now node doesn't exit when you're done
[06:08] <mikeal> because it's holding the connection open
[06:08] <mikeal> is there a way to mark an object as not blocking the event machine from exiting anymore
[06:09] <satori_> yes, in c++, no in pure js i think
[06:09] <mikeal> this is all on the js side
[06:09] <mikeal> maybe keep-alive should be off by default
[06:09] <satori_> then, no. i don't think you can have a non persistent callback created in js
[06:10] <satori_> It involves a libev call I believe
[06:10] <mikeal> ryah must be gone
[06:11] jsilver has joined the channel
[06:11] <satori_> File watchers use this to avoid stopping node from exiting
[06:12] <mikeal> i wonder if we could expose a method on the socket i could call
[06:16] <_announcer> Twitter: "Having too much fun with node.js and raphael.  Gotta go to sleep." -- Jeremy Stephens. http://twitter.com/kindlyviking/status/18895603218
[06:17] <mikeal> satori_: you know where that file watcher call is?
[06:18] <satori_> one sec...
[06:21] Dmitry2 has joined the channel
[06:25] <satori_> mikeal: I'm pretty sure ev_ref(EV_DEFAULT_UC); keeps node active and ev_unref(EV_DEFAULT_UC); will let node exit still
[06:26] <mikeal> that's global tho?
[06:26] dgathright_ has joined the channel
[06:26] <satori_> EV_DEFAULT_UC is a macro specific to libev. not sure what it represents really.
[06:26] <satori_> or at least i cant remember
[06:27] Apage43 has joined the channel
[06:27] <satori_> I used it in a class http://github.com/satori99/node-udt/blob/master/src/udt_watcher.cc
[06:28] <satori_> More or less emulated what node does with internal io watchers for my own proj.
[06:33] dgathright_ has joined the channel
[06:34] rgl has joined the channel
[06:34] <shimondoodkin> satori_ have you finished your udt project ?
[06:35] <satori_> I have it working. but some unknown bugs still. Things bugger up over time. Not sure if i'm not using libudt properly or doing something else wrong
[06:36] <satori_> It works for the first few connections then fails for all. 
[06:37] <satori_> I am new to c++ so I have probably done something stupid.
[06:38] <satori_> I am currently learning to debug with gdb
[06:38] <shimondoodkin> it is easyier with linux with gui
[06:39] <shimondoodkin> there are several debugers for gdb
[06:39] <mscdex> jesusabdullah: sorry for the delay, i've pushed my changes now: http://github.com/mscdex/grappler
[06:39] <satori_> Yeah. I should really do a dual boot on my laptop
[06:40] <satori_> I currently play with node in a vm
[06:40] <satori_> on a win7 machine
[06:40] <shimondoodkin> i mean install ubuntu desktop
[06:40] <shimondoodkin> or the like
[06:40] <jesusabdullah> mscdex: Neat!
[06:40] <satori_> yeah. But I need windows still for the gaming
[06:41] beanie___ has joined the channel
[06:41] <shimondoodkin> no i mean desktiop in vm
[06:41] <jesusabdullah> you could play THE BATTLE FOR WESNOTH
[06:41] <jesusabdullah> :v :v
[06:41] <satori_> I would like to have a real linux desktop option anywayz
[06:41] <satori_> but I can't give up windows just yet'
[06:42] <shimondoodkin> my friend just did yesterday
[06:42] <shimondoodkin> he had win7 restarting
[06:42] <shimondoodkin> every several hours
[06:42] <mscdex> i agree... i still need windows for gaming also
[06:42] <shimondoodkin> yea i use windows also
[06:42] <mscdex> despite the advances with wine, it still can't run xtrap and the like
[06:42] <mscdex> :-\
[06:43] <shimondoodkin> i use work in command line server version linuxes so much that some time si forget that there is a desktop version that is very easy
[06:43] <shimondoodkin> wince works bad
[06:43] <shimondoodkin> wine
[06:43] <mscdex> i've had really good luck with wine
[06:43] <mscdex> especially 1.2
[06:44] <shimondoodkin> i had some corporate app in msaccess 2003 app it did not worked well and crushed 
[06:44] <shimondoodkin> i mean i wine
[06:45] <beanie___> surprise surprise :p
[06:45] <shimondoodkin> my friend wanted to switch all his computers to linux
[06:45] <shimondoodkin> and it did not worked
[06:49] <mscdex> another spam message on the ML?
[06:52] TomY has joined the channel
[06:53] pdelgallego has joined the channel
[06:54] <mikeal> wow
[06:54] <mikeal> this sucks
[06:54] <mikeal> the http server won't actually exit until all the sockets close
[06:55] <mikeal> it doesn't close any of the pending sockets
[06:55] mostlygeek has joined the channel
[06:55] <mikeal> and will in fact continue to accept http requests
[06:55] <mikeal> on that same socket that is open
[06:57] <jsilver> hi guys
[06:57] <jsilver> :D
[06:58] <jsilver> mikeal, i see you're in the bay are
[06:58] <jsilver> :D
[06:58] <mikeal> correct
[06:58] <mikeal> i'm heading to NYC for a few weeks on tuesday tho
[06:58] <mscdex> mikeal: yeah, i had to write a close method for my server to shut down all the connections
[06:58] <jsilver> im in LG
[06:58] <mikeal> mscdex: how did you get all the currently open sockets?
[06:58] <shimondoodkin> satori_ because you say it cruxhes after some time i guess you resuse pointers or overflow them
[06:59] <mscdex> mikeal: kept track of them
[06:59] <mikeal> i'm not seeing a simple way to grab them all
[06:59] christophsturm has joined the channel
[07:00] <mscdex> but it would be nice when http.Server.close() is called to close all of its existing net.Stream clients that are still connected
[07:00] <mscdex> i dunno how it would do that though
[07:01] <shimondoodkin> probably it is posible to look in http.js and foreach all tcp clients and close them
[07:10] <mikeal> shimondoodkin: they aren't kept around in a way that is attached to the server
[07:10] <mikeal> it doesn't actually keep track of them, it just deals with them when they get emitted 
[07:11] <shimondoodkin> i tried to search for it and could not find...
[07:11] <mikeal> mscdex: just sent a patch to the list and outlined all the current issues
[07:16] teemow has joined the channel
[07:17] <_announcer> Twitter: "yeah!: new js-only #nodejs #mecached client #nMemcached with consistent hashing: http://bit.ly/aaRPet" -- Tim Eggert. http://twitter.com/elbartus/status/18898303295
[07:19] blard has joined the channel
[07:20] joshbuddy_ has joined the channel
[07:21] FireFoxIXI has joined the channel
[07:27] <beanie___> i hate kiwi
[07:28] <Dylanrw> its so fuzzy!
[07:28] <mscdex> mikeal: on line 11 of that diff, did you mean for there to be a bitwise or?
[07:30] benburkert has joined the channel
[07:32] <Dylanrw> oh wait fluffy, havent had many fluffy kiwi before (http://www.youtube.com/watch?v=c_rUbqbhUEQ#t=2m21s)
[07:33] <mikeal> shit, you're right
[07:35] <mikeal> mscdex: fixed
[07:35] <mscdex> mikeal: cool
[07:35] <mikeal> in my branch at least
[07:36] <_announcer> Twitter: "@tediscript lha iyo cen. sample e Tornado karo Node.js kan ono sample nggo chat." -- exavolt. http://twitter.com/exavolt/status/18899133274
[07:37] javajunky has joined the channel
[07:39] virtuo has joined the channel
[07:41] V1 has joined the channel
[07:41] qFox has joined the channel
[07:48] qFxo has joined the channel
[07:57] Dmitry2 has joined the channel
[08:01] <_announcer> Twitter: "#Expressjs, first framework for #nodejs ? http://expressjs.com" -- Aur√©lien Sibiril. http://twitter.com/aureliensibiril/status/18900173105
[08:02] <SubStack> not the first
[08:06] jetienne has joined the channel
[08:07] <mscdex> that's why there's a question mark :P
[08:09] sveimac has joined the channel
[08:11] dneighman has joined the channel
[08:12] <V1> Does it even matter who or what the first?
[08:14] <SubStack> V1: yes, because the first implementation of an idea is bound to be the best version
[08:15] <V1> ;D
[08:15] <mscdex> SubStack: now type that with a straight face
[08:16] astrolin has joined the channel
[08:16] <SubStack> mscdex: never!
[08:16] <SubStack> ACTION shuffles from foot to foot and does a cartwheel
[08:18] <mscdex> is this the compiling jig?
[08:18] <SubStack> I think it's more the I've-had-too-much-caffeine-tonight jig
[08:18] keyvan has joined the channel
[08:24] mpoz2 has joined the channel
[08:28] jansc has joined the channel
[08:33] jblanche has joined the channel
[08:35] <_announcer> Twitter: "npm v0.1.20, much-needed bugfix release `curl http://npmjs.org/install.sh | sh` or `npm install npm` #nodejs #npmjs" -- ‚íæ‚ì¢‚ìê‚ìê‚ìí. http://twitter.com/izs/status/18901577665
[08:36] tbassetto has joined the channel
[08:36] <isaacs> I should tweet these things when it's daytime in CA so more people see them.
[08:36] <isaacs> good night noders :)
[08:37] <_announcer> Twitter: "node.js + web sockets = #awesome #html5 http://bit.ly/3yYiqS" -- Cecilia Waters. http://twitter.com/misscecille/status/18901637651
[08:39] xla has joined the channel
[08:42] xla has joined the channel
[08:52] stagas has joined the channel
[08:54] dgathright has joined the channel
[08:58] <micheil> isaacs_home: patch in coming on that one.,
[09:00] caolanm has joined the channel
[09:08] melgray has joined the channel
[09:08] mAritz has joined the channel
[09:19] aubergine has joined the channel
[09:21] frode has joined the channel
[09:21] javajunky has joined the channel
[09:22] aubergine_ has joined the channel
[09:23] aubergine_ has left the channel
[09:28] <jetienne> http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml <- may be of interest
[09:29] <_announcer> Twitter: "http://ping.fm/MNoCn may be of interest to #nodejs crowd" -- Jerome Etienne. http://twitter.com/jerome_etienne/status/18903722827
[09:30] aliem has joined the channel
[09:32] Lazesharp has joined the channel
[09:36] frode has joined the channel
[09:44] blackdog has joined the channel
[09:46] V1 has joined the channel
[09:47] dgathright_ has joined the channel
[09:48] mostlygeek has joined the channel
[10:05] mAritz has joined the channel
[10:10] <innu> I'm using redis, resque & some stuff more in my node.js application. Now I want to write few tests for it. But how do I mock/stub stuff like redis?
[10:10] aliem_ has joined the channel
[10:17] Blink7 has joined the channel
[10:22] mattly has joined the channel
[10:24] tk has joined the channel
[10:25] voxpelli has joined the channel
[10:39] fermion has joined the channel
[10:43] Determinist has joined the channel
[10:47] aliem has joined the channel
[10:48] _mythz has joined the channel
[10:51] herbySk has joined the channel
[10:51] MattJ has joined the channel
[10:55] <micheil> innu: just use a separate db.
[10:55] <micheil> like rails does, "$appname-$env"
[10:55] <micheil> (using ES Harmony strings.)
[11:12] mpoz2 has joined the channel
[11:14] <_announcer> Twitter: "http://ow.ly/2diCU http://ow.ly/2diHp # SproutCore will make noise .. IPAD # # # # flash iphone HTML5 # node.js" [fr] -- Jean-Louis Huynen. http://twitter.com/gallypette/status/18908202556
[11:15] locks has joined the channel
[11:16] aliem has joined the channel
[11:17] jsilver has joined the channel
[11:18] eee_c has joined the channel
[11:19] CIA-64 has joined the channel
[11:19] blackdog has joined the channel
[11:22] jbrantly has joined the channel
[11:26] <micheil> anyone about?
[11:28] <javajunky> uhhuh
[11:28] <micheil> javajunky: better documentation? http://drp.ly/1oaJ3m
[11:28] <javajunky> I saw your tweet ;)
[11:29] <micheil> I'm solicting feedback.
[11:29] <javajunky> snazzy
[11:29] <micheil> :D
[11:29] <javajunky> the thing with documentation (I find at least) is you can't really tell how good it is until you *need* to find something :(
[11:29] sveisvei has joined the channel
[11:29] <javajunky> I like the colour-scheme though :)
[11:32] <robinduckett> Nice colour scheme
[11:33] <robinduckett> Don't put a question mark after the options
[11:33] <robinduckett> This isn't ruby
[11:33] tmedema has joined the channel
[11:35] <V1> Looks better than my documentation micheil ;)
[11:35] <micheil> robinduckett: how should I show that you don't need to pass it?
[11:35] <micheil> [options], options? etvc
[11:39] phiggins has joined the channel
[11:40] <beanie___> if i create a webserver, is there a way to get te cookies?
[11:44] <robinduckett> [optional]
[11:44] <robinduckett> maybe even a preview of the options you can pass
[11:45] <micheil> beanie___: yeah
[11:45] <micheil> req.cookies or something
[11:46] <micheil> req.headers.cookies
[11:46] <micheil> or req.headers["Cookies"]]
[11:49] <micheil> beanie___: anyway, there's libraries for that.
[11:49] sveimac has joined the channel
[11:54] aliem_ has joined the channel
[12:01] <beanie___> req.headers.cookies is ok :)
[12:01] <beanie___> i try that
[12:02] <_announcer> Twitter: "Tonight's meeting Explore Node.js by @jsuchy at @DukesAlehouse http://clouddevelopersgroup.com" -- Cloud Dev Group. http://twitter.com/clouddevgroup/status/18910598477
[12:03] <_announcer> Twitter: "Tonight's McHenry Cloud Developer's Meeting topic is "Explore Node.js" by @jsuchy at @DukesAlehouse http://clouddevelopersgroup.com #cloud" -- Cloud Dev Group. http://twitter.com/clouddevgroup/status/18910649863
[12:06] jherdman has joined the channel
[12:19] b_erb has joined the channel
[12:20] Dmitry2 has joined the channel
[12:24] <_announcer> Twitter: ""hard to find any examples of applications built with #Nodejs" try #github #hackernews ~ http://news.ycombinator.com/item?id=1528247" -- peter renshaw. http://twitter.com/bootload/status/18911789006
[12:31] Tim_Smart has joined the channel
[12:39] <ironfroggy> Are there any current significant or interesting non-server uses of Node.js?
[12:39] <ironfroggy> writing a desktop application or a game, for example?
[12:39] <micheil> not that I know of.
[12:40] <micheil> I mean, there's a few command line tools, but nothing desktop
[12:41] mitkok has joined the channel
[12:42] <_announcer> Twitter: "Node.js middle-end... sledgehammer, meet thumbtack. http://bit.ly/b2SAvO" -- Kyle Simpson. http://twitter.com/getify/status/18912865298
[12:48] <_announcer> Twitter: "When is someone going to use Rhino and Netty to create a Node.js-like offering on the JVM?" -- fogus. http://twitter.com/fogus/status/18913232603
[12:49] <_announcer> Twitter: "#Node.js and #MongoDB http://blog.mongodb.org/post/812003773/node-js-and-mongodb" -- Jan Willem Tulp. http://twitter.com/JanWillemTulp/status/18913266518
[12:50] [[zzzz]] has joined the channel
[12:51] bradleymeck1 has joined the channel
[12:54] <jherdman> what was that node-based service that does video transcoding? i'm drawing a blank..
[12:55] astrolin has joined the channel
[12:57] <_announcer> Twitter: "@dvydra Well, it could be in JavaScript (node.js), instead. :-) And it's not *the* website, it's just *a" website. #AreYouJustTrolling?" -- Jason Huggins. http://twitter.com/hugs/status/18913753933
[12:58] zapnap has joined the channel
[12:59] locks has left the channel
[12:59] <_announcer> Twitter: "Modular multi-process distributed Comet: http://bit.ly/9egixK #nodejs #commonjs #comet" -- kriszyp. http://twitter.com/kriszyp/status/18913854579
[13:00] <micheil> javajunky: full view: http://static.brandedcode.com/nws-docs/
[13:00] <javajunky> nice
[13:00] maushu has joined the channel
[13:00] <micheil> there are a few api changes present after writing the docs.
[13:01] <maushu> FOR GREAT JUSTICE.
[13:03] <robinduckett> micheil: can you do me a favor and kill the Arial font listing :P
[13:03] <robinduckett> Arial's aaaall messed up in my ubuntu
[13:03] <Tim_Smart> jherdman: transloadit?
[13:03] kriszyp has joined the channel
[13:03] <micheil> robinduckett: get helvetica.
[13:03] <maushu> So, how is transloadit going?
[13:03] <robinduckett> From whence?
[13:04] <jherdman> Tim_Smart: thanks! you're a godsend
[13:04] <micheil> robinduckett: I joke, I joke, what's a good sans-serif font on ubuntu?
[13:04] <robinduckett> "Sans" or "FreeSans"
[13:04] <micheil> k, freesans it is..
[13:05] <micheil> robinduckett: try that.
[13:06] <maushu> ACTION cleans up the git wiki.
[13:07] <robinduckett> Yeah looks good
[13:07] <robinduckett> :D
[13:07] <robinduckett> tell you what tho
[13:07] <robinduckett> playing with it in firebug
[13:07] <robinduckett> doesn't look bad with the content in serif font
[13:08] astrolin has joined the channel
[13:08] <micheil> robinduckett: yeah, true
[13:08] <robinduckett> http://i.imgur.com/kHsx7.png
[13:08] <micheil> it's meant to be pretty universal
[13:08] <robinduckett> For examplar
[13:09] <micheil> see how there's those # things next to paragraphs? That's so that I can eventually permalink people to exactly what they need
[13:10] <robinduckett> Nice
[13:10] <micheil> also, I'm writing this documentation by hand, in html.
[13:10] <robinduckett> Good stuff
[13:10] <robinduckett> Very impressive
[13:10] <robinduckett> HTML5?
[13:11] <micheil> yeah, I'm lazy.
[13:11] <micheil> >_>
[13:11] <robinduckett> lol
[13:11] <robinduckett> fuck IE6
[13:12] <micheil> well, not like you're going to ever be needing this document in IE6?
[13:12] <jherdman> even if, there's the HTML5 shiv you can use
[13:12] <jherdman> http://code.google.com/p/html5shiv/
[13:12] <micheil> yeah
[13:13] <robinduckett> shiv as in shank? as in, I'm going to stab you then brutally sodomise you in the showers?
[13:14] <robinduckett> Prison jokes are always funny
[13:14] <TrisMcC> ACTION hears crickets
[13:14] <jherdman> there's nothing like a rape joke to start the day...
[13:14] <_announcer> Twitter: "good intro. "Writing a Redis client library for Node.js" http://bit.ly/8YWERv #redis #nodejs" -- R√©gis Gaidot. http://twitter.com/rgaidot/status/18914832748
[13:14] <jherdman> haha
[13:15] <robinduckett> It's 2pm here :D
[13:15] davidsklar has joined the channel
[13:15] <jherdman> ah! you're in the UK
[13:16] stepheneb has joined the channel
[13:16] <javajunky> and its raining
[13:16] <javajunky> again
[13:16] aliem has joined the channel
[13:16] <robinduckett> I'm in wales, and it's sunny :D
[13:16] <javajunky> even with a hosepipe ban #ukisawesome
[13:16] <javajunky> robinduckett: where-abouts
[13:16] <javajunky> (manc)
[13:17] <robinduckett> Cardiff
[13:17] <robinduckett> South
[13:17] <javajunky> ah, yeah thanks for the clarification <g>
[13:17] <robinduckett> Partly cloudy
[13:17] [[zzzz]] has joined the channel
[13:17] <robinduckett> around 23 deg C
[13:17] <robinduckett> slight breeze from the west
[13:17] <robinduckett> (British people talking about the weather stereotype)
[13:18] <javajunky> how're your teeth looking ?
[13:18] <robinduckett> Perfect, sadly
[13:18] ben_alman has joined the channel
[13:18] <javajunky> ;) damnit, stupid stereotype-failure
[13:19] <robinduckett> And I have a girlfriend, so already the geek stereotype is fading
[13:19] <javajunky> most geeks I know are either married or in a relationship
[13:20] rob has joined the channel
[13:20] <robinduckett> Same, actually. I don't even know where that stereotype comes from, probably 4chan.
[13:20] <javajunky> fair, fair
[13:20] <_announcer> Twitter: "Homebrew makes Unix installs on OS X amazingly easy, also, node.js is now installed!" -- asskicker. http://twitter.com/asskicker/status/18915199656
[13:20] <micheil> heh heh.. http://brandedcode.com:8000
[13:21] <javajunky> ;)
[13:24] <maushu> ACTION tries micheil's url until he hits the firewall.
[13:24] <maushu> ;_;
[13:24] <micheil> maushu: I would run it on :80, but I have other stuff on :80
[13:24] dnolen has joined the channel
[13:25] <maushu> 8080?
[13:25] <robinduckett> micheil: nginx forwarder
[13:25] <micheil> I can do. 8080.
[13:25] <micheil> one sec.
[13:25] <maushu> Yay!
[13:26] chrischris has joined the channel
[13:27] <robinduckett> sucks that people still filter by port
[13:27] <robinduckett> wtf is up with that
[13:27] aliem has joined the channel
[13:27] <micheil> just need to open that port >_>
[13:27] <maushu> :o
[13:27] <maushu> Naughty.
[13:27] <micheil> no, my server's got quite a good firewall on it.
[13:28] <robinduckett> dirty girl
[13:29] <maushu> micheil: Kinky.
[13:30] <micheil> http://brandedcode.com:8080/
[13:31] <micheil> oh. and I turned on my monitoring console.
[13:32] <robinduckett> monitoring console?
[13:32] <robinduckett> :O
[13:36] <micheil> yeah
[13:36] <micheil> I see every message that goes in and out on my tty0
[13:38] <robinduckett> lol
[13:38] <robinduckett> that didn't take long
[13:38] <mischief> if your server has a good firewall you must be using openbsd
[13:38] <mischief> ;)
[13:39] aliem has joined the channel
[13:42] <micheil> mischief: no, I just wrote the damn iptables.
[13:42] <robinduckett> spoilsport
[13:42] <micheil> k. server's offline for a min.
[13:42] <robinduckett> I was going to do
[13:42] <robinduckett> <script>$(function() {setTimeout(function() {$('*').css({color: '#00ff00', 'background': '#000'});}, 500);});</script>
[13:42] <robinduckett> just to keep everything nice and green :D
[13:43] bvleur has joined the channel
[13:44] <mscdex> morning noders
[13:45] <robinduckett> morning
[13:45] <micheil> it's back up.
[13:45] <mscdex> that's what she said
[13:45] <bvleur> What's the status of the eventsource branch? Is it somewhat usable?
[13:45] <micheil> mscdex: http://brandedcode.com:8080/
[13:45] <robinduckett> hahah
[13:45] <robinduckett> that IS what she said
[13:47] <bvleur> Ah.. through the speed of git I've answered my own question: eventsource branch doesn't even compile :(
[13:47] <robinduckett> :(
[13:47] <mscdex> every time i see "eventsource" now i automatically think of server-side events
[13:50] <mischief> micheil, psh, iptables doesnt have HFSC.
[13:50] <mscdex> so i noticed that chrome doesn't send a "start closing handshake" packet but the flash websocket does....
[13:50] <bvleur> Anyone seen this:  FATAL ERROR: v8::Object::SetInternalField() Writing internal field out of bounds
[13:51] <micheil> mischief: does my job pretty well.
[13:51] <micheil> okay, reconnect.
[13:51] <mscdex> micheil: have you noticed this as well?
[13:51] <micheil> yeah, nothing is nice with closing of connections
[13:52] <robinduckett> sigh
[13:52] <robinduckett> no firefox 4 love
[13:56] rsms has joined the channel
[13:56] <robinduckett> isn't there that thing that monitors for code changes and reloads?a
[13:57] <mscdex> that's the most often asked question in here
[13:57] <mscdex> heh
[13:57] <mscdex> not counting npm or connect questions
[13:57] <mscdex> :P
[13:57] <javajunky> ;)
[13:57] <robinduckett> I was saying re: micheil having to disconnect everyone from his server
[13:58] <micheil> robinduckett: it'd still have to restart the server.
[13:58] <robinduckett> hmm
[13:58] <mscdex> yeah
[13:58] <rsms> wow. it's incredible how many ppl are in here!
[13:58] <mscdex> depends on the code he'd be changing
[13:59] <robinduckett> all you'd need to do is make everything an event emitter and have it remove the events then readd new ones based on the code you're changing / reloading
[13:59] <robinduckett> I could, of course, be talking shit.
[13:59] <mischief> mscdex, i never did figure out why v8 failed in node but building v8 by itself worked
[13:59] <mischief> lol
[13:59] <rsms> what's the problem with restarting a server? imho if that breaks things, you got a client issue, not a server issue.
[14:00] <mscdex> mischief: no idea. did you try building v8 as a shared library and linking node to that instead?
[14:00] <micheil> it's back online.
[14:00] <rsms> also, restart server nodes in cascades rather than all at once and users can "fade over" to the new version (with a good behaving client)
[14:00] <mscdex> mischief: you've tried the current node head recently?
[14:01] <micheil> http://brandedcode.com:8080/
[14:01] <mscdex> mischief: v0.1.101 bumped v8 up to 2.3.0
[14:01] keyvan has joined the channel
[14:01] <robinduckett> rsms: Server sends CONNECT command to the client to connect to a different server while it starts back up, then backup server connects them back to the other server, seamlessly
[14:02] <mischief> mscdex, how do i use an externally-build v8 with node
[14:02] <mscdex> mischief: there's a configure option for it
[14:02] <rsms> robinduckett: ok, sounds reasonable. what about simply reconnecting when a connection is dropped (in the client)?
[14:03] <mischief> mscdex, ill try it if git head doesnt build
[14:03] <robinduckett> rsms: To limit connection loss
[14:03] <robinduckett> Don't leave the client to do any hard decisions
[14:03] ajpiano has joined the channel
[14:03] <mscdex> mischief: start looking here: http://github.com/ry/node/blob/master/wscript#L54
[14:05] <rsms> robinduckett: I'd say let the client do all the hard work where possible :P
[14:05] <rsms> gonna stroll down to a cafe in the sun. catch you later guys.
[14:06] hpoydar has joined the channel
[14:08] ceej has joined the channel
[14:11] <micheil> robinduckett: I was actually going to write a client-side websocket library, that would handle auto reconnects
[14:12] <robinduckett> cya rsms
[14:14] <mischief> mscdex, i see that openbsd patch was merged... but it still fails. :[
[14:14] zaach has joined the channel
[14:15] [[zz]] has joined the channel
[14:15] bradleymeck_ has joined the channel
[14:16] <robinduckett> micheil: lol people have started coming
[14:16] <micheil> robinduckett: seewhatimean?
[14:17] JimBastard has joined the channel
[14:18] <robinduckett> lol
[14:19] <javajunky> I'm so glad there's another web framework, I was starting to worry we might have run out of options.
[14:20] <robinduckett> hahah
[14:20] <robinduckett> Even I've made a web framework
[14:21] <bradleymeck_> just hope we can get all the frameworks to have a somewhat standard plugin interface so i dont have to jump through hoops
[14:21] <javajunky> bradleymeck: yeah, good luck with that ;) 
[14:21] <mscdex> bradleymeck_: jumping through hoops is good exercise though
[14:21] <javajunky> I've just spent a night porting most of my plugins from express to connect, if I have to do it again I might cry
[14:22] <bradleymeck_> ^ agree
[14:22] <robinduckett> I just load my plugins via the script interface and have a sandbox with require as a function and the globals passed in
[14:22] <mscdex> ACTION waves to _api
[14:22] <mscdex> beam him back up scotty!
[14:22] <bradleymeck_> yea but sandboxes can hurt perf if you use em too much :/
[14:22] <JimBastard> javajunky: if it doesnt include 60% of sinatra's features with nothing new or innovating, its a node.js web framework
[14:22] _api has joined the channel
[14:22] <JimBastard> errr
[14:22] <JimBastard> javajunky: if it doesnt include 60% of sinatra's features with nothing new or innovating, its NOT a node.js web framework
[14:23] <JimBastard> there we go
[14:23] devongovett has joined the channel
[14:23] <mscdex> !api methods in dgram
[14:23] <_api> mscdex: dgram methods: createSocket(type, [callback]), send(buf, offset, length, port, address, [callback]), bind(port, [address]), close(), address(), setBroadcast(flag), setTTL(ttl)
[14:23] <javajunky> I got what you meant first go ;) but yes the negation clarification helps  ;) 
[14:23] <javajunky> my issue is still the only innovating framework I've used is fab, and everytime I force myself to go back to it I have to give up again because I'm too weak
[14:23] <JimBastard> Java is a DSL for converting large XML files into Stack Traces
[14:24] <JimBastard> javajunky: ive got most of the pieces i need for the bomb ass mvvm / mvp framework
[14:24] <JimBastard> its just a matter of needing to build it, im not there yet
[14:24] <javajunky> clientside I assume
[14:24] <JimBastard> well, its both
[14:24] <JimBastard> but yes, a lot of stuff dont client side
[14:24] <JimBastard> the back-end is mostly a JSON-RPC web-service
[14:24] gf3 has joined the channel
[14:24] <javajunky> I am interested in that, TJ's always been hotly against that, but I saw a lot of value in being able to run the same templates on both server + client
[14:24] <JimBastard> damn my grammar is failing today, perhaps coffeetime
[14:25] <JimBastard> javajunky: cloudhead is the man to talk to, we've been discussing this for a while
[14:25] <JimBastard> im more interested in a single page html5 application
[14:25] <JimBastard> then a MVC / sinatra / rails clone
[14:26] <javajunky> JimBastard: yeah, I was playing with mochaui for a gui for a single page canvas app
[14:26] <robinduckett> !list of nodejs rails clones
[14:26] <JimBastard> javajunky: http://mochaui.org/demo/ is canvas based?
[14:27] keyvan has joined the channel
[14:27] <JimBastard> doesnt look like canvas to me?
[14:27] <robinduckett> it's quick if it is
[14:27] <robinduckett> looks like it isn't to me :D
[14:27] <javajunky> well it is 
[14:28] <bradleymeck_> is there a decent canvas gui lib even?
[14:28] <javajunky> it may not be a single canvas object
[14:28] <JimBastard> javajunky: link?
[14:28] <robinduckett> javajunky: i can't see one canvas tag on that page
[14:28] <ceej> It's html5 no canvus 
[14:28] <JimBastard> yeah
[14:28] <javajunky> you're not looking hard enough then
[14:28] <robinduckett> wait sorry
[14:28] <robinduckett> I lied
[14:28] <JimBastard> tmpvar is working on a canvas based UI library
[14:28] <ceej> canvas*
[14:28] <robinduckett> the close and minimize buttons
[14:28] <robinduckett> are canvas
[14:29] <JimBastard> http://tmpvar.com/project/carena/
[14:29] <JimBastard> http://github.com/tmpvar/carena
[14:29] <javajunky> oh I never said it was *all* canvas...
[14:29] eee_c has joined the channel
[14:30] [[zz]] has joined the channel
[14:33] <robinduckett> someone needs to make an X server in nodejs XD
[14:34] <robinduckett> I cba
[14:34] <robinduckett> but it'd be cool
[14:34] <mscdex> well... someone was working on a browser-based vnc client....
[14:35] <mscdex> i forget who
[14:35] <SubStack>  :)
[14:36] <jesusabdullah> guacamole?
[14:36] pgriess has joined the channel
[14:38] <bradleymeck_> regexp.search is faster than regexp.exec but i need a Regexp(...,'m') that matches start of input... wish i could limit where the regexp would search and stop after n characters being the start point
[14:38] <robinduckett> ^$
[14:38] <micheil> Regexp(...).search(str)
[14:38] <mischief> mscdex, it seems my problem is different now
[14:38] <mischief> :(
[14:39] <micheil> or str.search(Regexp(...))
[14:39] <micheil> will work
[14:39] <mscdex> mischief: what's that?
[14:39] <bradleymeck_> ^ will also match newlines sadly with m and cant just limit it to start of input
[14:39] <robinduckett> str.search(/^blah$/g)
[14:39] mklappstuhl has joined the channel
[14:39] <bradleymeck_> still need the groups too
[14:39] <mischief> mscdex, http://gist.github.com/481486
[14:40] <bradleymeck_> still need m
[14:40] <mischief> i can try building v8 seperately and then rebuilding and see if it happens
[14:40] <robinduckett> limit to the start of the input via .substr
[14:41] <bradleymeck_> will still jump past start if it can match later
[14:41] <bradleymeck_>  /^a/m matches "a\na"
[14:42] <bradleymeck_> and "b\na"
[14:43] robotarm_ has joined the channel
[14:43] <mscdex> mischief: no idea :-\
[14:44] <micheil> try \b
[14:44] TheEnd2012 has joined the channel
[14:44] <micheil> i think that does boundary
[14:45] <robinduckett> that would match "b a"
[14:45] <JimBastard> can someone write me a regex that will strip all the regex from the world forever?
[14:45] <JimBastard> maybe i guess liked a nested sub-group?
[14:46] <javajunky> make sure its a greedy match
[14:46] <robinduckett> JimBastard: ((A[BL]|B[ABDHLNRST]?|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]?|F[KY]|G[LUY]?|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]?|M[EKL]?|N[EGNPRW]?|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKLMNOPRSTY]?|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)[1-9]?[0-9]|([E|N|NW|SE|SW|W]1|EC[1-4]|WC[12])[A-HJKMNPR-Y]|[SW|W]([1-9][0-9]|[2-9])|EC[1-9][0-9]) [0-9][ABD-HJLNP-UW-Z]{2}
[14:46] <javajunky> err sorry, just to be clear that was @JimBastard
[14:46] <JimBastard> lolwtf robinduckett 
[14:46] <robinduckett> UK Postal Code Regular Expression :D
[14:46] <JimBastard> ahahaha
[14:46] <javajunky> bradleymeck:  \A ? 
[14:46] <JimBastard> i like the UK
[14:46] <JimBastard> its like the smaller, pussier, more robust version of the US
[14:47] <bradleymeck_> \A \G are not in JS
[14:47] <javajunky> bradleymeck: \Z, but poop
[14:47] <robinduckett> Sigh
[14:47] <robinduckett> We are less Bitchy than the US
[14:47] <JimBastard> for sure
[14:47] <javajunky> robinduckett: the hell we are, we love to see failure
[14:47] <JimBastard> the first thing i think for when i hear UK, is "England will prevail"
[14:47] <robinduckett> "We don't want your fucking tea!" "Don't have it then, who cares, all you're doing is pollution your harbor even worse :D"
[14:47] <micheil> and.. servers gone.
[14:48] <robinduckett> *polluting
[14:48] <javajunky> wtf is england will prevail ?
[14:48] <robinduckett> ENGLAND WILL PREVAIL
[14:48] quirkey has joined the channel
[14:48] <javajunky> now 'we' are polluting their gulfs too, woooo go 'us'
[14:48] <JimBastard> england isnt going anywhere
[14:48] <JimBastard> ever
[14:48] aliem has joined the channel
[14:48] <robinduckett> V for Vendetta
[14:49] <robinduckett> javajunky: yeah with the mostly US owned company that is BP
[14:49] <robinduckett> :D
[14:49] <javajunky> robinduckett: yeah hence the quotes ;)
[14:49] <JimBastard> i had a major oil spill in my bathroom today. expelled a few gallons of brown liquid before we could plug the whole. had to use a robot to assist 
[14:50] <javajunky> s/whole/hole/ you had that coffee yet ? 
[14:50] apipkin has joined the channel
[14:50] <JimBastard>  /s/whole/hole
[14:50] <JimBastard> yeah
[14:50] <mscdex> JimBastard: yeah but did Kevin Costner aid you?
[14:50] <JimBastard> it gets worse, caus i started the sentence with / so irc ated it
[14:50] [[zz]] has joined the channel
[14:50] <javajunky> quality
[14:50] <JimBastard> im pretty out of it, i should go write some code
[14:52] <jesusabdullah> Kevin Costner seems less like a person to me, and more like a spirit which resides in us all
[14:52] <apipkin> i'm super new to node.js and was curious how to get information on the http.createServer() requestListener. I'm not able to see it in the documentation
[14:52] BiscuitsLap has joined the channel
[14:53] <JimBastard> apipkin: what you need to know?
[14:53] <JimBastard> it is documented
[14:53] <JimBastard> the hello world example uses http.createServer
[14:54] <BiscuitsLap> Hey, would anyone be interested in helping to write a web-based V8/Node.js debugger that's better suited for Node.js development than Eclipse ?
[14:54] <jesusabdullah> apipkin: It's there, if a bit terse
[14:54] <apipkin> JimBastard: looking for the two params (req, and res) to see what methods and properties they have 
[14:54] dnolen has joined the channel
[14:54] steadicat has joined the channel
[14:54] <_announcer> Twitter: "Sweet! A Chrome extension to target its built-in debugger to a NodeJS process http://bit.ly/aaRyTs" -- Peter Griess. http://twitter.com/pgriess/status/18921643026
[14:55] <apipkin> are these just http.ServerRequest and http.ServerResponse ?
[14:56] <mscdex> apipkin: yep
[14:56] <mscdex> !api serverrequest
[14:56] <mscdex> hrm
[14:56] <apipkin> mscdex: thnx got the docs pulled up :)
[14:56] <JimBastard> apipkin: when i started i just started inspecting the objects
[14:56] <mscdex> !api modules
[14:56] <_api> mscdex: Buffers, EventEmitter, Readable Stream, Writable Stream, Global Objects, process, sys, Timers, Child Processes, Script, File System, fs.ReadStream, fs.WriteStream, http.Server, http.ServerRequest, http.ServerResponse, http.Client, http.ClientRequest, http.ClientResponse, net.Server, net.Stream, Crypto, DNS, dgram, Assert, Path, URL, Query String, REPL
[14:56] <SubStack> how apropos, that tweet
[14:57] <JimBastard> just do a dump of the req and res objects
[14:57] <bradleymeck_> BiscuitsLap, see tweet above?
[14:57] <mscdex> !api methods in serverrequest
[14:57] <_api> mscdex: http.ServerRequest methods: setEncoding(encoding='binary'), pause(), resume()
[14:57] <apipkin> and i saw one tutorial do console.log()  and another do sys.puts() is there a difference?
[14:57] <mscdex> heh... we need the new docs badly
[14:57] <bradleymeck_> _api love me!
[14:58] aheckmann has joined the channel
[14:58] <javajunky> has anyone formally adopted this yet? http://semver.org/
[14:58] <bradleymeck_> npm uses it but i dont think its conformant or adopted
[14:59] <BiscuitsLap> bradleymeck_: Yes, just saw it, wasn't really expecting that :p
[14:59] <javajunky> sorry yeah I guess by 'formally adopted' I mean by people reading that post, not by IETF etc.
[14:59] <javajunky> ;)
[15:00] <JimBastard> apipkin: console.log(sys.inspect(myObj, true, null));
[15:00] <_announcer> Twitter: "@bjornhr Have you played with node.js?" -- √ìmar Kjartan Yasin. http://twitter.com/omarkj/status/18922007020
[15:00] <JimBastard> apipkin: console.log(sys.inspect(req, true, null));
[15:00] rsms has joined the channel
[15:01] <_announcer> Twitter: "ServerSide JavaScript with MooTools and NodeJS - http://bit.ly/9njLV5" -- Propeople. http://twitter.com/Propeople/status/18922092773
[15:01] <apipkin> JimBastard: very cool :)
[15:01] <JimBastard> apipkin: http://github.com/cloudhead/eyes.js isnt bad for this
[15:01] <JimBastard> there are some web consoles too
[15:03] pavan_ has joined the channel
[15:03] <apipkin> printing out in terminal works really well for me
[15:03] <apipkin> i cannot wait to get a hang of the core then pull over to yui3 and mix the awesomeness :)
[15:04] <mischief> mscdex, this is hopeless, the v8 build system is a pile of crap
[15:04] <mscdex> heh
[15:05] <_announcer> Twitter: "Interesting: A clean-looking MVC framework for #node.js (something I've been to do doo) --&gt; http://is.gd/dyaBp" -- p6. http://twitter.com/p6/status/18922384814
[15:05] <mscdex> mischief: i don't know what else to suggest.... you must have something custom in your system somewhere. my vm is vanilla openbsd x64 with only upgrades to python, gcc, and the like necessary to compile node successfully
[15:06] <mischief> mscdex, python 2.5 is acceptable right?
[15:06] <mscdex> i would think so
[15:07] <mscdex> i have 2.6.3 installed in my openbsd vm
[15:07] <mischief> mscdex, you should write a port so openbsd users everywhere can enjoy node :[
[15:08] <mscdex> i don't know anything about that stuff... i just have a vm to test in :P
[15:08] <mscdex> otherwise i use linux
[15:08] <mischief> have you build git head on it? or only the tarball you sent me?
[15:09] <_announcer> Twitter: "#Yahoo! Mail principal engineer @pgriess shows how the Mail team is tweaking #NodeJS - http://yhoo.it/c964jU" -- Y! Developer Network. http://twitter.com/ydn/status/18922676593
[15:09] <mscdex> let me give it a try
[15:10] creationix has joined the channel
[15:12] <apipkin> are there any really good tutorials you guys recommend that go beyond a simple helloworld?
[15:12] <robinduckett> apipkin: what do you want to do?
[15:12] <mscdex> why does openbsd not have kqueue?
[15:12] <robinduckett> whoa
[15:12] <robinduckett> can't believe I didn't have ruby installed
[15:12] <mischief> mscdex, but it does
[15:13] <JimBastard> hey pgriess , great article
[15:13] <mscdex> ./configure doesn't find it anyway
[15:13] <JimBastard> apipkin: tutorial to do what
[15:13] <apipkin> robinduckett: just learning and poking. i like the idea of building a socket server similar to smartfox for flash games... but i'm thinking there is a step (or two) between helloworld and socket servers
[15:13] <mischief> mscdex, only exemplifying the fail build system. -.-
[15:13] <wattz> hey, can (perhaps i missed it in the docs) node make a commandline call?
[15:13] <JimBastard> wattz: yeah of course, reread docs
[15:13] <bradleymeck_> !api spawn
[15:13] <_api> bradleymeck_: (Child Processes) method: spawn(command, args=[], env=process.env) -- Launches a new process with the given `command`, command line arguments, and environment variables.  If omitted, `args` defaults to an empty Array, and `env` defaults to `process.env`. [ http://nodejs.org/api.html#child_process-spawn-95 ]
[15:13] <mscdex> wattz: you mean a child process?
[15:13] <JimBastard> its a child process
[15:14] <wattz> no
[15:14] <wattz> like
[15:14] <JimBastard> wattz: ill get you some code, one sec
[15:14] <mjr_> you mean like perl -e?
[15:14] <wattz> sys.exec("find . -name '*.html'");
[15:14] <mscdex> wattz: that's a child process ;-)
[15:14] <mscdex> except it's child_process.exec or .spawn
[15:14] <mscdex> !api exec
[15:14] <_api> mscdex: (Child Processes) method: exec(command, [options], callback) -- High-level way to execute a command as a child process, buffer the output, and return it all in a callback. [ http://nodejs.org/api.html#child_process-exec-96 ]
[15:14] <wattz> eh, when you say childprocess around me i think "threading"
[15:15] hpoydar has joined the channel
[15:15] <mjr_> Oh, that's interesting.  Well, they are the same.
[15:15] <JimBastard> wattz: http://github.com/Marak/say.js/blob/master/say.js
[15:16] <JimBastard> thats using a childprocess to send some info to the mac os "say" command
[15:16] <bradleymeck_> well whenever you exec a program as if from the command line you are spawning up a new process, even in c.
[15:16] <JimBastard> and wattz , that is a child process
[15:16] rtomayko has joined the channel
[15:16] <mjr_> I have this grand idea to go rewrite and improve all of node's docs based on various feedback.  I dunno if it'll ever happen though.
[15:16] <mscdex> mjr_: it's already happening
[15:17] <wattz> I realize JimBastard that it is, but when you write a lot of threading code and stuff... at least me, i think of it a bit different is all
[15:17] <wattz> just in a different mindset
[15:17] <JimBastard> wattz: okay?
[15:17] <wattz> :D
[15:17] <JimBastard> is that code what you need?
[15:17] <wattz> yeah
[15:17] <wattz> thank you guys
[15:18] <JimBastard> you should follow that Marak guy on github
[15:18] keyvan has joined the channel
[15:18] <JimBastard> he has some cool stuff
[15:18] <wattz> ok cool
[15:18] <mscdex> i've heard about him
[15:18] <mjr_> I hear he's an asshole in real life though.
[15:18] <JimBastard> i heard he's epic cool IRL
[15:18] <wattz> I hope to be posting a bunhc of my node dev stuff
[15:18] jesusabd`work has joined the channel
[15:18] <mjr_> Asshole, but writes a lot of good code.  What can you do.
[15:18] <wattz> I heard he had an affair with Brittney SPears
[15:19] <mscdex> i heard he's working on kid.js
[15:19] <wattz> haha
[15:19] <bradleymeck_> oi whered the connect repo go
[15:19] <mscdex> mischief: node head just built successfully
[15:19] <mscdex> mischief: nearly 7 minutes later :P
[15:19] <mjr_> JimBastard: did you ever get fulfill your "solid audio pipe out of node" dream?
[15:19] <jesusabd`work> Who's an asshole?
[15:19] <wattz> writing this work around to reload node app when you save a file :P
[15:19] <JimBastard> mjr_: not yet
[15:19] <mischief> ;..;
[15:20] <mjr_> JimBastard: is what way is it not solid?
[15:20] <mischief> mscdex, can you tar it and send it to me? :[
[15:20] k3yvn has joined the channel
[15:20] <JimBastard> i totally woke up yesterday morning and threw out every single piece of clothing i owned except for one suit and my fur coat. i was then walking around in a towel for most of the day before i had to take a pair of pants out of the trash so i could goto the store and buy new clothes
[15:20] <JimBastard> mjr_: i need low latency
[15:20] <jesusabd`work> ahahaha
[15:20] <mscdex> mischief: tar what?
[15:20] rwaldron has joined the channel
[15:20] <mischief> mscdex, the source tree
[15:20] <JimBastard> i totally woke up yesterday morning and threw out every single piece of clothing i owned except for one suit and my fur coat. i was then walking around in a towel for most of the day before i had to take a pair of pants out of the trash so i could goto the store and buy new clothes #bastardfacts
[15:21] <JimBastard> there we go , sorry
[15:21] <mscdex> mischief: i didn't change anything though....
[15:21] <mjr_> JimBastard: so node is buffering too much then?
[15:21] <JimBastard> mjr_: ?
[15:21] <mjr_> hence the high latency
[15:22] <JimBastard> im currently using a child process and afplay, i didnt really bother thinking about the WHY of the latency. the approach is too fubar to even think about it
[15:22] <JimBastard> need a real pipe
[15:22] rsms has joined the channel
[15:23] <mjr_> Maybe a binding to soundtouch would be better
[15:23] <JimBastard> openAL
[15:23] <JimBastard> libao
[15:23] <JimBastard> anything
[15:23] <mjr_> That's at least sort of cross platform
[15:23] <bradleymeck_> freemod?
[15:23] <mjr_> Somewhere on the horizon, I see myself doing audio stuff in node for work.
[15:24] <mjr_> Probably a few months away though.
[15:24] <jesusabd`work> JimBastard: What are you working on?
[15:25] <mscdex> i wish there was a giant browser feature matrix that showed what browsers support what communication technologies/protocols
[15:25] <mscdex> sigh
[15:25] <jesusabd`work> I thought I'd seen one of those at one time or another
[15:25] <jesusabd`work> or at least, an incomplete one
[15:25] <jesusabd`work> but it would've been a long time ago
[15:25] <mischief> mscdex, your binaries! :P doesnt scons make some sort of build log, too?
[15:25] <mjr_> seems like I've seen many of those.
[15:25] <mscdex> jesusabd`work: i've only found ones that show html5 stuff
[15:26] <mjr_> I imagine that the matrix changes pretty quickly though, and is filled with asterisks because not everybody supports things the same way.
[15:26] <mscdex> mjr_: right, but limiting it to the comm protocols is not that bad
[15:26] <JimBastard> whats up jesusabd`work ? 
[15:26] <jesusabd`work> mscdex: I would've seen these before html5 became a buzzword
[15:26] <JimBastard> talking about audio stuff?
[15:26] <mscdex> like xhr, multipart/x-mixed-replace support, websockets, sse, etc
[15:27] <bradleymeck_> mscdex there is ... digging it up
[15:27] <jesusabd`work> hmm
[15:27] tjholowaychuk has joined the channel
[15:27] BiscuitsLap has left the channel
[15:27] <JimBastard> morning tjholowaychuk 
[15:27] <mscdex> i found one, but it's not up to date
[15:27] <jesusabd`work> JimBastard: Huh? I'm just doing morning "emails" (by emails I mean webcomics and reddit) before I work on my thesis
[15:27] <JimBastard> hail canada!
[15:27] <tjholowaychuk> JimBastard: morning 
[15:27] <mscdex> reddit rap!
[15:27] <JimBastard> [11:24] <jesusabd`work> JimBastard: What are you working on?
[15:27] <tjholowaychuk> haha go canada go
[15:28] <JimBastard> tjholowaychuk: whats up with getting column output on the console
[15:28] <bradleymeck_> http://caniuse.com/
[15:28] <JimBastard> i thought i saw you had a ruby thing that did that
[15:28] <JimBastard> or maybe i saw some fancy output from one of your node apps
[15:28] <jesusabd`work> hmm
[15:28] <tjholowaychuk> JimBastard: column output? tables?
[15:28] <JimBastard> yeah
[15:28] <JimBastard> rows and cols
[15:28] <tjholowaychuk> JimBastard: terminal-table is my ruby lib
[15:28] <JimBastard> tjholowaychuk: chances you will port to node?
[15:29] <tjholowaychuk> I have a node port but its not finished yet. Expresso does it in a roll-your-own kinda way
[15:29] <JimBastard> take that number and subtract it from 100, thats the chance i will steal and port myself
[15:29] <tjholowaychuk> haha
[15:29] <_announcer> Twitter: "Guard.js looks pretty interesting.  Gonna try it out soon with #node.js.  http://github.com/ilinsky/guard.js" -- Marco Rogers. http://twitter.com/polotek/status/18924107805
[15:30] <tjholowaychuk> JimBastard: http://github.com/visionmedia/expresso/blob/master/bin/expresso#L429-466
[15:30] <JimBastard> yeah tjholowaychuk i see
[15:30] <tjholowaychuk> if you want I can open my table.js repo and you can work from there
[15:31] <jesusabd`work> Ah, table printing
[15:31] <JimBastard> i mean, how far off is it from being production ready?
[15:31] <jesusabd`work> Good deal
[15:31] <tjholowaychuk> JimBastard: it works its just not crazy feature rich yet
[15:31] <tjholowaychuk> got bored of it a bit
[15:31] <JimBastard> i got a few hours to kill today, you think it would be worth me diving in?
[15:32] <bradleymeck_> tjholowaychuk seems searching for connect on github is borked
[15:32] <_announcer> Twitter: "@davglass: mmph.  That article has way, way too many words. Entire first paragraph could be replaced by "Node.js rocks."" -- Kent Brewster. http://twitter.com/kentbrew/status/18924283822
[15:32] <JimBastard> if i make some commits will you just ignore them and reimplement the work?
[15:32] <tjholowaychuk> JimBastard: http://github.com/visionmedia/table.js
[15:33] <tjholowaychuk> bradleymeck_: really? what do you mean
[15:33] <JimBastard> cool tjholowaychuk , ill play around a bit
[15:33] <bradleymeck_> http://github.com/search?q=connect&type=Everything&repo=&langOverride=&start_value=1
[15:33] <JimBastard> let me know if there is anything specific you want to add
[15:34] <mscdex> bradleymeck_: github search is borked in many ways
[15:34] <mscdex> bradleymeck_: so it's not surprising
[15:34] <bradleymeck_> aha
[15:34] <tjholowaychuk> JimBastard: I was just about to start colspan stuff, and I dont think centering is done (correctly at least)
[15:34] <jesusabd`work> Yeah, github's search isn't exactly awesome
[15:34] <_announcer> Twitter: "@kentbrew I think the real point is nodejs rocks, but so does the contributions from @pgriess and ymail" -- Ryan Kennedy. http://twitter.com/rckenned/status/18924460907
[15:34] <JimBastard> im surprised no one has stepped up with a new github search tool
[15:35] keyvan has joined the channel
[15:36] charlenopires has joined the channel
[15:36] <tjholowaychuk> JimBastard: but yeah man if your commits work (tested :P) I will gladly accept them, I wont have to much time to work on the lib
[15:36] <tjholowaychuk> but its something I wanted to port from ruby land
[15:36] <jesusabd`work> JimBastard: http://duckduckgo.com
[15:37] <JimBastard> yeah, im just annoyed at looking at my console logs for broodmother not being vertically aligned
[15:37] <JimBastard> i gotta read soo many console logs lol
[15:37] <jesusabd`work> Git repos often show up as the zero-click result
[15:37] <jesusabd`work> broodmother?
[15:37] <JimBastard> yeah
[15:37] <jesusabd`work> Sounds like a death metal band
[15:37] <JimBastard> its the load balancer, reverse proxy, automatic node.js application deployer ive been working on since april
[15:38] <JimBastard> http://github.com/marak/broodmother
[15:38] <jesusabd`work> Oh neat
[15:38] <jesusabd`work> sounds cool
[15:38] <JimBastard> its the core of www.nodejitsu.com
[15:38] <jesusabd`work> Oh, is the name a starcraft reference?
[15:38] <JimBastard> hopefully will be launching some more stuff in the next month
[15:38] <jesusabd`work> Heh
[15:38] <jesusabd`work> sup Keanu
[15:38] <JimBastard> jesusabd`work: kinda, its more of a DoTa reference
[15:38] <jesusabd`work> Ah
[15:38] <jesusabd`work> that'd make more sense
[15:38] <jesusabd`work> Never played wc3 though
[15:39] <JimBastard> http://www.dotastrategy.com/hero-60-BlackArachniaBroodmother.html
[15:39] <JimBastard> pretty solid char, was T1 when i was playing dota
[15:39] <jesusabd`work> This looks pretty sweet!
[15:39] <JimBastard> slow + invis + lifesteal + can spawn spiderlings
[15:39] <micheil> hmm.. once I implement a plugin api for node-websocket-server, I'll be able to implement routing, and after that, I'll be able to implement my tests using clientside urls
[15:40] ditesh|cassini has joined the channel
[15:42] technoweenie has joined the channel
[15:42] <tjholowaychuk> is it against spec to have ?foo=bar#baz
[15:42] <tjholowaychuk> or "technically" does the frag have to be first?
[15:42] jakehow has joined the channel
[15:42] <JimBastard> tjholowaychuk: what spec
[15:42] <gwoo> URI spec
[15:42] <micheil> tjholowaychuk: the fragment is usually last
[15:43] <gwoo> tjholowaychuk: it should be last
[15:43] <mscdex> tjholowaychuk: i think it's always last
[15:43] <tjholowaychuk> k cool
[15:43] <bradleymeck_> micheil any way i could check cookies right now?
[15:43] <micheil> unless you want the querystring to == frag
[15:43] <JimBastard> anything paste the # doesnt get sent to the server
[15:43] <micheil> bradleymeck: connection._req.headers.cookies
[15:43] <bradleymeck_> <3
[15:43] <JimBastard> tmi, once the first # is encountered in the browser, no more of the URI gets passed
[15:43] <jesusabd`work> So what's the point of it then?
[15:44] <JimBastard> very confusing, as if you curl, the # is sent
[15:44] <micheil> bradleymeck: I think it's still ._req
[15:44] <JimBastard> jesusabd`work: anchor
[15:44] <jesusabd`work> oh, duh >_<
[15:44] <jesusabd`work> It's been a really long time since I've done anything web
[15:44] <JimBastard> jesusabd`work: can you also pass the value as location.hash after the page loads
[15:44] <jesusabd`work> hmm
[15:44] <JimBastard> (to the server)
[15:44] <micheil> don't use location.hash
[15:44] <JimBastard> thats usually what i do
[15:44] <micheil> it's not reliable.
[15:44] <JimBastard> micheil: why not
[15:45] <JimBastard> uhhh
[15:45] <tjholowaychuk> yeah with curl I get the #foo
[15:45] <JimBastard> how is it not realiable 
[15:45] <micheil> use something like location.split("#")[1]
[15:45] <JimBastard> how is location.hash not realiable 
[15:45] <micheil> it doesn't return properly in some browsers.
[15:45] <micheil> just sayin'
[15:45] <_announcer> Twitter: "@ Keitarokumaki node.js do I study group. Jaxer is expected because not." [ja] -- sa_fu. http://twitter.com/fu_satou/status/18925224892
[15:45] <JimBastard> which browsers micheil ?
[15:45] <jesusabd`work> micheil: WHICH ONES? >:O
[15:46] <mscdex> lynx!
[15:46] <mscdex> :p
[15:46] <micheil> I forget.
[15:46] <jesusabd`work> Dawg I was rockin' IE 5.0 and shit just wasn't. Working.
[15:46] <JimBastard> micheil: i just find that a bit hard to grok, only because i dont think ive ever run into that issue and ive used a shit ton of location.hash stuff
[15:46] <micheil> but I know it doesn't work in some browsers properly, hence the reason dojo, sammy, etc, all use the same method to get the hash
[15:46] <mscdex> i don't think IE can be rocked
[15:46] keyvan has joined the channel
[15:46] <mscdex> not in any sense of the word
[15:46] <micheil> it was probably IE.
[15:46] <JimBastard> word
[15:47] <JimBastard> well good to know
[15:47] <jesusabd`work> XD
[15:47] <mscdex> what if the hash has another # in it?
[15:47] <mscdex> is that legal?
[15:47] <bradleymeck_> technically, no
[15:47] <micheil> mscdex: umm.. the second # should be url encoded
[15:48] <mscdex> if it's not?
[15:48] <mscdex> heh
[15:48] <JimBastard> mscdex: what if you are smoking hash while writing your onhashchange event
[15:48] <mscdex> that split() would fail then
[15:49] aurynn has joined the channel
[15:49] <micheil> mscdex: it might not have been split we were using, I forget exactly the code.
[15:49] <bradleymeck_> ..slice(..indexOf("#"),..) is the only real alternative to split i would think
[15:49] <mscdex> ah ok
[15:49] <mscdex> yeah that'd work
[15:49] <JimBastard> its in the sammy code base for sure
[15:49] mikeal has joined the channel
[15:50] <_announcer> Twitter: "Multi-Core HTTP Server with NodeJS http://bit.ly/bAmLYT" -- Gabe Elliott. http://twitter.com/YahooGuy/status/18925519966
[15:50] <micheil> looks like: location.href.substring(location.href.indexOf("#")+1); 
[15:50] <jesusabd`work> Whoa! yahoo mail is hiring!
[15:50] <technoweenie> i thought you could just do locatin.hash
[15:51] <JimBastard> jesusabd`work: :p
[15:51] <JimBastard> ive been talking to a yahoo recruiter for a bit now
[15:51] <jesusabd`work> Oh yeah?
[15:51] <jesusabd`work> Cool!
[15:51] <JimBastard> technoweenie: you can, micheil is sayings its "not realiable" 
[15:51] <JimBastard> i havent seen it fail yet, but its possible
[15:51] <technoweenie> ah
[15:51] <micheil> there's a reason why we've always been using a split / substring, and not location.hash directly
[15:52] <pgriess> jesusabd`work/jimbastard: of course the real news is not that we're hiring, but that we're hiring someone to work on node w/ me
[15:52] <JimBastard> lol, we
[15:52] <robinduckett> technoweenie: Never fear
[15:52] <robinduckett> I, is here.
[15:52] <jesusabd`work> orly?
[15:52] <jesusabd`work> ACTION rubs chin
[15:52] <robinduckett> Hackers quote
[15:53] <jesusabd`work> Good luck finding someone!
[15:53] <jesusabd`work> ACTION reads himself as sounding sarcastic for some reason :(
[15:53] <JimBastard> pgriess: yeah, ive been talking to one of the recruiters over there about possibly getting placed with some front-end guys maybe i dunno. i told them i was interested in YQL and pipes too
[15:53] <pgriess> thanks?
[15:53] <jesusabd`work> You're welcome :D
[15:53] Waansin has joined the channel
[15:53] <pgriess> :D
[15:53] <jesusabd`work> Oh man, someone in here recommended YQL to me the other day
[15:53] <jesusabd`work> don't remember who :(
[15:53] <robinduckett> pgriess: do hire remote workers? :P
[15:53] <pgriess> jesusabd`work: probably sh1mmer
[15:53] <JimBastard> sh1mmer ? lol
[15:53] <JimBastard> yeah
[15:53] <pgriess> robinduckett: i'm remote ;)
[15:53] <jesusabd`work> Yeah, could've been
[15:53] <jesusabd`work> Actually worked out pretty well
[15:54] <jesusabd`work> for what I was doing
[15:54] <blowery> JimBastard: technoweenie: location.hash decodes the value on some browsers
[15:54] <pgriess> robinduckett: so, yeah. though we'd prefer to hire locals
[15:54] <robinduckett> Because that jobs listing page seemed to all be in the US.
[15:54] <micheil> pgriess: what's the node work you're doing?
[15:54] <JimBastard> blowery: interesting
[15:54] <JimBastard> micheil: multicore stuff i would assume
[15:54] <blowery> JimBastard: technoweenie: so like #foo%20bar comes back as foo bar some places
[15:54] <micheil> see, blowery would know, having been a long time dojo'er
[15:54] <JimBastard> scaling stuff, reliability stuff
[15:54] <technoweenie> oh, i guess that's what i'd expect?
[15:54] <pgriess> robinduckett: drop me a mail or send mail to mail_jobs@ymail.com. the link to the careers.yahoo.com page shouldn't have gone out (i had an updated version of the post that i .. ahem .. forgot to send to the editors)
[15:54] <blowery> micheil: and i wrote dojo.back :D
[15:55] <blowery> well, ported
[15:55] <micheil> that's right.. and then I wrote the tests for dojo.hash
[15:55] <blowery> but had to write tests for it.
[15:55] <blowery> nice
[15:55] <robinduckett> pgriess: okay
[15:55] <blowery> you've felt my pain then
[15:55] <micheil> very.
[15:55] <pgriess> micheil: perf stuff (multi-core, http proxy throughput improvements, general goodness)
[15:55] <blowery> i wish i could go back in time and convince myself not to port back to dojo 0.9
[15:55] <pgriess> micheil: actually working on deploying a test of web sockets
[15:56] <pgriess> micheil: using your stuff, of course
[15:56] <technoweenie> pgriess: are you using web workers in production?  this article is really interesting
[15:57] <pgriess> micheil: we want to test what the proxy landscape for web sockets is like across the internet. even though more browsers are supporting it, we're wondering if corporate/isp/other proxies are not ready for this yet
[15:57] <robinduckett> ow
[15:57] <pgriess> technoweenie: we don't have anything node-based in production yet. when we do it'll be based on connect, not a hand-rolled workers stack. that was more for demonstration purposes
[15:57] <robinduckett> just got the invoice for my car repair :D
[15:57] <bradleymeck_> github says api loging w/ tokens is depr, whats the pref way now?
[15:57] <technoweenie> oauth2
[15:57] <technoweenie> bradleymeck_: ^   tokens won't be going away though
[15:58] <bradleymeck_> ah
[15:58] <javajunky> bradleymeck: good news my oauth stuff works just fine with github ;) 
[15:58] <javajunky> mind you oauth 2 is ridiculously trivial
[15:58] <technoweenie> but if you're doing a hosted service that logs in for users, you are encouraged to use oauth2 instead
[15:58] <technoweenie> bradleymeck_: there's an api category on teh github support forum, and a sweet gist
[15:59] <technoweenie> bradleymeck_: http://gist.github.com/419219  and uh #github if you want more specific non-node assistance :)
[15:59] <bradleymeck_> cool, the develop doc just didnt mention which auth to look into , only tokens are depr
[15:59] <technoweenie> oh word
[16:00] admc_ has joined the channel
[16:00] admc has joined the channel
[16:02] buzzedword has joined the channel
[16:03] <bradleymeck_> i might actually need to patch up Witch to support forms... soo many oauths want it and all i have is a CLI for node
[16:03] benburkert has joined the channel
[16:04] BiscuitsLap has joined the channel
[16:04] aconbere has joined the channel
[16:06] <buzzedword> tjholowaychuk: hey buddy, you around today?
[16:07] <tjholowaychuk> buzzedword: yup whats up man
[16:08] hpoydar has joined the channel
[16:08] apipkin has left the channel
[16:09] <buzzedword> tjholowaychuk: I've been running your engine through the rigors this weekend, and I'm having difficulty nesting and stacking past the first of variables in body
[16:09] creationix has joined the channel
[16:09] <_announcer> Twitter: "@ryah http://buildbot.nodejs.org:8010/ doesn't seem to be loading" -- prajwal tuladhar. http://twitter.com/infynyxx/status/18926838239
[16:09] mjr_ has joined the channel
[16:10] <tjholowaychuk> buzzedword: not sure what you mean, can you paste some code?
[16:10] <tjholowaychuk> buzzedword: what do you mean by nesting past the first variables
[16:11] <micheil> pgriess: hold up on that patch, there's more to those methods.
[16:11] mostlygeek has joined the channel
[16:11] <buzzedword> tjholowaychuk: http://pastie.org/1050597
[16:11] <buzzedword> has input and output
[16:12] bpot has joined the channel
[16:12] <buzzedword> tjholowaychuk: sorry, its a weird problem to describe.
[16:12] <pgriess> micheil: ?
[16:12] <tjholowaychuk> buzzedword: ohhh jade :) was not sure what you were talking about. 
[16:12] <micheil> i'll show you what I mean: http://gist.github.com/481605
[16:12] <buzzedword> tjholowaychuk: haha! sorry about that.
[16:13] <Waansin> anyone notice that the latest nodejs (v0.1.101) needs cygz.dll as well as the other known cygwin DLLs to work from a Windows cmd prompt?
[16:13] <buzzedword> tjholowaychuk: i'm very interested in this project, so as soon as i start familiarizing myself with it a bit more, i'll see if i can dig in some source without running to you like a crying baby
[16:13] <tjholowaychuk> buzzedword: hmm I thiiiink I know what the problem might be
[16:13] <micheil> frok. that didn't work.
[16:13] <buzzedword> tjholowaychuk: ??
[16:13] <tjholowaychuk> buzzedword: just strange that it did not come up before, and not in my tests
[16:13] tmpvar has joined the channel
[16:14] <buzzedword> tjholowaychuk: so this is a templating issue, and not a syntax one then?
[16:14] <tjholowaychuk> buzzedword: 99% sure its because I allow text AND a block after a tag. its a bug tho no worries your not crazy
[16:14] <pgriess> micheil: you mean the fs.*uid() methods?
[16:14] sh1mmer has joined the channel
[16:14] figital has joined the channel
[16:15] <buzzedword> tjholowaychuk: phew. i tried simplifying the test down as far as it can go and still reproduce the error, so i hope that helps out
[16:15] <buzzedword> tjholowaychuk: let me know if you need any other tests
[16:15] <micheil> pgriess:  http://gist.github.com/481612 & http://gist.github.com/481613
[16:15] _figital has joined the channel
[16:15] <tmpvar> howdy
[16:15] <micheil> os.getUser, os.getGroup, etc.
[16:15] <tjholowaychuk> buzzedword: sounds good thanks man. I had a feeling that commit was going to make something strange, but it was not breaking my tests
[16:16] [[zz]] has joined the channel
[16:16] <sh1mmer> http://news.ycombinator.com/item?id=1529115 :)
[16:17] <creationix> sh1mmer: upped it!
[16:17] <micheil> pgriess: that's a patch I was working on.. about 3 months ago, I still haven't finished it.
[16:17] <pgriess> micheil: ok
[16:17] <_announcer> Twitter: "node.js seems that is really more powerful than php ...." [fr] -- Charpentier Boris. http://twitter.com/Bcharp/status/18927379221
[16:17] Yuffster has joined the channel
[16:18] <pgriess> micheil: i think i'm missing something ;) what did you want me to hold up on?
[16:18] <micheil> pgriess: basically gives you an async & sync way to query for users based on login name and uid
[16:18] <micheil> because, if / when I finish that patch, it'll make doing what you're documenting much easier.
[16:18] <tjholowaychuk> buzzedword: wait it works fine :S do you have a tab in there?
[16:18] <buzzedword> no, pure spacing
[16:18] <pgriess> micheil: yeah, it'll be nice to have when that stuff lands.
[16:19] <tjholowaychuk> buzzedword: weiiiird hang on maybe there is something else
[16:19] <sh1mmer> creationix: :)
[16:19] <micheil> pgriess: because then you could do: setGroup( string | integer );
[16:19] <pgriess> micheil: but in the meantime i think i'll update the docs for existing functionality
[16:19] <_announcer> Twitter: "nice article on Yahoo and node.js from St. Louis Yahoo-er @pgriess - http://is.gd/dyeYA" -- Alex Miller. http://twitter.com/puredanger/status/18927477666
[16:19] <aurynn> sh1mmer, nice article :)
[16:19] <sh1mmer> creationix: I want to show those clojure people :P
[16:19] <pgriess> sh1mmer: lol
[16:19] keyvan has joined the channel
[16:19] <buzzedword> tjholowaychuk: i'm going to repost the code with # for spaces, clear it up a bit
[16:19] <creationix> sh1mmer: somehow I missed the whole closure article/benchmark
[16:19] <sh1mmer> aurynn: thanks pgriess 
[16:20] <creationix> I guess I didn't miss much
[16:20] <buzzedword> tjholowaychuk: whoops, pastie already does that. $ for space.
[16:20] <aurynn> sh1mmer, upvoted. :)
[16:20] <pgriess> micheil: i like the full support for pwnam structures. that'll be nice to have
[16:20] <sh1mmer> creationix: in summary when someone pointed out the closure/node benchmark was unfair because node was on one core they responded with "but looks, multicore node needs more code"
[16:21] <creationix> ahh, and it's like 4 characters with connect/spark "-n 4"
[16:21] <pgriess> creationix: what is the intended difference between connect/spark anyway?
[16:21] <buzzedword> tjholowaychuk: http://pastie.org/1050597
[16:21] <mjr_> creationix: this semicolon / jslint discussion on commit message comment is hilarious:  http://github.com/ry/node/commit/7873639f55ce9d4b1cbc87542e54a74b60a7b293#comments
[16:21] <creationix> pgriess: same thing, spark is connect's executable broken out and evolved
[16:22] <creationix> connect will be just a middleware stack and not handle executing the app
[16:22] tyfighter has joined the channel
[16:22] <creationix> mjr_: I was actually looking for that thread a while back.  I find it funny now since I work with tjholowaychuk 
[16:22] <pgriess> creationix: gotcha
[16:23] <mjr_> creationix: whip that guy into shape, will you?
[16:23] <creationix> pgriess: people kept thinking that they had to use connect middleware to use the "connect" executable
[16:23] <creationix> so I think breaking it out will make it more clear it's unrelated
[16:23] <pgriess> creationix: yup. makes sense.
[16:24] <tjholowaychuk> mjr_: haha bring it onnn :p
[16:24] <creationix> mjr_: :) we're cool now, work imposed standards on us and that ended the discussion
[16:24] <creationix> ACTION loves code standards for projects
[16:24] <mjr_> Yeah, I think it's about time for ryah to just decree something about coding standards to end this ongoing discussion.
[16:24] <tjholowaychuk> ACTION loves tests :p
[16:24] <tjholowaychuk> :D
[16:24] <creationix> yeah, that too
[16:24] <micheil> pgriess: well, that patch sort of works now, as a sync patch, but it doesn't work for async.
[16:24] khug has joined the channel
[16:25] <mjr_> I think we all agree that tests are good, and that semicolons are not REQUIRED in most places.
[16:25] <tjholowaychuk> creationix: spark will be nice though that disconnect should help tons, everyones like ah wow cool multinode
[16:25] <_announcer> Twitter: "@ Bcharp you, without you I&#39;ll do that with javascript / jquery / dev node.js for your website: p" [fr] -- Thibaut LE LEVIER. http://twitter.com/tiboll/status/18927887096
[16:25] <tjholowaychuk> even though we had that for a while lol
[16:25] <mjr_> After that, opinions diverge, so somebody just needs to decide.
[16:25] <pgriess> micheil: yeah. i went down the EIO_custom road intiailly for setuid/setgid but threw it out after deciding that nobody was going to call setuid/setgid in a perf-critical path anyway
[16:25] <pgriess> micheil: but for the general case: want
[16:26] <creationix> mjr_: I love'd inimino's article on ASI, it's very fair and keeps to the technical side
[16:26] <micheil> same.
[16:26] <micheil> pgriess: but I can't spend time working on it.
[16:26] mikeal has joined the channel
[16:26] <creationix> "love'd" I wonder what that stands for?
[16:26] <pgriess> creationix: url to the inimino article?
[16:26] <micheil> ACTION wishes someone would hire him to directly work on node, and various node libraries
[16:26] <creationix> ok, just a sec
[16:26] <creationix> micheil: apply, I hear yahoo mail it looking
[16:27] <creationix> ;)
[16:27] <creationix> micheil: and you can try sencha, but I don't think we're looking for node people at the moment
[16:27] <tjholowaychuk> buzzedword: it shows you have two tabs at the end, at least when I copy/pasted, because I can do the same template with spaces and its fine
[16:27] <pgriess> what he said :)
[16:27] <tjholowaychuk> buzzedword: maybe I should figure out a way to warn about tabs properly
[16:27] tmpvar has joined the channel
[16:27] <creationix> pgriess: http://inimino.org/~inimino/blog/javascript_semicolons
[16:27] <pgriess> creationix: thx
[16:28] <creationix> pgriess: so is it fairly certain that mail will use node in some way?
[16:28] <pgriess> creationix: i wouldn't say it's certain. but it's looking increasingly likely.
[16:28] <creationix> pgriess: still exciting
[16:28] <pgriess> creationix: the challenge is slotting it into our existing tech/product stack w/o requiring rewrites of masses of php/other code
[16:29] <pgriess> creationix: and w/o deciding that we'll launch some new product just to be on node
[16:30] <buzzedword> tjholoway: i'll reeval my code on that and make sure it isn't tabbing out. Funny though, I clearly remember spacing them out. multiples of 2 only, right?
[16:30] <creationix> pgriess: if you find a nice way to integrate it, let me know.  My job is to make node more enterprise friendly, integration is a very hard problem
[16:30] <JimBastard> creationix: enterprise integration is all about appearance and perception 
[16:30] <creationix> JimBastard: only partially
[16:30] demmonoid has joined the channel
[16:30] <sh1mmer> we should publish some node coding standards as a counterpoint to the google ones 
[16:30] <micheil> pgriess: hmm.. node.js + smtp + websockets.
[16:30] <pgriess> creationix: yeah. i don't think there's a silver technology bullet there, really. it's mainly a develpment/product lifecycle question that's going to have different answers in every org
[16:30] <_announcer> Twitter: "@pgriess, hey are you guys thinking of using nodejs + jsdom + yui for yahoo mail? if so, thats pretty awesome!" -- Elijah Insua. http://twitter.com/tmpvar/status/18928249090
[16:31] <micheil> or rather, +imap
[16:31] <JimBastard> creationix: you gotta get in the building before you can have the engineer shoot down your implementation 
[16:31] <pgriess> micheil: dude, yeah
[16:31] <creationix> three rules:  
[16:31] <creationix> 1. It has to work
[16:31] <creationix> 2. It has to work all the time
[16:31] <pgriess> micheil: i'm working on it ;)
[16:31] <creationix> 3. It has to work with what we've already got
[16:31] <tjholowaychuk> buzzedword: yup thats correct, the paste had 2 tabs at the end though, if your using TM "show invisibles"
[16:31] demmonoid has left the channel
[16:31] <micheil> pgriess:  >_>
[16:31] <JimBastard> enterprise is all about convincing managers 
[16:31] <_announcer> Twitter: "Awesome article by Yahoo's own @pgriess on running a Node.js web server on multiple cores. http://news.ycombinator.com/item?id=1529115" -- Tom. http://twitter.com/sh1mmer/status/18928300623
[16:31] <buzzedword> tjholoway: will do. damn, i feel horrible if thats what it was, sorry for wasting your time on that.
[16:32] <sh1mmer> omfg. That discussion about jslint is hilarious
[16:32] <tjholowaychuk> buzzedword: no worries at all man, just makes me want to hack in some tab support, or at least warn the user
[16:32] <sh1mmer> jslint has obvious hurt someone's feelings. It comes with a warning.
[16:32] <creationix> JimBastard: marketing is fairly easy, it's making it work without rewriting everything that's the hard part
[16:33] <micheil> ACTION generally programs with invisibles on.
[16:33] amerine has joined the channel
[16:34] <technoweenie> ditto
[16:34] <technoweenie> tabs look so fn ugly
[16:34] <mjr_> pgriess: in your Yahoo article workers example, you call pause() in the master server.  I thought pause was only advisory and that data events could still be emitted?
[16:34] <micheil> technoweenie: see the reply.
[16:34] <aurynn> wow, 68-pin SCSI cables are annoying to find.
[16:34] <technoweenie> reply to what
[16:34] <technoweenie> sorry i'm not keeping up
[16:34] <micheil> technoweenie: yuor question on twitter.
[16:34] <technoweenie> did you see the link?
[16:35] <pgriess> mjr_: ah, i didn't realize pause() was advisory. if it is, then this will not work reliably.
[16:35] <ironfroggy> I have been looking at redis-node-client and i can't seem to figure how you can use it to issue multi statements. are there any examples or tutorials on that?
[16:35] <pgriess> mjr_: hm
[16:35] <mjr_> pgriess: well, I'm not sure if it is advisory.  I THOUGHT it was.
[16:35] <mjr_> That's at least what we talked about doing with sys.pump() and the pause event.
[16:35] <pgriess> mjr_: a quick read of the docs doesn't suggest that it's advisory, but i'll look more closely
[16:36] <sh1mmer> there are a bunch of node supporters around the company
[16:36] <micheil> technoweenie: damn. I did not see the link. how did I not see the link?
[16:36] <pgriess> mjr_: is that covered in the creationix video of the meeting lsat week?
[16:36] <mjr_> pgriess: you should check with mikeal or ryah about that.
[16:36] <sh1mmer> I think it's increasingly likely it's going to start taking over various tasks, especially things that need high perf
[16:36] <mjr_> Yeah, we talked about it then.
[16:36] <pgriess> mjr_: i will, thx.
[16:37] <pgriess> mjr_: it'd be certainly nice to have a reliable pause() for functionlaity like this. but i don't know that i feel strongly enough about it at the moment to assert that this should be a requirement
[16:37] <mjr_> Yeah, I'm trying to imagine how to easily do what you want to do if they are advisory.
[16:37] <mjr_> And not seeing it.
[16:38] <creationix> pgriess: I brought it up at the end of the meeting, ryah seemed ok with buffering internally after calling pause, but mikeal seemed pretty against it, his solution was a helper in userspace that made it less of a pain
[16:38] <mikeal> pgriess: pause() is advisory, if a stream doesn't have responsibility for a file handler it should either emit a "pause" event or just not implement the pause method and the pump will add one that does the right thing
[16:38] <mjr_> mikeal: how to implement the worker pool in this article: http://developer.yahoo.net/blog/archives/2010/07/multicore_http_server_with_nodejs.html
[16:38] <mjr_> ?
[16:39] <mjr_> server accepts connection and dispatches work to different workers with some sort of affinity.
[16:39] <micheil> pgriess: the only reason I can't probably apply for many yahoo jobs is the requirement of degrees and such
[16:39] <mikeal> right
[16:39] <mjr_> Read entire request first?
[16:39] <mikeal> no
[16:39] <mjr_> But what if it's a giant post?
[16:39] derferman has joined the channel
[16:39] <mikeal> don't read the entire request
[16:39] <mikeal> so, this is actually not the best architecture
[16:39] <mikeal> the workers should share a file handler if possible
[16:40] <JimBastard> micheil: no one really cares about degrees man, people want results and experience 
[16:40] <mikeal> if not, this should just wait for a "request" event on the http server, dispatch, then pump
[16:40] <_announcer> Twitter: "http://is.gd/dygkK Node.js anyone?" -- Ben Lutgens. http://twitter.com/idiotben/status/18928863934
[16:40] <JimBastard> micheil: at the rate you are going you'll be at a top company in short order
[16:40] <pgriess> mikeal: the point of the architecture is to allow making explicit routing decisions
[16:40] <micheil> JimBastard: theres more to it then just that.
[16:40] <mikeal> but it's going to have to implement a little buffering somewhere
[16:40] <mjr_> But if you want some sort of "router" or "load balancer" configuration, this would be a natural way to do this.
[16:40] <pgriess> mikeal: but yeah lack of a working pause torpedos this
[16:40] sudoer has joined the channel
[16:40] <mikeal> to handle the POST body coming in while the IO is happening to dispatch the request to another process
[16:40] <JimBastard> hey mikeal i meant to bug you actually
[16:41] <SubStack> I'd go for another round of node.js but I already filled up on appetizers.
[16:41] <micheil> JimBastard:  this is what I mean. http://news.csu.edu.au/director/regionalnews.cfm?itemID=6FD153180375A70EC07947F4E86A444C&bprint=true
[16:41] <mikeal> pgriess: where do you need the pause to happen?
[16:41] <pgriess> mikeal: for sockets, we can just leave the data in the tcp recv window
[16:41] <mikeal> JimBastard: what's up
[16:41] <creationix> micheil: yeah, sometimes not having a degree can bite you, I got refused a Cisco job because I was still in school.  But most places are willing to make compromises if you show enough skill
[16:41] rauchg_ has joined the channel
[16:41] <mikeal> so, you shouldn't pause the stream while you're dispatching it
[16:41] <mikeal> you should just buffer it
[16:41] <pgriess> mikeal: not sure why that wouldn't work. does pause not just remove the fd from the event set?
[16:41] <mikeal> the time it takes to dispatch is shorter than the roundtrip time to the client
[16:42] <micheil> creationix: have a look at that link too. I'm technically in both high school and uni.
[16:42] <mikeal> so pause/resume cycle is a waste of time
[16:42] <SubStack> hah compromise
[16:42] <JimBastard> creationix: i just leave off school experience from my resume completely, most people dont notice / ask me once in passing 
[16:42] <robinduckett> creationix: I have no degree, but I have three years experience, two years industry / one year freelance
[16:42] <SubStack> compromise for the one actually relevant attribute
[16:42] <JimBastard> mikeal how does http://www.hillcountryny.com/menu.php look for sat night? i was thinking about getting us a nice table
[16:42] <tjholowaychuk> creationix:  i think its way more about OSS, I got offered facebook jobs, youtube jobs, blah blah and ive never done any schooling
[16:42] <SubStack> skill > everything else
[16:42] <mikeal> i dropped out of high school
[16:42] <robinduckett> And it really annoys me that people come out of a comp sci degree not knowing how to code
[16:42] <JimBastard> tjholowaychuk: more like, OSS profile
[16:42] <mikeal> but i have 10 years industry experience
[16:42] <mikeal> :)
[16:42] <robinduckett> Infact
[16:42] <JimBastard> ooofa! only 8 here
[16:43] <aurynn> robinduckett, as djikstra said...
[16:43] <robinduckett> It outrages me that people come out of a comp sci degree not knowing how to code
[16:43] <micheil> seriously, props to the first company where commit to opensource is a job req.
[16:43] <mjr_> pgriess: once you have a "request" listener, you are pretty much signed up to take "data" events, I think.
[16:43] <mikeal> the last 5 have been full time open source 
[16:43] <mikeal> first at OSAF, then Mozilla, now here at Couchio
[16:43] <micheil> actually, that's been done. DocumentCloud
[16:43] <pgriess> mikeal: the problem w/ buffering the stream in the parent is that we can't have two processes thinking they own the read end of the stream
[16:43] <aurynn> compsci isn't about writing code.
[16:43] <JimBastard> micheil: i got my last two jobs from github projects
[16:43] <micheil> JimBastard: last five jobs.
[16:43] <pgriess> mikeal: we still need to atomically hand off the stream to the other process
[16:43] <JimBastard> lol
[16:43] <pgriess> mikeal: to avoid losing data
[16:43] <mikeal> pgriess: that's fine, but while you flip the file handler over, you'll get data
[16:43] <mikeal> creationix has this problem now with his multi-process setup
[16:44] <mikeal> you lose chunks
[16:44] <SubStack> micheil: my startup's job form will include exactly two fields: github account name and blog url
[16:44] <micheil> heh heh
[16:44] <creationix> micheil: the way I figure, if the company isn't willing to hire you, even though you obviously have enough skill/expereience and blame it on your lack of education, then you probably don't want to work there anyway
[16:44] benburkert has joined the channel
[16:44] <SubStack> although blog url is superfluous since it shows up on your github account page
[16:44] <micheil> creationix: true.
[16:44] <ironfroggy> SubStack: No stack overflow account? *gasp* (I am totally joking)
[16:44] <creationix> mikeal: huh?
[16:44] <mikeal> in your multi-process web server thing
[16:45] <creationix> no, mine is a simple fd sharing
[16:45] <mikeal> you lose data sometimes when you're handing over the fd
[16:45] <pgriess> mikeal: no you don't
[16:45] <pgriess> mikeal: you're only handing over the accepting fd
[16:45] <pgriess> mikeal: not the connecitn
[16:45] <mikeal> creationix: didn't you say that the other day
[16:45] <pgriess> mikeal: in connect that is
[16:45] huyhong has joined the channel
[16:45] <creationix> mikeal: in connect I had to buffer events between middleware layers, but that's less of a race condition since emit (soft events) happen before hard events
[16:45] <mikeal> the connect is returned before the other process has ownership tho
[16:46] huyhong has joined the channel
[16:46] <robinduckett> My problem has been, the HR department of companies tend to bin my CV before I start
[16:46] <creationix> mikeal: maybe you're thinking aboue pgriess's gist that I was looking at
[16:46] <robinduckett> so the relevant people never even see it
[16:46] <creationix> it hands off connections to child processes
[16:46] omarkj has joined the channel
[16:46] <mikeal> just leave out education and have a giant experience / skills section
[16:46] <JimBastard> robinduckett: fuck HR departments
[16:46] <robinduckett> yeah they bin that too
[16:46] <JimBastard> i dont think i'll ever cold apply to a job again
[16:46] <pgriess> mikeal: connect/spark do not accept connections in the master; they only accept in the worker
[16:46] <micheil> mikeal: does John resig on the references section count?
[16:46] demmonoid has joined the channel
[16:46] <mikeal> why are you applying places with an onsite HR department :)
[16:46] <mjr_> pgriess: I'm not sure that you can reliably hand off already accepted connections to a worker.
[16:46] <pgriess> mikeal: a live connection is never passed around
[16:46] <SubStack> HR departments shouldn't exist :/
[16:47] <robinduckett> if your CV !== their requirements on the job advert then you will not have much luck.
[16:47] <pgriess> mjr_: you can. but its possible that node isn't set up to do this well
[16:47] <robinduckett> I apply to anywhere and everywhere I can, regardless.
[16:47] <mikeal> pgriess: that should work then, why do you need pause?
[16:47] <mjr_> pgriess: yeah, I mean I'm not sure you can reliably do it in node.  :)_
[16:47] <JimBastard> robinduckett: not the best approach imo
[16:47] <pgriess> mikeal: creationix and i are solving different problems ;)
[16:47] <robinduckett> JimBastard: only approach when you don't have enough money to buy food :/
[16:47] <pgriess> mikeal: his solution does not offer any affinity 
[16:47] <mikeal> that's what i'm starting to understand :)
[16:47] <JimBastard> robinduckett: nepotism usually works better
[16:47] <pgriess> mikeal: any conneciton can be handled by any worker
[16:48] <pgriess> mikeal: with mine i'm trying to build affinity
[16:48] <creationix> mikeal: pgriess's article explains that solution is easy, simple, and solid, but doesn't work for a lot of use cases
[16:48] <creationix> s/that solution/that my solution/
[16:48] <pgriess> mikeal: to do so, i accept all connections in a single process before making an explicit decision where to hand them off
[16:48] <mikeal> right, so this is the classic node callback vs. event problem
[16:48] <mikeal> events that block on processing have to be handled immediately without any other IO
[16:48] <JimBastard> in our approach, we just balance everything over the wire
[16:48] <robinduckett> JimBastard: only nepotism I could get is being an electrician / light fitter at the local university.
[16:49] <mikeal> if you MUST do IO in an event handler you're going to have to buffer
[16:49] <pgriess> mikeal: yeah. i thought stream.pause() was doing that buffering for me
[16:49] <JimBastard> robinduckett: make better friends / marry a rich girl
[16:49] <pgriess> mikeal: still don't understand why it doesn't , actually
[16:49] <mikeal> it *might*
[16:49] <mikeal> but it's not guaranteed
[16:49] <robinduckett> JimBastard: that does not solve my lack of baked beans issue.
[16:49] <pgriess> mikeal: if we're not reading from the socket, the data should be there for the other process
[16:49] <robinduckett> that is a more immediate need.
[16:49] <mjr_> And even if you buffered in the accepting server, the channel to the worker is non-blocking, so you'd never be able to reliably hand it off.
[16:49] <mikeal> you should just create a buffering stream
[16:49] <pgriess> mikeal: what about the node impl prevents this guarantee?
[16:49] <mjr_> Unless you proxied the entire request from the client.
[16:49] <mjr_> Hey, why not do that?
[16:50] <JimBastard> robinduckett: sucks man
[16:50] <mjr_> Server stays in the loop until the end of the request, just proxying the data to the client.
[16:50] <pgriess> mjr_: less efficient than handing off the fd (that is, if we can get fd hand off to work reliably)
[16:50] <JimBastard> ive been there :-\
[16:50] <mjr_> Then after the request is over, you can reliably pass the fd, and the response will go directly?
[16:50] <pgriess> mjr_: imageine file uploads
[16:50] <mikeal> pgriess: nothing
[16:50] <robinduckett> and my time trolling odesk has resulted in exactly $13
[16:50] <mjr_> I'm imagining them.
[16:50] <mikeal> there are no guarantees
[16:50] <mikeal> if you pause() it'll send a TCP message to the client to back off
[16:50] <mikeal> and resume() will trigger drain
[16:51] <creationix> pgriess: what if you only proxy till the request data is received, then hand off the fd.  Then things like websockets can still be non-proxied
[16:51] <robinduckett> as I am quite averse to hourly rate jobs since the indian/chinese workers charge like $4 an hour and I can't afford that
[16:51] <pgriess> mikeal: if we remove the socket fd from our select/etc data structure, we won't read data from it and any received data will be availble to the child process
[16:51] <mikeal> on the filesystem it'll stop pulling chunks of the fs
[16:51] <robinduckett> *can't afford to charge that little
[16:51] <pgriess> mikeal: its possible that node can't achieve that right now, but the kernel def provides this
[16:51] <robinduckett> ah well. all works out in the end I suppose
[16:51] <mjr_> pgriess: yes, if you stop reading from TCP, you should be able to reliably hand off the fd.
[16:51] <robinduckett> stiff upper lip
[16:51] <mjr_> But I'm not sure that node has a way right now to know when it is safe.
[16:51] <pgriess> creationix: yeah that could be an interesting hybrid. doesn't work for large uploads, but at leats works well for large downloads
[16:51] <mikeal> the kernel is just going to buffer it in memory
[16:52] <javajunky> robinduckett: perhaps the job market in cardiff isn't there ? 
[16:52] <mikeal> why is that better than buffering it in node in the stream closest to where you want to send it?
[16:52] <pgriess> mikeal: yes. someone has to buffer it in memory. why not let the kernel do it
[16:52] <robinduckett> no, i need to move to bristol
[16:52] <creationix> pgriess: yeah, except for large uploads, the request body is always small. You could go a different route for that use case
[16:52] <JimBastard> robinduckett: i dunno about the UK, but there has been a lot of people hiring lead JS guys in the US
[16:52] <javajunky> robinduckett: then do it :)
[16:52] <maqr> creationix: sir! i have discovered a bug in connect!
[16:52] <creationix> maqr: impossible
[16:52] <mjr_> pgriess: I guess what you need is some callback from node to let you know that indeed things are paused and no further data events will be emitted.
[16:52] <robinduckett> javajunky: can't afford it
[16:52] <maqr> creationix: i opened an issue on github, it's true :P
[16:52] <pgriess> creationix: for large uploads, the request header is small, but the body is large (file payload).
[16:52] <omarkj> Hey all. I was wondering what the cleanest way of creating something akin to a global event bus? I don't know if I feel comfortable emitting them on 'process'..
[16:53] <robinduckett> JimBastard: if I can get a remote job from the US that would be good
[16:53] <javajunky> yeah one of my teams is looking for good js resource (we think we've found one though), I don't much worry about degrees when vetting cvs personally .
[16:53] <tjholowaychuk> maqr: is it the one I just closed?
[16:53] <robinduckett> according to the recruiters who have me busily changing my CV around to better "mesh" with the jobs in cardiff, bristol is better.
[16:53] <creationix> maqr: ;)
[16:53] <omarkj> robinduckett: if you're interested in working in Iceland, I know there are bunch of projects available here. Nobody seems to care about CVs, as long as you've done some actual work.
[16:53] <mjr_> pgriess: yeah, I think that fixes your problem.  Just calling pause() isn't enough.  You have to make sure that you've collected any data events before the iowatcher is stopped.
[16:53] <maqr> tjholowaychuk: yes, yes it is...
[16:54] <maqr> you guys are quick
[16:54] <pgriess> mjr_: i'm not sure i believe that i have a problem ;) still trying to understand what is and what is not guaranteed
[16:54] <tjholowaychuk> maqr: that was an Express issue, I previously had the routes stacked in the constructor, now they are stacked on the first call to app.{get,del,put,post}()
[16:54] <creationix> maqr: that explains why I can't find it
[16:54] <_announcer> Twitter: "The ecosystem of the node.js is evolving rapidly, came out with express.js 1.0 Migration Guide: http://is.gd/dyh8a" [pt] -- Diogo Biazus. http://twitter.com/dbiazus/status/18929785834
[16:54] <maqr> creationix: http://github.com/senchalabs/connect/issues/closed#issue/59 :P
[16:55] demmonoid has left the channel
[16:55] <mjr_> pgriess: in a post case, the http header and first body chunk could arrive in the same read.  Won't node fire a request, and then immediately fire a data?
[16:55] <maqr> tjholowaychuk: ah, but only for post?
[16:55] <maqr> tjholowaychuk: i seriously looked at the code for like 4 hours trying to figure it out, and i just couldn't get it :/
[16:55] <tjholowaychuk> maqr: nope, it was actually messing up sessions n crap too
[16:55] <SubStack> Foolish tweeters! Little do they know that all is going according to plan!
[16:55] <creationix> pgriess: speaking of github issues, can I close this one? http://github.com/senchalabs/connect/issues#issue/56
[16:55] <tjholowaychuk> maqr: but only if you didnt use the middleware in createServer() lol bit of a weird one
[16:55] <pgriess> creationix: if its fixed, sure ;)
[16:56] <creationix> it's fixed if you switch to spark
[16:56] <mikeal> pgriess: sorry
[16:56] <pgriess> creationix: works for me
[16:56] <tjholowaychuk> maqr: simple fix tho http://github.com/visionmedia/express/commit/0550755c7d27f755153ef93cac2e4c26e21dd77f
[16:56] <micheil> tjholowaychuk / creationix has either played with combining websockets + connect?
[16:56] <mikeal> i was dealing with some other stuff
[16:56] <pgriess> creationix: when should i plan to switch to spark?
[16:56] <pgriess> mikeal: np[
[16:56] <tjholowaychuk> mikeal: nope
[16:56] <creationix> pgriess: now
[16:56] <mikeal> sure, you can let the kernel do it but it's not actually the most efficient place to do it 
[16:56] <pgriess> creationix: ok
[16:56] <maqr> tjholowaychuk: heh, i just couldn't find that
[16:56] <creationix> pgriess: I've already deleted the "connect" executable from connect's repo
[16:56] <mikeal> when you have a chain of streams it's best to buffer at the last stream, not the first
[16:56] <maqr> tjholowaychuk: btw, is your sass supposed to be the same as the sass-lang one?
[16:57] <mjr_> mikeal: I think in this particular case the kernel is actually the best place.
[16:57] <ryah> pgriess: nice blog post
[16:57] <tjholowaychuk> maqr: nah not really I wrote that like a year ago it needs lovin
[16:57] <mjr_> Because as soon as you hand off the fd, you can let another core handle the IO.
[16:57] <mikeal> so, you have in-node logic for the routing
[16:57] <mikeal> yes?
[16:57] <maqr> tjholowaychuk: ah, ok, i'll just use sass-lang then
[16:57] <mikeal> and you want to hand off the routing to another process, which will take a few ms of IO
[16:57] <tjholowaychuk> maqr: is that for js? or are you talking about the ruby impl
[16:57] <mjr_> ryah: we are discussing whether the code pgriess posted will actually work right.  :)
[16:57] <pgriess> ryah: thx
[16:58] <mikeal> oh i see
[16:58] <maqr> tjholowaychuk: it's a ruby gem, but it runs like a binary if you put it in your path, it just watches for .scss files and turns them into .css
[16:58] <_announcer> Twitter: "@frsyuki Just know about node-msgpack #messagepack #nodejs" -- pcdinh. http://twitter.com/pcdinh/status/18929997111
[16:58] jetienne has joined the channel
[16:58] <mjr_> mikeal: yeah, it's not the lowest latency way, but I think it is ultimately the most efficient.
[16:58] huyhong has left the channel
[16:58] <mikeal> if you let the kernel handle it then when you give it to the child process it'll emit all the events
[16:58] <tjholowaychuk> maqr: ah yeah gotcha :) I use the "compiler" middleware which compiles it when changed, (less as well) and serves with staticProvider
[16:58] <pgriess> mikeal: yeah that's the idea
[16:58] <mikeal> you don't have to write any of that code
[16:58] <mjr_> Yeah, this specific use case needs a way to know that there will be no more events emitted.
[16:58] <mikeal> i can see why that is appealing
[16:58] <bradleymeck_> mape i have messed w/ sockets+connect, why?
[16:59] <mape> ?
[16:59] <bradleymeck_> woops meant micheal...
[16:59] <bradleymeck_> aaaah, micheil*//too tired
[16:59] <micheil> I'm just wanting feedback, was it good?
[16:59] christophsturm has joined the channel
[17:00] <ryah> mjr_: oh - i didn't look at it
[17:00] <micheil> bradleymeck: I'm thinking of making it so the httpServer is just another option, not a second arg.
[17:00] <ryah> :)
[17:00] <micheil> which would simplify the code a bit
[17:00] <mjr_> ryah: I think he'll miss some data events on post if they arrive in the same read.
[17:00] <technoweenie> oh haha someone dug up that epic node commit thread
[17:00] <bradleymeck_> it was ok, i really wanted easier access to httpheaders for having authentication connections
[17:00] <mjr_> ryah: will he?
[17:01] <maqr> technoweenie: hey, you're that rails guy :P
[17:01] keyvan has joined the channel
[17:01] aho has joined the channel
[17:01] <bradleymeck_> smooth integration, with that i think it would be nice, had some problems on ubuntu 
[17:01] <tjholowaychuk> creationix: have you tried blasting connect (spark now) with a high load from ab or similar? hangs like mad for me
[17:01] <creationix> tjholowaychuk: really, works fine for me
[17:01] <technoweenie> maqr: yea
[17:01] rvanrooy_ has joined the channel
[17:01] <creationix> tjholowaychuk: you're not running out of ports are you, ab tends to do that
[17:02] <tjholowaychuk> creationix: I thought it was ab crapping out on me, but I can run any of the examples with node whatever.js and they are flawless
[17:02] <creationix> tjholowaychuk: what's your ab line?
[17:02] <pgriess> ryah: this boils down to whether or not stream.pause() is reliable
[17:02] <tjholowaychuk> creationix: just simple stuff -n 5000 -c 80 -k etc
[17:02] <pgriess> ryah: and will not emit any more 'data' events, instead leaving data on the socket
[17:02] admc_ has joined the channel
[17:02] admc has joined the channel
[17:03] <creationix> tjholowaychuk: don't do "-n 5000" do "-t 10" instead
[17:03] jherdman has joined the channel
[17:03] <creationix> hmm, but 5000 is a low enough number
[17:04] <creationix> tjholowaychuk: what's your spark app and line?
[17:05] <tjholowaychuk> creationix: im not using it atm, but it was crapping out on me often when I was benchmarking stuff
[17:05] <creationix> tjholowaychuk: not sure, I've never seen that, I hit it hard all the time
[17:05] <tjholowaychuk> creationix: weirddd, I will have to try again with spark in a bit
[17:05] <creationix> I've got 4 production sites running on spark at the moment
[17:06] <creationix> spark + upstart = awesome hosting
[17:06] <tjholowaychuk> it should be a non-issue since ab is really unrealistic anyways but just seemed odd to me that it behaved like that
[17:06] <ryah> soryr im only half here.
[17:07] <_announcer> Twitter: "RT@greylockvc Pizza, beer & Joyent's Ryan Dahl on Node.JS - Weds. 7/21, 6pm @ Redfin in SF - http://bit.ly/bTj5Ww  #E2E http://bit.ly/9rGjG2" -- Joyent. http://twitter.com/joyent/status/18930527886
[17:07] <ryah> i think he'll get all the data
[17:07] <buzzedword> tjholowaychuk: question. I'm looking through your examples on jade, and i'm trying to understand how run.js works. I get the cascade that's going on, but at what point do any of the files become accessible to the client?
[17:07] <ryah> that accept callback hasn't called a read() yet
[17:08] <tjholowaychuk> buzzedword: not sure what you mean. the example / run.js just renders out the diff example jade files to show the output
[17:08] <ryah> the only case where pause() might still emit some data is in http streams
[17:08] <ryah> and we should fix that
[17:08] <buzzedword> tjholowaychuk: aha, i thought it was functional code. alright, that makes more sense.
[17:08] <pgriess> ryah: interesting. in what case does that happen? 
[17:09] <ryah> pgriess: http messages with bodies larger than one packet
[17:09] <ryah> well - or one packet bodies - if you call pause() in the onHeadersComplete callback (the 'request' callback)
[17:10] <ryah> basically it doesn't stop the parser
[17:10] <_announcer> Twitter: "Middle node.js world is crazy about and I still I have no fucking idea what&#39;s going - http://nodejs.org/" [es] -- boheme*. http://twitter.com/boheme/status/18930712195
[17:10] <pgriess> ryah: ok. so we won't pull any more data off of the socket, but the parser continues unabated
[17:10] <ryah> but that can be fixed
[17:10] <ryah> pgriess: exactly
[17:10] <ryah> so we just need to jump out of the parser
[17:10] <ryah> save the current data chunk
[17:10] <pgriess> ryah: ok i'll see what i can do
[17:10] <ryah> and remember where we were in parsing that
[17:10] <ryah> the offiset
[17:10] <pgriess> ryah: yup
[17:10] <ryah> then when resume is called go back in
[17:11] zapnap has joined the channel
[17:11] <pgriess> ryah: i have another post coming soon that relies on this so its in my best interest to fix it ;)
[17:11] <ryah> pgriess: yeah - lots of people have complained about it
[17:11] <ryah> my reponse for a while was : don't make assumptions about it actually pausing
[17:11] <ryah> but i think it's better for node-core to just take on this weight 
[17:11] cytopia has joined the channel
[17:11] <pgriess> ryah: agree
[17:11] <ryah> simpler interface for everyone
[17:11] <ryah> and it's not too hard to do in http.js
[17:12] <pgriess> ryah: will be irritating to write a unit test for
[17:12] <pgriess> ryah: actually no it won't. just use a custom http_parser instance
[17:12] <ryah> just do an upload and pause it immediately - make sure no data comes
[17:12] <ryah> should be fine
[17:13] <ryah> yeah - or do it at the parser level
[17:13] <ryah> add a pause() on the parser
[17:13] <ryah> that's probably best - then you can test it without i/o
[17:13] [[zz]] has joined the channel
[17:13] WALoeIII has joined the channel
[17:13] <pgriess> yeah
[17:14] <pgriess> i want to test and fix it at the lowest level of the stack possible
[17:14] <pgriess> (w/in reason)
[17:17] <_announcer> Twitter: "NodeJS looks pretty interesting http://fb.me/DJwiGTzk" -- Code-pal. http://twitter.com/codepal/status/18931176010
[17:17] <_announcer> Twitter: "The state of multi-core Node.js http://developer.yahoo.net/blog/archives/2010/07/multicore_http_server_with_nodejs.html /by @pgriess" -- Dion Almaer. http://twitter.com/dalmaer/status/18931185950
[17:17] <CIA-64> node: 03Ryan Dahl 07master * r65f2e72 10/ lib/readline.js : Fix style in readline - http://bit.ly/a8YANr
[17:17] <CIA-64> node: 03Benjamin Fritsch 07master * r0ed3532 10/ (test/simple/test-crypto.js test/fixtures/sample.png): added test for Issue #214 - http://bit.ly/bHdolW
[17:17] <mischief> ryah, are you a node developer?
[17:18] <tjholowaychuk> mischief: THE node developer
[17:18] <robinduckett> mischief: you could say that
[17:18] <robinduckett> ryah == http://github.com/ry
[17:18] <mischief> quite.
[17:19] <JimBastard> OMG ARE YOU RYAH, FROM THE INTERNET?!?!?!
[17:20] <JimBastard> I READ A BLOG POST ABOUT YOU
[17:20] <JimBastard> WHATS UP WITH THIS JAVASCRIPT THING CAN YOU SHOW ME
[17:20] <JimBastard> ^_^
[17:20] <mischief> shush :\
[17:21] <_announcer> Twitter: "Entertaining #nodejs comment thread: http://bit.ly/cC7whW" -- Rob Righter. http://twitter.com/robrighter/status/18931403238
[17:21] sh1mmer has joined the channel
[17:21] <pgriess> is there a comment thread anywhere complaining about 2-space indentation? ;)
[17:22] <sh1mmer> pgriess: that's a google thing
[17:22] <pgriess> sh1mmer: i </3 it
[17:23] <sh1mmer> is that love or hate?
[17:23] <pgriess> hate
[17:23] V1 has joined the channel
[17:23] <mischief> ryah, perhaps you or someone else can help me with a problem
[17:23] <mischief> im trying to build node.js on openbsd amd64, but every time i build it, something fails
[17:23] <pgriess> but like everything else, its a personal preference. i'm actually happy that the node codebase is consistent, even if its not what i would have chosen
[17:24] <JimBastard> mischief: is still the issue from the other day?
[17:24] <mischief> yep
[17:24] <JimBastard> have you posted to the mailing list yet?
[17:24] <mischief> no replies. i posted it the same day we talked.
[17:24] <mischief> i tried rebuilding with git head, JimBastard and got a completely different error
[17:25] <JimBastard> mischief: im sure ryah is willing to help, but hes probably busy. whats the link to the thread?
[17:25] <mischief> http://groups.google.com/group/nodejs/browse_thread/thread/fbdb6e20d45d4515
[17:26] voxpelli has joined the channel
[17:26] <mischief> but the compile problems are different now with git head.. however, mscdex sent me his node binary, and it printed an error similar to the one in the post there
[17:29] <_announcer> Twitter: "@Bureau347 I just got to know node.js, and my golly, I'm loving every minute of this day. And the weather is good!" -- √ìmar Kjartan Yasin. http://twitter.com/omarkj/status/18931917073
[17:29] omarkj has left the channel
[17:30] omarkj has joined the channel
[17:30] jxson has joined the channel
[17:30] rtomayko has joined the channel
[17:30] <JimBastard> yeah i wish i could help more mischief, logically speaking i gotta assume you have a borked machine (bad requirements) or there is a specific node bug
[17:33] <sh1mmer> anyone fancy helping me answer the comments on HN?
[17:33] <sh1mmer> http://news.ycombinator.com/item?id=1529115
[17:33] dshaw has joined the channel
[17:33] <CIA-64> node: 03Ryan Dahl 07master * r9a26946 10/ src/node_crypto.cc : Fix for issue #214 - http://bit.ly/cciLNC
[17:35] <bradleymeck_> i tend to ignore HN, but for cpu questions, node excels at websockets, websockets generally need some parsing and data manip before a push/sub if you are doing anything intelligent w/ them
[17:35] <bradleymeck_> also it seems most of them are focused on number of connections accepted a second not bandwidth
[17:36] kevwil has joined the channel
[17:36] <CIA-64> node: 03Ryan Dahl 07master * reda1edd 10/ TODO : Add todo item - http://bit.ly/9tASAo
[17:36] steadicat has joined the channel
[17:37] <pgriess> sh1mmer: i guess i don't know how the answer the CPU question other than to ask if the author actually thinks web servers do nothing but I/O
[17:37] <pgriess> sh1mmer: the author is probably running his laptop w/ 64k of memory
[17:38] <ryah> http://news.ycombinator.com/item?id=1529295 gets it
[17:38] <ryah> http://news.ycombinator.com/item?id=1529402 doesn't get it
[17:39] <pgriess> also, i explicitly mentioned why 1 core is not enough: if you need to serve more than 2100 reqs/s
[17:40] <bradleymeck_> if only we could share the event loop itself across cores
[17:41] <JimBastard> sh1mmer: id love to but im perma ban
[17:42] <bradleymeck_> do we have an interruptible JSON parser?
[17:42] <micheil> no, not yet.
[17:42] javajunky has joined the channel
[17:42] <micheil> but it is probably possible.
[17:43] <skampler> i want that!
[17:43] <micheil> bradleymeck_: feel free to add anything as another document to this gist: http://gist.github.com/481715
[17:43] <micheil> or as a comment
[17:43] <_announcer> Twitter: "Yahoo Mail team on Node.js as L7 load balancing HTTP router using multiple cores. Server Javascript gets serious. http://yhoo.it/a9Woj9" -- Mark Maunder. http://twitter.com/mmaunder/status/18932753289
[17:44] <bradleymeck_> interruptable parsers are always able to be made, ppl just hate resolving out ll(*) grammars like c++
[17:44] grahamalot has joined the channel
[17:44] <tjholowaychuk> bradleymeck_ what about the syck bindings? (thought there were some)
[17:45] <sh1mmer> JimBastard: not surprising
[17:45] <JimBastard> bradleymeck_: we got a new meetup group starting in nyc, (languages and compilers), maybe i can bribe someone to writing a streaming json parser for node
[17:45] <sh1mmer> pgriess: I attempted to answer, but it seems mostly like people not getting the basics
[17:45] <JimBastard> sh1mmer: fuck HN and their moderation nazi's 
[17:46] <bradleymeck_> im like 1/4 done w/ a streaming parser gen but having trouble determining ll(x)
[17:46] creationix has joined the channel
[17:46] <sh1mmer> JimBastard: or you are a massive troll. Go figure ;)
[17:46] <_announcer> Twitter: "@jcroft Damn. This is sexy code. http://www.sitepoint.com/blogs/2010/07/13/node-js-is-the-new-black/" -- Scott Phelps. http://twitter.com/shoghon/status/18932936059
[17:46] <sh1mmer> JimBastard: that admitted writes good troll code :)
[17:47] <zmbmartin> tjholowaychuk: is there a way to put a space in jade other then &nbsp; as in http://gist.github.com/481719 this ends up as PageEdit Page
[17:47] aheckmann has joined the channel
[17:47] <tjholowaychuk> zmbmartin: currently it trims the text, but I think that removes some flexibility, I might consider this a bug
[17:48] <micheil> tjholowaychuk: have you thought of making jade able to take in a streamed template & have you thought of abstracting it's parser flow out?
[17:48] <JimBastard> sh1mmer: hey thanks lol. it just annoys me to see HN completely squash someone for such little disruption. makes you wonder who else has been silenced on HN that we don't know about. 
[17:48] <tjholowaychuk> micheil: same as before, im totally not against it, but its nothing I have personally needed at all and it would take some time to implement
[17:48] <sh1mmer> JimBastard: part of HN culture is that we aren't reddit
[17:48] <JimBastard> and they do silent banning, so im sure a lot of people never even figured it out
[17:49] <bradleymeck_> you write me up a login api and nodejsbot can login to it
[17:49] <micheil> tjholowaychuk: k
[17:49] <tjholowaychuk> :D
[17:49] <zmbmartin> tjholowaychuk: yeah cause I can do this but it looks kinda ugly  --> http://gist.github.com/481725
[17:49] <micheil> I didn't think I'd asked already
[17:49] <JimBastard> HN quality has declined a bit over the past year, but no where to as close as the reddit decline
[17:49] <tjholowaychuk> micheil: i think so, maybe it was someone else. no worries though im all down for it but I have so much stuff on the go
[17:49] <micheil> tjholowaychuk: and there'll be a new browser version soon.
[17:49] <tjholowaychuk> zmbmartin: worken on it right now
[17:49] <tjholowaychuk> micheil: sweet :D
[17:50] <JimBastard> HN is still somewhat quality, but the people posting comments are getting worse
[17:50] <micheil> once I pull it out of my client's project and rebase back into the repo.
[17:50] <sh1mmer> JimBastard: right, the size of the community has grown a lot
[17:51] <micheil> anyway, I'm off to bed, thanks for the good ideas tonight chaps'  (and ladies?)
[17:51] <JimBastard> thats the catch-22 of communities like that
[17:51] <JimBastard> you want elite, but you want members
[17:51] <JimBastard> seems to be at a certain point of no return it turns to shit with new people coming in and not enough elite people
[17:51] <_announcer> Twitter: "How tough is that? Webworker for Node.js! http://is.gd/dykI8" [de] -- Peter. http://twitter.com/sir_pepe/status/18933233025
[17:52] <tjholowaychuk> zmbmartin: should be fixed in 88630cb
[17:52] <micheil> pgriess: I still think that should use unix sockets, not websockets
[17:52] <micheil> :P
[17:52] <pgriess> micheil: i know :)
[17:52] bean0r1___ has joined the channel
[17:52] <zmbmartin> tjholowaychuk: cool thanks
[17:52] <pgriess> micheil: if it's any consolation, i'm using web sockets over unix sockets
[17:52] <pgriess> micheil: but your earlier complaints about setup cost are certainly valid
[17:53] <micheil> pgriess: just strip the headers
[17:53] xer0xM has joined the channel
[17:53] <micheil> like what they'll do if they get a separate websocket protocol port
[17:53] <bean0r1___> ryah: where can i find the node CLA?
[17:53] <micheil> they'll drop the HTTP handshake or something
[17:53] <micheil> bean0r1___: http://nodejs.org/cla.html
[17:54] <bean0r1___> oh :D
[17:54] <micheil> ryah: maybe /title that?
[17:54] <pgriess> micheil: interesting. is there a spec for this? or is this something you and hixie are cooking up?
[17:54] <micheil> I'm not cooking anything with hixie.
[17:54] <micheil> pgriess: this is just what I've overheard
[17:54] <pgriess> micheil: gotcha
[17:54] derferman has joined the channel
[17:55] <CIA-64> node: 03Jan Kassens 07master * rbb2acd5 10/ (lib/querystring.js test/simple/test-querystring.js): 
[17:55] <CIA-64> node: querystring.stringify is now more solid
[17:55] <CIA-64> node: * handles NaN and Infinity
[17:55] <CIA-64> node: * works with arrays from other contexts - http://bit.ly/b8eooO
[17:55] <CIA-64> node: 03Jan Kassens 07master * rc7e0c64 10/ doc/api.markdown : querystring doc fix - http://bit.ly/9xWAKY
[17:55] <CIA-64> node: 03Jan Kassens 07master * rf18d9d8 10/ test/simple/test-querystring.js : querystring.js: JSLint warnings fixed - http://bit.ly/9UsCnc
[17:55] <ryah> bean0r1___: http://nodejs.org/cla.html
[17:55] <micheil> pgriess: see pm.
[17:55] <ryah> bean0r1___: sorry forgot to give you the link
[17:55] <bean0r1___> ryah: no prob, i do this tomorrow, my printer at home is broken :f
[17:55] <micheil> ryah: Jan didn't do that patch..
[17:56] <pgriess> micheil: interesting. thanks.
[17:56] <micheil> or did he beat me?
[17:56] <mjr_> The HTTP-ish headers are the best part of WebSocket, IMO.  Making it work with proxy servers is going to be a huge challenge to adoption.
[17:56] <micheil> looks different.
[17:56] <mjr_> Most corporate firewalls don't allow anything other than 80 or 443, and many force you through an HTTP proxy for those.
[17:57] mklappstuhl has joined the channel
[17:57] <micheil> ryah: wtf. I somehow replied to myself.. http://gist.github.com/481173
[17:57] <micheil> anyway, there's the other patch for querystring
[17:58] khug has joined the channel
[17:58] maushu has joined the channel
[17:58] <micheil> mjr_: do you want the info as well?
[17:59] <micheil> that's just straight from the mailing list.
[18:00] <mjr_> that seems more sane at least.
[18:00] <JimBastard> hey technoweenie , seems more people talking today about adding the status indicator feature for repos :-)
[18:00] <mjr_> I'm still a bit concerned that they seem to not value being compatible with proxy servers.
[18:00] <JimBastard> do ittttttt
[18:01] <micheil> mjr_: yeah, but the author seems heavily against handle the initial handshake as http, even though it in.
[18:01] <micheil> *is
[18:01] <micheil> mjr_: author being hixie.
[18:01] <mjr_> I think if you don't work in a corporate IT world, this kind of thing isn't on your radar.
[18:02] <mjr_> But corporate IT is why we are still stuck with IE6.
[18:02] <micheil> I don't work in the corporate IT world, but I know the changes that we had to make to Node to make it work with websocket protocol
[18:02] <micheil> anyway, it's 4am, so /I'm off.
[18:02] <ryah> micheil: doens't apply cleanly
[18:03] <ryah> micheil: can you rebase?
[18:03] <micheil> ryah: okay, the change was to remove one line
[18:03] <ryah> :)
[18:03] <ryah> i can rebase for you
[18:03] mindeavor has joined the channel
[18:03] <micheil> ryah: yeah, I would rebase it, but I'm heading out
[18:03] <micheil> ryah: that fixes the issue with the typecasting
[18:04] <ryah> micheil: okay- thanks
[18:04] <micheil> and the assert.strictEqual is because "1" can  == 1
[18:04] <micheil> but "1" !== 1
[18:05] <micheil> so, it's really only a two line patch.
[18:06] <pgriess> mjr_: we're actually going to be running a test shortly on how the internet proxy infrastructure handles websockets
[18:06] <pgriess> mjr_: plan is to test a large % of mail users and see how many that have ws-capable browsers can actually create  a functional ws connection
[18:06] saikat has joined the channel
[18:07] <pgriess> mjr_: we'll be publishing the results on the ydn blog when we have them (a few weeks?)
[18:07] sveisvei has joined the channel
[18:07] programble has joined the channel
[18:09] <CIA-64> node: 03Micheil Smith 07master * r299671b 10/ (lib/querystring.js test/simple/test-querystring.js): 
[18:09] <CIA-64> node: querystring: Removing typecasting of numeric strings to numbers
[18:09] <CIA-64> node: The tests did not accurately test for a strict equality, meaning that the
[18:09] <CIA-64> node: number == to the string. - http://bit.ly/bKPqM8
[18:09] <ryah> micheil: --^
[18:09] <micheil> k
[18:09] <micheil> thanks
[18:09] <ryah> thanks
[18:09] <_announcer> Twitter: "@rhyolight only if you insert buzz words like node.js :)" -- Mac. http://twitter.com/wmacgyver/status/18934279945
[18:10] davidwalsh has joined the channel
[18:10] <_announcer> Twitter: "Updated the RML #JavaScript library #github page for new stuff including the #Node.js compatible module. http://bit.ly/bTCios" -- RobRobbins. http://twitter.com/RobRobbins/status/18934343299
[18:11] <micheil> ryah: also, I managed to find that os module work again, so, if I get time, I'll finish it off and send you a patch.
[18:12] demmonoid has joined the channel
[18:13] creationix has left the channel
[18:14] <_announcer> Twitter: "@wmacgyver no way, JavaScript's always been cool. And node.js isn't a buzz word." -- Micheil Smith. http://twitter.com/miksago/status/18934553449
[18:15] <_announcer> Twitter: "RT @ newsycombinator: Multi-core HTTP Server with Node.js http://yhoo.it/d2Sc1P" -- Masakazu . http://twitter.com/studiomaestro/status/18934613647
[18:17] demmonoid has left the channel
[18:21] <JimBastard> !tweet @rhyolight buzz buzz buzz
[18:21] <pgriess> micheil: have you gotten node-websocket-server to work with connect?
[18:23] <_announcer> Twitter: "I must admit that the #scalability numbers on #nodejs are amazing: http://goo.gl/sULR. Check also http://goo.gl/vgTJ" -- Krzysztof Tarnowski. http://twitter.com/christarnowski/status/18935037899
[18:23] <_announcer> Twitter: "Yahoo Experiments with NodeJS: http://wp.me/pKkTb-4g" -- BlackDog. http://twitter.com/blackdog66/status/18935078094
[18:24] c4milo has joined the channel
[18:25] joshbuddy has joined the channel
[18:25] <V1> When you create a package for npm do you to add the 'requires' that the library does to the package.json or is npm smart enough to include them?
[18:30] <JimBastard> V1: i think? it will install it?\
[18:30] <JimBastard> V1: try it out
[18:31] <V1> JimBastard: I would, if my library was fully functioning :$, I trend to break stuff allot ;)
[18:31] <JimBastard> V1: i try to break one thing at a time
[18:32] <mape> V1: check the json man page
[18:32] <mape> has info on dependencies
[18:33] <mape> V1: http://github.com/isaacs/npm/blob/master/doc/json.md
[18:33] <V1> Oooh it's hidden there.  I was already reading through the developers man
[18:33] <V1> To much documents ;)
[18:34] <mape> See npm-json(1) for details about what goes in that file. At the very least, you need:
[18:34] <mape> :)
[18:35] <V1> Thanks for the link :)
[18:37] <_announcer> Twitter: "Simple CSV parser and writer for #nodejs available from http://github.com/koles/ya-csv or by "npm install ya-csv"" -- Pavel Kolesnikov. http://twitter.com/koles/status/18935864992
[18:38] <_announcer> Twitter: "#reddit Multi-Core HTTP Server with NodeJS: submitted by  dmpk2k  [link] [comment] http://bit.ly/dm91UA #rulez" -- REDDITSPAMMOR. http://twitter.com/REDDITSPAMMOR/status/18935924631
[18:39] <jesusabwork> csv alrite
[18:39] <jesusabwork> Still waiting for a node.js numerical library ;)
[18:40] mikeal has joined the channel
[18:42] aaron__ has joined the channel
[18:42] ben_alman has joined the channel
[18:42] <aaron__> hey y'all... I need a strategy for keeping my node server running in the face of errors, both in the initial web request, and in DB/httpClient callbacks
[18:42] <aaron__> how can Connect help w/ that? Or will it not work for the callbacks?
[18:43] <JimBastard> aaron__: monit
[18:43] <aaron__> I'm using monit
[18:43] <jesusabwork> monit?
[18:43] <aaron__> I need it to just not fall over
[18:43] <aaron__> even if I have a backup
[18:43] <JimBastard> try / catch
[18:43] <JimBastard> what errors are bombing your instance
[18:43] <jesusabwork> diaper pattern! YUS
[18:43] <aaron__> who knows?
[18:43] <JimBastard> aaron__: well when you figure out how to debug, let me know
[18:43] <jesusabwork> Oh sweet, another process supervisor
[18:43] <SubStack> while true; do ./server.js; done
[18:43] <SubStack> for serious
[18:44] <aaron__> I'm curious: why does node decide to terminate if there's an error ?
[18:44] <jesusabwork> I thought about doing that for my bot actually
[18:44] <aaron__> seems like I should be able to turn that off
[18:44] <JimBastard> aaron__: opposed to what? running the code that didnt work and causing a stack trace....
[18:44] <aaron__> unless there's a global handler for all IO bound callbacks,
[18:44] <JimBastard> ohh nm
[18:44] <aaron__> thats highly inconvenient
[18:45] <_announcer> Twitter: "Multi-Core HTTP Server with NodeJS http://yhoo.it/bczMdn #nodejs #webworker #html5" -- R√©gis Gaidot. http://twitter.com/rgaidot/status/18936276883
[18:46] <aaron__> JimBastard: this is about application design
[18:46] <SubStack> I should hack dnode to check for server restarts on the browser
[18:46] <JimBastard> aaron__: i dont see the issue
[18:46] <JimBastard> aaron__: then setup an event dispatcher with some proper validation
[18:46] <aaron__> ?
[18:46] <aaron__> here's the setup:
[18:46] <JimBastard> and put graceful failures on any areas that might potentially break
[18:47] <aaron__> I'm authoring a webapp, that relies on making rest calls to other APIs, and connects to my db
[18:47] <JimBastard> if you application is designed correctly, its not going to randomly crash
[18:47] <aaron__> I can install Connect w/ ErrorHandler as a nice fail safe for all requests to my app,
[18:47] <aaron__> but if my code fails while talking to an API or the DB
[18:47] <aaron__> server falls over
[18:47] <JimBastard> fucking rails developers
[18:48] <aaron__> I don't develop rails, dude
[18:48] <aaron__> let me explain
[18:48] <JimBastard> i think i got the picture
[18:48] <aaron__> I can litter every single one of my callbacks w/ a "wrapSafely" function
[18:48] <aaron__> but that puts a lot of onus on me
[18:48] <mde> aaron__: Geddy does request queueing for precisely the problem you describe.
[18:48] <JimBastard> aaron__: why is your code failing again?
[18:49] <aaron__> failure to connect to remote server, or some code in that callback breaking, whatver
[18:49] christophsturm has joined the channel
[18:49] <mde> I don't know how far along you are with what you're working on, but: http://geddyjs.org/
[18:49] <_announcer> Twitter: "Multi-Core HTTP Server with NodeJS http://developer.yahoo.net/blog/archives/2010/07/multicore_http_server_with_nodejs.html #toread" -- Ganesh Gunasegaran. http://twitter.com/itsgg/status/18936503156
[18:49] <aaron__> mde: will check out... pretty far in, but always curious to see more libs/approaches for using node
[18:49] <mde> You'll reliably get errors tied to the specific request, even in globally scoped callbacks.
[18:49] <jesusabwork> jesus guys it's just yahoo >_<
[18:50] <tjholowaychuk> anyone have more Express features they want in for the RC
[18:50] <JimBastard> aaron__: seems from here you have a flaw in your application structure 
[18:50] <mde> aaron__: The intent with Geddy is to be a little more 'full service.'
[18:50] <JimBastard> tjholowaychuk: hrmmm
[18:51] <JimBastard> tjholowaychuk: free cake?
[18:51] chris_____ has joined the channel
[18:51] <jesusabwork> tjholowaychuk: Unfortunately, I haven't had a chance to give it a try!
[18:51] <aaron__> JimBastard: what 'flaw'? I appreciate the "noob" sentiment you're throwing at me here, I'm asking for an approach or tech solution better than "use try catch"
[18:51] <JimBastard> you might as well put a bike shed thread up on that one, just make sure to ignore most of what people say
[18:51] <JimBastard> aaron__: ive asked you 3 times, what code is failing
[18:51] <tjholowaychuk> JimBastard: res.freeCake() its already there :p shesh
[18:51] <JimBastard> and dont tell me DB calls or API calls, that doesnt many any sense
[18:52] <mde> tjholowaychuk: res.freePoniesForEveryone() ?
[18:52] <tjholowaychuk> mde: forgot about that one
[18:52] <tjholowaychuk> damn
[18:52] <jesusabwork> res.highFive()
[18:52] <mde> Yay! :)
[18:53] <tjholowaychuk> hm JSON.parse() is not as slow as i thought it was
[18:53] <aaron__> JimBastard: so you're not understanding ;-) Point #1: In a large app, code can fail anywhere. Point #2: it's not exactly a 'scalable' solution (from a dev perspective) to ferret out every callback on an IO boundary, and wrap each and everyone in a try-catch before executing the inner code. If anyone else in here is building an app of scale, they've dealt w/ what I'm talking about, and I'm looking to hear solutions
[18:54] mostlygeek has joined the channel
[18:54] <JimBastard> aaron__: i dont know how you write code, but my applications dont just "fail anywhere"
[18:54] ChrisRicca has joined the channel
[18:54] <JimBastard> and i have a fairly large app with decent traffic that hasn't gone down in months
[18:55] <mde> aaron__: Your point is -- *when* something bad happens (and it will), you need to tie that to the specific request that was involved.
[18:55] <mde> JimBastard: If you're working with a team of people, you will end up with code in your app that breaks.
[18:56] <JimBastard> specific incoming http request?
[18:56] <jesusabwork> I kinda get what aaron is saying. I'm not necessarily saying that you can't design a good, awesome, stable node app or anything, but I've noticed that unhandled errors bringing down the whole instance can make things a bit rickety.
[18:56] <aaron__> mde: yes, thats part of it. First & foremost I need the server not to halt
[18:56] <JimBastard> mde: i work with a team of people
[18:56] <jesusabwork> But I think that can be mitigated with decent code
[18:56] <jesusabwork> idk
[18:56] <mde> aaron__: Right, that's why I wrote Geddy to queue requests the way it does. 
[18:56] <jesusabwork> My shitty irc bot crashes multiple times a day due to various bugs
[18:56] <JimBastard> i agree with jesusabwork, i have had a few random untracable issues
[18:56] <JimBastard> but it was almost always coder stupidity 
[18:56] <aaron__> jesusabwork: absolutely, and I'm looking for patterns or approaches people have used. mde has offered me something to look at :)
[18:57] <mde> It's a tradeoff between perf and discoverability when errors happen.
[18:57] <aaron__> JimBastard: of course it's coder stupidity, but w/ many thousands of lines of code, I need an umbrella solution, not just "never code dumb"
[18:57] <jesusabwork> My bot also doesn't have *any* try/excepting, and the underlying IRC library has its own promblems
[18:57] <tjholowaychuk> I like erlang's approach "It will ALWAYS fail in some way or another" 
[18:57] <JimBastard> the large app we are working with is a big state machine
[18:57] <tjholowaychuk> so just deal with it
[18:57] <JimBastard> so we know the state before a crash
[18:57] rwaldron has joined the channel
[18:57] <jesusabwork> I feel bad, because the author has been nice to me and stuff, but, man, his coding style is crazy. Can't follow it at all.
[18:58] <mde> aaron__: It should Just WorkTM out of the box. Most errors come back as your normal HTTP error codes. Anything that doesn't fit throws you a 500.
[18:58] kersny has joined the channel
[18:58] <V1> woah, node is compiling at lightning speed atm
[18:58] <JimBastard> aaron__: coding dumb would be writing several thousand lines of code without a good logging / exception error handling strategy 
[18:59] <JimBastard> encapsulate your logic correctly, i dont see why you'd have to write a billion try / catch statements
[18:59] <aaron__> oy
[18:59] <_announcer> Twitter: "tonight I'll finally be able to attend one McHenry Cloud Developer's meeting. I'll get some more node.js voltage." -- sergio pereira. http://twitter.com/sergiopereira/status/18937023700
[18:59] <mde> aaron__: I think the deal here is that most of the Nodies are writing a lot of low-level code themselves.
[18:59] <jesusabwork> How do you do exceptions in node anyway? XD
[19:00] <JimBastard> true, i didnt even know what ErrorHandler for Connect is
[19:00] <jesusabwork> :E
[19:00] <mde> Exactly. :)
[19:00] <aaron__> lol
[19:00] <aaron__> there's the mismatch ;-)
[19:00] <aaron__> I'm writing a high throughput web-proxy
[19:00] <aaron__> w/ a user interface component
[19:00] <mde> Basically Geddy queues and uses uncaughtException.
[19:00] <SubStack> jesusabwork: either using javascript's exception model or error events usually
[19:00] <aaron__> that interfaces to an unreliable service(s)
[19:01] <aaron__> suggested addition to the node engine itself:
[19:01] <JimBastard> aaron__: then you should have error handling on your reverse proxy request
[19:01] <jesusabwork> SubStack: You mean, add listeners that deal with error emissions?
[19:01] <mde> You don't get all the super-awesome throughput, but shit works as end-user devs expect.
[19:01] <tjholowaychuk> JimBastard: its basically just for debugging and pretty prints exceptions as html or responds with a json exception stack trace for requests that Accept: application/json
[19:01] <tjholowaychuk> etc
[19:01] <JimBastard> tjholowaychuk: i think this aaron__ guy might have a feature request for that thingy, either that or a pipe dream. not entirely sure
[19:02] <aaron__> what I'd love is the ability to register a function that handles all uncaught node exceptions
[19:02] <mde> aaron__: I'm headed to lunch, but if you have questions about Geddy, shoot a mail to the list.
[19:02] <JimBastard> having issues catching errors from http.client or something
[19:02] <SubStack> jesusabwork: yeah those
[19:02] <aaron__> mde: thanks, I've got it open in browser
[19:02] <mde> Cool, give me a shout if you need something. :)
[19:02] <mjr_> pgriess: that's awesome.  Hopefully you can publish the results of that test.
[19:02] <JimBastard> aaron__: what would happen when this error callback got fired? what happens to the current stack?
[19:02] <jesusabwork> SubStack: cool. Maybe I'll write something that reconnects my bot when I get the timeout error someday >_<
[19:02] <pgriess> mjr_: yeah that's the plan
[19:03] <mjr_> pgriess: especially if you can figure out how many people have WS capable browsers but aren't able to connect due to non-WS capable networks.
[19:03] <pgriess> mjr_: we want websockets to succeed -- don't mind shining a light on the seedy underbelly of the internet to do it
[19:03] <aaron__> JimBastard: discarded post handling. As long as whatever node's main loop does can continue
[19:03] <pgriess> mjr_: answering that question is the specific goal we have
[19:03] <mjr_> Yeah, I've been waiting for something like WS for a long time.
[19:03] <JimBastard> aaron__: thats not a global error handler......thats an error handler for http requests
[19:04] <JimBastard> aaron__: right?
[19:04] <ChrisRicca> I think http://extjs.github.com/Connect/errorHandler.html might be the ticket
[19:04] <JimBastard> lol great ChrisRicca is in here now
[19:04] <aaron__> JimBastard: not exactly. I have no idea what context the callback is in
[19:04] <JimBastard> giving out of context advice 
[19:04] <aaron__> JimBastard: obviously it's useful for HTTP but probably not limited to
[19:04] <JimBastard> aaron__: so like, maybe you should make a wrapper for http.client ?
[19:05] <JimBastard> and instead of calling http.client, you call your wrapper
[19:05] rauchg_ has joined the channel
[19:05] <aaron__> JimBastard: won't help for db-connections, file system stuff, etc. All my callbacks for those could fail as well and tear server down
[19:06] <JimBastard> aaron__: i think the problem is, having a silver bullet solution for this might not be possible / extremely hard
[19:06] <jesusabwork> Agreement.
[19:06] <javajunky> tjholowaychuk: does bodyDecoder work ? 
[19:06] <jesusabwork> It's probably not asking you too much to try and handle your errors. I mean, I'd think most environments would close themselves similarly
[19:07] <JimBastard> aaron__: in our applications, we have similar issues to this, but we have managed them all. error handling in javascript in general isnt that fun, but i think the solutions we've implemented are very managable
[19:07] <aaron__> JimBastard: I'm not opposed to handling this in JS, I was sharing my 'dream'
[19:07] <JimBastard> i think its more complex then you are dreaming though
[19:07] <aaron__> JimBastard: obviously I can ferret out all callbacks from all libs on all IO boundaries and wrap it
[19:07] <jesusabwork> I have a dream! A dream where computers do what the fuck I want them to!
[19:07] <aaron__> and if that was the only "best known method" so be it
[19:07] tilgovi has joined the channel
[19:08] <JimBastard> i could be very wrong, there might be a single command / options / event that node has i am not sure of 
[19:08] <tjholowaychuk> javajunky: should, there was a bug I just fixed though in regards to middleware precedence which made it seem like it didnt work
[19:08] <ChrisRicca> 'sup marak
[19:08] <javajunky> tjholowaychuk: did that bug mean the data + end events never fired -at-all- ?
[19:09] <JimBastard> aaron__: in your case i would recommend just coding defensively. if you find yourself having to repeat try / catch blocks over and over again, you probably need a refactor
[19:09] <tjholowaychuk> javajunky: nope that should be fine, it was just that the bodyDecoder would be "under" the routes, if that kinda makes sense
[19:09] <JimBastard> FUUUUCK HE DROPPED MY GOVERNMENT
[19:09] <JimBastard> now everyone knows
[19:09] <JimBastard> sup ChrisRicca 
[19:09] <JimBastard> :-)
[19:09] <ChrisRicca> :)
[19:09] JAAulde has joined the channel
[19:10] <javajunky> tjholowaychuk: not sure, do you mean it might not fire if there's a matching route ? 
[19:10] <JimBastard> you joining the darkside now?
[19:10] <JAAulde> where did the buildbot status page go?
[19:10] <JimBastard> you still working at that place with the guy i dont like?
[19:10] <tjholowaychuk> javajunky: before the fix bodyDecoder wouldnt work unless you passed it to express.createServer() instead of express.use()
[19:11] <gwoo> JAAulde: i been wondering the same thing
[19:11] <ChrisRicca> indeed
[19:12] <javajunky> tjholowaychuk: hmmm not my problem then, weird, it enters the bodyDecoder, just never fires next.
[19:12] eisd_ has joined the channel
[19:12] <JAAulde> gwoo: cool, just making sure it isn't me :)
[19:12] <ChrisRicca> (yes to working with the guy you don't like... I think)
[19:12] <tjholowaychuk> javajunky: and your on express HEAD ? hmMmM
[19:12] benburkert has joined the channel
[19:13] <javajunky> no, I'm on the latest npm
[19:13] <JimBastard> hee hee. you doing any node stuff yet ChrisRicca ?
[19:13] <javajunky> err..in fact ..I'm on the latest connect .
[19:13] <javajunky> express not in the loop atm
[19:13] <tjholowaychuk> javajunky: ohh, the npm connect is pretty out of date now
[19:13] <ChrisRicca> Couple projects - some for drop.io, some just tinkering
[19:13] <javajunky> *sob*
[19:13] <JimBastard> cool cool
[19:13] <tjholowaychuk> javajunky: but ya there was a bug a while back that caused the data/end events to get all fucked up
[19:13] <JimBastard> let me know if you have any questions or anything. i have a pretty good grasp on the node.js ecosystem
[19:14] <JimBastard> been messing around with it for a while now :-)
[19:14] <javajunky> tjholowaychuk: right, I guess thats what I got, any plans to tag a new npm cut any time soon or am I going to have to dick around with submodules again ;)
[19:14] bean0r1___ has joined the channel
[19:14] <tjholowaychuk> javajunky: package management fail! :D sucks, we really need to release another Connect
[19:14] <bean0r1___> holy shit, adamv is a machinegun
[19:14] <ChrisRicca> JimBastard: awesome!  thx.  Might take you up on it sometime :)
[19:14] tisba has joined the channel
[19:14] <javajunky> tjholowaychuk: yeah, to maintain traction would be a plan ;)
[19:14] <bean0r1___> i forked, changed, commitet and opened issue.
[19:14] <tjholowaychuk> javajunky: I think Tim is bundling up for the 1.0 right away
[19:14] <bean0r1___> merge to upstream after 30seconds
[19:15] <tjholowaychuk> PM is lame though I dont personally use npm or kiwi
[19:15] <JimBastard> just no help for drop.io :p
[19:15] <ChrisRicca> also, will try to make it to a nyc.js hack night sometime soon.  Sound fun
[19:15] <ChrisRicca> ha - fair
[19:15] <tjholowaychuk> other than for testing shit out quickly and seeing if i like it
[19:15] <javajunky> tjholowaychuk: its much easier to get other people up to speed when you don't have to introduce git/submodules/.gitmodules etc ;)
[19:17] admc__ has joined the channel
[19:19] creationix has joined the channel
[19:19] <javajunky> oh ffs, swapping to a submodule breaks everything ;)
[19:20] <tjholowaychuk> booo!!
[19:20] admc has joined the channel
[19:20] <javajunky> what is the equivalent of : var connect = require('connect');    when using a submodule
[19:21] <javajunky> I had *hoped* require.paths.unshift('../connect/lib')
[19:21] <javajunky> var connect = require('connect');          
[19:21] <javajunky> would work
[19:21] <tjholowaychuk> javajunky: just require('./my/submodules/connect/lib/connect') should work
[19:22] <javajunky> tjholowaychuk: oh yes, it does .. but everywhere in my code I've currently got require('connect')
[19:22] <tjholowaychuk> javajunky: then yeah you should be able to unshift that
[19:22] <_announcer> Twitter: "@cjus ECMAScript (to be pedantic :)) is surprisingly fast (see: node.js). specific comparisons probably vary by application." -- Scott Francis. http://twitter.com/darkuncle/status/18938294440
[19:23] <JimBastard> !tweet @darkuncle go go node.js!
[19:24] joshbuddy has joined the channel
[19:25] jansc has joined the channel
[19:26] rsms has joined the channel
[19:27] <javajunky> tjholowaychuk: weird, does npm  do something  magic to add 'cookieDecoder' etc. to the connect object returned ?
[19:28] <V1> In the Crypto documentation it says you can use "openssl list-message-digest-algorithms" to display available digest  algorithms.. Does that even work? I thought it was "openssl dgst --h"
[19:28] rgl has joined the channel
[19:29] <bradleymeck_> yes
[19:29] <V1> Must be my openssl version than..
[19:29] <bradleymeck_> although its an error msg, it shows t hem all ... odd
[19:29] <V1> it shows the output of openssl -h
[19:30] mtodd has joined the channel
[19:31] <javajunky> tjholowaychuk: ok i see it in the index.js 
[19:31] devongovett has joined the channel
[19:32] <bradleymeck_> both of those and your dgst --h show same here
[19:36] jxson has joined the channel
[19:38] hellp has joined the channel
[19:39] liesen has joined the channel
[19:41] [[zz]] has joined the channel
[19:41] <V1> Does someone happen to know module that zip / gzip / deflate whatever compression in node. ( and still works with the latest versions ;) )
[19:42] <javajunky> I don't think I will ever understand 'requires'  in node, I swear its making shit up 
[19:42] <bradleymeck_> whats up javajunky?
[19:43] <_announcer> Twitter: "Node.js design patterns http://bit.ly/9xME8f" -- Ben Curren. http://twitter.com/bcurren/status/18939358301
[19:43] <javajunky> just swapping from using an npm module to a not-quite-submodule / git clone'd sub folder  .. the require is pulling back something who's version is completely different from the file I'm grok'ing!
[19:43] <_announcer> Twitter: "multicore Node.js goodness http://yhoo.it/b3y5AT" -- Don Park. http://twitter.com/donpark/status/18939390362
[19:44] <bradleymeck_> you using relative paths or absolute? also check for index.js
[19:45] <javajunky> relative
[19:45] <javajunky> yeah its the index.js I'm trying to understand, it doesn't seem to be hitting it
[19:46] <bradleymeck_> does the parent folder have a file w/ the foldername.js
[19:47] <javajunky> no
[19:47] <javajunky> but it does have an index.js
[19:47] creationix has left the channel
[19:47] <javajunky> it must be something obvious, there's a version property, its just wrong.
[19:47] <javajunky> but if I remove the path from the require.paths array node can't find the module.
[19:48] <rsms> liesen: hola
[19:51] <rsms> liesen: since sp_playlistcontainer_add_new_playlist returns the new playlist directly, I guess we should do this: pls = session.playlists.create("name") then pls.push(track) ... and finally pls.addListener("updated" ..)
[19:52] teemow has joined the channel
[19:53] <_announcer> Twitter: "Add (zip) compression functionality to #nMemcached for #nodejs http://is.gd/dysg4 The code is ugly, but it does the job." -- Arnout Kazemier. http://twitter.com/3rdEden/status/18939898137
[19:54] <rsms> liesen: maybe even session.playlists.addListener('playlistAdded' ... :/
[19:54] <tjholowaychuk> javajunky: ey sorry im back
[19:54] <pquerna> why would you gzip a cpu bound protocol :|
[19:55] <pquerna> and implement gzip in pure js
[19:55] <javajunky> tjholowaychuk: I'm in some sort of dependency hell
[19:56] <javajunky> somehow, something is returning a 'connect object' with a version of 0.0.1 ‚Ä¶ driving me insane
[19:56] <javajunky> if I stop unshifting the path to the connect I just git cloned into a subfolder (not submodule)   then require fails to find connect ‚Ä¶ 
[19:56] <javajunky> argggh
[19:57] <_announcer> Twitter: "[del] [from mrphoebs] Multi-Core HTTP Server with NodeJS (Yahoo! Developer Network Blog):  http://url4.eu/65WNg" -- sldfjd ldajds. http://twitter.com/sldfjd/status/18940084167
[19:57] quirkey has joined the channel
[19:57] <bean0r1___> pquerna: because he can ;)
[19:57] <kuya> can someone help me with npm? ive registered my package but it doesnt appear to install properly
[19:58] <pquerna> bean0r1___: true. its just.  use something like fastlz.  and.. writing it in js, I'd be happy if v8 magically made it fast, but by default still doubtful :)
[19:59] <bradleymeck_> kuya does it require any kind of make script?
[19:59] voxpelli has left the channel
[19:59] tisba has left the channel
[19:59] <kuya> bradleymeck_: nope
[20:00] <bean0r1___> pquerna: haha, i'am pretty doubtful about all these crypto libs implemented in js ,)
[20:00] <kuya> bradleymeck_: http://gist.github.com/481907
[20:00] <bean0r1___> pquerna: compared to this, gzip is not a big deal :D
[20:00] <V1> pquerna: Because there aren't that much compression options for Node.js. I need it for the Memcached client i'm buidling. Memcached server have a fixed value limit of 1MB~ So if you wish to items larger than 1MB you would need compression
[20:00] <bean0r1___> V1: or using something different than memcache ;)
[20:00] jetienne has joined the channel
[20:01] <bean0r1___> or split up
[20:02] <pquerna> V1: re: compression options, http://github.com/waveto/node-compress/   re: large values, i'd suggest paritioning of values over compression; then you can multi-get them and it will be faster anyways.   But anyways, use what works for you
[20:02] <bean0r1___> i want to "like" commits on github
[20:02] <pquerna> V1: and I'd really suggest fastlz http://www.fastlz.org/ over zip
[20:02] kersny has joined the channel
[20:02] <bean0r1___> moar social! :D
[20:03] <Dylanrw> i think liking on github == watch
[20:03] <bean0r1___> Dylanrw: no
[20:03] <bean0r1___> Dylanrw: like is more volaltile, watch is showing interest
[20:03] <V1> pquerna: Partioning of values might indeed be another option to implement, thanks for reminding me of it. I completely forgot about that. And will check out fastlz. It might be possible to create a small c wrapper for it. 
[20:04] <bean0r1___> Dylanrw: i just want to like single commits an forget them after i laughed 10minutes ;)
[20:04] <bean0r1___> Dylanrw: like staring gists
[20:04] <Dylanrw> ha yeah that would be good
[20:04] <Dylanrw> a heart
[20:05] <bradleymeck_> kuya it seems the auto tar isnt working, Isaacs, you are summoned to the table!
[20:05] <bradleymeck_> ACTION or isaacs_home it doesnt matter
[20:05] <_announcer> Twitter: "#node.js seriously kicks ass" -- Sudhir Jonathan. http://twitter.com/sudhirj/status/18940522333
[20:06] <kuya> thanks bradleymeck_ 
[20:07] charlenopires has joined the channel
[20:08] <bradleymeck_> !api events in http.client
[20:08] <_api> bradleymeck_: http.Client events: upgrade(request, socket, head)
[20:08] <Dylanrw> :bean0r1: I find myself commenting on key files in commits with thinks like w00t etc. :P luckily repo owners dont mind enthusiasm
[20:08] <bradleymeck_> !api events in request
[20:08] <_api> bradleymeck_: http.ServerRequest events: data(chunk), end()
[20:10] <_announcer> Twitter: "Blog rolling with #mongoDB, express and Node.js - How To Node http://goo.gl/fb/WCbTJ #nodejs" -- Delicious Over 50. http://twitter.com/readelicious/status/18940755961
[20:10] <_announcer> Twitter: "nodejs + express + mongodb, javascript isn't just for toggling absolute positioned divs anymore." -- Hendrik Louw. http://twitter.com/hendrik_louw/status/18940777532
[20:11] <_announcer> Twitter: "http://ping.fm/SHmeg multicore http server with nodejs" -- Jerome Etienne. http://twitter.com/jerome_etienne/status/18940807387
[20:13] <javajunky> technoweenie: ughhh my http git submodules still crap out from time to time, I know you were interested a while ago, did you ever figure out what it was  ?
[20:13] <technoweenie> uh yea i thought i fixed it
[20:14] <technoweenie> what repo?
[20:14] <javajunky> http://github.com/cloudhead/less.js.git
[20:15] <javajunky> technoweenie: http://pastebin.com/spam.php?i=aMDRr7Lx
[20:15] <jesusabwork> How is less.js these days?
[20:15] <javajunky> jesusabwork: don't mock me man ;)
[20:15] <jesusabwork> I kinda wish I had more patience for web design. :(
[20:16] <jesusabwork> Oh, I'm not! ( :P ) I actually read about less.js with some interest, but it was like 2 months ago
[20:21] <javajunky> tjholowaychuk:  I'm giving up tonight, I can't get connect to work outside of npm :(   
[20:21] <tjholowaychuk> javajunky: shit :( thats weird.. it does not have dependencies
[20:21] <jesusabwork> ls
[20:22] <jesusabwork> er
[20:22] <javajunky> it does, probably only for testing ? but I was getting desperate. .. somethign somewhere is pulling back a 'connect' with a version of 0.0.1 .. I've purged and removed npm twice :(  ‚Ä¶ 
[20:22] <jesusabwork> pwd
[20:22] <tjholowaychuk> javajunky: ya just for testing
[20:22] <tjholowaychuk> javajunky: blah yeah npm gets kinda tangled up some times you might need to rm -fr ~/.node_libraries/connect and try again
[20:22] <javajunky> hopefully tim'll get that 1.0 packaged and out and I'll continue then ;) 
[20:22] <javajunky> tjholowaychuk: I blew away the whole of .node_libraries ;)
[20:23] <tjholowaychuk> javajunky: then $make install from connect's HEAD
[20:23] <tjholowaychuk> submodule should be fine tho i use it all the time
[20:23] <jetienne> about connect, the source is no more in github ? where can i get it ,
[20:23] <tjholowaychuk> jetienne: http://github.com/senchalabs/connect
[20:23] <jetienne> oh the search still say extjs
[20:23] <tjholowaychuk> weird lol
[20:23] <tjholowaychuk> cache i guess
[20:23] <gf3> Sencha makes me think of mustachioed men wearing ponchos
[20:24] <javajunky> tjholowaychuk: I'll try that (make install)
[20:24] <_announcer> Twitter: "@dehora dude just use node.js http://developer.yahoo.net/blog/archives/2010/07/multicore_http_server_with_nodejs.html" -- Vishal Vatsa. http://twitter.com/vvatsa/status/18941472219
[20:27] saikat has joined the channel
[20:31] <javajunky> tjholowaychuk: make install worked (finally!) god I hate dependencies ;)
[20:31] <tjholowaychuk> javajunky weird man
[20:31] <javajunky> yeah
[20:32] <javajunky> hoo-rah back to where I was 2 hours ago, lets test this body-decoder again ;)
[20:32] temp01 has joined the channel
[20:32] sudoer has joined the channel
[20:33] joshbuddy has joined the channel
[20:39] <_announcer> Twitter: "Added initial draft of my TODO list for nMemcached http://is.gd/dyuRT #nodejs" -- Arnout Kazemier. http://twitter.com/3rdEden/status/18942047306
[20:41] <_announcer> Twitter: "Nice demo of multi-core server using Node.js and WebWorkers http://yhoo.it/bYn0XF #nodejs" -- Sebastiaan Deckers. http://twitter.com/pandion/status/18942177052
[20:41] <jetienne> tjholowaychuk: is it possible to test connect, without installing ?
[20:42] spot|2 has joined the channel
[20:42] <tjholowaychuk> jetienne: not really, I mean you can download the tarball or git clone it
[20:42] <tjholowaychuk> and work with it relative instead of installing to ~/.node_libraries
[20:42] <tjholowaychuk> if thats what you mean
[20:42] <jetienne> tjholowaychuk: this is what i mean
[20:45] <zmbmartin> tjholowaychuk: I am testing the difference between haml and jade but this isn't working in haml --> http://gist.github.com/481974 my page just displays != body?
[20:45] <tjholowaychuk> zmbmartin: hmm looks fine
[20:46] <zmbmartin> tjholowaychuk: that is what I thought
[20:49] kassens has joined the channel
[20:50] <jetienne> tjholowaychuk: connect exec is not installed (on linux) when doing a make install. where is the source of the exe in the repo ?
[20:50] <_announcer> Twitter: "My first patches landed in #node.js. \o/" -- Jan Kassens. http://twitter.com/kassens/status/18942630756
[20:50] <mscdex> bradleymeck_: the api bot doesn't give the best results right now because of inheritance issues that are not currently understood by the parser
[20:50] isaacs has joined the channel
[20:53] arian has joined the channel
[20:53] rwaldron has joined the channel
[20:53] arian has left the channel
[20:59] eee_c has joined the channel
[21:00] b_erb has joined the channel
[21:00] Aria has joined the channel
[21:03] bradleymeck__ has joined the channel
[21:04] <_announcer> Twitter: "@vvatsa node.js on the list things to break. I need to rewrite every lib to fit?" -- Bill de hOra. http://twitter.com/dehora/status/18943334687
[21:06] mostlygeek_ has joined the channel
[21:06] ctp has joined the channel
[21:08] Blackguard has joined the channel
[21:16] rictic has joined the channel
[21:18] <CIA-64> node: 03Peter Griess 07master * ra9d8cac 10/ doc/api.markdown : Document setuid/setgid sync resolution capability. - http://bit.ly/cNAi0B
[21:18] <CIA-64> node: 03isaacs 07master * r49e0f14 10/ (6 files in 4 dirs): (log message trimmed)
[21:18] <CIA-64> node: Cache modules based on filename rather than ID
[21:18] <CIA-64> node: This is ever so slightly less efficient than caching based on ID, since the
[21:18] <CIA-64> node: filename has to be looked up before we can check the cache. However, it's
[21:18] <CIA-64> node: the most minimal approach possible to get this change in place. Since
[21:18] <CIA-64> node: require() is a blocking startup-time operation anyway, a bit of slowness is
[21:18] <CIA-64> node: not a huge problem.
[21:18] <isaacs> woooo!!!!
[21:18] <isaacs> hooray!!
[21:18] tyfighter has joined the channel
[21:18] <isaacs> that bug no one got around to posting about npm not working right will never see the light of day!!
[21:19] <CIA-64> node: 03Brian 07master * r352b8c3 10/ doc/api.markdown : Consistency changes in api docs - http://bit.ly/ddL93o
[21:19] jherdman has joined the channel
[21:19] Determinist has joined the channel
[21:19] mklappstuhl has joined the channel
[21:21] jakehow has joined the channel
[21:21] <JimBastard> isaacs: if a patch lands that fixes a bug that was never reported, did the big actually exist :-)
[21:21] <JimBastard> THEN WHO WAS CODE
[21:21] <isaacs> hahahah
[21:21] <JimBastard>  /s/big/bug , i fail
[21:21] <isaacs> JimBastard: i like how you started out philosophical, and then fell off the crazy cliff
[21:22] <isaacs> JimBastard: it was nietzscheesque
[21:22] <JimBastard> isaacs: thats usually how i roll
[21:22] <isaacs> JimBastard: felixge actually did report getting bit by that a few times.
[21:23] Dmitry2 has joined the channel
[21:23] <JimBastard> word
[21:23] <isaacs> JimBastard: failing instanceof checks because the class was loaded in two "different" modules that were actually the same file.
[21:23] qschzt has joined the channel
[21:23] <JimBastard> oofa
[21:23] <qschzt> names *
[21:23] <qschzt> hi :)
[21:23] <isaacs> JimBastard: also, npm@0.1.20.  I fixed those bugs i was bitching about last night.
[21:23] <JimBastard> sup qschzt 
[21:24] <isaacs> sup qschzt 
[21:24] felixge has joined the channel
[21:24] felixge has joined the channel
[21:24] joshbuddy_ has joined the channel
[21:24] <JimBastard> thats good isaacs , ive been going back and forth with indexzero doing broodmother stuff. its moving a little slower then i'd like because we are pretty much writing resourcer as we go
[21:25] <JimBastard> everything was in memory and that was working great, but thats not really acceptable, gotta persist to a real db
[21:25] <_announcer> Twitter: "My dumb "hello world" node.js server on my laptop can do 8700.62 requests per seconds,  "ab -n 100000 -c 100 http://127.0.0.1:8080/"" -- Vishal Vatsa. http://twitter.com/vvatsa/status/18944413503
[21:25] <JimBastard> lots of api methods implemented already though
[21:26] <jesusabwork> That seems like a lotta requests
[21:26] <jesusabwork> !
[21:27] <felixge> ryah: http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Be_smart_about_timeouts you're using method 4 right?
[21:27] <qschzt> looking at http://github.com/kodi/nodius I think I might build some graphs with that RRD circular buffer
[21:28] <JimBastard> schmorp kinda scares me
[21:28] <jesusabwork> What's that?
[21:28] <JimBastard> a dude
[21:28] <pquerna> http://github.com/pquerna/node/commit/244d2efae1b48fa12c5fe3c735e20851a4af3475
[21:28] <JimBastard> i think he might actually be part of the internet
[21:29] <jesusabwork> hmm
[21:29] <pquerna> ryah: ^^ so, writev().
[21:29] <ryah> felixge: yes
[21:30] sveisvei has joined the channel
[21:30] <ryah> pquerna: hm
[21:30] <ryah> pquerna: yes?
[21:30] <ryah> er
[21:30] <pquerna> buffers up to 5mb, 1024 chunks, or 2500ms
[21:30] <pquerna> then flushes em in one callback
[21:31] <pquerna> i'll hack in writev() in the next day or two when i find time
[21:31] <ryah> i want to do that - but i think it should be done differently
[21:31] <pquerna> how should it be done?
[21:31] <bradleymeck__> isaacs~ fatboy's tar appears borked when kuya was trying to publish it today
[21:31] <ryah> i've told you about the idea of postponing writes until the end of the iteration?
[21:32] <ryah> we might be able to use th same code for networking as for files
[21:32] <pquerna> yeah, you mean just buffering them until-... somehting like nextTick()
[21:32] <pquerna> maybe endOfTick()
[21:32] <ryah> i'm not sure - but i definitely don't want to introduce a new write stream clas
[21:32] <ryah> if anything modify the existing
[21:33] jansc has joined the channel
[21:33] <pquerna> sure, i can just make it configurable off the existing.
[21:33] <ryah> we need to talk about the best way of buffering data until the next of "iteration"
[21:33] <ryah> (basically do a writev just before we hit epoll())
[21:33] <ryah> have a unified buffer system
[21:33] <pquerna> well, its gonna be defered to a thread before we hit epoll i'd imagine
[21:34] <pquerna> mm, but yeah, a unified buffering scheme that ran before we entered the poll, dispatching em all to eio makes sense.
[21:34] <ryah> both for eio writes and net writes
[21:34] <ryah> would be nice to share code
[21:35] <ryah> but it probably needs to be in c++ somehow
[21:35] <pquerna> +1ish
[21:35] <ryah> well - i'm totally unsure
[21:35] <ryah> we need a white board and some beer
[21:35] <pquerna> buffer ownership rules need to happen probally around that time too
[21:35] <pquerna> at least sketch out how that will work
[21:35] <ryah> i'll be back in sf tomorrow. wanna meet up this week and discuss further?
[21:36] <pquerna> I'm up in portland for OSCON this week
[21:36] <ryah> oh okay. next week then
[21:36] devongovett has joined the channel
[21:36] <ryah> mjr and i have discussed this at length. i have a vauge plan
[21:37] <ryah> we definitely need to add a callback to write()
[21:37] <ryah> i'm convinced
[21:38] <ryah> across the board
[21:38] <jesusabwork> Under it too?
[21:39] benbinary has joined the channel
[21:40] saikat has joined the channel
[21:40] <qschzt> of course
[21:41] <bean0r1___> always
[21:41] <javajunky> tjholowaychuk:  I added rpxnow/janrain support to connect-auth.. man  for some reason that rpxnow drove my head around the bend, the examples for some reason made no sense to me ;) doh
[21:41] jxson has joined the channel
[21:41] <qschzt> especially in error cases (write failed, you have a big problem)
[21:41] <tjholowaychuk> javajunky haha shit, i havent even looked at it but it seemed like a decent service
[21:42] <javajunky> missing crap like the http helpers that were in express :( .. 
[21:42] <javajunky> (sorry *I'm* missing crap)
[21:42] <javajunky> I need to re-jig a *lot* of that auth code, most of it can be removed I reckon.
[21:43] <tjholowaychuk> stuff like that really didnt belong though
[21:43] <tjholowaychuk> ive had a few people want it to stay but it really belongs in a different module
[21:43] <javajunky> sure, doesn't stop it being useful ;) 
[21:44] <tjholowaychuk> nope lol
[21:44] <isaacs> kuya: please try re-publishing fatbot
[21:44] <javajunky> I'm bored of re-writing httpClient.create yadd yadda
[21:44] <javajunky>  ;)
[21:44] <isaacs> kuya: update npm first
[21:44] <javajunky> write gn all
[21:44] <isaacs> kuya: curl http://npmjs.org/install.sh | sh
[21:44] saikat has joined the channel
[21:46] stepheneb has joined the channel
[21:47] satori_ has joined the channel
[21:50] podman has joined the channel
[21:50] <podman> hola
[21:52] <sveisvei> g`day
[21:53] <felixge> ryah: that's some crazy timeout code, you sure we need this approach? I mean timeouts are disabled by default, no?
[21:54] <kuya> thanks isaacs ill try in the morning 
[21:54] <isaacs> kuya: kewl
[21:54] <mscdex> yay... long poll on android
[21:54] stepheneb has joined the channel
[21:55] stepheneb has joined the channel
[21:57] <podman> i'm having a problem with Ext.Ajax ... i know it's kind of off topic, but i know sencha guys hang out here... anyone got a minute?
[21:58] <mscdex> podman: why not try #extjs ?
[21:58] <tjholowaychuk> podman: yea id suggest #extjs
[21:58] <podman> i tried there
[21:58] <podman> :)
[21:58] <mscdex> to be honest, you'd get better support for something like that in there than in here....
[21:59] <podman> mscdex, i figured as much.
[22:02] naveen has joined the channel
[22:02] <_announcer> Twitter: "Got an extremely simple node.js chat server made. Time to iterate!" -- Josh Lindsey. http://twitter.com/lesmothian/status/18946386828
[22:03] <mscdex> so this is odd.... android's browser has funky xhr behavior. onreadystatechange isn't fired when the server disconnects without sending anything during a long poll
[22:03] <mscdex> but desktop browsers do fire the callback
[22:03] <rwaldron> ok, so i'm finally getting into node.js and totally jazzed about it - i was wondering if anyone had any thoughts on preferred directory structures
[22:03] jxson has joined the channel
[22:04] <rwaldron> i followed a tutorial, node.js in nth minutes or something
[22:04] <rwaldron> that worked
[22:04] <mscdex> rwaldron: most people use the structure for node's github repo as a model
[22:05] <rwaldron> but now i have node in /home/foo/
[22:05] <mscdex> or a very close variation of it anyway
[22:05] mattvermaak has joined the channel
[22:05] javajunky has joined the channel
[22:05] <rwaldron> that would be my set up as i'm just working with a git clone
[22:05] <_announcer> Twitter: "I love that I can use #MooTools on the server side.  http://davidwalsh.name/mootools-nodejs  Makes writing JS that much better!" -- davidwalshblog. http://twitter.com/davidwalshblog/status/18946537244
[22:06] <jesusabwork> hmm :/
[22:06] <rwaldron> are you putting all your additional package within ~/node/ ?
[22:06] <naveen> qq: is anyone working on a node thrift client (http://incubator.apache.org/thrift/) ?
[22:07] <_announcer> Twitter: "I love that I can use #MooTools on the server side. http://davidwalsh.name/mootools-nodejs @davidwalshblog" -- Pablo Lara H. http://twitter.com/pablolarah/status/18946666791
[22:08] <mscdex> rwaldron: i think a lot of people put modules and addons in ~/.node_libraries if they're going to use them globally
[22:09] <rwaldron>  stupid question...
[22:09] <rwaldron> as in...
[22:09] <mattvermaak> i have this handler in a server - http://pastie.org/1051148
[22:09] <rwaldron> ~/npm/
[22:10] <mattvermaak> and it only works the first time, subsequent publishes to redis, trigger the write, but do not end the client connection
[22:10] <isaacs> rwaldron: what's this now?
[22:10] <mscdex> heh
[22:10] <mscdex> he said the magic word!
[22:10] <mscdex> :P
[22:10] <isaacs> rwaldron: npm by default puts stuff into (path/to/node)/../lib/node
[22:10] <isaacs> mscdex: it is magic!
[22:10] <zmbmartin> tjholowaychuk: do you know if anyone has a syntax highlighting for vim for jade or should I use haml?
[22:10] <isaacs> "npm" summons me
[22:10] <rwaldron> ok, bad example
[22:10] <zmbmartin> tjholowaychuk: haml highlighting
[22:11] <rwaldron> isaacs, yes, i just switched from kiwi to npm
[22:11] <rwaldron> or.. i think i did.
[22:12] <tjholowaychuk> zmbmartin: for vim i have no clue, I dont think so its to new
[22:12] <rwaldron> (also, thanks in advance for helping me out with this)
[22:13] blaze-x has joined the channel
[22:14] javajunky has joined the channel
[22:14] <blaze-x> is there any reason why sys.debug(fn) prints the function body whereas sys.inspect can/does not.
[22:15] <blaze-x> I suspect since it's calling writeError on io it's only implemented nativly, but I'm not sure
[22:15] <mscdex> blaze-x: you can always do fn.toString()
[22:16] <blaze-x> mscdex: oh my, i've been looking in the wrong direction all the time :) thanks!
[22:16] BBHoss has joined the channel
[22:16] <_announcer> Twitter: "http://dosync.posterous.com/clojure-nodejs-and-why-messaging-can-be-lame -- shocking." -- Matt Knopp. http://twitter.com/mhat/status/18947141878
[22:17] richcollins has joined the channel
[22:18] <jesusabwork> ACTION shakes his fist at clojure
[22:21] <isaacs> rwaldron: no problem.  i'm not sure what your question is, though...?
[22:22] <satori_> ACTION yawns
[22:22] <satori_> morning
[22:22] <rwaldron> basically... did i put this stuff in the right place
[22:23] <_announcer> Twitter: "Yahoo powers node.js :) Good luck this time ;) ! check out the multicore http://bit.ly/c75sFF" -- Christoph Hagenbrock. http://twitter.com/agebrock/status/18947472941
[22:23] <rwaldron> ~/node/
[22:23] <rwaldron> and i ran your npm install.sh
[22:23] <rwaldron> and ended up with ~/npm/
[22:23] <rwaldron> is that correct?
[22:23] <isaacs> rwaldron: it should have deleted that folder
[22:23] <mscdex> satori_: evening
[22:23] <rwaldron> i thought so... considering the rm
[22:23] <isaacs> rwaldron: did it say "ok" and then "it worked"?
[22:23] <rwaldron> yep
[22:24] <isaacs> ok...
[22:24] <isaacs> where is node?
[22:24] <rwaldron> /home/me/node/
[22:24] <rwaldron> er ~/node/
[22:25] joshbuddy has joined the channel
[22:26] <isaacs> rwaldron: i mean, "which node":
[22:26] <isaacs> like, where's the binary executable?
[22:29] <rwaldron> bear with me; cd'ing into ~/node/
[22:29] <rwaldron> and then running "node"
[22:29] <isaacs> rwaldron: 
[22:29] <isaacs> run this:
[22:30] <isaacs> which node
[22:30] <isaacs> and then tell me what it says
[22:30] <rwaldron> slick
[22:30] <rwaldron> /usr/local/bin/node
[22:30] <isaacs> great
[22:30] <isaacs> so, npm installs stuff, by default, into /usr/local/lib/node
[22:30] <isaacs> run this, and tell me what it says:  node -v
[22:31] <rwaldron> v0.1.99-10-gf541043
[22:32] <mjr_> isaacs: have you installed node + npm from homebrew?  npm gets confused about where to put bins.
[22:32] <isaacs> mjr_: that shoudl be fixed pretty soon, if homebrew updates node to 0.1.100+ and npm to 0.1.20
[22:32] <mjr_> oh, cool.
[22:33] <isaacs> mjr_: but, imo, npm and node are both WAY too instable and new to be reliable in something like homebrwe.
[22:33] <isaacs> rwaldron: great.  you should totally update node.
[22:33] <isaacs> rwaldron: also, what's this say: npm -v
[22:34] <isaacs> haha, npm says "not ok" when you just sniff the version.  that's wrong.
[22:34] <rwaldron> well, we're onto somethung
[22:34] <rwaldron> something*
[22:35] <rwaldron> because npm -v or just npm  results in "no command found"
[22:35] <isaacs> rwaldron: the first few lines of hte npm log should print a version number.  what is it?
[22:35] evilhackerdude has joined the channel
[22:36] ewdafa has joined the channel
[22:36] <isaacs> rwaldron: if it doesn't, then you have a very old version.
[22:36] <rwaldron> sorry dude, where is the npm log?
[22:36] <isaacs> rwaldron: if you updated npm (with the curl command above) any time since about 12:00 last night, it should be 0.1.20
[22:36] <isaacs> rwaldron: i mean all the text that prints out on your terminal whenever you do anything in npm
[22:37] <rwaldron> isaacs: yeah, thats what i meant when i said "no command found"
[22:37] <evilhackerdude> evening
[22:37] <isaacs> rwaldron: above that
[22:37] <rwaldron> appears that it did not install correctly
[22:37] <rwaldron> above? nuthin'
[22:37] <rwaldron> i'm going to update node and try again
[22:37] <isaacs> rwaldron: i'd like you to do this:
[22:38] <isaacs> oh, ok
[22:38] <isaacs> yeah, update node.
[22:38] <rwaldron> that might straighten it out
[22:38] <isaacs> 2. update npm.
[22:38] <evilhackerdude> i just installed node 0.1.101 and npm 0.1.19 BUT when i run npm i get the 'Object prototype may only be an Object or null' described here: http://github.com/isaacs/npm/issues/issue/101
[22:38] <isaacs> 3. if there are any errors, copy *everything* that prints out on your terminal, nad paste it into a gist at http://gist.github.com
[22:39] <isaacs> evilhackerdude: curl http://npmjs.org/install.sh | sh
[22:39] ajpiano has joined the channel
[22:39] <isaacs> evilhackerdude: should be 0.1.20
[22:39] <evilhackerdude> thx, i'll update my brew
[22:39] <isaacs> evilhackerdude: homebrew doesn't have it yet, and is not capable of keeping up with the frantic pace of npm development.
[22:39] <isaacs> evilhackerdude: i recommend using the curl command above ^
[22:40] <evilhackerdude> har har, i see :)
[22:40] <evilhackerdude> imagine debian maintainers trying to keep up with node and npm
[22:40] <isaacs> evilhackerdude: it's just that people say "it's broken!" and i say "i fixed it!" and they say "but i already did that, though!"
[22:40] <jesusabwork> The curl command works very well
[22:41] <isaacs> evilhackerdude: and by "updating" it, they mean they're 2 versions behind
[22:41] <isaacs> which is a lot of versions to be behind, when its changing this quickly!
[22:41] WALoeIII has joined the channel
[22:41] <evilhackerdude> indeed
[22:41] <jesusabwork> how does npm do updates?
[22:41] <jesusabwork> another npm install?
[22:41] <jesusabwork> Or is there an npm update?
[22:42] <jesusabwork> (feel free to say rtfm)
[22:42] <isaacs> jesusabwork: npm install blerg <-- that gets the latest version of "blerg"
[22:42] <jesusabwork> alright
[22:42] <Dylanrw> do not run npm install zerg
[22:42] <Dylanrw> your system will be overrun
[22:42] <jesusabwork> zerg? o_o
[22:42] zmbmartin has left the channel
[22:43] <jesusabwork> npm doesn't afraid of anything.
[22:44] <isaacs> jesusabwork: so, "npm install npm" will typically pull and instlal the latest version of npm.  the only time that doesn't work is if npm itself has a bug, which is probably the reason why you're updating it in the first place :)
[22:44] <jesusabwork> :E
[22:44] <isaacs> npm has not yet reached the point of "i care about not breaking shit"
[22:45] <jesusabwork> Heh
[22:45] <isaacs> it's more important to get it right, even if that means breaking backwards compatibility
[22:45] <jesusabwork> Apparently I have 1.19
[22:45] <isaacs> that's what 0.1.x is *for*
[22:45] <jesusabwork> *nod*
[22:45] <isaacs> jesusabwork: unless you updated today, that would be the latest.
[22:45] <Dylanrw> i had to run 'npm install npm@latest' last night to get it to update
[22:46] <isaacs> Dylanrw: that should work, yes
[22:46] <jesusabwork> ACTION does that
[22:46] <jesusabwork> woot
[22:46] <isaacs> Dylanrw: just "npm install npm" didn't work in 0.1.19, because of a bug where it would see that as npm@* rather than npm@latest, so it wouldn't bother to pull it, cuz it thought you already have a satisfying version
[22:47] <evilhackerdude> curl | sh install doesnt create an npm symlink for me?
[22:47] <jesusabwork> ah!
[22:47] <jesusabwork> Well!
[22:47] <Dylanrw> isaacs: nice, explains a few things
[22:47] <isaacs> evilhackerdude: it should create an npm executable sitting next to node (wherever that happens to be), and also install the code into {prefix}/lib/node
[22:47] <rwaldron> ruh-roh
[22:48] <evilhackerdude> ahh. with homebrew its not visible because the symlink lands in nodes homebrew cellar
[22:48] <rwaldron> isaacs: i'm getting an error at the last step
[22:48] <rwaldron> running make install
[22:48] <rwaldron> throws an error 
[22:48] <isaacs> rwaldron: please copy the *entire* output to a gist or pastie
[22:48] <rwaldron> could not install the file '/usr/local/include/node/eio.h'
[22:48] <evilhackerdude> i dont know, but maybe you want to add "brew link node" for mac os x users into the install docs... but thats just me. a mac fanboy.
[22:49] <isaacs> rwaldron: that's a problem doing "make install" with node?
[22:49] <isaacs> rwaldron: try it with sudo maybe?
[22:49] <rwaldron> isaacs: yeah, that was my next move
[22:49] <rwaldron> just did that
[22:50] <isaacs> evilhackerdude: that's something that's fixed on node 0.1.100+ and npm 0.1.19_
[22:50] <isaacs> +
[22:50] <rwaldron> and it's solid
[22:50] <isaacs> kewl
[22:50] <rwaldron> running the tests now
[22:50] <evilhackerdude> isaacs: i dont understand, i had to tell homebrew to link npm into my PATH manually
[22:51] <isaacs> evilhackerdude: yeah... like i said, i don't really work with the homebrew/dpkg/rpm/macport-npm stuff yet.  i don't think it's ready yet.
[22:51] <rwaldron> isaacs: tests are all set
[22:51] <evilhackerdude> i understand
[22:52] <isaacs> the cost of updating a package in those systems is too much busywork.  but if you have a case where brew breaks using the latest node and npm, i'd love a bug :)
[22:52] zapnap has joined the channel
[22:52] <rwaldron> isaacs: should i go ahead and run curl http://npmjs.org/install.sh | sh
[22:53] <isaacs> rwaldron: YES!
[22:53] <isaacs> dooooooo iiiiiiiiiitttttt!!!!!
[22:53] <mjr_> get to the chopper!
[22:53] <evilhackerdude> stop making him crazy
[22:53] <evilhackerdude> we need him to do that npm thing
[22:53] <_announcer> Twitter: "good post "Blog rolling with mongoDB, express and Node.js" http://bit.ly/b5y43d #nodejs #mongodb" -- R√©gis Gaidot. http://twitter.com/rgaidot/status/18949088410
[22:53] <mjr_> Hopefully someone will pay isaacs to work on npm fulltime.
[22:53] <mjr_> It is clearly a lot harder than it sounds.
[22:54] <evilhackerdude> after all gems won over rpa because gems sparkle
[22:54] <isaacs> one of these days i'm gonna write a howtonode article on npm.
[22:55] <isaacs> the problem is that i keep changing things, and i can't even seem to keep my own doc files in sync...
[22:55] <isaacs> a public blog post would be a nightmare
[22:55] <eyzn> async is good :)
[22:55] <jesusabwork> mongo, eh? Was thinking about trying to play with the nosql's
[22:56] <jesusabwork> I was looking at couchdb though
[22:56] <rwaldron> isaacs: http://pastie.org/1051233
[22:56] <satori_> heh. async docs is going to far
[22:56] <rwaldron> :\
[22:56] <isaacs> rwaldron: you have two options.
[22:56] <rwaldron> lay em on me
[22:56] <isaacs> rwaldron: run it with sudo, and forever on, use sudo with npm.  i don't do this, because it's unsafe, and i'm reckless enough as it is.
[22:56] <rwaldron> tried that
[22:56] <rwaldron> next.
[22:56] <isaacs> rwaldron: option 2, do this:  sudo chown -R $USER /usr/local/lib/node
[22:57] <jesusabwork> ACTION does this. It's a bad habit for him
[22:57] <isaacs> jesusabwork: i'm always afraid i'm gonna do "npm install some-evil-haxor-thing" one day
[22:57] <isaacs> scripts can literally run ANY command on your machine.  sudo-ing your package manager is a very very dangerous thing to do.
[22:57] hdon has joined the channel
[22:58] <isaacs> ACTION doens't like that dpkg and yum require this
[22:58] <jesusabwork> *nod*
[22:58] <mscdex> do you mean npm is dangerous?
[22:58] <mscdex> :P
[22:58] <jesusabwork> I just got used to it
[22:58] <jesusabwork> :/
[22:58] <isaacs> jesusabwork: that's how they get you!
[22:58] <jesusabwork> I know!
[22:59] <jesusabwork> Cabal started breaking that habit a little for me, but only because a significant number of packages break if you try to install them as superuser (cause nobody in the haskell world does it)
[22:59] <mscdex> i've never had problems with dpkg. i guess mostly because i generally don't download outside of the official repo and a couple other trusted repos
[22:59] <eyzn> why doesnt npm install the packages in ~/.npm ?
[22:59] <isaacs> eyzn: cuz that's not in the NODE_PATH by default
[22:59] <isaacs> eyzn: also, that's only for one user
[22:59] <evilhackerdude> ok, who's responsibility is it if registry.npmjs.org references tarballs in there that dont exist?
[22:59] <isaacs> eyzn: if you'd like it to do that, you can tell it to.  npm config set root $HOME/npm
[22:59] <evilhackerdude> it's mdns. i think i'll just file a bug
[22:59] <isaacs> evilhackerdude: mine-ish
[23:00] <eyzn> isaacs, ty for the hint
[23:00] <mscdex> ACTION shakes a fist at bugs
[23:00] <eyzn> i will do that
[23:00] <isaacs> eyzn: then you should also add $HOME/npm to your NODE_PATH environment var
[23:00] <evilhackerdude> how dare you, it was my first attempt to install a package via npm and now i am so disappointed. i am coding my own package manager for node
[23:00] <eyzn> none but me is using node on my machine anyway :p
[23:00] <rwaldron> isaacs: http://pastie.org/1051239
[23:00] <rwaldron> ...
[23:01] <isaacs> rwaldron: like it says, don't panic :)
[23:01] <rwaldron> :D
[23:01] <isaacs> rwaldron: it just menas that "man npm" won't work
[23:01] <eyzn> nvm works also like that
[23:01] <isaacs> rwaldron: you can still do "npm help" which is 100% the same content
[23:01] <eyzn> per default
[23:01] <rwaldron> isaacs, naw, i was stoked that i got the "it worked" message
[23:01] <isaacs> sweet :)
[23:02] <isaacs> ACTION is making his first debian package right now.  holy christ, this is complicated.
[23:02] <evilhackerdude> :)
[23:03] <rwaldron> isaacs: npm -v 0.1.20
[23:03] <isaacs> i would like an npm_make command to build a package.json, though, that's pretty rad
[23:03] <rwaldron> nice one
[23:03] <evilhackerdude> you should try writing your own sendmail config
[23:03] <rwaldron> thanks for the help on that
[23:03] <isaacs> rwaldron: no problem.  come back when it breaks ;)
[23:03] <rwaldron> word
[23:03] <rwaldron> thanks again
[23:03] <rwaldron> later
[23:06] <micheil> isaacs: with knockout, can you create graphics and things like that prior to the coding stage starting?
[23:06] <isaacs> micheil: i won't count it against you.  but you should email all@nodeknockout.com to get the real answer.
[23:06] <micheil> k
[23:07] <mape> the knockout dudes really should idle in here
[23:07] <micheil> yeah
[23:08] <isaacs> mape: many of them do ;)
[23:09] <eyzn> isaacs: how does npm handle modules which have another modules included via git-submodules?
[23:10] <eyzn> or is it that one wouldnt deploy a module like that
[23:11] technoweenie has joined the channel
[23:11] bmizerany has joined the channel
[23:12] naveen has joined the channel
[23:16] brianmario has joined the channel
[23:19] Tim_Smart has joined the channel
[23:20] lachlanhardy has joined the channel
[23:20] <_announcer> Twitter: "Multi-Core HTTP Server with NodeJS (Yahoo! Developer Network Blog) http://ff.im/-nVpG3" -- nelsonyrg. http://twitter.com/nelsonyrg/status/18950573273
[23:22] [[zz]] has joined the channel
[23:22] hammerdr has joined the channel
[23:22] zmbmartin has joined the channel
[23:23] hammerdr_ has joined the channel
[23:23] dneighman has joined the channel
[23:23] sudoer has joined the channel
[23:25] creationix has joined the channel
[23:25] <pgriess> creationix: taking a peek at nstore code. i think compact() can be made (a lot) faster if you sort by offset into the db file before calling getByKey
[23:25] <pgriess> creationix: as it stands, nstore is doing lots of random i/o. doing sequential reads are going to be much faster
[23:25] <creationix> pgriess: yeah, it's on my todo list to serialize the reads somehow
[23:25] <_announcer> Twitter: "# Z: node.js dev # # js http://goo.gl/fb/WrzSi" [de] -- Hashzeta. http://twitter.com/hashzeta/status/18950872744
[23:26] <creationix> pgriess: if I just fire the reads in the order I want will the OS read them in the order I issues the commands?
[23:26] <pgriess> creationix: depends ;)
[23:26] bean0r1___ has joined the channel
[23:26] aconbere has joined the channel
[23:26] <creationix> I don't want to have to wait till a read has come back to start the next read
[23:26] <creationix> that would be slower too I think
[23:27] <skampler> can node to seek in files?
[23:27] <creationix> skampler: yes
[23:27] <pgriess> creationix: each read runs in its own thread. they can enter the kernel in arbitrary order. and they'll return in (yet another) arbitrary order depending on when the disk services them
[23:27] <mape> isaacs: judges don't count ;)
[23:27] <pgriess> creationix: the disk scheduling layer interaction with the filesystem is what gives you ordering here
[23:27] <pgriess> creationix: typically this is highly opaque
[23:27] <creationix> pgriess: hmm, that's a lot of threads, maybe I should execute them serially
[23:27] <pgriess> creationix: so, no you can't bank on ordering
[23:27] <pgriess> creationix: yeah
[23:28] <pgriess> creationix: thinking of writing a module that does fast sequential reads and writes
[23:28] <pgriess> creationix: and optimize the hell out of it
[23:28] <pgriess> creationix: we can use it as a building block for this stuff
[23:28] <creationix> pgriess: node has the fs streams already
[23:28] <pgriess> creationix: no framing support even (some things like logging don't want framing)
[23:28] <creationix> just optimize those
[23:29] <pgriess> creationix: hm. what i'm thinking of would use buffering to get better performance. i guess we could bake that into fs streams
[23:29] <pgriess> creationix: e.g. buffer 4k or 2000ms of writes, whichever comes first
[23:29] <pgriess> creationix: seems like a strange semantic to build into fs.stream
[23:30] <creationix> pgriess: I thought fs streams were meant to be fairly high-level
[23:30] <creationix> at least that's how they seemed to me
[23:30] <creationix> either way, high-level stuff doesn't belong in node-core anyway
[23:30] <pgriess> creationix: yeah
[23:31] <pgriess> creationix: was just going to package this as an addon
[23:31] <creationix> pgriess: so you saw my helpers at the top of nStore then?
[23:31] <creationix> fsRead and fsWrite
[23:31] <creationix> pgriess: yeah, that would make a nice module
[23:31] <pgriess> creationix: yeah, saw those. they look good individually
[23:31] <creationix> pgriess: I was inlineing the logic all over the place, and it made my code really hard to read
[23:31] <pgriess> creationix: just the higher-level api on top of them should be written to encourage people to write high-performance code
[23:32] <isaacs> eyzn: still around?
[23:33] <eyzn> isaacs: ye im here
[23:33] <mscdex> ugh, i hate it when people associate the term "PC" with Windows
[23:33] <isaacs> eyzn: "npm help json" and then scroll down to the bit about "link"
[23:33] <isaacs> eyzn: i don't <3 that interface, though.  it's experimental, and something more like mappings might be more where it's going eventually, i'm not sure.
[23:34] <creationix> mscdex: I once went to a ruby meetup with my System 76 laptop (Ubuntu preinstalled with ubuntu logo on lid) and I was told I wouldn't be able to run the examples on my windows machine
[23:35] <satori_> heh
[23:35] <creationix> I guess no apple implies windows
[23:35] <isaacs> creationix: only among ruby devs
[23:35] <mscdex> i mean, there isn't even an hardware architecture difference between "Mac" and "PC" anymore
[23:35] <mscdex> it's x86
[23:35] <creationix> and the funny thing is that Matz is a debian guy
[23:36] <isaacs> matz ‚â† typical ruby dev
[23:36] <eyzn> isaacs: ty for the hint, will take a deeper look into npm-docs! i asked because im revamping my deploying-system right now - currently im sticking it all into one big git-repo with submodules. but npm seems very popular today
[23:36] <satori_> I have never really been evangelistic about any operating system.
[23:36] <satori_> But I am not fond of Apple
[23:36] <isaacs> eyzn: you could just specify dependencies, and then do require("foo") to pick up your foo dep
[23:36] <isaacs> eyzn: npm tries very very hard to guarantee that you'll get the version of foo you wanted, even if there are multiple versions installed.
[23:37] charlenopires has joined the channel
[23:38] yum46522 has joined the channel
[23:39] gwoo has joined the channel
[23:40] <mscdex> imho, Macs wouldn't be so bad if they had two-button mice and didn't cost an arm and a leg (or more in some cases) ;-)
[23:41] <isaacs> mscdex: your mac doesn't have right-click?
[23:41] <isaacs> mscdex: are you one-fingered?
[23:41] <mscdex> i don't own a Mac, but the last ones I've seen only have a single button
[23:41] <mscdex> except for the "mighty mouse"
[23:41] <satori_> They make sexy laptops but I feel dirty using them.
[23:42] <jesusabwork> Many mac users plug Microsoft mices into their macs
[23:42] <isaacs> mscdex: 2-finger tap on the trackpad is right-click, and the magic mouse detects if the touch was on the right-side when you click.  the Mighty Mouse is crap.
[23:42] <isaacs> mscdex: there's nothing about the mac itself that doens't support a right-click, though.  even middle-click is possible.
[23:42] <mscdex> heh... a 2 finger tap is a double click though :P
[23:42] <isaacs> mscdex: no, that's two finger taps.  i'm talking about a two-finger tap
[23:42] <mscdex> heh
[23:42] <isaacs> ie, tap once with two fingers at the same time
[23:43] <jesusabwork> multitouch!
[23:43] <mscdex> meh
[23:43] <jesusabwork> ACTION made a multitouch screen for his senior design project
[23:43] <jesusabwork> http://www.youtube.com/watch?v=WLdPFkBK4Oc
[23:43] <jesusabwork> :)
[23:44] <satori_> cool.
[23:44] <jesusabwork> I just rememberd, I think there's something that exposes tuio events to the DOM
[23:45] <jesusabwork> http://github.com/fajran/npTuioClient and http://pooky.sourceforge.net/ both, it seems!
[23:46] <jesusabwork> ...if anyone's interested in that sort of thing.
[23:46] <jesusabwork> ...ANYWAY!
[23:52] saikat has joined the channel
[23:53] <Dylanrw> jesusabwork: I wanna see someone playing age of empires against each other on that :D
[23:53] <sh1mmer> ryah: I just saw the spdy thread on the mailing list
[23:54] <jesusabwork> Dylanrw: :D :D
[23:54] <sh1mmer> wouldn't it be easier to rewrap the spdy implementation from chromium?
[23:54] <jesusabwork> Dylanrw: There's a video of a DnD game on the MS Surface somewhere :)
[23:54] <jesusabwork> also: If we can't get anyone interested in improving our multitouch, then my girlfriend gets to keep it sans-projector
[23:55] <jesusabwork> and that's like $400
[23:55] <Dylanrw> jesusabwork: yeah im sure DnD would be slick but i cant help but think about old war movies with generals huddled around a table pushing units about :P
[23:56] pzich has joined the channel
[23:56] <satori_> whats wrong with that? i'd play if I get to wear a generals uniform
[23:56] <_announcer> Twitter: "Cool.  Node.js has bunnies hamsters and a squid. #dontask" -- sergio pereira. http://twitter.com/sergiopereira/status/18952555216
[23:57] <_announcer> Twitter: "Someday, I'm only going to code in JavaScript. And all will be right in the world. #javascript #jsninja #nodejs" -- Josh Hundley. http://twitter.com/oJshua/status/18952580362
[23:57] <sh1mmer> ACTION didn't realised he was in #cosplay
[23:57] <satori_> don't go there
[23:57] <Dylanrw> lol Gundam admiral cosplay
[23:58] <Dylanrw> lots of pew pew
[23:58] <satori_> and cigar smoke
[23:58] <Dylanrw> yes
[23:58] <Dylanrw> and aviator sunglasses
[23:58] <satori_> def
[23:59] <Dylanrw> need someone with a really scratched out voice and an eyepatch
[23:59] <satori_> and a beard
[23:59] <Dylanrw> (and a hook and a parrot?)
[23:59] hpoydar has joined the channel
